
Smart_Home_Up.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005814  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000006b8  00800060  00005814  000058a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000029  00800718  00800718  00005f60  2**0
                  ALLOC
  3 .stab         0000bb98  00000000  00000000  00005f60  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00005118  00000000  00000000  00011af8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00016c10  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001b5  00000000  00000000  00016d70  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001d90  00000000  00000000  00016f25  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001016  00000000  00000000  00018cb5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f2e  00000000  00000000  00019ccb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0001abfc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002b9  00000000  00000000  0001ad7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000872  00000000  00000000  0001b035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0001b8a7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 5f 0c 	jmp	0x18be	; 0x18be <__vector_1>
       8:	0c 94 88 0c 	jmp	0x1910	; 0x1910 <__vector_2>
       c:	0c 94 b1 0c 	jmp	0x1962	; 0x1962 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 29 0b 	jmp	0x1652	; 0x1652 <__vector_6>
      1c:	0c 94 d7 0a 	jmp	0x15ae	; 0x15ae <__vector_7>
      20:	0c 94 00 0b 	jmp	0x1600	; 0x1600 <__vector_8>
      24:	0c 94 ae 0a 	jmp	0x155c	; 0x155c <__vector_9>
      28:	0c 94 87 09 	jmp	0x130e	; 0x130e <__vector_10>
      2c:	0c 94 5e 09 	jmp	0x12bc	; 0x12bc <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 2d 07 	jmp	0xe5a	; 0xe5a <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 04 07 	jmp	0xe08	; 0xe08 <__vector_15>
      40:	0c 94 2e 0e 	jmp	0x1c5c	; 0x1c5c <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	17 e0       	ldi	r17, 0x07	; 7
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e1       	ldi	r30, 0x14	; 20
      68:	f8 e5       	ldi	r31, 0x58	; 88
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 31       	cpi	r26, 0x18	; 24
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	17 e0       	ldi	r17, 0x07	; 7
      78:	a8 e1       	ldi	r26, 0x18	; 24
      7a:	b7 e0       	ldi	r27, 0x07	; 7
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 34       	cpi	r26, 0x41	; 65
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 6c 2b 	call	0x56d8	; 0x56d8 <main>
      8a:	0c 94 08 2c 	jmp	0x5810	; 0x5810 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 c8 2b 	jmp	0x5790	; 0x5790 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	aa e0       	ldi	r26, 0x0A	; 10
     128:	b6 e0       	ldi	r27, 0x06	; 6
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 e4 2b 	jmp	0x57c8	; 0x57c8 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 d4 2b 	jmp	0x57a8	; 0x57a8 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 6a 05 	call	0xad4	; 0xad4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 6a 05 	call	0xad4	; 0xad4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 95 04 	call	0x92a	; 0x92a <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 f0 2b 	jmp	0x57e0	; 0x57e0 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 d4 2b 	jmp	0x57a8	; 0x57a8 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 6a 05 	call	0xad4	; 0xad4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 6a 05 	call	0xad4	; 0xad4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 95 04 	call	0x92a	; 0x92a <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 f0 2b 	jmp	0x57e0	; 0x57e0 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 c8 2b 	jmp	0x5790	; 0x5790 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 6a 05 	call	0xad4	; 0xad4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 6a 05 	call	0xad4	; 0xad4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8a e0       	ldi	r24, 0x0A	; 10
     496:	96 e0       	ldi	r25, 0x06	; 6
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 95 04 	call	0x92a	; 0x92a <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 e4 2b 	jmp	0x57c8	; 0x57c8 <__epilogue_restores__>

00000632 <__nesf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 d4 2b 	jmp	0x57a8	; 0x57a8 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 6a 05 	call	0xad4	; 0xad4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 6a 05 	call	0xad4	; 0xad4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__nesf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__nesf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__nesf2+0x58>
     688:	81 e0       	ldi	r24, 0x01	; 1
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 f0 2b 	jmp	0x57e0	; 0x57e0 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 d4 2b 	jmp	0x57a8	; 0x57a8 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 6a 05 	call	0xad4	; 0xad4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 6a 05 	call	0xad4	; 0xad4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 f0 2b 	jmp	0x57e0	; 0x57e0 <__epilogue_restores__+0x18>

000006f2 <__fixsfsi>:
     6f2:	ac e0       	ldi	r26, 0x0C	; 12
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 d8 2b 	jmp	0x57b0	; 0x57b0 <__prologue_saves__+0x20>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	ce 01       	movw	r24, r28
     708:	01 96       	adiw	r24, 0x01	; 1
     70a:	be 01       	movw	r22, r28
     70c:	6b 5f       	subi	r22, 0xFB	; 251
     70e:	7f 4f       	sbci	r23, 0xFF	; 255
     710:	0e 94 6a 05 	call	0xad4	; 0xad4 <__unpack_f>
     714:	8d 81       	ldd	r24, Y+5	; 0x05
     716:	82 30       	cpi	r24, 0x02	; 2
     718:	61 f1       	breq	.+88     	; 0x772 <__fixsfsi+0x80>
     71a:	82 30       	cpi	r24, 0x02	; 2
     71c:	50 f1       	brcs	.+84     	; 0x772 <__fixsfsi+0x80>
     71e:	84 30       	cpi	r24, 0x04	; 4
     720:	21 f4       	brne	.+8      	; 0x72a <__fixsfsi+0x38>
     722:	8e 81       	ldd	r24, Y+6	; 0x06
     724:	88 23       	and	r24, r24
     726:	51 f1       	breq	.+84     	; 0x77c <__fixsfsi+0x8a>
     728:	2e c0       	rjmp	.+92     	; 0x786 <__fixsfsi+0x94>
     72a:	2f 81       	ldd	r18, Y+7	; 0x07
     72c:	38 85       	ldd	r19, Y+8	; 0x08
     72e:	37 fd       	sbrc	r19, 7
     730:	20 c0       	rjmp	.+64     	; 0x772 <__fixsfsi+0x80>
     732:	6e 81       	ldd	r22, Y+6	; 0x06
     734:	2f 31       	cpi	r18, 0x1F	; 31
     736:	31 05       	cpc	r19, r1
     738:	1c f0       	brlt	.+6      	; 0x740 <__fixsfsi+0x4e>
     73a:	66 23       	and	r22, r22
     73c:	f9 f0       	breq	.+62     	; 0x77c <__fixsfsi+0x8a>
     73e:	23 c0       	rjmp	.+70     	; 0x786 <__fixsfsi+0x94>
     740:	8e e1       	ldi	r24, 0x1E	; 30
     742:	90 e0       	ldi	r25, 0x00	; 0
     744:	82 1b       	sub	r24, r18
     746:	93 0b       	sbc	r25, r19
     748:	29 85       	ldd	r18, Y+9	; 0x09
     74a:	3a 85       	ldd	r19, Y+10	; 0x0a
     74c:	4b 85       	ldd	r20, Y+11	; 0x0b
     74e:	5c 85       	ldd	r21, Y+12	; 0x0c
     750:	04 c0       	rjmp	.+8      	; 0x75a <__fixsfsi+0x68>
     752:	56 95       	lsr	r21
     754:	47 95       	ror	r20
     756:	37 95       	ror	r19
     758:	27 95       	ror	r18
     75a:	8a 95       	dec	r24
     75c:	d2 f7       	brpl	.-12     	; 0x752 <__fixsfsi+0x60>
     75e:	66 23       	and	r22, r22
     760:	b1 f0       	breq	.+44     	; 0x78e <__fixsfsi+0x9c>
     762:	50 95       	com	r21
     764:	40 95       	com	r20
     766:	30 95       	com	r19
     768:	21 95       	neg	r18
     76a:	3f 4f       	sbci	r19, 0xFF	; 255
     76c:	4f 4f       	sbci	r20, 0xFF	; 255
     76e:	5f 4f       	sbci	r21, 0xFF	; 255
     770:	0e c0       	rjmp	.+28     	; 0x78e <__fixsfsi+0x9c>
     772:	20 e0       	ldi	r18, 0x00	; 0
     774:	30 e0       	ldi	r19, 0x00	; 0
     776:	40 e0       	ldi	r20, 0x00	; 0
     778:	50 e0       	ldi	r21, 0x00	; 0
     77a:	09 c0       	rjmp	.+18     	; 0x78e <__fixsfsi+0x9c>
     77c:	2f ef       	ldi	r18, 0xFF	; 255
     77e:	3f ef       	ldi	r19, 0xFF	; 255
     780:	4f ef       	ldi	r20, 0xFF	; 255
     782:	5f e7       	ldi	r21, 0x7F	; 127
     784:	04 c0       	rjmp	.+8      	; 0x78e <__fixsfsi+0x9c>
     786:	20 e0       	ldi	r18, 0x00	; 0
     788:	30 e0       	ldi	r19, 0x00	; 0
     78a:	40 e0       	ldi	r20, 0x00	; 0
     78c:	50 e8       	ldi	r21, 0x80	; 128
     78e:	b9 01       	movw	r22, r18
     790:	ca 01       	movw	r24, r20
     792:	2c 96       	adiw	r28, 0x0c	; 12
     794:	e2 e0       	ldi	r30, 0x02	; 2
     796:	0c 94 f4 2b 	jmp	0x57e8	; 0x57e8 <__epilogue_restores__+0x20>

0000079a <__floatunsisf>:
     79a:	a8 e0       	ldi	r26, 0x08	; 8
     79c:	b0 e0       	ldi	r27, 0x00	; 0
     79e:	e3 ed       	ldi	r30, 0xD3	; 211
     7a0:	f3 e0       	ldi	r31, 0x03	; 3
     7a2:	0c 94 d0 2b 	jmp	0x57a0	; 0x57a0 <__prologue_saves__+0x10>
     7a6:	7b 01       	movw	r14, r22
     7a8:	8c 01       	movw	r16, r24
     7aa:	61 15       	cp	r22, r1
     7ac:	71 05       	cpc	r23, r1
     7ae:	81 05       	cpc	r24, r1
     7b0:	91 05       	cpc	r25, r1
     7b2:	19 f4       	brne	.+6      	; 0x7ba <__floatunsisf+0x20>
     7b4:	82 e0       	ldi	r24, 0x02	; 2
     7b6:	89 83       	std	Y+1, r24	; 0x01
     7b8:	60 c0       	rjmp	.+192    	; 0x87a <__stack+0x1b>
     7ba:	83 e0       	ldi	r24, 0x03	; 3
     7bc:	89 83       	std	Y+1, r24	; 0x01
     7be:	8e e1       	ldi	r24, 0x1E	; 30
     7c0:	c8 2e       	mov	r12, r24
     7c2:	d1 2c       	mov	r13, r1
     7c4:	dc 82       	std	Y+4, r13	; 0x04
     7c6:	cb 82       	std	Y+3, r12	; 0x03
     7c8:	ed 82       	std	Y+5, r14	; 0x05
     7ca:	fe 82       	std	Y+6, r15	; 0x06
     7cc:	0f 83       	std	Y+7, r16	; 0x07
     7ce:	18 87       	std	Y+8, r17	; 0x08
     7d0:	c8 01       	movw	r24, r16
     7d2:	b7 01       	movw	r22, r14
     7d4:	0e 94 46 04 	call	0x88c	; 0x88c <__clzsi2>
     7d8:	fc 01       	movw	r30, r24
     7da:	31 97       	sbiw	r30, 0x01	; 1
     7dc:	f7 ff       	sbrs	r31, 7
     7de:	3b c0       	rjmp	.+118    	; 0x856 <__floatunsisf+0xbc>
     7e0:	22 27       	eor	r18, r18
     7e2:	33 27       	eor	r19, r19
     7e4:	2e 1b       	sub	r18, r30
     7e6:	3f 0b       	sbc	r19, r31
     7e8:	57 01       	movw	r10, r14
     7ea:	68 01       	movw	r12, r16
     7ec:	02 2e       	mov	r0, r18
     7ee:	04 c0       	rjmp	.+8      	; 0x7f8 <__floatunsisf+0x5e>
     7f0:	d6 94       	lsr	r13
     7f2:	c7 94       	ror	r12
     7f4:	b7 94       	ror	r11
     7f6:	a7 94       	ror	r10
     7f8:	0a 94       	dec	r0
     7fa:	d2 f7       	brpl	.-12     	; 0x7f0 <__floatunsisf+0x56>
     7fc:	40 e0       	ldi	r20, 0x00	; 0
     7fe:	50 e0       	ldi	r21, 0x00	; 0
     800:	60 e0       	ldi	r22, 0x00	; 0
     802:	70 e0       	ldi	r23, 0x00	; 0
     804:	81 e0       	ldi	r24, 0x01	; 1
     806:	90 e0       	ldi	r25, 0x00	; 0
     808:	a0 e0       	ldi	r26, 0x00	; 0
     80a:	b0 e0       	ldi	r27, 0x00	; 0
     80c:	04 c0       	rjmp	.+8      	; 0x816 <__floatunsisf+0x7c>
     80e:	88 0f       	add	r24, r24
     810:	99 1f       	adc	r25, r25
     812:	aa 1f       	adc	r26, r26
     814:	bb 1f       	adc	r27, r27
     816:	2a 95       	dec	r18
     818:	d2 f7       	brpl	.-12     	; 0x80e <__floatunsisf+0x74>
     81a:	01 97       	sbiw	r24, 0x01	; 1
     81c:	a1 09       	sbc	r26, r1
     81e:	b1 09       	sbc	r27, r1
     820:	8e 21       	and	r24, r14
     822:	9f 21       	and	r25, r15
     824:	a0 23       	and	r26, r16
     826:	b1 23       	and	r27, r17
     828:	00 97       	sbiw	r24, 0x00	; 0
     82a:	a1 05       	cpc	r26, r1
     82c:	b1 05       	cpc	r27, r1
     82e:	21 f0       	breq	.+8      	; 0x838 <__floatunsisf+0x9e>
     830:	41 e0       	ldi	r20, 0x01	; 1
     832:	50 e0       	ldi	r21, 0x00	; 0
     834:	60 e0       	ldi	r22, 0x00	; 0
     836:	70 e0       	ldi	r23, 0x00	; 0
     838:	4a 29       	or	r20, r10
     83a:	5b 29       	or	r21, r11
     83c:	6c 29       	or	r22, r12
     83e:	7d 29       	or	r23, r13
     840:	4d 83       	std	Y+5, r20	; 0x05
     842:	5e 83       	std	Y+6, r21	; 0x06
     844:	6f 83       	std	Y+7, r22	; 0x07
     846:	78 87       	std	Y+8, r23	; 0x08
     848:	8e e1       	ldi	r24, 0x1E	; 30
     84a:	90 e0       	ldi	r25, 0x00	; 0
     84c:	8e 1b       	sub	r24, r30
     84e:	9f 0b       	sbc	r25, r31
     850:	9c 83       	std	Y+4, r25	; 0x04
     852:	8b 83       	std	Y+3, r24	; 0x03
     854:	12 c0       	rjmp	.+36     	; 0x87a <__stack+0x1b>
     856:	30 97       	sbiw	r30, 0x00	; 0
     858:	81 f0       	breq	.+32     	; 0x87a <__stack+0x1b>
     85a:	0e 2e       	mov	r0, r30
     85c:	04 c0       	rjmp	.+8      	; 0x866 <__stack+0x7>
     85e:	ee 0c       	add	r14, r14
     860:	ff 1c       	adc	r15, r15
     862:	00 1f       	adc	r16, r16
     864:	11 1f       	adc	r17, r17
     866:	0a 94       	dec	r0
     868:	d2 f7       	brpl	.-12     	; 0x85e <__floatunsisf+0xc4>
     86a:	ed 82       	std	Y+5, r14	; 0x05
     86c:	fe 82       	std	Y+6, r15	; 0x06
     86e:	0f 83       	std	Y+7, r16	; 0x07
     870:	18 87       	std	Y+8, r17	; 0x08
     872:	ce 1a       	sub	r12, r30
     874:	df 0a       	sbc	r13, r31
     876:	dc 82       	std	Y+4, r13	; 0x04
     878:	cb 82       	std	Y+3, r12	; 0x03
     87a:	1a 82       	std	Y+2, r1	; 0x02
     87c:	ce 01       	movw	r24, r28
     87e:	01 96       	adiw	r24, 0x01	; 1
     880:	0e 94 95 04 	call	0x92a	; 0x92a <__pack_f>
     884:	28 96       	adiw	r28, 0x08	; 8
     886:	ea e0       	ldi	r30, 0x0A	; 10
     888:	0c 94 ec 2b 	jmp	0x57d8	; 0x57d8 <__epilogue_restores__+0x10>

0000088c <__clzsi2>:
     88c:	ef 92       	push	r14
     88e:	ff 92       	push	r15
     890:	0f 93       	push	r16
     892:	1f 93       	push	r17
     894:	7b 01       	movw	r14, r22
     896:	8c 01       	movw	r16, r24
     898:	80 e0       	ldi	r24, 0x00	; 0
     89a:	e8 16       	cp	r14, r24
     89c:	80 e0       	ldi	r24, 0x00	; 0
     89e:	f8 06       	cpc	r15, r24
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	08 07       	cpc	r16, r24
     8a4:	80 e0       	ldi	r24, 0x00	; 0
     8a6:	18 07       	cpc	r17, r24
     8a8:	88 f4       	brcc	.+34     	; 0x8cc <__clzsi2+0x40>
     8aa:	8f ef       	ldi	r24, 0xFF	; 255
     8ac:	e8 16       	cp	r14, r24
     8ae:	f1 04       	cpc	r15, r1
     8b0:	01 05       	cpc	r16, r1
     8b2:	11 05       	cpc	r17, r1
     8b4:	31 f0       	breq	.+12     	; 0x8c2 <__clzsi2+0x36>
     8b6:	28 f0       	brcs	.+10     	; 0x8c2 <__clzsi2+0x36>
     8b8:	88 e0       	ldi	r24, 0x08	; 8
     8ba:	90 e0       	ldi	r25, 0x00	; 0
     8bc:	a0 e0       	ldi	r26, 0x00	; 0
     8be:	b0 e0       	ldi	r27, 0x00	; 0
     8c0:	17 c0       	rjmp	.+46     	; 0x8f0 <__clzsi2+0x64>
     8c2:	80 e0       	ldi	r24, 0x00	; 0
     8c4:	90 e0       	ldi	r25, 0x00	; 0
     8c6:	a0 e0       	ldi	r26, 0x00	; 0
     8c8:	b0 e0       	ldi	r27, 0x00	; 0
     8ca:	12 c0       	rjmp	.+36     	; 0x8f0 <__clzsi2+0x64>
     8cc:	80 e0       	ldi	r24, 0x00	; 0
     8ce:	e8 16       	cp	r14, r24
     8d0:	80 e0       	ldi	r24, 0x00	; 0
     8d2:	f8 06       	cpc	r15, r24
     8d4:	80 e0       	ldi	r24, 0x00	; 0
     8d6:	08 07       	cpc	r16, r24
     8d8:	81 e0       	ldi	r24, 0x01	; 1
     8da:	18 07       	cpc	r17, r24
     8dc:	28 f0       	brcs	.+10     	; 0x8e8 <__clzsi2+0x5c>
     8de:	88 e1       	ldi	r24, 0x18	; 24
     8e0:	90 e0       	ldi	r25, 0x00	; 0
     8e2:	a0 e0       	ldi	r26, 0x00	; 0
     8e4:	b0 e0       	ldi	r27, 0x00	; 0
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__clzsi2+0x64>
     8e8:	80 e1       	ldi	r24, 0x10	; 16
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	a0 e0       	ldi	r26, 0x00	; 0
     8ee:	b0 e0       	ldi	r27, 0x00	; 0
     8f0:	20 e2       	ldi	r18, 0x20	; 32
     8f2:	30 e0       	ldi	r19, 0x00	; 0
     8f4:	40 e0       	ldi	r20, 0x00	; 0
     8f6:	50 e0       	ldi	r21, 0x00	; 0
     8f8:	28 1b       	sub	r18, r24
     8fa:	39 0b       	sbc	r19, r25
     8fc:	4a 0b       	sbc	r20, r26
     8fe:	5b 0b       	sbc	r21, r27
     900:	04 c0       	rjmp	.+8      	; 0x90a <__clzsi2+0x7e>
     902:	16 95       	lsr	r17
     904:	07 95       	ror	r16
     906:	f7 94       	ror	r15
     908:	e7 94       	ror	r14
     90a:	8a 95       	dec	r24
     90c:	d2 f7       	brpl	.-12     	; 0x902 <__clzsi2+0x76>
     90e:	f7 01       	movw	r30, r14
     910:	ee 5e       	subi	r30, 0xEE	; 238
     912:	f9 4f       	sbci	r31, 0xF9	; 249
     914:	80 81       	ld	r24, Z
     916:	28 1b       	sub	r18, r24
     918:	31 09       	sbc	r19, r1
     91a:	41 09       	sbc	r20, r1
     91c:	51 09       	sbc	r21, r1
     91e:	c9 01       	movw	r24, r18
     920:	1f 91       	pop	r17
     922:	0f 91       	pop	r16
     924:	ff 90       	pop	r15
     926:	ef 90       	pop	r14
     928:	08 95       	ret

0000092a <__pack_f>:
     92a:	df 92       	push	r13
     92c:	ef 92       	push	r14
     92e:	ff 92       	push	r15
     930:	0f 93       	push	r16
     932:	1f 93       	push	r17
     934:	fc 01       	movw	r30, r24
     936:	e4 80       	ldd	r14, Z+4	; 0x04
     938:	f5 80       	ldd	r15, Z+5	; 0x05
     93a:	06 81       	ldd	r16, Z+6	; 0x06
     93c:	17 81       	ldd	r17, Z+7	; 0x07
     93e:	d1 80       	ldd	r13, Z+1	; 0x01
     940:	80 81       	ld	r24, Z
     942:	82 30       	cpi	r24, 0x02	; 2
     944:	48 f4       	brcc	.+18     	; 0x958 <__pack_f+0x2e>
     946:	80 e0       	ldi	r24, 0x00	; 0
     948:	90 e0       	ldi	r25, 0x00	; 0
     94a:	a0 e1       	ldi	r26, 0x10	; 16
     94c:	b0 e0       	ldi	r27, 0x00	; 0
     94e:	e8 2a       	or	r14, r24
     950:	f9 2a       	or	r15, r25
     952:	0a 2b       	or	r16, r26
     954:	1b 2b       	or	r17, r27
     956:	a5 c0       	rjmp	.+330    	; 0xaa2 <__pack_f+0x178>
     958:	84 30       	cpi	r24, 0x04	; 4
     95a:	09 f4       	brne	.+2      	; 0x95e <__pack_f+0x34>
     95c:	9f c0       	rjmp	.+318    	; 0xa9c <__pack_f+0x172>
     95e:	82 30       	cpi	r24, 0x02	; 2
     960:	21 f4       	brne	.+8      	; 0x96a <__pack_f+0x40>
     962:	ee 24       	eor	r14, r14
     964:	ff 24       	eor	r15, r15
     966:	87 01       	movw	r16, r14
     968:	05 c0       	rjmp	.+10     	; 0x974 <__pack_f+0x4a>
     96a:	e1 14       	cp	r14, r1
     96c:	f1 04       	cpc	r15, r1
     96e:	01 05       	cpc	r16, r1
     970:	11 05       	cpc	r17, r1
     972:	19 f4       	brne	.+6      	; 0x97a <__pack_f+0x50>
     974:	e0 e0       	ldi	r30, 0x00	; 0
     976:	f0 e0       	ldi	r31, 0x00	; 0
     978:	96 c0       	rjmp	.+300    	; 0xaa6 <__pack_f+0x17c>
     97a:	62 81       	ldd	r22, Z+2	; 0x02
     97c:	73 81       	ldd	r23, Z+3	; 0x03
     97e:	9f ef       	ldi	r25, 0xFF	; 255
     980:	62 38       	cpi	r22, 0x82	; 130
     982:	79 07       	cpc	r23, r25
     984:	0c f0       	brlt	.+2      	; 0x988 <__pack_f+0x5e>
     986:	5b c0       	rjmp	.+182    	; 0xa3e <__pack_f+0x114>
     988:	22 e8       	ldi	r18, 0x82	; 130
     98a:	3f ef       	ldi	r19, 0xFF	; 255
     98c:	26 1b       	sub	r18, r22
     98e:	37 0b       	sbc	r19, r23
     990:	2a 31       	cpi	r18, 0x1A	; 26
     992:	31 05       	cpc	r19, r1
     994:	2c f0       	brlt	.+10     	; 0x9a0 <__pack_f+0x76>
     996:	20 e0       	ldi	r18, 0x00	; 0
     998:	30 e0       	ldi	r19, 0x00	; 0
     99a:	40 e0       	ldi	r20, 0x00	; 0
     99c:	50 e0       	ldi	r21, 0x00	; 0
     99e:	2a c0       	rjmp	.+84     	; 0x9f4 <__pack_f+0xca>
     9a0:	b8 01       	movw	r22, r16
     9a2:	a7 01       	movw	r20, r14
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__pack_f+0x86>
     9a8:	76 95       	lsr	r23
     9aa:	67 95       	ror	r22
     9ac:	57 95       	ror	r21
     9ae:	47 95       	ror	r20
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__pack_f+0x7e>
     9b4:	81 e0       	ldi	r24, 0x01	; 1
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	a0 e0       	ldi	r26, 0x00	; 0
     9ba:	b0 e0       	ldi	r27, 0x00	; 0
     9bc:	04 c0       	rjmp	.+8      	; 0x9c6 <__pack_f+0x9c>
     9be:	88 0f       	add	r24, r24
     9c0:	99 1f       	adc	r25, r25
     9c2:	aa 1f       	adc	r26, r26
     9c4:	bb 1f       	adc	r27, r27
     9c6:	2a 95       	dec	r18
     9c8:	d2 f7       	brpl	.-12     	; 0x9be <__pack_f+0x94>
     9ca:	01 97       	sbiw	r24, 0x01	; 1
     9cc:	a1 09       	sbc	r26, r1
     9ce:	b1 09       	sbc	r27, r1
     9d0:	8e 21       	and	r24, r14
     9d2:	9f 21       	and	r25, r15
     9d4:	a0 23       	and	r26, r16
     9d6:	b1 23       	and	r27, r17
     9d8:	00 97       	sbiw	r24, 0x00	; 0
     9da:	a1 05       	cpc	r26, r1
     9dc:	b1 05       	cpc	r27, r1
     9de:	21 f0       	breq	.+8      	; 0x9e8 <__pack_f+0xbe>
     9e0:	81 e0       	ldi	r24, 0x01	; 1
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	a0 e0       	ldi	r26, 0x00	; 0
     9e6:	b0 e0       	ldi	r27, 0x00	; 0
     9e8:	9a 01       	movw	r18, r20
     9ea:	ab 01       	movw	r20, r22
     9ec:	28 2b       	or	r18, r24
     9ee:	39 2b       	or	r19, r25
     9f0:	4a 2b       	or	r20, r26
     9f2:	5b 2b       	or	r21, r27
     9f4:	da 01       	movw	r26, r20
     9f6:	c9 01       	movw	r24, r18
     9f8:	8f 77       	andi	r24, 0x7F	; 127
     9fa:	90 70       	andi	r25, 0x00	; 0
     9fc:	a0 70       	andi	r26, 0x00	; 0
     9fe:	b0 70       	andi	r27, 0x00	; 0
     a00:	80 34       	cpi	r24, 0x40	; 64
     a02:	91 05       	cpc	r25, r1
     a04:	a1 05       	cpc	r26, r1
     a06:	b1 05       	cpc	r27, r1
     a08:	39 f4       	brne	.+14     	; 0xa18 <__pack_f+0xee>
     a0a:	27 ff       	sbrs	r18, 7
     a0c:	09 c0       	rjmp	.+18     	; 0xa20 <__pack_f+0xf6>
     a0e:	20 5c       	subi	r18, 0xC0	; 192
     a10:	3f 4f       	sbci	r19, 0xFF	; 255
     a12:	4f 4f       	sbci	r20, 0xFF	; 255
     a14:	5f 4f       	sbci	r21, 0xFF	; 255
     a16:	04 c0       	rjmp	.+8      	; 0xa20 <__pack_f+0xf6>
     a18:	21 5c       	subi	r18, 0xC1	; 193
     a1a:	3f 4f       	sbci	r19, 0xFF	; 255
     a1c:	4f 4f       	sbci	r20, 0xFF	; 255
     a1e:	5f 4f       	sbci	r21, 0xFF	; 255
     a20:	e0 e0       	ldi	r30, 0x00	; 0
     a22:	f0 e0       	ldi	r31, 0x00	; 0
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	a0 e0       	ldi	r26, 0x00	; 0
     a28:	3a 07       	cpc	r19, r26
     a2a:	a0 e0       	ldi	r26, 0x00	; 0
     a2c:	4a 07       	cpc	r20, r26
     a2e:	a0 e4       	ldi	r26, 0x40	; 64
     a30:	5a 07       	cpc	r21, r26
     a32:	10 f0       	brcs	.+4      	; 0xa38 <__pack_f+0x10e>
     a34:	e1 e0       	ldi	r30, 0x01	; 1
     a36:	f0 e0       	ldi	r31, 0x00	; 0
     a38:	79 01       	movw	r14, r18
     a3a:	8a 01       	movw	r16, r20
     a3c:	27 c0       	rjmp	.+78     	; 0xa8c <__pack_f+0x162>
     a3e:	60 38       	cpi	r22, 0x80	; 128
     a40:	71 05       	cpc	r23, r1
     a42:	64 f5       	brge	.+88     	; 0xa9c <__pack_f+0x172>
     a44:	fb 01       	movw	r30, r22
     a46:	e1 58       	subi	r30, 0x81	; 129
     a48:	ff 4f       	sbci	r31, 0xFF	; 255
     a4a:	d8 01       	movw	r26, r16
     a4c:	c7 01       	movw	r24, r14
     a4e:	8f 77       	andi	r24, 0x7F	; 127
     a50:	90 70       	andi	r25, 0x00	; 0
     a52:	a0 70       	andi	r26, 0x00	; 0
     a54:	b0 70       	andi	r27, 0x00	; 0
     a56:	80 34       	cpi	r24, 0x40	; 64
     a58:	91 05       	cpc	r25, r1
     a5a:	a1 05       	cpc	r26, r1
     a5c:	b1 05       	cpc	r27, r1
     a5e:	39 f4       	brne	.+14     	; 0xa6e <__pack_f+0x144>
     a60:	e7 fe       	sbrs	r14, 7
     a62:	0d c0       	rjmp	.+26     	; 0xa7e <__pack_f+0x154>
     a64:	80 e4       	ldi	r24, 0x40	; 64
     a66:	90 e0       	ldi	r25, 0x00	; 0
     a68:	a0 e0       	ldi	r26, 0x00	; 0
     a6a:	b0 e0       	ldi	r27, 0x00	; 0
     a6c:	04 c0       	rjmp	.+8      	; 0xa76 <__pack_f+0x14c>
     a6e:	8f e3       	ldi	r24, 0x3F	; 63
     a70:	90 e0       	ldi	r25, 0x00	; 0
     a72:	a0 e0       	ldi	r26, 0x00	; 0
     a74:	b0 e0       	ldi	r27, 0x00	; 0
     a76:	e8 0e       	add	r14, r24
     a78:	f9 1e       	adc	r15, r25
     a7a:	0a 1f       	adc	r16, r26
     a7c:	1b 1f       	adc	r17, r27
     a7e:	17 ff       	sbrs	r17, 7
     a80:	05 c0       	rjmp	.+10     	; 0xa8c <__pack_f+0x162>
     a82:	16 95       	lsr	r17
     a84:	07 95       	ror	r16
     a86:	f7 94       	ror	r15
     a88:	e7 94       	ror	r14
     a8a:	31 96       	adiw	r30, 0x01	; 1
     a8c:	87 e0       	ldi	r24, 0x07	; 7
     a8e:	16 95       	lsr	r17
     a90:	07 95       	ror	r16
     a92:	f7 94       	ror	r15
     a94:	e7 94       	ror	r14
     a96:	8a 95       	dec	r24
     a98:	d1 f7       	brne	.-12     	; 0xa8e <__pack_f+0x164>
     a9a:	05 c0       	rjmp	.+10     	; 0xaa6 <__pack_f+0x17c>
     a9c:	ee 24       	eor	r14, r14
     a9e:	ff 24       	eor	r15, r15
     aa0:	87 01       	movw	r16, r14
     aa2:	ef ef       	ldi	r30, 0xFF	; 255
     aa4:	f0 e0       	ldi	r31, 0x00	; 0
     aa6:	6e 2f       	mov	r22, r30
     aa8:	67 95       	ror	r22
     aaa:	66 27       	eor	r22, r22
     aac:	67 95       	ror	r22
     aae:	90 2f       	mov	r25, r16
     ab0:	9f 77       	andi	r25, 0x7F	; 127
     ab2:	d7 94       	ror	r13
     ab4:	dd 24       	eor	r13, r13
     ab6:	d7 94       	ror	r13
     ab8:	8e 2f       	mov	r24, r30
     aba:	86 95       	lsr	r24
     abc:	49 2f       	mov	r20, r25
     abe:	46 2b       	or	r20, r22
     ac0:	58 2f       	mov	r21, r24
     ac2:	5d 29       	or	r21, r13
     ac4:	b7 01       	movw	r22, r14
     ac6:	ca 01       	movw	r24, r20
     ac8:	1f 91       	pop	r17
     aca:	0f 91       	pop	r16
     acc:	ff 90       	pop	r15
     ace:	ef 90       	pop	r14
     ad0:	df 90       	pop	r13
     ad2:	08 95       	ret

00000ad4 <__unpack_f>:
     ad4:	fc 01       	movw	r30, r24
     ad6:	db 01       	movw	r26, r22
     ad8:	40 81       	ld	r20, Z
     ada:	51 81       	ldd	r21, Z+1	; 0x01
     adc:	22 81       	ldd	r18, Z+2	; 0x02
     ade:	62 2f       	mov	r22, r18
     ae0:	6f 77       	andi	r22, 0x7F	; 127
     ae2:	70 e0       	ldi	r23, 0x00	; 0
     ae4:	22 1f       	adc	r18, r18
     ae6:	22 27       	eor	r18, r18
     ae8:	22 1f       	adc	r18, r18
     aea:	93 81       	ldd	r25, Z+3	; 0x03
     aec:	89 2f       	mov	r24, r25
     aee:	88 0f       	add	r24, r24
     af0:	82 2b       	or	r24, r18
     af2:	28 2f       	mov	r18, r24
     af4:	30 e0       	ldi	r19, 0x00	; 0
     af6:	99 1f       	adc	r25, r25
     af8:	99 27       	eor	r25, r25
     afa:	99 1f       	adc	r25, r25
     afc:	11 96       	adiw	r26, 0x01	; 1
     afe:	9c 93       	st	X, r25
     b00:	11 97       	sbiw	r26, 0x01	; 1
     b02:	21 15       	cp	r18, r1
     b04:	31 05       	cpc	r19, r1
     b06:	a9 f5       	brne	.+106    	; 0xb72 <__unpack_f+0x9e>
     b08:	41 15       	cp	r20, r1
     b0a:	51 05       	cpc	r21, r1
     b0c:	61 05       	cpc	r22, r1
     b0e:	71 05       	cpc	r23, r1
     b10:	11 f4       	brne	.+4      	; 0xb16 <__unpack_f+0x42>
     b12:	82 e0       	ldi	r24, 0x02	; 2
     b14:	37 c0       	rjmp	.+110    	; 0xb84 <__unpack_f+0xb0>
     b16:	82 e8       	ldi	r24, 0x82	; 130
     b18:	9f ef       	ldi	r25, 0xFF	; 255
     b1a:	13 96       	adiw	r26, 0x03	; 3
     b1c:	9c 93       	st	X, r25
     b1e:	8e 93       	st	-X, r24
     b20:	12 97       	sbiw	r26, 0x02	; 2
     b22:	9a 01       	movw	r18, r20
     b24:	ab 01       	movw	r20, r22
     b26:	67 e0       	ldi	r22, 0x07	; 7
     b28:	22 0f       	add	r18, r18
     b2a:	33 1f       	adc	r19, r19
     b2c:	44 1f       	adc	r20, r20
     b2e:	55 1f       	adc	r21, r21
     b30:	6a 95       	dec	r22
     b32:	d1 f7       	brne	.-12     	; 0xb28 <__unpack_f+0x54>
     b34:	83 e0       	ldi	r24, 0x03	; 3
     b36:	8c 93       	st	X, r24
     b38:	0d c0       	rjmp	.+26     	; 0xb54 <__unpack_f+0x80>
     b3a:	22 0f       	add	r18, r18
     b3c:	33 1f       	adc	r19, r19
     b3e:	44 1f       	adc	r20, r20
     b40:	55 1f       	adc	r21, r21
     b42:	12 96       	adiw	r26, 0x02	; 2
     b44:	8d 91       	ld	r24, X+
     b46:	9c 91       	ld	r25, X
     b48:	13 97       	sbiw	r26, 0x03	; 3
     b4a:	01 97       	sbiw	r24, 0x01	; 1
     b4c:	13 96       	adiw	r26, 0x03	; 3
     b4e:	9c 93       	st	X, r25
     b50:	8e 93       	st	-X, r24
     b52:	12 97       	sbiw	r26, 0x02	; 2
     b54:	20 30       	cpi	r18, 0x00	; 0
     b56:	80 e0       	ldi	r24, 0x00	; 0
     b58:	38 07       	cpc	r19, r24
     b5a:	80 e0       	ldi	r24, 0x00	; 0
     b5c:	48 07       	cpc	r20, r24
     b5e:	80 e4       	ldi	r24, 0x40	; 64
     b60:	58 07       	cpc	r21, r24
     b62:	58 f3       	brcs	.-42     	; 0xb3a <__unpack_f+0x66>
     b64:	14 96       	adiw	r26, 0x04	; 4
     b66:	2d 93       	st	X+, r18
     b68:	3d 93       	st	X+, r19
     b6a:	4d 93       	st	X+, r20
     b6c:	5c 93       	st	X, r21
     b6e:	17 97       	sbiw	r26, 0x07	; 7
     b70:	08 95       	ret
     b72:	2f 3f       	cpi	r18, 0xFF	; 255
     b74:	31 05       	cpc	r19, r1
     b76:	79 f4       	brne	.+30     	; 0xb96 <__unpack_f+0xc2>
     b78:	41 15       	cp	r20, r1
     b7a:	51 05       	cpc	r21, r1
     b7c:	61 05       	cpc	r22, r1
     b7e:	71 05       	cpc	r23, r1
     b80:	19 f4       	brne	.+6      	; 0xb88 <__unpack_f+0xb4>
     b82:	84 e0       	ldi	r24, 0x04	; 4
     b84:	8c 93       	st	X, r24
     b86:	08 95       	ret
     b88:	64 ff       	sbrs	r22, 4
     b8a:	03 c0       	rjmp	.+6      	; 0xb92 <__unpack_f+0xbe>
     b8c:	81 e0       	ldi	r24, 0x01	; 1
     b8e:	8c 93       	st	X, r24
     b90:	12 c0       	rjmp	.+36     	; 0xbb6 <__unpack_f+0xe2>
     b92:	1c 92       	st	X, r1
     b94:	10 c0       	rjmp	.+32     	; 0xbb6 <__unpack_f+0xe2>
     b96:	2f 57       	subi	r18, 0x7F	; 127
     b98:	30 40       	sbci	r19, 0x00	; 0
     b9a:	13 96       	adiw	r26, 0x03	; 3
     b9c:	3c 93       	st	X, r19
     b9e:	2e 93       	st	-X, r18
     ba0:	12 97       	sbiw	r26, 0x02	; 2
     ba2:	83 e0       	ldi	r24, 0x03	; 3
     ba4:	8c 93       	st	X, r24
     ba6:	87 e0       	ldi	r24, 0x07	; 7
     ba8:	44 0f       	add	r20, r20
     baa:	55 1f       	adc	r21, r21
     bac:	66 1f       	adc	r22, r22
     bae:	77 1f       	adc	r23, r23
     bb0:	8a 95       	dec	r24
     bb2:	d1 f7       	brne	.-12     	; 0xba8 <__unpack_f+0xd4>
     bb4:	70 64       	ori	r23, 0x40	; 64
     bb6:	14 96       	adiw	r26, 0x04	; 4
     bb8:	4d 93       	st	X+, r20
     bba:	5d 93       	st	X+, r21
     bbc:	6d 93       	st	X+, r22
     bbe:	7c 93       	st	X, r23
     bc0:	17 97       	sbiw	r26, 0x07	; 7
     bc2:	08 95       	ret

00000bc4 <__fpcmp_parts_f>:
     bc4:	1f 93       	push	r17
     bc6:	dc 01       	movw	r26, r24
     bc8:	fb 01       	movw	r30, r22
     bca:	9c 91       	ld	r25, X
     bcc:	92 30       	cpi	r25, 0x02	; 2
     bce:	08 f4       	brcc	.+2      	; 0xbd2 <__fpcmp_parts_f+0xe>
     bd0:	47 c0       	rjmp	.+142    	; 0xc60 <__fpcmp_parts_f+0x9c>
     bd2:	80 81       	ld	r24, Z
     bd4:	82 30       	cpi	r24, 0x02	; 2
     bd6:	08 f4       	brcc	.+2      	; 0xbda <__fpcmp_parts_f+0x16>
     bd8:	43 c0       	rjmp	.+134    	; 0xc60 <__fpcmp_parts_f+0x9c>
     bda:	94 30       	cpi	r25, 0x04	; 4
     bdc:	51 f4       	brne	.+20     	; 0xbf2 <__fpcmp_parts_f+0x2e>
     bde:	11 96       	adiw	r26, 0x01	; 1
     be0:	1c 91       	ld	r17, X
     be2:	84 30       	cpi	r24, 0x04	; 4
     be4:	99 f5       	brne	.+102    	; 0xc4c <__fpcmp_parts_f+0x88>
     be6:	81 81       	ldd	r24, Z+1	; 0x01
     be8:	68 2f       	mov	r22, r24
     bea:	70 e0       	ldi	r23, 0x00	; 0
     bec:	61 1b       	sub	r22, r17
     bee:	71 09       	sbc	r23, r1
     bf0:	3f c0       	rjmp	.+126    	; 0xc70 <__fpcmp_parts_f+0xac>
     bf2:	84 30       	cpi	r24, 0x04	; 4
     bf4:	21 f0       	breq	.+8      	; 0xbfe <__fpcmp_parts_f+0x3a>
     bf6:	92 30       	cpi	r25, 0x02	; 2
     bf8:	31 f4       	brne	.+12     	; 0xc06 <__fpcmp_parts_f+0x42>
     bfa:	82 30       	cpi	r24, 0x02	; 2
     bfc:	b9 f1       	breq	.+110    	; 0xc6c <__fpcmp_parts_f+0xa8>
     bfe:	81 81       	ldd	r24, Z+1	; 0x01
     c00:	88 23       	and	r24, r24
     c02:	89 f1       	breq	.+98     	; 0xc66 <__fpcmp_parts_f+0xa2>
     c04:	2d c0       	rjmp	.+90     	; 0xc60 <__fpcmp_parts_f+0x9c>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	11 97       	sbiw	r26, 0x01	; 1
     c0c:	82 30       	cpi	r24, 0x02	; 2
     c0e:	f1 f0       	breq	.+60     	; 0xc4c <__fpcmp_parts_f+0x88>
     c10:	81 81       	ldd	r24, Z+1	; 0x01
     c12:	18 17       	cp	r17, r24
     c14:	d9 f4       	brne	.+54     	; 0xc4c <__fpcmp_parts_f+0x88>
     c16:	12 96       	adiw	r26, 0x02	; 2
     c18:	2d 91       	ld	r18, X+
     c1a:	3c 91       	ld	r19, X
     c1c:	13 97       	sbiw	r26, 0x03	; 3
     c1e:	82 81       	ldd	r24, Z+2	; 0x02
     c20:	93 81       	ldd	r25, Z+3	; 0x03
     c22:	82 17       	cp	r24, r18
     c24:	93 07       	cpc	r25, r19
     c26:	94 f0       	brlt	.+36     	; 0xc4c <__fpcmp_parts_f+0x88>
     c28:	28 17       	cp	r18, r24
     c2a:	39 07       	cpc	r19, r25
     c2c:	bc f0       	brlt	.+46     	; 0xc5c <__fpcmp_parts_f+0x98>
     c2e:	14 96       	adiw	r26, 0x04	; 4
     c30:	8d 91       	ld	r24, X+
     c32:	9d 91       	ld	r25, X+
     c34:	0d 90       	ld	r0, X+
     c36:	bc 91       	ld	r27, X
     c38:	a0 2d       	mov	r26, r0
     c3a:	24 81       	ldd	r18, Z+4	; 0x04
     c3c:	35 81       	ldd	r19, Z+5	; 0x05
     c3e:	46 81       	ldd	r20, Z+6	; 0x06
     c40:	57 81       	ldd	r21, Z+7	; 0x07
     c42:	28 17       	cp	r18, r24
     c44:	39 07       	cpc	r19, r25
     c46:	4a 07       	cpc	r20, r26
     c48:	5b 07       	cpc	r21, r27
     c4a:	18 f4       	brcc	.+6      	; 0xc52 <__fpcmp_parts_f+0x8e>
     c4c:	11 23       	and	r17, r17
     c4e:	41 f0       	breq	.+16     	; 0xc60 <__fpcmp_parts_f+0x9c>
     c50:	0a c0       	rjmp	.+20     	; 0xc66 <__fpcmp_parts_f+0xa2>
     c52:	82 17       	cp	r24, r18
     c54:	93 07       	cpc	r25, r19
     c56:	a4 07       	cpc	r26, r20
     c58:	b5 07       	cpc	r27, r21
     c5a:	40 f4       	brcc	.+16     	; 0xc6c <__fpcmp_parts_f+0xa8>
     c5c:	11 23       	and	r17, r17
     c5e:	19 f0       	breq	.+6      	; 0xc66 <__fpcmp_parts_f+0xa2>
     c60:	61 e0       	ldi	r22, 0x01	; 1
     c62:	70 e0       	ldi	r23, 0x00	; 0
     c64:	05 c0       	rjmp	.+10     	; 0xc70 <__fpcmp_parts_f+0xac>
     c66:	6f ef       	ldi	r22, 0xFF	; 255
     c68:	7f ef       	ldi	r23, 0xFF	; 255
     c6a:	02 c0       	rjmp	.+4      	; 0xc70 <__fpcmp_parts_f+0xac>
     c6c:	60 e0       	ldi	r22, 0x00	; 0
     c6e:	70 e0       	ldi	r23, 0x00	; 0
     c70:	cb 01       	movw	r24, r22
     c72:	1f 91       	pop	r17
     c74:	08 95       	ret

00000c76 <ServiceLayer_PWM_voidGenerateKHZ>:



//Generate PWM wave in (KHz)
void ServiceLayer_PWM_voidGenerateKHZ(u16 LOC_u16Frequency,u8 LOC_u8Duty)
{
     c76:	1f 93       	push	r17
     c78:	cf 93       	push	r28
     c7a:	df 93       	push	r29
     c7c:	9c 01       	movw	r18, r24
     c7e:	16 2f       	mov	r17, r22
#if	TIMER_TYPE == TIMER1
	u32 LOC_u32FrequencyHz;
	u16 LOC_u16TopValue;
	u16 LOC_u16OCR1AValue;
	if((LOC_u16Frequency<=4000) && (LOC_u16Frequency>=1))
     c80:	01 97       	sbiw	r24, 0x01	; 1
     c82:	80 5a       	subi	r24, 0xA0	; 160
     c84:	9f 40       	sbci	r25, 0x0F	; 15
     c86:	20 f0       	brcs	.+8      	; 0xc90 <ServiceLayer_PWM_voidGenerateKHZ+0x1a>


#endif


}
     c88:	df 91       	pop	r29
     c8a:	cf 91       	pop	r28
     c8c:	1f 91       	pop	r17
     c8e:	08 95       	ret
	u16 LOC_u16TopValue;
	u16 LOC_u16OCR1AValue;
	if((LOC_u16Frequency<=4000) && (LOC_u16Frequency>=1))
	{
		LOC_u32FrequencyHz = LOC_u16Frequency*1000;
		LOC_u16TopValue = ((F_CPU)/(2*LOC_u16Frequency*SCALER_NUMBER_KHZ));
     c90:	22 0f       	add	r18, r18
     c92:	33 1f       	adc	r19, r19
     c94:	40 e0       	ldi	r20, 0x00	; 0
     c96:	50 e0       	ldi	r21, 0x00	; 0
     c98:	60 e0       	ldi	r22, 0x00	; 0
     c9a:	74 e2       	ldi	r23, 0x24	; 36
     c9c:	84 ef       	ldi	r24, 0xF4	; 244
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	0e 94 a6 2b 	call	0x574c	; 0x574c <__udivmodsi4>
     ca4:	e9 01       	movw	r28, r18
		MCAL_Timer_Timer1_voidSetICR1Value(LOC_u16TopValue-1);
     ca6:	c9 01       	movw	r24, r18
     ca8:	01 97       	sbiw	r24, 0x01	; 1
     caa:	0e 94 66 0a 	call	0x14cc	; 0x14cc <MCAL_Timer_Timer1_voidSetICR1Value>

		if((LOC_u8Duty<=100) && (LOC_u8Duty>=0))
     cae:	15 36       	cpi	r17, 0x65	; 101
     cb0:	50 f0       	brcs	.+20     	; 0xcc6 <ServiceLayer_PWM_voidGenerateKHZ+0x50>
		{
			LOC_u16OCR1AValue = ((u32)LOC_u8Duty*LOC_u16TopValue/100)-1;
			MCAL_Timer_Timer1_voidSetOCR1AValue(LOC_u16OCR1AValue);
		}
		else {/*Do Nothing*/}
		MCAL_Timer_Timer1_voidInit(TIMER1_PWM_PHASE_FREQUENCY_CORRECT_MODE_TOP_ICR1,TIMER1_SCALER_1_MASK,TIMER1_OCR1_NON_INVERTING,TIMER1_OCR1_NON_INVERTING);
     cb2:	88 e0       	ldi	r24, 0x08	; 8
     cb4:	61 e0       	ldi	r22, 0x01	; 1
     cb6:	42 e0       	ldi	r20, 0x02	; 2
     cb8:	22 e0       	ldi	r18, 0x02	; 2
     cba:	0e 94 b0 09 	call	0x1360	; 0x1360 <MCAL_Timer_Timer1_voidInit>


#endif


}
     cbe:	df 91       	pop	r29
     cc0:	cf 91       	pop	r28
     cc2:	1f 91       	pop	r17
     cc4:	08 95       	ret
		MCAL_Timer_Timer1_voidSetICR1Value(LOC_u16TopValue-1);

		if((LOC_u8Duty<=100) && (LOC_u8Duty>=0))
		{
			LOC_u16OCR1AValue = ((u32)LOC_u8Duty*LOC_u16TopValue/100)-1;
			MCAL_Timer_Timer1_voidSetOCR1AValue(LOC_u16OCR1AValue);
     cc6:	be 01       	movw	r22, r28
     cc8:	80 e0       	ldi	r24, 0x00	; 0
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	21 2f       	mov	r18, r17
     cce:	30 e0       	ldi	r19, 0x00	; 0
     cd0:	40 e0       	ldi	r20, 0x00	; 0
     cd2:	50 e0       	ldi	r21, 0x00	; 0
     cd4:	0e 94 73 2b 	call	0x56e6	; 0x56e6 <__mulsi3>
     cd8:	24 e6       	ldi	r18, 0x64	; 100
     cda:	30 e0       	ldi	r19, 0x00	; 0
     cdc:	40 e0       	ldi	r20, 0x00	; 0
     cde:	50 e0       	ldi	r21, 0x00	; 0
     ce0:	0e 94 a6 2b 	call	0x574c	; 0x574c <__udivmodsi4>
     ce4:	da 01       	movw	r26, r20
     ce6:	c9 01       	movw	r24, r18
     ce8:	01 97       	sbiw	r24, 0x01	; 1
     cea:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <MCAL_Timer_Timer1_voidSetOCR1AValue>
     cee:	e1 cf       	rjmp	.-62     	; 0xcb2 <ServiceLayer_PWM_voidGenerateKHZ+0x3c>

00000cf0 <ServiceLayer_PWM_voidGenerateHZ>:
#include "../../ServiceLayer/PWM/PWM.h"


//Generate PWM wave in (Hz)
void ServiceLayer_PWM_voidGenerateHZ(u16 LOC_u16Frequency,u8 LOC_u8Duty)
{
     cf0:	1f 93       	push	r17
     cf2:	cf 93       	push	r28
     cf4:	df 93       	push	r29
     cf6:	9c 01       	movw	r18, r24
     cf8:	16 2f       	mov	r17, r22
#if	TIMER_TYPE == TIMER1
	u16 LOC_u16TopValue;
	u16 LOC_u16OCR1AValue;
	if((LOC_u16Frequency<=62500) && (LOC_u16Frequency>=8))
     cfa:	08 97       	sbiw	r24, 0x08	; 8
     cfc:	8d 51       	subi	r24, 0x1D	; 29
     cfe:	94 4f       	sbci	r25, 0xF4	; 244
     d00:	20 f0       	brcs	.+8      	; 0xd0a <ServiceLayer_PWM_voidGenerateHZ+0x1a>


#endif


}
     d02:	df 91       	pop	r29
     d04:	cf 91       	pop	r28
     d06:	1f 91       	pop	r17
     d08:	08 95       	ret
#if	TIMER_TYPE == TIMER1
	u16 LOC_u16TopValue;
	u16 LOC_u16OCR1AValue;
	if((LOC_u16Frequency<=62500) && (LOC_u16Frequency>=8))
	{
		LOC_u16TopValue = ((F_CPU)/(2*LOC_u16Frequency*SCALER_NUMBER));
     d0a:	22 95       	swap	r18
     d0c:	32 95       	swap	r19
     d0e:	30 7f       	andi	r19, 0xF0	; 240
     d10:	32 27       	eor	r19, r18
     d12:	20 7f       	andi	r18, 0xF0	; 240
     d14:	32 27       	eor	r19, r18
     d16:	40 e0       	ldi	r20, 0x00	; 0
     d18:	50 e0       	ldi	r21, 0x00	; 0
     d1a:	60 e0       	ldi	r22, 0x00	; 0
     d1c:	74 e2       	ldi	r23, 0x24	; 36
     d1e:	84 ef       	ldi	r24, 0xF4	; 244
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	0e 94 a6 2b 	call	0x574c	; 0x574c <__udivmodsi4>
     d26:	e9 01       	movw	r28, r18
		MCAL_Timer_Timer1_voidSetICR1Value(LOC_u16TopValue-1);
     d28:	c9 01       	movw	r24, r18
     d2a:	01 97       	sbiw	r24, 0x01	; 1
     d2c:	0e 94 66 0a 	call	0x14cc	; 0x14cc <MCAL_Timer_Timer1_voidSetICR1Value>

		if((LOC_u8Duty<=100) && (LOC_u8Duty>=0))
     d30:	15 36       	cpi	r17, 0x65	; 101
     d32:	50 f0       	brcs	.+20     	; 0xd48 <ServiceLayer_PWM_voidGenerateHZ+0x58>
		{
			LOC_u16OCR1AValue = ((u32)LOC_u8Duty*LOC_u16TopValue/100)-1;
			MCAL_Timer_Timer1_voidSetOCR1AValue(LOC_u16OCR1AValue);
		}
		else {/*Do Nothing*/}
		MCAL_Timer_Timer1_voidInit(TIMER1_PWM_PHASE_FREQUENCY_CORRECT_MODE_TOP_ICR1,TIMER1_SCALER_8_MASK,TIMER1_OCR1_NON_INVERTING,TIMER1_OCR1_NON_INVERTING);
     d34:	88 e0       	ldi	r24, 0x08	; 8
     d36:	62 e0       	ldi	r22, 0x02	; 2
     d38:	42 e0       	ldi	r20, 0x02	; 2
     d3a:	22 e0       	ldi	r18, 0x02	; 2
     d3c:	0e 94 b0 09 	call	0x1360	; 0x1360 <MCAL_Timer_Timer1_voidInit>


#endif


}
     d40:	df 91       	pop	r29
     d42:	cf 91       	pop	r28
     d44:	1f 91       	pop	r17
     d46:	08 95       	ret
		MCAL_Timer_Timer1_voidSetICR1Value(LOC_u16TopValue-1);

		if((LOC_u8Duty<=100) && (LOC_u8Duty>=0))
		{
			LOC_u16OCR1AValue = ((u32)LOC_u8Duty*LOC_u16TopValue/100)-1;
			MCAL_Timer_Timer1_voidSetOCR1AValue(LOC_u16OCR1AValue);
     d48:	be 01       	movw	r22, r28
     d4a:	80 e0       	ldi	r24, 0x00	; 0
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	21 2f       	mov	r18, r17
     d50:	30 e0       	ldi	r19, 0x00	; 0
     d52:	40 e0       	ldi	r20, 0x00	; 0
     d54:	50 e0       	ldi	r21, 0x00	; 0
     d56:	0e 94 73 2b 	call	0x56e6	; 0x56e6 <__mulsi3>
     d5a:	24 e6       	ldi	r18, 0x64	; 100
     d5c:	30 e0       	ldi	r19, 0x00	; 0
     d5e:	40 e0       	ldi	r20, 0x00	; 0
     d60:	50 e0       	ldi	r21, 0x00	; 0
     d62:	0e 94 a6 2b 	call	0x574c	; 0x574c <__udivmodsi4>
     d66:	da 01       	movw	r26, r20
     d68:	c9 01       	movw	r24, r18
     d6a:	01 97       	sbiw	r24, 0x01	; 1
     d6c:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <MCAL_Timer_Timer1_voidSetOCR1AValue>
     d70:	e1 cf       	rjmp	.-62     	; 0xd34 <ServiceLayer_PWM_voidGenerateHZ+0x44>

00000d72 <MCAL_UART_voidInit>:
	//Data Size -> 8-bit , Configure parity -> Disable , Stop bit -> 1-bit
	u16 LOC_u16BaudRate = 0;
	u8 LOC_u8UCSRC = 0;
	//Enabel TX
#if TRANSMITTING_MODE == TX_ENABLE
	SET_BIT(UCSRB, UCSRB_TXEN);
     d72:	53 9a       	sbi	0x0a, 3	; 10
#error TRANSMITTING_MODE Configs Error
#endif

	//Enabel RX
#if RECEIVING_MODE == RX_ENABLE
	SET_BIT(UCSRB, UCSRB_RXEN);
     d74:	54 9a       	sbi	0x0a, 4	; 10
#endif
	SET_BIT(LOC_u8UCSRC, UCSRC_URSEL);

	//Set Baudrate
	LOC_u16BaudRate = (CPU_FREQ/(16 * BAUDRATE)) -1;
	UBRRH = (u8)(LOC_u16BaudRate>>8);
     d76:	10 bc       	out	0x20, r1	; 32
//	UBRRH = (u8)(103>>8);
	UBRRL = (u8) LOC_u16BaudRate;
     d78:	87 e6       	ldi	r24, 0x67	; 103
     d7a:	89 b9       	out	0x09, r24	; 9
//	UBRRL = (u8) 103;

	UCSRC = LOC_u8UCSRC;
     d7c:	86 e8       	ldi	r24, 0x86	; 134
     d7e:	80 bd       	out	0x20, r24	; 32
	UCSRC |= 0b10000110;

	UBRRL = 103;
 */

}
     d80:	08 95       	ret

00000d82 <MCAL_UART_voidTransmitData>:

void MCAL_UART_voidTransmitData(u8 LOC_u8Data)
{
	//Wait Until Transmit Complete.
	while( GET_BIT(UCSRA,UCSRA_UDRE) == 0);
     d82:	5d 9b       	sbis	0x0b, 5	; 11
     d84:	fe cf       	rjmp	.-4      	; 0xd82 <MCAL_UART_voidTransmitData>
	UDR = LOC_u8Data;
     d86:	8c b9       	out	0x0c, r24	; 12

	while( GET_BIT(UCSRA,UCSRA_TXC) == 0);
     d88:	5e 9b       	sbis	0x0b, 6	; 11
     d8a:	fe cf       	rjmp	.-4      	; 0xd88 <MCAL_UART_voidTransmitData+0x6>
	//Reset Flag.
	SET_BIT(UCSRA,UCSRA_TXC);
     d8c:	5e 9a       	sbi	0x0b, 6	; 11
}
     d8e:	08 95       	ret

00000d90 <MCAL_UART_voidReceiveData>:

void MCAL_UART_voidReceiveData(u8 *LOC_Pu8ReceivedData)
{
     d90:	fc 01       	movw	r30, r24
	//Wait Until Receive Complete.
	while (GET_BIT(UCSRA,UCSRA_RXC) == 0);
     d92:	5f 9b       	sbis	0x0b, 7	; 11
     d94:	fe cf       	rjmp	.-4      	; 0xd92 <MCAL_UART_voidReceiveData+0x2>

			*LOC_Pu8ReceivedData = UDR;
     d96:	8c b1       	in	r24, 0x0c	; 12
     d98:	80 83       	st	Z, r24
}
     d9a:	08 95       	ret

00000d9c <MCAL_UART_voidReceiveString>:
		MCAL_UART_voidTransmitData(LOC_Pu8String[LOC_u8Counter]);
	}

}
void MCAL_UART_voidReceiveString(u8 *LOC_Pu8String)
{
     d9c:	dc 01       	movw	r26, r24
     d9e:	20 e0       	ldi	r18, 0x00	; 0
     da0:	30 e0       	ldi	r19, 0x00	; 0
     da2:	40 e0       	ldi	r20, 0x00	; 0
     da4:	50 e0       	ldi	r21, 0x00	; 0
}

void MCAL_UART_voidReceiveData(u8 *LOC_Pu8ReceivedData)
{
	//Wait Until Receive Complete.
	while (GET_BIT(UCSRA,UCSRA_RXC) == 0);
     da6:	5f 9b       	sbis	0x0b, 7	; 11
     da8:	fe cf       	rjmp	.-4      	; 0xda6 <MCAL_UART_voidReceiveString+0xa>

			*LOC_Pu8ReceivedData = UDR;
     daa:	8c b1       	in	r24, 0x0c	; 12
	u8 LOC_u8CharacterReceived;
    u32 LOC_u32Counter = 0;

	    while (1) {
	        MCAL_UART_voidReceiveData(&LOC_u8CharacterReceived);
	        if (LOC_u8CharacterReceived == '\r' ) {  // Enter key pressed
     dac:	8d 30       	cpi	r24, 0x0D	; 13
     dae:	91 f0       	breq	.+36     	; 0xdd4 <MCAL_UART_voidReceiveString+0x38>
	            LOC_Pu8String[LOC_u32Counter] = '\0';          // Null-terminate the string
	            break;
	        }
	        if (LOC_u32Counter < MAX_BUFFER_SIZE - 1) {
	        	LOC_Pu8String[LOC_u32Counter++] = LOC_u8CharacterReceived;           // Store the received character
     db0:	fd 01       	movw	r30, r26
     db2:	e2 0f       	add	r30, r18
     db4:	f3 1f       	adc	r31, r19
     db6:	80 83       	st	Z, r24
     db8:	2f 5f       	subi	r18, 0xFF	; 255
     dba:	3f 4f       	sbci	r19, 0xFF	; 255
     dbc:	4f 4f       	sbci	r20, 0xFF	; 255
     dbe:	5f 4f       	sbci	r21, 0xFF	; 255
     dc0:	23 36       	cpi	r18, 0x63	; 99
     dc2:	31 05       	cpc	r19, r1
     dc4:	41 05       	cpc	r20, r1
     dc6:	51 05       	cpc	r21, r1
     dc8:	71 f7       	brne	.-36     	; 0xda6 <MCAL_UART_voidReceiveString+0xa>
}

void MCAL_UART_voidReceiveData(u8 *LOC_Pu8ReceivedData)
{
	//Wait Until Receive Complete.
	while (GET_BIT(UCSRA,UCSRA_RXC) == 0);
     dca:	5f 9b       	sbis	0x0b, 7	; 11
     dcc:	fe cf       	rjmp	.-4      	; 0xdca <MCAL_UART_voidReceiveString+0x2e>

			*LOC_Pu8ReceivedData = UDR;
     dce:	8c b1       	in	r24, 0x0c	; 12
	u8 LOC_u8CharacterReceived;
    u32 LOC_u32Counter = 0;

	    while (1) {
	        MCAL_UART_voidReceiveData(&LOC_u8CharacterReceived);
	        if (LOC_u8CharacterReceived == '\r' ) {  // Enter key pressed
     dd0:	8d 30       	cpi	r24, 0x0D	; 13
     dd2:	d9 f7       	brne	.-10     	; 0xdca <MCAL_UART_voidReceiveString+0x2e>
	            LOC_Pu8String[LOC_u32Counter] = '\0';          // Null-terminate the string
     dd4:	a2 0f       	add	r26, r18
     dd6:	b3 1f       	adc	r27, r19
     dd8:	1c 92       	st	X, r1
	        if (LOC_u32Counter < MAX_BUFFER_SIZE - 1) {
	        	LOC_Pu8String[LOC_u32Counter++] = LOC_u8CharacterReceived;           // Store the received character
	        }

}
}
     dda:	08 95       	ret

00000ddc <MCAL_UART_voidTransmitCompleteInterruptEnable>:



void MCAL_UART_voidTransmitCompleteInterruptEnable(void)
{
	SET_BIT(UCSRB,UCSRB_TXCIE);
     ddc:	56 9a       	sbi	0x0a, 6	; 10
}
     dde:	08 95       	ret

00000de0 <MCAL_UART_voidTransmitCompleteInterruptDisable>:


void MCAL_UART_voidTransmitCompleteInterruptDisable(void)
{
	CLR_BIT(UCSRB,UCSRB_TXCIE);
     de0:	56 98       	cbi	0x0a, 6	; 10
}
     de2:	08 95       	ret

00000de4 <MCAL_UART_voidReceiveCompleteInterruptEnable>:


void MCAL_UART_voidReceiveCompleteInterruptEnable(void)
{
	SET_BIT(UCSRB,UCSRB_RXCIE);
     de4:	57 9a       	sbi	0x0a, 7	; 10
}
     de6:	08 95       	ret

00000de8 <MCAL_UART_voidReceiveCompleteInterruptDisable>:


void MCAL_UART_voidReceiveCompleteInterruptDisable(void)
{
	CLR_BIT(UCSRB,UCSRB_RXCIE);
     de8:	57 98       	cbi	0x0a, 7	; 10
}
     dea:	08 95       	ret

00000dec <MCAL_UART_voidTransmitCompleteSetCallBack>:



void MCAL_UART_voidTransmitCompleteSetCallBack(void (*LOC_pvNotifiFunction)(void))
{
	if (*LOC_pvNotifiFunction != NULL)
     dec:	00 97       	sbiw	r24, 0x00	; 0
     dee:	21 f0       	breq	.+8      	; 0xdf8 <MCAL_UART_voidTransmitCompleteSetCallBack+0xc>
	{
		GLOB_CallBackToAPP_Transmit = LOC_pvNotifiFunction;
     df0:	90 93 19 07 	sts	0x0719, r25
     df4:	80 93 18 07 	sts	0x0718, r24
     df8:	08 95       	ret

00000dfa <MCAL_UART_voidReceiveCompleteSetCallBack>:
	}
}
void MCAL_UART_voidReceiveCompleteSetCallBack(void (*LOC_pvNotifiFunction)(void))
{
	if (*LOC_pvNotifiFunction != NULL)
     dfa:	00 97       	sbiw	r24, 0x00	; 0
     dfc:	21 f0       	breq	.+8      	; 0xe06 <MCAL_UART_voidReceiveCompleteSetCallBack+0xc>
	{
		GLOB_CallBackToAPP_Receive = LOC_pvNotifiFunction;
     dfe:	90 93 1b 07 	sts	0x071B, r25
     e02:	80 93 1a 07 	sts	0x071A, r24
     e06:	08 95       	ret

00000e08 <__vector_15>:
	}

}

ISR(USART_TXC_vect)
{
     e08:	1f 92       	push	r1
     e0a:	0f 92       	push	r0
     e0c:	0f b6       	in	r0, 0x3f	; 63
     e0e:	0f 92       	push	r0
     e10:	11 24       	eor	r1, r1
     e12:	2f 93       	push	r18
     e14:	3f 93       	push	r19
     e16:	4f 93       	push	r20
     e18:	5f 93       	push	r21
     e1a:	6f 93       	push	r22
     e1c:	7f 93       	push	r23
     e1e:	8f 93       	push	r24
     e20:	9f 93       	push	r25
     e22:	af 93       	push	r26
     e24:	bf 93       	push	r27
     e26:	ef 93       	push	r30
     e28:	ff 93       	push	r31
	if (*GLOB_CallBackToAPP_Transmit != NULL)
     e2a:	e0 91 18 07 	lds	r30, 0x0718
     e2e:	f0 91 19 07 	lds	r31, 0x0719
     e32:	30 97       	sbiw	r30, 0x00	; 0
     e34:	09 f0       	breq	.+2      	; 0xe38 <__vector_15+0x30>
	{
		GLOB_CallBackToAPP_Transmit();
     e36:	09 95       	icall
	}
}
     e38:	ff 91       	pop	r31
     e3a:	ef 91       	pop	r30
     e3c:	bf 91       	pop	r27
     e3e:	af 91       	pop	r26
     e40:	9f 91       	pop	r25
     e42:	8f 91       	pop	r24
     e44:	7f 91       	pop	r23
     e46:	6f 91       	pop	r22
     e48:	5f 91       	pop	r21
     e4a:	4f 91       	pop	r20
     e4c:	3f 91       	pop	r19
     e4e:	2f 91       	pop	r18
     e50:	0f 90       	pop	r0
     e52:	0f be       	out	0x3f, r0	; 63
     e54:	0f 90       	pop	r0
     e56:	1f 90       	pop	r1
     e58:	18 95       	reti

00000e5a <__vector_13>:
ISR(USART_RXC_vect)
{
     e5a:	1f 92       	push	r1
     e5c:	0f 92       	push	r0
     e5e:	0f b6       	in	r0, 0x3f	; 63
     e60:	0f 92       	push	r0
     e62:	11 24       	eor	r1, r1
     e64:	2f 93       	push	r18
     e66:	3f 93       	push	r19
     e68:	4f 93       	push	r20
     e6a:	5f 93       	push	r21
     e6c:	6f 93       	push	r22
     e6e:	7f 93       	push	r23
     e70:	8f 93       	push	r24
     e72:	9f 93       	push	r25
     e74:	af 93       	push	r26
     e76:	bf 93       	push	r27
     e78:	ef 93       	push	r30
     e7a:	ff 93       	push	r31
	if (*GLOB_CallBackToAPP_Receive != NULL)
     e7c:	e0 91 1a 07 	lds	r30, 0x071A
     e80:	f0 91 1b 07 	lds	r31, 0x071B
     e84:	30 97       	sbiw	r30, 0x00	; 0
     e86:	09 f0       	breq	.+2      	; 0xe8a <__vector_13+0x30>
	{
		GLOB_CallBackToAPP_Receive();
     e88:	09 95       	icall
	}

}
     e8a:	ff 91       	pop	r31
     e8c:	ef 91       	pop	r30
     e8e:	bf 91       	pop	r27
     e90:	af 91       	pop	r26
     e92:	9f 91       	pop	r25
     e94:	8f 91       	pop	r24
     e96:	7f 91       	pop	r23
     e98:	6f 91       	pop	r22
     e9a:	5f 91       	pop	r21
     e9c:	4f 91       	pop	r20
     e9e:	3f 91       	pop	r19
     ea0:	2f 91       	pop	r18
     ea2:	0f 90       	pop	r0
     ea4:	0f be       	out	0x3f, r0	; 63
     ea6:	0f 90       	pop	r0
     ea8:	1f 90       	pop	r1
     eaa:	18 95       	reti

00000eac <MCAL_UART_voidSendString>:
			*LOC_Pu8ReceivedData = UDR;
}


void MCAL_UART_voidSendString(u8 *LOC_Pu8String)
{
     eac:	dc 01       	movw	r26, r24
	u8 LOC_u8Counter;
	for(LOC_u8Counter = 0 ;LOC_Pu8String[LOC_u8Counter] != 0 ;LOC_u8Counter++)
     eae:	ec 91       	ld	r30, X
     eb0:	ee 23       	and	r30, r30
     eb2:	71 f0       	breq	.+28     	; 0xed0 <MCAL_UART_voidSendString+0x24>
     eb4:	80 e0       	ldi	r24, 0x00	; 0
}

void MCAL_UART_voidTransmitData(u8 LOC_u8Data)
{
	//Wait Until Transmit Complete.
	while( GET_BIT(UCSRA,UCSRA_UDRE) == 0);
     eb6:	5d 9b       	sbis	0x0b, 5	; 11
     eb8:	fe cf       	rjmp	.-4      	; 0xeb6 <MCAL_UART_voidSendString+0xa>
	UDR = LOC_u8Data;
     eba:	ec b9       	out	0x0c, r30	; 12

	while( GET_BIT(UCSRA,UCSRA_TXC) == 0);
     ebc:	5e 9b       	sbis	0x0b, 6	; 11
     ebe:	fe cf       	rjmp	.-4      	; 0xebc <MCAL_UART_voidSendString+0x10>
	//Reset Flag.
	SET_BIT(UCSRA,UCSRA_TXC);
     ec0:	5e 9a       	sbi	0x0b, 6	; 11


void MCAL_UART_voidSendString(u8 *LOC_Pu8String)
{
	u8 LOC_u8Counter;
	for(LOC_u8Counter = 0 ;LOC_Pu8String[LOC_u8Counter] != 0 ;LOC_u8Counter++)
     ec2:	8f 5f       	subi	r24, 0xFF	; 255
     ec4:	fd 01       	movw	r30, r26
     ec6:	e8 0f       	add	r30, r24
     ec8:	f1 1d       	adc	r31, r1
     eca:	e0 81       	ld	r30, Z
     ecc:	ee 23       	and	r30, r30
     ece:	99 f7       	brne	.-26     	; 0xeb6 <MCAL_UART_voidSendString+0xa>
     ed0:	08 95       	ret

00000ed2 <MCAL_TWI_voidMasterInit>:
#include"TWI.h"

void MCAL_TWI_voidMasterInit(void)
{
	//Enable TWI
	SET_BIT(TWCR,TWEN);
     ed2:	86 b7       	in	r24, 0x36	; 54
     ed4:	84 60       	ori	r24, 0x04	; 4
     ed6:	86 bf       	out	0x36, r24	; 54
	//Enable Acknowledge
	SET_BIT(TWCR,TWEA);
     ed8:	86 b7       	in	r24, 0x36	; 54
     eda:	80 64       	ori	r24, 0x40	; 64
     edc:	86 bf       	out	0x36, r24	; 54
	//SCL Clock Frequency
	CLR_BIT(TWCR,TWPS1);
     ede:	86 b7       	in	r24, 0x36	; 54
     ee0:	8d 7f       	andi	r24, 0xFD	; 253
     ee2:	86 bf       	out	0x36, r24	; 54
	CLR_BIT(TWCR,TWPS0);
     ee4:	86 b7       	in	r24, 0x36	; 54
     ee6:	8e 7f       	andi	r24, 0xFE	; 254
     ee8:	86 bf       	out	0x36, r24	; 54
	TWBR = 152;	//50KHz
     eea:	88 e9       	ldi	r24, 0x98	; 152
     eec:	80 b9       	out	0x00, r24	; 0
}
     eee:	08 95       	ret

00000ef0 <MCAL_TWI_voidSlaveInit>:


void MCAL_TWI_voidSlaveInit(u8 LOC_u8SlaveAddress)
{
	//Enable TWI
	SET_BIT(TWCR,TWEN);
     ef0:	96 b7       	in	r25, 0x36	; 54
     ef2:	94 60       	ori	r25, 0x04	; 4
     ef4:	96 bf       	out	0x36, r25	; 54
	//Enable Acknowledge
	SET_BIT(TWCR,TWEA);
     ef6:	96 b7       	in	r25, 0x36	; 54
     ef8:	90 64       	ori	r25, 0x40	; 64
     efa:	96 bf       	out	0x36, r25	; 54
	//Set Slave Address
	TWAR = LOC_u8SlaveAddress <<1 ;
     efc:	88 0f       	add	r24, r24
     efe:	82 b9       	out	0x02, r24	; 2
	//Configure General Call
#if GENERAL_CALL 	== 	ENABLE
	SET_BIT(TWAR,TWGCE);
#elif	GENERAL_CALL 	== 		DISABLE
	CLR_BIT(TWAR,TWGCE);
     f00:	10 98       	cbi	0x02, 0	; 2
#endif
	//CLR Interrupt Flag (TWINT)
	SET_BIT(TWCR,TWINT);
     f02:	86 b7       	in	r24, 0x36	; 54
     f04:	80 68       	ori	r24, 0x80	; 128
     f06:	86 bf       	out	0x36, r24	; 54

}
     f08:	08 95       	ret

00000f0a <MCAL_TWI_voidStartCondition>:
void MCAL_TWI_voidStartCondition(void)
{
	//Set Start Condition Bit
	SET_BIT(TWCR,TWSTA);
     f0a:	86 b7       	in	r24, 0x36	; 54
     f0c:	80 62       	ori	r24, 0x20	; 32
     f0e:	86 bf       	out	0x36, r24	; 54
	//CLR Interrupt Flag (TWINT)
	SET_BIT(TWCR,TWINT);
     f10:	86 b7       	in	r24, 0x36	; 54
     f12:	80 68       	ori	r24, 0x80	; 128
     f14:	86 bf       	out	0x36, r24	; 54
	//wait until TWINT is Set.
	while((GET_BIT(TWCR,TWINT))==0);
     f16:	06 b6       	in	r0, 0x36	; 54
     f18:	07 fe       	sbrs	r0, 7
     f1a:	fd cf       	rjmp	.-6      	; 0xf16 <MCAL_TWI_voidStartCondition+0xc>

}
     f1c:	08 95       	ret

00000f1e <MCAL_TWI_voidRepeatedStartCondition>:

void MCAL_TWI_voidRepeatedStartCondition(void)
{
	//Set Start Condition Bit
	SET_BIT(TWCR,TWSTA);
     f1e:	86 b7       	in	r24, 0x36	; 54
     f20:	80 62       	ori	r24, 0x20	; 32
     f22:	86 bf       	out	0x36, r24	; 54
	//CLR Interrupt Flag (TWINT)
	SET_BIT(TWCR,TWINT);
     f24:	86 b7       	in	r24, 0x36	; 54
     f26:	80 68       	ori	r24, 0x80	; 128
     f28:	86 bf       	out	0x36, r24	; 54
	//wait until TWINT is Set.
	while((GET_BIT(TWCR,TWINT))==0);
     f2a:	06 b6       	in	r0, 0x36	; 54
     f2c:	07 fe       	sbrs	r0, 7
     f2e:	fd cf       	rjmp	.-6      	; 0xf2a <MCAL_TWI_voidRepeatedStartCondition+0xc>

}
     f30:	08 95       	ret

00000f32 <MCAL_TWI_voidStopCondition>:

void MCAL_TWI_voidStopCondition(void)
{
	CLR_BIT(TWCR,TWSTA);
     f32:	86 b7       	in	r24, 0x36	; 54
     f34:	8f 7d       	andi	r24, 0xDF	; 223
     f36:	86 bf       	out	0x36, r24	; 54
	//Set Stop Condition Bit
	SET_BIT(TWCR,TWSTO);
     f38:	86 b7       	in	r24, 0x36	; 54
     f3a:	80 61       	ori	r24, 0x10	; 16
     f3c:	86 bf       	out	0x36, r24	; 54
	//CLR Interrupt Flag (TWINT)
	SET_BIT(TWCR,TWINT);
     f3e:	86 b7       	in	r24, 0x36	; 54
     f40:	80 68       	ori	r24, 0x80	; 128
     f42:	86 bf       	out	0x36, r24	; 54
	//wait until TWINT is Set.
//	while((GET_BIT(TWCR,TWINT))==0);

}
     f44:	08 95       	ret

00000f46 <MCAL_TWI_voidSendSlaveAddressWithWrite>:
void MCAL_TWI_voidSendSlaveAddressWithWrite(u8 LOC_u8SlaveAddress)
{
	//Select Address
	TWDR = LOC_u8SlaveAddress << 1;
     f46:	88 0f       	add	r24, r24
     f48:	83 b9       	out	0x03, r24	; 3
	//write
	CLR_BIT(TWDR,0);
     f4a:	18 98       	cbi	0x03, 0	; 3
	//Clear Start Condition Bit
	CLR_BIT(TWCR,TWSTA);
     f4c:	86 b7       	in	r24, 0x36	; 54
     f4e:	8f 7d       	andi	r24, 0xDF	; 223
     f50:	86 bf       	out	0x36, r24	; 54
	//CLR Interrupt Flag (TWINT)
	SET_BIT(TWCR,TWINT);
     f52:	86 b7       	in	r24, 0x36	; 54
     f54:	80 68       	ori	r24, 0x80	; 128
     f56:	86 bf       	out	0x36, r24	; 54
	while((GET_BIT(TWCR,TWINT))==0);
     f58:	06 b6       	in	r0, 0x36	; 54
     f5a:	07 fe       	sbrs	r0, 7
     f5c:	fd cf       	rjmp	.-6      	; 0xf58 <MCAL_TWI_voidSendSlaveAddressWithWrite+0x12>

}
     f5e:	08 95       	ret

00000f60 <MCAL_TWI_voidSendSlaveAddressWithRead>:

void MCAL_TWI_voidSendSlaveAddressWithRead(u8 LOC_u8SlaveAddress)
{
	//Select Address
	TWDR = LOC_u8SlaveAddress << 1;
     f60:	88 0f       	add	r24, r24
     f62:	83 b9       	out	0x03, r24	; 3
	//Read
	SET_BIT(TWDR,0);
     f64:	18 9a       	sbi	0x03, 0	; 3
	//Clear Start Condition Bit
	CLR_BIT(TWCR,TWSTA);
     f66:	86 b7       	in	r24, 0x36	; 54
     f68:	8f 7d       	andi	r24, 0xDF	; 223
     f6a:	86 bf       	out	0x36, r24	; 54
	//CLR Interrupt Flag (TWINT)
	SET_BIT(TWCR,TWINT);
     f6c:	86 b7       	in	r24, 0x36	; 54
     f6e:	80 68       	ori	r24, 0x80	; 128
     f70:	86 bf       	out	0x36, r24	; 54
	while((GET_BIT(TWCR,TWINT))==0);
     f72:	06 b6       	in	r0, 0x36	; 54
     f74:	07 fe       	sbrs	r0, 7
     f76:	fd cf       	rjmp	.-6      	; 0xf72 <MCAL_TWI_voidSendSlaveAddressWithRead+0x12>

}
     f78:	08 95       	ret

00000f7a <MCAL_TWI_voidMasterReceiveData>:

void MCAL_TWI_voidMasterReceiveData(u8* LOC_Pu8Data)
{
     f7a:	fc 01       	movw	r30, r24
	//Set Acknowledge.
	SET_BIT(TWCR,TWEA);
     f7c:	86 b7       	in	r24, 0x36	; 54
     f7e:	80 64       	ori	r24, 0x40	; 64
     f80:	86 bf       	out	0x36, r24	; 54
	//CLR Interrupt Flag (TWINT)
	SET_BIT(TWCR,TWINT);
     f82:	86 b7       	in	r24, 0x36	; 54
     f84:	80 68       	ori	r24, 0x80	; 128
     f86:	86 bf       	out	0x36, r24	; 54
	while((GET_BIT(TWCR,TWINT))==0);
     f88:	06 b6       	in	r0, 0x36	; 54
     f8a:	07 fe       	sbrs	r0, 7
     f8c:	fd cf       	rjmp	.-6      	; 0xf88 <MCAL_TWI_voidMasterReceiveData+0xe>
	*LOC_Pu8Data = TWDR;
     f8e:	83 b1       	in	r24, 0x03	; 3
     f90:	80 83       	st	Z, r24
}
     f92:	08 95       	ret

00000f94 <MCAL_TWI_voidMasterSendData>:
void MCAL_TWI_voidMasterSendData(u8 LOC_u8Data)
{
	TWDR = LOC_u8Data;
     f94:	83 b9       	out	0x03, r24	; 3
	//CLR Interrupt Flag (TWINT)
	SET_BIT(TWCR,TWINT);
     f96:	86 b7       	in	r24, 0x36	; 54
     f98:	80 68       	ori	r24, 0x80	; 128
     f9a:	86 bf       	out	0x36, r24	; 54
	while((GET_BIT(TWCR,TWINT))==0);
     f9c:	06 b6       	in	r0, 0x36	; 54
     f9e:	07 fe       	sbrs	r0, 7
     fa0:	fd cf       	rjmp	.-6      	; 0xf9c <MCAL_TWI_voidMasterSendData+0x8>

}
     fa2:	08 95       	ret

00000fa4 <MCAL_TWI_voidSlaveListen>:
void MCAL_TWI_voidSlaveListen(void)
{
	while((GET_BIT(TWCR,TWINT))==0);
     fa4:	06 b6       	in	r0, 0x36	; 54
     fa6:	07 fe       	sbrs	r0, 7
     fa8:	fd cf       	rjmp	.-6      	; 0xfa4 <MCAL_TWI_voidSlaveListen>
}
     faa:	08 95       	ret

00000fac <MCAL_TWI_voidMasterReceiveDataNACK>:


void MCAL_TWI_voidMasterReceiveDataNACK(u8* LOC_Pu8Data)
{
     fac:	fc 01       	movw	r30, r24
	//Clear Acknowledge.
	CLR_BIT(TWCR,TWEA);
     fae:	86 b7       	in	r24, 0x36	; 54
     fb0:	8f 7b       	andi	r24, 0xBF	; 191
     fb2:	86 bf       	out	0x36, r24	; 54
	//CLR Interrupt Flag (TWINT)
	SET_BIT(TWCR,TWINT);
     fb4:	86 b7       	in	r24, 0x36	; 54
     fb6:	80 68       	ori	r24, 0x80	; 128
     fb8:	86 bf       	out	0x36, r24	; 54
	while((GET_BIT(TWCR,TWINT))==0);
     fba:	06 b6       	in	r0, 0x36	; 54
     fbc:	07 fe       	sbrs	r0, 7
     fbe:	fd cf       	rjmp	.-6      	; 0xfba <MCAL_TWI_voidMasterReceiveDataNACK+0xe>
	*LOC_Pu8Data = TWDR;
     fc0:	83 b1       	in	r24, 0x03	; 3
     fc2:	80 83       	st	Z, r24
}
     fc4:	08 95       	ret

00000fc6 <MCAL_TIMER_Timer0_Init>:
static void (*GLOB_PTimer0COMP_CallBack)(void) = NULL;

void MCAL_TIMER_Timer0_Init(u8 LOC_u8Timer0Mode,u8 LOC_u8Prescaler,u8 LOC_u8OCR0Mode)
{
	//Timer Mode
	if (LOC_u8Timer0Mode == NORMAL)
     fc6:	88 23       	and	r24, r24
     fc8:	31 f5       	brne	.+76     	; 0x1016 <MCAL_TIMER_Timer0_Init+0x50>
	{
		CLR_BIT(TCCR0,WGM00);
     fca:	83 b7       	in	r24, 0x33	; 51
     fcc:	8f 7b       	andi	r24, 0xBF	; 191
     fce:	83 bf       	out	0x33, r24	; 51
		CLR_BIT(TCCR0,WGM01);
     fd0:	83 b7       	in	r24, 0x33	; 51
     fd2:	87 7f       	andi	r24, 0xF7	; 247
     fd4:	83 bf       	out	0x33, r24	; 51
		if (LOC_u8OCR0Mode == NORMAL_OC0)
     fd6:	44 23       	and	r20, r20
     fd8:	a9 f5       	brne	.+106    	; 0x1044 <MCAL_TIMER_Timer0_Init+0x7e>
	{
		SET_BIT(TCCR0,WGM00);
		SET_BIT(TCCR0,WGM01);
		if (LOC_u8OCR0Mode == NORMAL_OC0)
		{
			CLR_BIT(TCCR0,COM01);
     fda:	83 b7       	in	r24, 0x33	; 51
     fdc:	8f 7d       	andi	r24, 0xDF	; 223
     fde:	83 bf       	out	0x33, r24	; 51
			CLR_BIT(TCCR0,COM00);
     fe0:	83 b7       	in	r24, 0x33	; 51
     fe2:	8f 7e       	andi	r24, 0xEF	; 239
     fe4:	83 bf       	out	0x33, r24	; 51
		else {/*Do Nothing*/}

	}

	//Select Clock & Perscaler
	if (LOC_u8Prescaler == CLK_OFF)
     fe6:	66 23       	and	r22, r22
     fe8:	d9 f1       	breq	.+118    	; 0x1060 <MCAL_TIMER_Timer0_Init+0x9a>
	{
		CLR_BIT(TCCR0,CS02);
		CLR_BIT(TCCR0,CS01);
		CLR_BIT(TCCR0,CS00);
	}
	else if (LOC_u8Prescaler == CLK_PRE1)
     fea:	61 30       	cpi	r22, 0x01	; 1
     fec:	09 f4       	brne	.+2      	; 0xff0 <MCAL_TIMER_Timer0_Init+0x2a>
     fee:	5b c0       	rjmp	.+182    	; 0x10a6 <MCAL_TIMER_Timer0_Init+0xe0>
	{
		CLR_BIT(TCCR0,CS02);
		CLR_BIT(TCCR0,CS01);
		SET_BIT(TCCR0,CS00);
	}
	else if (LOC_u8Prescaler == CLK_PRE8)
     ff0:	62 30       	cpi	r22, 0x02	; 2
     ff2:	09 f4       	brne	.+2      	; 0xff6 <MCAL_TIMER_Timer0_Init+0x30>
     ff4:	62 c0       	rjmp	.+196    	; 0x10ba <MCAL_TIMER_Timer0_Init+0xf4>
	{
		CLR_BIT(TCCR0,CS02);
		SET_BIT(TCCR0,CS01);
		CLR_BIT(TCCR0,CS00);
	}
	else if (LOC_u8Prescaler == CLK_PRE64)
     ff6:	63 30       	cpi	r22, 0x03	; 3
     ff8:	09 f4       	brne	.+2      	; 0xffc <MCAL_TIMER_Timer0_Init+0x36>
     ffa:	70 c0       	rjmp	.+224    	; 0x10dc <MCAL_TIMER_Timer0_Init+0x116>
	{
		CLR_BIT(TCCR0,CS02);
		SET_BIT(TCCR0,CS01);
		SET_BIT(TCCR0,CS00);
	}
	else if (LOC_u8Prescaler == CLK_PRE256)
     ffc:	64 30       	cpi	r22, 0x04	; 4
     ffe:	09 f4       	brne	.+2      	; 0x1002 <MCAL_TIMER_Timer0_Init+0x3c>
    1000:	4f c0       	rjmp	.+158    	; 0x10a0 <MCAL_TIMER_Timer0_Init+0xda>
	{
		SET_BIT(TCCR0,CS02);
		CLR_BIT(TCCR0,CS01);
		CLR_BIT(TCCR0,CS00);
	}
	else if (LOC_u8Prescaler == CLK_PRE1024)
    1002:	65 30       	cpi	r22, 0x05	; 5
    1004:	09 f4       	brne	.+2      	; 0x1008 <MCAL_TIMER_Timer0_Init+0x42>
    1006:	4c c0       	rjmp	.+152    	; 0x10a0 <MCAL_TIMER_Timer0_Init+0xda>
	{
		SET_BIT(TCCR0,CS02);
		CLR_BIT(TCCR0,CS01);
		CLR_BIT(TCCR0,CS00);
	}
	else if (LOC_u8Prescaler == EXTCLK_FALLING)
    1008:	66 30       	cpi	r22, 0x06	; 6
    100a:	09 f4       	brne	.+2      	; 0x100e <MCAL_TIMER_Timer0_Init+0x48>
    100c:	7b c0       	rjmp	.+246    	; 0x1104 <MCAL_TIMER_Timer0_Init+0x13e>
	{
		SET_BIT(TCCR0,CS02);
		SET_BIT(TCCR0,CS01);
		CLR_BIT(TCCR0,CS00);
	}
	else if (LOC_u8Prescaler == EXTCLK_RISING)
    100e:	67 30       	cpi	r22, 0x07	; 7
    1010:	09 f4       	brne	.+2      	; 0x1014 <MCAL_TIMER_Timer0_Init+0x4e>
    1012:	6e c0       	rjmp	.+220    	; 0x10f0 <MCAL_TIMER_Timer0_Init+0x12a>
    1014:	08 95       	ret
			SET_BIT(TCCR0,COM00);
		}
		else{/*Do Nothing*/}

	}
	else if (LOC_u8Timer0Mode == PWM_PHASECORRECT)
    1016:	81 30       	cpi	r24, 0x01	; 1
    1018:	69 f1       	breq	.+90     	; 0x1074 <MCAL_TIMER_Timer0_Init+0xae>
			SET_BIT(TCCR0,COM00);
		}
		else{/*Do Nothing*/}
	}

	else if (LOC_u8Timer0Mode == CTC)
    101a:	82 30       	cpi	r24, 0x02	; 2
    101c:	59 f0       	breq	.+22     	; 0x1034 <MCAL_TIMER_Timer0_Init+0x6e>
			SET_BIT(TCCR0,COM00);
		}
		else {/*Do Nothiing*/}

	}
	else if (LOC_u8Timer0Mode == FAST_PWM)
    101e:	83 30       	cpi	r24, 0x03	; 3
    1020:	11 f7       	brne	.-60     	; 0xfe6 <MCAL_TIMER_Timer0_Init+0x20>
	{
		SET_BIT(TCCR0,WGM00);
    1022:	83 b7       	in	r24, 0x33	; 51
    1024:	80 64       	ori	r24, 0x40	; 64
    1026:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TCCR0,WGM01);
    1028:	83 b7       	in	r24, 0x33	; 51
    102a:	88 60       	ori	r24, 0x08	; 8
    102c:	83 bf       	out	0x33, r24	; 51
		if (LOC_u8OCR0Mode == NORMAL_OC0)
    102e:	44 23       	and	r20, r20
    1030:	51 f5       	brne	.+84     	; 0x1086 <MCAL_TIMER_Timer0_Init+0xc0>
    1032:	d3 cf       	rjmp	.-90     	; 0xfda <MCAL_TIMER_Timer0_Init+0x14>
		else{/*Do Nothing*/}
	}

	else if (LOC_u8Timer0Mode == CTC)
	{
		CLR_BIT(TCCR0,WGM00);
    1034:	83 b7       	in	r24, 0x33	; 51
    1036:	8f 7b       	andi	r24, 0xBF	; 191
    1038:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TCCR0,WGM01);
    103a:	83 b7       	in	r24, 0x33	; 51
    103c:	88 60       	ori	r24, 0x08	; 8
    103e:	83 bf       	out	0x33, r24	; 51
		if (LOC_u8OCR0Mode == NORMAL_OC0)
    1040:	44 23       	and	r20, r20
    1042:	59 f2       	breq	.-106    	; 0xfda <MCAL_TIMER_Timer0_Init+0x14>
		{
			CLR_BIT(TCCR0,COM01);
			CLR_BIT(TCCR0,COM00);
		}
		else if (LOC_u8OCR0Mode == TOG_OC0)
    1044:	41 30       	cpi	r20, 0x01	; 1
    1046:	09 f4       	brne	.+2      	; 0x104a <MCAL_TIMER_Timer0_Init+0x84>
    1048:	42 c0       	rjmp	.+132    	; 0x10ce <MCAL_TIMER_Timer0_Init+0x108>
		{
			CLR_BIT(TCCR0,COM01);
			SET_BIT(TCCR0,COM00);
		}
		else if (LOC_u8OCR0Mode == CLR_OC0)
    104a:	42 30       	cpi	r20, 0x02	; 2
    104c:	11 f1       	breq	.+68     	; 0x1092 <MCAL_TIMER_Timer0_Init+0xcc>
		{
			SET_BIT(TCCR0,COM01);
			CLR_BIT(TCCR0,COM00);
		}
		else if (LOC_u8OCR0Mode == SET_OC0)
    104e:	43 30       	cpi	r20, 0x03	; 3
    1050:	51 f6       	brne	.-108    	; 0xfe6 <MCAL_TIMER_Timer0_Init+0x20>
			SET_BIT(TCCR0,COM01);
			CLR_BIT(TCCR0,COM00);
		}
		else if (LOC_u8OCR0Mode == INVERTING_OC0)
		{
			SET_BIT(TCCR0,COM01);
    1052:	83 b7       	in	r24, 0x33	; 51
    1054:	80 62       	ori	r24, 0x20	; 32
    1056:	83 bf       	out	0x33, r24	; 51
			SET_BIT(TCCR0,COM00);
    1058:	83 b7       	in	r24, 0x33	; 51
    105a:	80 61       	ori	r24, 0x10	; 16
    105c:	83 bf       	out	0x33, r24	; 51
    105e:	c3 cf       	rjmp	.-122    	; 0xfe6 <MCAL_TIMER_Timer0_Init+0x20>
	}

	//Select Clock & Perscaler
	if (LOC_u8Prescaler == CLK_OFF)
	{
		CLR_BIT(TCCR0,CS02);
    1060:	83 b7       	in	r24, 0x33	; 51
    1062:	8b 7f       	andi	r24, 0xFB	; 251
		CLR_BIT(TCCR0,CS01);
		CLR_BIT(TCCR0,CS00);
	}
	else if (LOC_u8Prescaler == CLK_PRE1024)
	{
		SET_BIT(TCCR0,CS02);
    1064:	83 bf       	out	0x33, r24	; 51
		CLR_BIT(TCCR0,CS01);
    1066:	83 b7       	in	r24, 0x33	; 51
    1068:	8d 7f       	andi	r24, 0xFD	; 253
    106a:	83 bf       	out	0x33, r24	; 51
		CLR_BIT(TCCR0,CS00);
    106c:	83 b7       	in	r24, 0x33	; 51
    106e:	8e 7f       	andi	r24, 0xFE	; 254
    1070:	83 bf       	out	0x33, r24	; 51
    1072:	08 95       	ret

	}
	else if (LOC_u8Timer0Mode == PWM_PHASECORRECT)
	{

		SET_BIT(TCCR0,WGM00);
    1074:	83 b7       	in	r24, 0x33	; 51
    1076:	80 64       	ori	r24, 0x40	; 64
    1078:	83 bf       	out	0x33, r24	; 51
		CLR_BIT(TCCR0,WGM01);
    107a:	83 b7       	in	r24, 0x33	; 51
    107c:	87 7f       	andi	r24, 0xF7	; 247
    107e:	83 bf       	out	0x33, r24	; 51
		if (LOC_u8OCR0Mode == NORMAL_OC0)
    1080:	44 23       	and	r20, r20
    1082:	09 f4       	brne	.+2      	; 0x1086 <MCAL_TIMER_Timer0_Init+0xc0>
    1084:	aa cf       	rjmp	.-172    	; 0xfda <MCAL_TIMER_Timer0_Init+0x14>
		if (LOC_u8OCR0Mode == NORMAL_OC0)
		{
			CLR_BIT(TCCR0,COM01);
			CLR_BIT(TCCR0,COM00);
		}
		else if (LOC_u8OCR0Mode == NON_INVERTING_OC0)
    1086:	41 30       	cpi	r20, 0x01	; 1
    1088:	21 f0       	breq	.+8      	; 0x1092 <MCAL_TIMER_Timer0_Init+0xcc>
		{
			SET_BIT(TCCR0,COM01);
			CLR_BIT(TCCR0,COM00);
		}
		else if (LOC_u8OCR0Mode == INVERTING_OC0)
    108a:	42 30       	cpi	r20, 0x02	; 2
    108c:	09 f0       	breq	.+2      	; 0x1090 <MCAL_TIMER_Timer0_Init+0xca>
    108e:	ab cf       	rjmp	.-170    	; 0xfe6 <MCAL_TIMER_Timer0_Init+0x20>
    1090:	e0 cf       	rjmp	.-64     	; 0x1052 <MCAL_TIMER_Timer0_Init+0x8c>
			CLR_BIT(TCCR0,COM01);
			CLR_BIT(TCCR0,COM00);
		}
		else if (LOC_u8OCR0Mode == NON_INVERTING_OC0)
		{
			SET_BIT(TCCR0,COM01);
    1092:	83 b7       	in	r24, 0x33	; 51
    1094:	80 62       	ori	r24, 0x20	; 32
    1096:	83 bf       	out	0x33, r24	; 51
			CLR_BIT(TCCR0,COM00);
    1098:	83 b7       	in	r24, 0x33	; 51
    109a:	8f 7e       	andi	r24, 0xEF	; 239
    109c:	83 bf       	out	0x33, r24	; 51
    109e:	a3 cf       	rjmp	.-186    	; 0xfe6 <MCAL_TIMER_Timer0_Init+0x20>
		CLR_BIT(TCCR0,CS01);
		CLR_BIT(TCCR0,CS00);
	}
	else if (LOC_u8Prescaler == CLK_PRE1024)
	{
		SET_BIT(TCCR0,CS02);
    10a0:	83 b7       	in	r24, 0x33	; 51
    10a2:	84 60       	ori	r24, 0x04	; 4
    10a4:	df cf       	rjmp	.-66     	; 0x1064 <MCAL_TIMER_Timer0_Init+0x9e>
		CLR_BIT(TCCR0,CS01);
		CLR_BIT(TCCR0,CS00);
	}
	else if (LOC_u8Prescaler == CLK_PRE1)
	{
		CLR_BIT(TCCR0,CS02);
    10a6:	83 b7       	in	r24, 0x33	; 51
    10a8:	8b 7f       	andi	r24, 0xFB	; 251
    10aa:	83 bf       	out	0x33, r24	; 51
		CLR_BIT(TCCR0,CS01);
    10ac:	83 b7       	in	r24, 0x33	; 51
    10ae:	8d 7f       	andi	r24, 0xFD	; 253
    10b0:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TCCR0,CS00);
    10b2:	83 b7       	in	r24, 0x33	; 51
    10b4:	81 60       	ori	r24, 0x01	; 1
    10b6:	83 bf       	out	0x33, r24	; 51
    10b8:	08 95       	ret
	}
	else if (LOC_u8Prescaler == CLK_PRE8)
	{
		CLR_BIT(TCCR0,CS02);
    10ba:	83 b7       	in	r24, 0x33	; 51
    10bc:	8b 7f       	andi	r24, 0xFB	; 251
		CLR_BIT(TCCR0,CS01);
		CLR_BIT(TCCR0,CS00);
	}
	else if (LOC_u8Prescaler == EXTCLK_FALLING)
	{
		SET_BIT(TCCR0,CS02);
    10be:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TCCR0,CS01);
    10c0:	83 b7       	in	r24, 0x33	; 51
    10c2:	82 60       	ori	r24, 0x02	; 2
    10c4:	83 bf       	out	0x33, r24	; 51
		CLR_BIT(TCCR0,CS00);
    10c6:	83 b7       	in	r24, 0x33	; 51
    10c8:	8e 7f       	andi	r24, 0xFE	; 254
    10ca:	83 bf       	out	0x33, r24	; 51
    10cc:	08 95       	ret
			CLR_BIT(TCCR0,COM01);
			CLR_BIT(TCCR0,COM00);
		}
		else if (LOC_u8OCR0Mode == TOG_OC0)
		{
			CLR_BIT(TCCR0,COM01);
    10ce:	83 b7       	in	r24, 0x33	; 51
    10d0:	8f 7d       	andi	r24, 0xDF	; 223
    10d2:	83 bf       	out	0x33, r24	; 51
			SET_BIT(TCCR0,COM00);
    10d4:	83 b7       	in	r24, 0x33	; 51
    10d6:	80 61       	ori	r24, 0x10	; 16
    10d8:	83 bf       	out	0x33, r24	; 51
    10da:	85 cf       	rjmp	.-246    	; 0xfe6 <MCAL_TIMER_Timer0_Init+0x20>
		SET_BIT(TCCR0,CS01);
		CLR_BIT(TCCR0,CS00);
	}
	else if (LOC_u8Prescaler == CLK_PRE64)
	{
		CLR_BIT(TCCR0,CS02);
    10dc:	83 b7       	in	r24, 0x33	; 51
    10de:	8b 7f       	andi	r24, 0xFB	; 251
    10e0:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TCCR0,CS01);
    10e2:	83 b7       	in	r24, 0x33	; 51
    10e4:	82 60       	ori	r24, 0x02	; 2
    10e6:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TCCR0,CS00);
    10e8:	83 b7       	in	r24, 0x33	; 51
    10ea:	81 60       	ori	r24, 0x01	; 1
    10ec:	83 bf       	out	0x33, r24	; 51
    10ee:	08 95       	ret
		SET_BIT(TCCR0,CS01);
		CLR_BIT(TCCR0,CS00);
	}
	else if (LOC_u8Prescaler == EXTCLK_RISING)
	{
		SET_BIT(TCCR0,CS02);
    10f0:	83 b7       	in	r24, 0x33	; 51
    10f2:	84 60       	ori	r24, 0x04	; 4
    10f4:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TCCR0,CS01);
    10f6:	83 b7       	in	r24, 0x33	; 51
    10f8:	82 60       	ori	r24, 0x02	; 2
    10fa:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TCCR0,CS00);
    10fc:	83 b7       	in	r24, 0x33	; 51
    10fe:	81 60       	ori	r24, 0x01	; 1
    1100:	83 bf       	out	0x33, r24	; 51
    1102:	08 95       	ret
		CLR_BIT(TCCR0,CS01);
		CLR_BIT(TCCR0,CS00);
	}
	else if (LOC_u8Prescaler == EXTCLK_FALLING)
	{
		SET_BIT(TCCR0,CS02);
    1104:	83 b7       	in	r24, 0x33	; 51
    1106:	84 60       	ori	r24, 0x04	; 4
    1108:	da cf       	rjmp	.-76     	; 0x10be <MCAL_TIMER_Timer0_Init+0xf8>

0000110a <MCAL_TIMER_Timer0_SetPreloadValue>:

}

void MCAL_TIMER_Timer0_SetPreloadValue(u8 LOC_u8Value)
{
	TCNT0 = LOC_u8Value;
    110a:	82 bf       	out	0x32, r24	; 50
}
    110c:	08 95       	ret

0000110e <MCAL_TIMER_Timer0_SetCompareValue>:
void MCAL_TIMER_Timer0_SetCompareValue(u8 LOC_u8Value)
{
	OCR0 = LOC_u8Value;
    110e:	8c bf       	out	0x3c, r24	; 60
}
    1110:	08 95       	ret

00001112 <MCAL_TIMER_Timer0_InterruptOVF_Enable>:


void MCAL_TIMER_Timer0_InterruptOVF_Enable(void)
{
	/* To Enable Timer0 OVF Interrupt */
	SET_BIT(TIMSK,TOIE0);
    1112:	89 b7       	in	r24, 0x39	; 57
    1114:	81 60       	ori	r24, 0x01	; 1
    1116:	89 bf       	out	0x39, r24	; 57
}
    1118:	08 95       	ret

0000111a <MCAL_TIMER_Timer0_InterruptOVF_Disable>:
void MCAL_TIMER_Timer0_InterruptOVF_Disable(void)
{
	/* To Disable Timer0 OVF Interrupt */
	CLR_BIT(TIMSK,TOIE0);
    111a:	89 b7       	in	r24, 0x39	; 57
    111c:	8e 7f       	andi	r24, 0xFE	; 254
    111e:	89 bf       	out	0x39, r24	; 57
}
    1120:	08 95       	ret

00001122 <MCAL_TIMER_Timer0_InterruptCompare_Enable>:


void MCAL_TIMER_Timer0_InterruptCompare_Enable(void)
{
	/* To Enable Timer0 OVF Interrupt */
	SET_BIT(TIMSK,OCIE0);
    1122:	89 b7       	in	r24, 0x39	; 57
    1124:	82 60       	ori	r24, 0x02	; 2
    1126:	89 bf       	out	0x39, r24	; 57
}
    1128:	08 95       	ret

0000112a <MCAL_TIMER_Timer0_InterruptCompare_Disable>:
void MCAL_TIMER_Timer0_InterruptCompare_Disable(void)
{
	/* To Disable Timer0 OVF Interrupt */
	CLR_BIT(TIMSK,OCIE0);
    112a:	89 b7       	in	r24, 0x39	; 57
    112c:	8d 7f       	andi	r24, 0xFD	; 253
    112e:	89 bf       	out	0x39, r24	; 57
}
    1130:	08 95       	ret

00001132 <MCAL_TIMER_voidTimer0_OVFSetCallBack>:


void MCAL_TIMER_voidTimer0_OVFSetCallBack(void(*Timer0Action)(void))
{
	if (Timer0Action != NULL)
    1132:	00 97       	sbiw	r24, 0x00	; 0
    1134:	21 f0       	breq	.+8      	; 0x113e <MCAL_TIMER_voidTimer0_OVFSetCallBack+0xc>
	{
		GLOB_PTimer0OVF_CallBack = Timer0Action;
    1136:	90 93 1f 07 	sts	0x071F, r25
    113a:	80 93 1e 07 	sts	0x071E, r24
    113e:	08 95       	ret

00001140 <MCAL_TIMER_voidTimer0_COMPSetCallBack>:
	}
}
void MCAL_TIMER_voidTimer0_COMPSetCallBack(void(*Timer0Action)(void))
{
	if (Timer0Action != NULL)
    1140:	00 97       	sbiw	r24, 0x00	; 0
    1142:	21 f0       	breq	.+8      	; 0x114c <MCAL_TIMER_voidTimer0_COMPSetCallBack+0xc>
	{
		GLOB_PTimer0COMP_CallBack = Timer0Action;
    1144:	90 93 1d 07 	sts	0x071D, r25
    1148:	80 93 1c 07 	sts	0x071C, r24
    114c:	08 95       	ret

0000114e <DelayUs>:
	}
}

void DelayUs(u32 LOC_u32Time)
{
    114e:	af 92       	push	r10
    1150:	bf 92       	push	r11
    1152:	cf 92       	push	r12
    1154:	df 92       	push	r13
    1156:	ef 92       	push	r14
    1158:	ff 92       	push	r15
    115a:	0f 93       	push	r16
    115c:	1f 93       	push	r17
    115e:	7b 01       	movw	r14, r22
    1160:	8c 01       	movw	r16, r24
	u32 Tick,OVF_Time,Perscaler = 256,Preload;
	f32 OVF_Number;
	Tick = Perscaler/CLK;
	OVF_Time = Tick * OVF_Count;
	OVF_Number = LOC_u32Time/OVF_Time;
    1162:	2c e0       	ldi	r18, 0x0C	; 12
    1164:	96 95       	lsr	r25
    1166:	87 95       	ror	r24
    1168:	77 95       	ror	r23
    116a:	67 95       	ror	r22
    116c:	2a 95       	dec	r18
    116e:	d1 f7       	brne	.-12     	; 0x1164 <DelayUs+0x16>
    1170:	0e 94 cd 03 	call	0x79a	; 0x79a <__floatunsisf>
    1174:	5b 01       	movw	r10, r22
    1176:	6c 01       	movw	r12, r24
	Preload = OVF_Count - ( (((f32) LOC_u32Time/OVF_Count)-OVF_Number) * OVF_Count);
    1178:	c8 01       	movw	r24, r16
    117a:	b7 01       	movw	r22, r14
    117c:	0e 94 cd 03 	call	0x79a	; 0x79a <__floatunsisf>
    1180:	20 e0       	ldi	r18, 0x00	; 0
    1182:	30 e0       	ldi	r19, 0x00	; 0
    1184:	40 e8       	ldi	r20, 0x80	; 128
    1186:	5b e3       	ldi	r21, 0x3B	; 59
    1188:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    118c:	a6 01       	movw	r20, r12
    118e:	95 01       	movw	r18, r10
    1190:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1194:	20 e0       	ldi	r18, 0x00	; 0
    1196:	30 e0       	ldi	r19, 0x00	; 0
    1198:	40 e8       	ldi	r20, 0x80	; 128
    119a:	53 ec       	ldi	r21, 0xC3	; 195
    119c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11a0:	20 e0       	ldi	r18, 0x00	; 0
    11a2:	30 e0       	ldi	r19, 0x00	; 0
    11a4:	40 e8       	ldi	r20, 0x80	; 128
    11a6:	53 e4       	ldi	r21, 0x43	; 67
    11a8:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    11ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
	if(Preload!=0)
    11b0:	61 15       	cp	r22, r1
    11b2:	71 05       	cpc	r23, r1
    11b4:	81 05       	cpc	r24, r1
    11b6:	91 05       	cpc	r25, r1
    11b8:	59 f0       	breq	.+22     	; 0x11d0 <DelayUs+0x82>

}

void MCAL_TIMER_Timer0_SetPreloadValue(u8 LOC_u8Value)
{
	TCNT0 = LOC_u8Value;
    11ba:	62 bf       	out	0x32, r22	; 50
	OVF_Number = LOC_u32Time/OVF_Time;
	Preload = OVF_Count - ( (((f32) LOC_u32Time/OVF_Count)-OVF_Number) * OVF_Count);
	if(Preload!=0)
	{
		MCAL_TIMER_Timer0_SetPreloadValue((u8)Preload);
		OVF_Number++;
    11bc:	c6 01       	movw	r24, r12
    11be:	b5 01       	movw	r22, r10
    11c0:	20 e0       	ldi	r18, 0x00	; 0
    11c2:	30 e0       	ldi	r19, 0x00	; 0
    11c4:	40 e8       	ldi	r20, 0x80	; 128
    11c6:	5f e3       	ldi	r21, 0x3F	; 63
    11c8:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    11cc:	5b 01       	movw	r10, r22
    11ce:	6c 01       	movw	r12, r24
	}
	else
	{
		//Do Nothing.
	}
	while(OVF_Number--)
    11d0:	c6 01       	movw	r24, r12
    11d2:	b5 01       	movw	r22, r10
    11d4:	20 e0       	ldi	r18, 0x00	; 0
    11d6:	30 e0       	ldi	r19, 0x00	; 0
    11d8:	40 e0       	ldi	r20, 0x00	; 0
    11da:	50 e0       	ldi	r21, 0x00	; 0
    11dc:	0e 94 19 03 	call	0x632	; 0x632 <__nesf2>
    11e0:	88 23       	and	r24, r24
    11e2:	29 f1       	breq	.+74     	; 0x122e <DelayUs+0xe0>
    11e4:	c6 01       	movw	r24, r12
    11e6:	b5 01       	movw	r22, r10
    11e8:	20 e0       	ldi	r18, 0x00	; 0
    11ea:	30 e0       	ldi	r19, 0x00	; 0
    11ec:	40 e8       	ldi	r20, 0x80	; 128
    11ee:	5f e3       	ldi	r21, 0x3F	; 63
    11f0:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    11f4:	7b 01       	movw	r14, r22
    11f6:	8c 01       	movw	r16, r24
	{
		while(GET_BIT(TIFR,TOV0)==0);
    11f8:	08 b6       	in	r0, 0x38	; 56
    11fa:	00 fe       	sbrs	r0, 0
    11fc:	fd cf       	rjmp	.-6      	; 0x11f8 <DelayUs+0xaa>
		SET_BIT(TIFR,TOV0);
    11fe:	88 b7       	in	r24, 0x38	; 56
    1200:	81 60       	ori	r24, 0x01	; 1
    1202:	88 bf       	out	0x38, r24	; 56
	}
	else
	{
		//Do Nothing.
	}
	while(OVF_Number--)
    1204:	c8 01       	movw	r24, r16
    1206:	b7 01       	movw	r22, r14
    1208:	20 e0       	ldi	r18, 0x00	; 0
    120a:	30 e0       	ldi	r19, 0x00	; 0
    120c:	40 e0       	ldi	r20, 0x00	; 0
    120e:	50 e0       	ldi	r21, 0x00	; 0
    1210:	0e 94 19 03 	call	0x632	; 0x632 <__nesf2>
    1214:	88 23       	and	r24, r24
    1216:	59 f0       	breq	.+22     	; 0x122e <DelayUs+0xe0>
    1218:	c8 01       	movw	r24, r16
    121a:	b7 01       	movw	r22, r14
    121c:	20 e0       	ldi	r18, 0x00	; 0
    121e:	30 e0       	ldi	r19, 0x00	; 0
    1220:	40 e8       	ldi	r20, 0x80	; 128
    1222:	5f e3       	ldi	r21, 0x3F	; 63
    1224:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1228:	7b 01       	movw	r14, r22
    122a:	8c 01       	movw	r16, r24
    122c:	e5 cf       	rjmp	.-54     	; 0x11f8 <DelayUs+0xaa>
	{
		while(GET_BIT(TIFR,TOV0)==0);
		SET_BIT(TIFR,TOV0);
	}

}
    122e:	1f 91       	pop	r17
    1230:	0f 91       	pop	r16
    1232:	ff 90       	pop	r15
    1234:	ef 90       	pop	r14
    1236:	df 90       	pop	r13
    1238:	cf 90       	pop	r12
    123a:	bf 90       	pop	r11
    123c:	af 90       	pop	r10
    123e:	08 95       	ret

00001240 <DelayMs>:
{
	u16 LOC_u16OVF_NO,OVF_Time,Perscaler = 256;
	u8 Tick,LOC_u8Preload;
	Tick = Perscaler/CLK;
	OVF_Time = Tick * OVF_Count;
	u16 Local_u16Remainder = (LOC_u32Time * 1000) % OVF_Time;
    1240:	28 ee       	ldi	r18, 0xE8	; 232
    1242:	33 e0       	ldi	r19, 0x03	; 3
    1244:	40 e0       	ldi	r20, 0x00	; 0
    1246:	50 e0       	ldi	r21, 0x00	; 0
    1248:	0e 94 73 2b 	call	0x56e6	; 0x56e6 <__mulsi3>
    124c:	9b 01       	movw	r18, r22
    124e:	ac 01       	movw	r20, r24
    1250:	dc 01       	movw	r26, r24
    1252:	cb 01       	movw	r24, r22
    1254:	9f 70       	andi	r25, 0x0F	; 15
    1256:	a0 70       	andi	r26, 0x00	; 0
    1258:	b0 70       	andi	r27, 0x00	; 0
    125a:	fc 01       	movw	r30, r24
	if(Local_u16Remainder == 0)
    125c:	89 2b       	or	r24, r25
    125e:	c9 f4       	brne	.+50     	; 0x1292 <DelayMs+0x52>
	{
		LOC_u16OVF_NO = (LOC_u32Time * 1000) / OVF_Time;
    1260:	da 01       	movw	r26, r20
    1262:	c9 01       	movw	r24, r18
    1264:	5c e0       	ldi	r21, 0x0C	; 12
    1266:	b6 95       	lsr	r27
    1268:	a7 95       	ror	r26
    126a:	97 95       	ror	r25
    126c:	87 95       	ror	r24
    126e:	5a 95       	dec	r21
    1270:	d1 f7       	brne	.-12     	; 0x1266 <DelayMs+0x26>
    1272:	bc 01       	movw	r22, r24
    1274:	80 e0       	ldi	r24, 0x00	; 0

}

void MCAL_TIMER_Timer0_SetPreloadValue(u8 LOC_u8Value)
{
	TCNT0 = LOC_u8Value;
    1276:	82 bf       	out	0x32, r24	; 50
	{
		LOC_u16OVF_NO = ((LOC_u32Time * 1000) / OVF_Time ) + 1;
		LOC_u8Preload = OVF_Count - (Local_u16Remainder / Tick);
	}
	MCAL_TIMER_Timer0_SetPreloadValue(LOC_u8Preload);
	while(LOC_u16OVF_NO--)
    1278:	61 15       	cp	r22, r1
    127a:	71 05       	cpc	r23, r1
    127c:	49 f0       	breq	.+18     	; 0x1290 <DelayMs+0x50>
	{
		while(GET_BIT(TIFR,TOV0)==0);
    127e:	08 b6       	in	r0, 0x38	; 56
    1280:	00 fe       	sbrs	r0, 0
    1282:	fd cf       	rjmp	.-6      	; 0x127e <DelayMs+0x3e>
		SET_BIT(TIFR,TOV0);
    1284:	88 b7       	in	r24, 0x38	; 56
    1286:	81 60       	ori	r24, 0x01	; 1
    1288:	88 bf       	out	0x38, r24	; 56
    128a:	61 50       	subi	r22, 0x01	; 1
    128c:	70 40       	sbci	r23, 0x00	; 0
	{
		LOC_u16OVF_NO = ((LOC_u32Time * 1000) / OVF_Time ) + 1;
		LOC_u8Preload = OVF_Count - (Local_u16Remainder / Tick);
	}
	MCAL_TIMER_Timer0_SetPreloadValue(LOC_u8Preload);
	while(LOC_u16OVF_NO--)
    128e:	b9 f7       	brne	.-18     	; 0x127e <DelayMs+0x3e>
    1290:	08 95       	ret
		LOC_u16OVF_NO = (LOC_u32Time * 1000) / OVF_Time;
		LOC_u8Preload = 0;
	}
	else
	{
		LOC_u16OVF_NO = ((LOC_u32Time * 1000) / OVF_Time ) + 1;
    1292:	da 01       	movw	r26, r20
    1294:	c9 01       	movw	r24, r18
    1296:	4c e0       	ldi	r20, 0x0C	; 12
    1298:	b6 95       	lsr	r27
    129a:	a7 95       	ror	r26
    129c:	97 95       	ror	r25
    129e:	87 95       	ror	r24
    12a0:	4a 95       	dec	r20
    12a2:	d1 f7       	brne	.-12     	; 0x1298 <DelayMs+0x58>
    12a4:	bc 01       	movw	r22, r24
    12a6:	6f 5f       	subi	r22, 0xFF	; 255
    12a8:	7f 4f       	sbci	r23, 0xFF	; 255
		LOC_u8Preload = OVF_Count - (Local_u16Remainder / Tick);
    12aa:	f2 95       	swap	r31
    12ac:	e2 95       	swap	r30
    12ae:	ef 70       	andi	r30, 0x0F	; 15
    12b0:	ef 27       	eor	r30, r31
    12b2:	ff 70       	andi	r31, 0x0F	; 15
    12b4:	ef 27       	eor	r30, r31
    12b6:	8e 2f       	mov	r24, r30
    12b8:	81 95       	neg	r24
    12ba:	dd cf       	rjmp	.-70     	; 0x1276 <DelayMs+0x36>

000012bc <__vector_11>:

}


ISR(TIMER0_OVF_vect)
{
    12bc:	1f 92       	push	r1
    12be:	0f 92       	push	r0
    12c0:	0f b6       	in	r0, 0x3f	; 63
    12c2:	0f 92       	push	r0
    12c4:	11 24       	eor	r1, r1
    12c6:	2f 93       	push	r18
    12c8:	3f 93       	push	r19
    12ca:	4f 93       	push	r20
    12cc:	5f 93       	push	r21
    12ce:	6f 93       	push	r22
    12d0:	7f 93       	push	r23
    12d2:	8f 93       	push	r24
    12d4:	9f 93       	push	r25
    12d6:	af 93       	push	r26
    12d8:	bf 93       	push	r27
    12da:	ef 93       	push	r30
    12dc:	ff 93       	push	r31
	if (GLOB_PTimer0OVF_CallBack != NULL)
    12de:	e0 91 1e 07 	lds	r30, 0x071E
    12e2:	f0 91 1f 07 	lds	r31, 0x071F
    12e6:	30 97       	sbiw	r30, 0x00	; 0
    12e8:	09 f0       	breq	.+2      	; 0x12ec <__vector_11+0x30>
	{
		GLOB_PTimer0OVF_CallBack();
    12ea:	09 95       	icall
	}

}
    12ec:	ff 91       	pop	r31
    12ee:	ef 91       	pop	r30
    12f0:	bf 91       	pop	r27
    12f2:	af 91       	pop	r26
    12f4:	9f 91       	pop	r25
    12f6:	8f 91       	pop	r24
    12f8:	7f 91       	pop	r23
    12fa:	6f 91       	pop	r22
    12fc:	5f 91       	pop	r21
    12fe:	4f 91       	pop	r20
    1300:	3f 91       	pop	r19
    1302:	2f 91       	pop	r18
    1304:	0f 90       	pop	r0
    1306:	0f be       	out	0x3f, r0	; 63
    1308:	0f 90       	pop	r0
    130a:	1f 90       	pop	r1
    130c:	18 95       	reti

0000130e <__vector_10>:

ISR(TIMER0_COMP_vect)
{
    130e:	1f 92       	push	r1
    1310:	0f 92       	push	r0
    1312:	0f b6       	in	r0, 0x3f	; 63
    1314:	0f 92       	push	r0
    1316:	11 24       	eor	r1, r1
    1318:	2f 93       	push	r18
    131a:	3f 93       	push	r19
    131c:	4f 93       	push	r20
    131e:	5f 93       	push	r21
    1320:	6f 93       	push	r22
    1322:	7f 93       	push	r23
    1324:	8f 93       	push	r24
    1326:	9f 93       	push	r25
    1328:	af 93       	push	r26
    132a:	bf 93       	push	r27
    132c:	ef 93       	push	r30
    132e:	ff 93       	push	r31
	if (GLOB_PTimer0COMP_CallBack != NULL)
    1330:	e0 91 1c 07 	lds	r30, 0x071C
    1334:	f0 91 1d 07 	lds	r31, 0x071D
    1338:	30 97       	sbiw	r30, 0x00	; 0
    133a:	09 f0       	breq	.+2      	; 0x133e <__vector_10+0x30>
	{
		GLOB_PTimer0COMP_CallBack();
    133c:	09 95       	icall
	}

}
    133e:	ff 91       	pop	r31
    1340:	ef 91       	pop	r30
    1342:	bf 91       	pop	r27
    1344:	af 91       	pop	r26
    1346:	9f 91       	pop	r25
    1348:	8f 91       	pop	r24
    134a:	7f 91       	pop	r23
    134c:	6f 91       	pop	r22
    134e:	5f 91       	pop	r21
    1350:	4f 91       	pop	r20
    1352:	3f 91       	pop	r19
    1354:	2f 91       	pop	r18
    1356:	0f 90       	pop	r0
    1358:	0f be       	out	0x3f, r0	; 63
    135a:	0f 90       	pop	r0
    135c:	1f 90       	pop	r1
    135e:	18 95       	reti

00001360 <MCAL_Timer_Timer1_voidInit>:
static void (*GLOB_PTimer1COMPB_CallBack)(void) = NULL;
static void (*GLOB_PTimer1CAPT_CallBack)(void) = NULL;


void MCAL_Timer_Timer1_voidInit(u8 LOC_u8Mode,u8 LOC_u8Scaler,u8 LOC_u8OC1AMode,u8 LOC_u8OC1BMode)
{
    1360:	98 2f       	mov	r25, r24
	u8 LOC_u8TCCR1A_OCR1_Modes;
	if((LOC_u8Scaler>=TIMER1_SCALER_TIMER_STOP_MASK) && (LOC_u8Scaler<=TIMER1_SCALER_EXT_T1_RISING_EDGE_MASK))
    1362:	68 30       	cpi	r22, 0x08	; 8
    1364:	30 f4       	brcc	.+12     	; 0x1372 <MCAL_Timer_Timer1_voidInit+0x12>
	{
		TCCR1B &= TIMER1_SCALER_CLEAR_MASK;
    1366:	8e b5       	in	r24, 0x2e	; 46
    1368:	88 7f       	andi	r24, 0xF8	; 248
    136a:	8e bd       	out	0x2e, r24	; 46
		TCCR1B |= LOC_u8Scaler;
    136c:	8e b5       	in	r24, 0x2e	; 46
    136e:	86 2b       	or	r24, r22
    1370:	8e bd       	out	0x2e, r24	; 46
	}
	else {/*Do Nothing*/}

	if((LOC_u8Mode>=TIMER1_NORMAL_MODE) && (LOC_u8Mode<=TIMER1_PWM_FAST_MODE_TOP_OCR1A))
    1372:	9f 30       	cpi	r25, 0x0F	; 15
    1374:	e0 f4       	brcc	.+56     	; 0x13ae <MCAL_Timer_Timer1_voidInit+0x4e>
	{
		switch(LOC_u8Mode)
    1376:	97 30       	cpi	r25, 0x07	; 7
    1378:	09 f4       	brne	.+2      	; 0x137c <MCAL_Timer_Timer1_voidInit+0x1c>
    137a:	5b c0       	rjmp	.+182    	; 0x1432 <MCAL_Timer_Timer1_voidInit+0xd2>
    137c:	98 30       	cpi	r25, 0x08	; 8
    137e:	38 f1       	brcs	.+78     	; 0x13ce <MCAL_Timer_Timer1_voidInit+0x6e>
    1380:	9b 30       	cpi	r25, 0x0B	; 11
    1382:	09 f4       	brne	.+2      	; 0x1386 <MCAL_Timer_Timer1_voidInit+0x26>
    1384:	93 c0       	rjmp	.+294    	; 0x14ac <MCAL_Timer_Timer1_voidInit+0x14c>
    1386:	9c 30       	cpi	r25, 0x0C	; 12
    1388:	c8 f5       	brcc	.+114    	; 0x13fc <MCAL_Timer_Timer1_voidInit+0x9c>
    138a:	99 30       	cpi	r25, 0x09	; 9
    138c:	09 f4       	brne	.+2      	; 0x1390 <MCAL_Timer_Timer1_voidInit+0x30>
    138e:	5e c0       	rjmp	.+188    	; 0x144c <MCAL_Timer_Timer1_voidInit+0xec>
    1390:	9a 30       	cpi	r25, 0x0A	; 10
    1392:	08 f4       	brcc	.+2      	; 0x1396 <MCAL_Timer_Timer1_voidInit+0x36>
    1394:	7f c0       	rjmp	.+254    	; 0x1494 <MCAL_Timer_Timer1_voidInit+0x134>
			CLR_BIT(TCCR1A,TCCR1A_WGM11);
			CLR_BIT(TCCR1B,TCCR1B_WGM12);
			SET_BIT(TCCR1B,TCCR1B_WGM13);
			break;
		case TIMER1_PWM_PHASE_CORRECT_MODE_TOP_ICR1 :
			CLR_BIT(TCCR1A,TCCR1A_WGM10);
    1396:	8f b5       	in	r24, 0x2f	; 47
    1398:	8e 7f       	andi	r24, 0xFE	; 254
			SET_BIT(TCCR1A,TCCR1A_WGM11);
			CLR_BIT(TCCR1B,TCCR1B_WGM12);
			SET_BIT(TCCR1B,TCCR1B_WGM13);
			break;
		case TIMER1_PWM_PHASE_CORRECT_MODE_TOP_OCR1A :
			SET_BIT(TCCR1A,TCCR1A_WGM10);
    139a:	8f bd       	out	0x2f, r24	; 47
			SET_BIT(TCCR1A,TCCR1A_WGM11);
    139c:	8f b5       	in	r24, 0x2f	; 47
    139e:	82 60       	ori	r24, 0x02	; 2
    13a0:	8f bd       	out	0x2f, r24	; 47
			CLR_BIT(TCCR1B,TCCR1B_WGM12);
    13a2:	8e b5       	in	r24, 0x2e	; 46
    13a4:	87 7f       	andi	r24, 0xF7	; 247
    13a6:	8e bd       	out	0x2e, r24	; 46
			SET_BIT(TCCR1B,TCCR1B_WGM13);
    13a8:	8e b5       	in	r24, 0x2e	; 46
    13aa:	80 61       	ori	r24, 0x10	; 16
    13ac:	8e bd       	out	0x2e, r24	; 46
		}
	}
	else {/*Do Nothing*/}

	//OCR1A/OCR1B Mode Select.
	if((LOC_u8OC1AMode >=TIMER1_OCR1_DISCONNECTED && LOC_u8OC1AMode<=TIMER1_OCR1_SET) && (LOC_u8OC1AMode >=TIMER1_OCR1_DISCONNECTED && LOC_u8OC1AMode<=TIMER1_OCR1_SET))
    13ae:	44 30       	cpi	r20, 0x04	; 4
    13b0:	38 f4       	brcc	.+14     	; 0x13c0 <MCAL_Timer_Timer1_voidInit+0x60>
	LOC_u8TCCR1A_OCR1_Modes = (LOC_u8OC1AMode<<6) | (LOC_u8OC1BMode<<4);
    13b2:	22 95       	swap	r18
    13b4:	20 7f       	andi	r18, 0xF0	; 240
    13b6:	42 95       	swap	r20
    13b8:	44 0f       	add	r20, r20
    13ba:	44 0f       	add	r20, r20
    13bc:	40 7c       	andi	r20, 0xC0	; 192
    13be:	42 2b       	or	r20, r18
	TCCR1A &= TIMER1_OCR1_CLEAR_MASK;
    13c0:	8f b5       	in	r24, 0x2f	; 47
    13c2:	8f 70       	andi	r24, 0x0F	; 15
    13c4:	8f bd       	out	0x2f, r24	; 47
	TCCR1A |= LOC_u8TCCR1A_OCR1_Modes;
    13c6:	8f b5       	in	r24, 0x2f	; 47
    13c8:	48 2b       	or	r20, r24
    13ca:	4f bd       	out	0x2f, r20	; 47

}
    13cc:	08 95       	ret
	}
	else {/*Do Nothing*/}

	if((LOC_u8Mode>=TIMER1_NORMAL_MODE) && (LOC_u8Mode<=TIMER1_PWM_FAST_MODE_TOP_OCR1A))
	{
		switch(LOC_u8Mode)
    13ce:	93 30       	cpi	r25, 0x03	; 3
    13d0:	09 f4       	brne	.+2      	; 0x13d4 <MCAL_Timer_Timer1_voidInit+0x74>
    13d2:	66 c0       	rjmp	.+204    	; 0x14a0 <MCAL_Timer_Timer1_voidInit+0x140>
    13d4:	94 30       	cpi	r25, 0x04	; 4
    13d6:	30 f5       	brcc	.+76     	; 0x1424 <MCAL_Timer_Timer1_voidInit+0xc4>
    13d8:	91 30       	cpi	r25, 0x01	; 1
    13da:	f1 f1       	breq	.+124    	; 0x1458 <MCAL_Timer_Timer1_voidInit+0xf8>
    13dc:	92 30       	cpi	r25, 0x02	; 2
    13de:	08 f4       	brcc	.+2      	; 0x13e2 <MCAL_Timer_Timer1_voidInit+0x82>
    13e0:	4a c0       	rjmp	.+148    	; 0x1476 <MCAL_Timer_Timer1_voidInit+0x116>
			CLR_BIT(TCCR1A,TCCR1A_WGM11);
			CLR_BIT(TCCR1B,TCCR1B_WGM12);
			CLR_BIT(TCCR1B,TCCR1B_WGM13);
			break;
		case TIMER1_PWM_PHASE_CORRECT_MODE_9_BIT :
			CLR_BIT(TCCR1A,TCCR1A_WGM10);
    13e2:	8f b5       	in	r24, 0x2f	; 47
    13e4:	8e 7f       	andi	r24, 0xFE	; 254
    13e6:	8f bd       	out	0x2f, r24	; 47
			SET_BIT(TCCR1A,TCCR1A_WGM11);
    13e8:	8f b5       	in	r24, 0x2f	; 47
    13ea:	82 60       	ori	r24, 0x02	; 2
			CLR_BIT(TCCR1B,TCCR1B_WGM12);
			CLR_BIT(TCCR1B,TCCR1B_WGM13);
			break;
		case TIMER1_PWM_PHASE_CORRECT_MODE_8_BIT :
			SET_BIT(TCCR1A,TCCR1A_WGM10);
			CLR_BIT(TCCR1A,TCCR1A_WGM11);
    13ec:	8f bd       	out	0x2f, r24	; 47
			CLR_BIT(TCCR1B,TCCR1B_WGM12);
    13ee:	8e b5       	in	r24, 0x2e	; 46
    13f0:	87 7f       	andi	r24, 0xF7	; 247
    13f2:	8e bd       	out	0x2e, r24	; 46
			CLR_BIT(TCCR1B,TCCR1B_WGM13);
    13f4:	8e b5       	in	r24, 0x2e	; 46
    13f6:	8f 7e       	andi	r24, 0xEF	; 239
    13f8:	8e bd       	out	0x2e, r24	; 46
    13fa:	d9 cf       	rjmp	.-78     	; 0x13ae <MCAL_Timer_Timer1_voidInit+0x4e>
	}
	else {/*Do Nothing*/}

	if((LOC_u8Mode>=TIMER1_NORMAL_MODE) && (LOC_u8Mode<=TIMER1_PWM_FAST_MODE_TOP_OCR1A))
	{
		switch(LOC_u8Mode)
    13fc:	9d 30       	cpi	r25, 0x0D	; 13
    13fe:	c1 f1       	breq	.+112    	; 0x1470 <MCAL_Timer_Timer1_voidInit+0x110>
    1400:	9d 30       	cpi	r25, 0x0D	; 13
    1402:	08 f4       	brcc	.+2      	; 0x1406 <MCAL_Timer_Timer1_voidInit+0xa6>
    1404:	41 c0       	rjmp	.+130    	; 0x1488 <MCAL_Timer_Timer1_voidInit+0x128>
    1406:	9e 30       	cpi	r25, 0x0E	; 14
    1408:	91 f6       	brne	.-92     	; 0x13ae <MCAL_Timer_Timer1_voidInit+0x4e>
			SET_BIT(TCCR1A,TCCR1A_WGM11);
			SET_BIT(TCCR1B,TCCR1B_WGM12);
			SET_BIT(TCCR1B,TCCR1B_WGM13);
			break;
		case TIMER1_PWM_FAST_MODE_TOP_OCR1A :
			SET_BIT(TCCR1A,TCCR1A_WGM10);
    140a:	8f b5       	in	r24, 0x2f	; 47
    140c:	81 60       	ori	r24, 0x01	; 1
    140e:	8f bd       	out	0x2f, r24	; 47
			SET_BIT(TCCR1A,TCCR1A_WGM11);
    1410:	8f b5       	in	r24, 0x2f	; 47
    1412:	82 60       	ori	r24, 0x02	; 2
    1414:	8f bd       	out	0x2f, r24	; 47
			SET_BIT(TCCR1B,TCCR1B_WGM12);
    1416:	8e b5       	in	r24, 0x2e	; 46
    1418:	88 60       	ori	r24, 0x08	; 8
    141a:	8e bd       	out	0x2e, r24	; 46
			SET_BIT(TCCR1B,TCCR1B_WGM13);
    141c:	8e b5       	in	r24, 0x2e	; 46
    141e:	80 61       	ori	r24, 0x10	; 16
    1420:	8e bd       	out	0x2e, r24	; 46
    1422:	c5 cf       	rjmp	.-118    	; 0x13ae <MCAL_Timer_Timer1_voidInit+0x4e>
	}
	else {/*Do Nothing*/}

	if((LOC_u8Mode>=TIMER1_NORMAL_MODE) && (LOC_u8Mode<=TIMER1_PWM_FAST_MODE_TOP_OCR1A))
	{
		switch(LOC_u8Mode)
    1424:	95 30       	cpi	r25, 0x05	; 5
    1426:	f1 f0       	breq	.+60     	; 0x1464 <MCAL_Timer_Timer1_voidInit+0x104>
    1428:	96 30       	cpi	r25, 0x06	; 6
    142a:	40 f1       	brcs	.+80     	; 0x147c <MCAL_Timer_Timer1_voidInit+0x11c>
			CLR_BIT(TCCR1A,TCCR1A_WGM11);
			SET_BIT(TCCR1B,TCCR1B_WGM12);
			CLR_BIT(TCCR1B,TCCR1B_WGM13);
			break;
		case TIMER1_PWM_FAST_MODE_9_BIT :
			CLR_BIT(TCCR1A,TCCR1A_WGM10);
    142c:	8f b5       	in	r24, 0x2f	; 47
    142e:	8e 7f       	andi	r24, 0xFE	; 254
    1430:	02 c0       	rjmp	.+4      	; 0x1436 <MCAL_Timer_Timer1_voidInit+0xd6>
			SET_BIT(TCCR1A,TCCR1A_WGM11);
			SET_BIT(TCCR1B,TCCR1B_WGM12);
			CLR_BIT(TCCR1B,TCCR1B_WGM13);
			break;
		case TIMER1_PWM_FAST_MODE_10_BIT :
			SET_BIT(TCCR1A,TCCR1A_WGM10);
    1432:	8f b5       	in	r24, 0x2f	; 47
    1434:	81 60       	ori	r24, 0x01	; 1
    1436:	8f bd       	out	0x2f, r24	; 47
			SET_BIT(TCCR1A,TCCR1A_WGM11);
    1438:	8f b5       	in	r24, 0x2f	; 47
    143a:	82 60       	ori	r24, 0x02	; 2
    143c:	8f bd       	out	0x2f, r24	; 47
			SET_BIT(TCCR1B,TCCR1B_WGM12);
    143e:	8e b5       	in	r24, 0x2e	; 46
    1440:	88 60       	ori	r24, 0x08	; 8
    1442:	8e bd       	out	0x2e, r24	; 46
			CLR_BIT(TCCR1B,TCCR1B_WGM13);
    1444:	8e b5       	in	r24, 0x2e	; 46
    1446:	8f 7e       	andi	r24, 0xEF	; 239
    1448:	8e bd       	out	0x2e, r24	; 46
    144a:	b1 cf       	rjmp	.-158    	; 0x13ae <MCAL_Timer_Timer1_voidInit+0x4e>
			CLR_BIT(TCCR1A,TCCR1A_WGM11);
			CLR_BIT(TCCR1B,TCCR1B_WGM12);
			SET_BIT(TCCR1B,TCCR1B_WGM13);
			break;
		case TIMER1_PWM_PHASE_FREQUENCY_CORRECT_MODE_TOP_OCR1A :
			SET_BIT(TCCR1A,TCCR1A_WGM10);
    144c:	8f b5       	in	r24, 0x2f	; 47
    144e:	81 60       	ori	r24, 0x01	; 1
    1450:	8f bd       	out	0x2f, r24	; 47
			CLR_BIT(TCCR1A,TCCR1A_WGM11);
    1452:	8f b5       	in	r24, 0x2f	; 47
    1454:	8d 7f       	andi	r24, 0xFD	; 253
    1456:	a4 cf       	rjmp	.-184    	; 0x13a0 <MCAL_Timer_Timer1_voidInit+0x40>
			CLR_BIT(TCCR1A,TCCR1A_WGM11);
			CLR_BIT(TCCR1B,TCCR1B_WGM12);
			CLR_BIT(TCCR1B,TCCR1B_WGM13);
			break;
		case TIMER1_PWM_PHASE_CORRECT_MODE_8_BIT :
			SET_BIT(TCCR1A,TCCR1A_WGM10);
    1458:	8f b5       	in	r24, 0x2f	; 47
    145a:	81 60       	ori	r24, 0x01	; 1
    145c:	8f bd       	out	0x2f, r24	; 47
			CLR_BIT(TCCR1A,TCCR1A_WGM11);
    145e:	8f b5       	in	r24, 0x2f	; 47
    1460:	8d 7f       	andi	r24, 0xFD	; 253
    1462:	c4 cf       	rjmp	.-120    	; 0x13ec <MCAL_Timer_Timer1_voidInit+0x8c>
			SET_BIT(TCCR1B,TCCR1B_WGM12);
			CLR_BIT(TCCR1B,TCCR1B_WGM13);
			break;

		case TIMER1_PWM_FAST_MODE_8_BIT :
			SET_BIT(TCCR1A,TCCR1A_WGM10);
    1464:	8f b5       	in	r24, 0x2f	; 47
    1466:	81 60       	ori	r24, 0x01	; 1
    1468:	8f bd       	out	0x2f, r24	; 47
			CLR_BIT(TCCR1A,TCCR1A_WGM11);
    146a:	8f b5       	in	r24, 0x2f	; 47
    146c:	8d 7f       	andi	r24, 0xFD	; 253
    146e:	e6 cf       	rjmp	.-52     	; 0x143c <MCAL_Timer_Timer1_voidInit+0xdc>
			CLR_BIT(TCCR1A,TCCR1A_WGM11);
			SET_BIT(TCCR1B,TCCR1B_WGM12);
			SET_BIT(TCCR1B,TCCR1B_WGM13);
			break;
		case TIMER1_PWM_FAST_MODE_TOP_ICR1 :
			CLR_BIT(TCCR1A,TCCR1A_WGM10);
    1470:	8f b5       	in	r24, 0x2f	; 47
    1472:	8e 7f       	andi	r24, 0xFE	; 254
    1474:	cc cf       	rjmp	.-104    	; 0x140e <MCAL_Timer_Timer1_voidInit+0xae>
	if((LOC_u8Mode>=TIMER1_NORMAL_MODE) && (LOC_u8Mode<=TIMER1_PWM_FAST_MODE_TOP_OCR1A))
	{
		switch(LOC_u8Mode)
		{
		case TIMER1_NORMAL_MODE :
			CLR_BIT(TCCR1A,TCCR1A_WGM10);
    1476:	8f b5       	in	r24, 0x2f	; 47
    1478:	8e 7f       	andi	r24, 0xFE	; 254
    147a:	f0 cf       	rjmp	.-32     	; 0x145c <MCAL_Timer_Timer1_voidInit+0xfc>
			SET_BIT(TCCR1A,TCCR1A_WGM11);
			CLR_BIT(TCCR1B,TCCR1B_WGM12);
			CLR_BIT(TCCR1B,TCCR1B_WGM13);
			break;
		case TIMER1_CTC_MODE_TOP_OCR1A :
			CLR_BIT(TCCR1A,TCCR1A_WGM10);
    147c:	8f b5       	in	r24, 0x2f	; 47
    147e:	8e 7f       	andi	r24, 0xFE	; 254
    1480:	8f bd       	out	0x2f, r24	; 47
			CLR_BIT(TCCR1A,TCCR1A_WGM11);
    1482:	8f b5       	in	r24, 0x2f	; 47
    1484:	8d 7f       	andi	r24, 0xFD	; 253
    1486:	da cf       	rjmp	.-76     	; 0x143c <MCAL_Timer_Timer1_voidInit+0xdc>
			SET_BIT(TCCR1A,TCCR1A_WGM11);
			CLR_BIT(TCCR1B,TCCR1B_WGM12);
			SET_BIT(TCCR1B,TCCR1B_WGM13);
			break;
		case TIMER1_CTC_MODE_TOP_ICR1 :
			CLR_BIT(TCCR1A,TCCR1A_WGM10);
    1488:	8f b5       	in	r24, 0x2f	; 47
    148a:	8e 7f       	andi	r24, 0xFE	; 254
    148c:	8f bd       	out	0x2f, r24	; 47
			CLR_BIT(TCCR1A,TCCR1A_WGM11);
    148e:	8f b5       	in	r24, 0x2f	; 47
    1490:	8d 7f       	andi	r24, 0xFD	; 253
    1492:	c0 cf       	rjmp	.-128    	; 0x1414 <MCAL_Timer_Timer1_voidInit+0xb4>
			SET_BIT(TCCR1A,TCCR1A_WGM11);
			SET_BIT(TCCR1B,TCCR1B_WGM12);
			CLR_BIT(TCCR1B,TCCR1B_WGM13);
			break;
		case TIMER1_PWM_PHASE_FREQUENCY_CORRECT_MODE_TOP_ICR1 :
			CLR_BIT(TCCR1A,TCCR1A_WGM10);
    1494:	8f b5       	in	r24, 0x2f	; 47
    1496:	8e 7f       	andi	r24, 0xFE	; 254
    1498:	8f bd       	out	0x2f, r24	; 47
			CLR_BIT(TCCR1A,TCCR1A_WGM11);
    149a:	8f b5       	in	r24, 0x2f	; 47
    149c:	8d 7f       	andi	r24, 0xFD	; 253
    149e:	80 cf       	rjmp	.-256    	; 0x13a0 <MCAL_Timer_Timer1_voidInit+0x40>
			SET_BIT(TCCR1A,TCCR1A_WGM11);
			CLR_BIT(TCCR1B,TCCR1B_WGM12);
			CLR_BIT(TCCR1B,TCCR1B_WGM13);
			break;
		case TIMER1_PWM_PHASE_CORRECT_MODE_10_BIT :
			SET_BIT(TCCR1A,TCCR1A_WGM10);
    14a0:	8f b5       	in	r24, 0x2f	; 47
    14a2:	81 60       	ori	r24, 0x01	; 1
    14a4:	8f bd       	out	0x2f, r24	; 47
			SET_BIT(TCCR1A,TCCR1A_WGM11);
    14a6:	8f b5       	in	r24, 0x2f	; 47
    14a8:	82 60       	ori	r24, 0x02	; 2
    14aa:	a0 cf       	rjmp	.-192    	; 0x13ec <MCAL_Timer_Timer1_voidInit+0x8c>
			SET_BIT(TCCR1A,TCCR1A_WGM11);
			CLR_BIT(TCCR1B,TCCR1B_WGM12);
			SET_BIT(TCCR1B,TCCR1B_WGM13);
			break;
		case TIMER1_PWM_PHASE_CORRECT_MODE_TOP_OCR1A :
			SET_BIT(TCCR1A,TCCR1A_WGM10);
    14ac:	8f b5       	in	r24, 0x2f	; 47
    14ae:	81 60       	ori	r24, 0x01	; 1
    14b0:	74 cf       	rjmp	.-280    	; 0x139a <MCAL_Timer_Timer1_voidInit+0x3a>

000014b2 <MCAL_Timer_Timer1_voidSetPreloadValue>:
}


void MCAL_Timer_Timer1_voidSetPreloadValue(u16 LOC_u16PreValue)
{
	TCNT1 = LOC_u16PreValue;
    14b2:	9d bd       	out	0x2d, r25	; 45
    14b4:	8c bd       	out	0x2c, r24	; 44
}
    14b6:	08 95       	ret

000014b8 <MCAL_Timer_Timer1_u16GetCounterValue>:


u16	 MCAL_Timer_Timer1_u16GetCounterValue(void)
{
	return TCNT1;
    14b8:	2c b5       	in	r18, 0x2c	; 44
    14ba:	3d b5       	in	r19, 0x2d	; 45
}
    14bc:	c9 01       	movw	r24, r18
    14be:	08 95       	ret

000014c0 <MCAL_Timer_Timer1_voidSetOCR1AValue>:


void MCAL_Timer_Timer1_voidSetOCR1AValue(u16 LOC_u16OCR1AValue)
{
	OCR1A = LOC_u16OCR1AValue;
    14c0:	9b bd       	out	0x2b, r25	; 43
    14c2:	8a bd       	out	0x2a, r24	; 42
}
    14c4:	08 95       	ret

000014c6 <MCAL_Timer_Timer1_voidSetOCR1BValue>:


void MCAL_Timer_Timer1_voidSetOCR1BValue(u16 LOC_u16OCR1BValue)
{
	OCR1B = LOC_u16OCR1BValue;
    14c6:	99 bd       	out	0x29, r25	; 41
    14c8:	88 bd       	out	0x28, r24	; 40
}
    14ca:	08 95       	ret

000014cc <MCAL_Timer_Timer1_voidSetICR1Value>:


void MCAL_Timer_Timer1_voidSetICR1Value(u16 LOC_u16ICR1Value)
{
	ICR1 = LOC_u16ICR1Value;
    14cc:	97 bd       	out	0x27, r25	; 39
    14ce:	86 bd       	out	0x26, r24	; 38
}
    14d0:	08 95       	ret

000014d2 <MCAL_Timer_Timer1_voidOverflowSetCallBack>:


void MCAL_Timer_Timer1_voidOverflowSetCallBack(void (*NotifiFunction)(void))
{
	if (NotifiFunction != NULL)
    14d2:	00 97       	sbiw	r24, 0x00	; 0
    14d4:	21 f0       	breq	.+8      	; 0x14de <MCAL_Timer_Timer1_voidOverflowSetCallBack+0xc>
	{
		GLOB_PTimer1OVF_CallBack = NotifiFunction;
    14d6:	90 93 25 07 	sts	0x0725, r25
    14da:	80 93 24 07 	sts	0x0724, r24
    14de:	08 95       	ret

000014e0 <MCAL_Timer_Timer1_voidCompareMatch1ASetCallBack>:

}

void MCAL_Timer_Timer1_voidCompareMatch1ASetCallBack(void (*NotifiFunction)(void))
{
	if (NotifiFunction != NULL)
    14e0:	00 97       	sbiw	r24, 0x00	; 0
    14e2:	21 f0       	breq	.+8      	; 0x14ec <MCAL_Timer_Timer1_voidCompareMatch1ASetCallBack+0xc>
	{
		GLOB_PTimer1COMPA_CallBack = NotifiFunction;
    14e4:	90 93 23 07 	sts	0x0723, r25
    14e8:	80 93 22 07 	sts	0x0722, r24
    14ec:	08 95       	ret

000014ee <MCAL_Timer_Timer1_voidCompareMatch1BSetCallBack>:

}

void MCAL_Timer_Timer1_voidCompareMatch1BSetCallBack(void (*NotifiFunction)(void))
{
	if (NotifiFunction != NULL)
    14ee:	00 97       	sbiw	r24, 0x00	; 0
    14f0:	21 f0       	breq	.+8      	; 0x14fa <MCAL_Timer_Timer1_voidCompareMatch1BSetCallBack+0xc>
	{
		GLOB_PTimer1COMPB_CallBack = NotifiFunction;
    14f2:	90 93 21 07 	sts	0x0721, r25
    14f6:	80 93 20 07 	sts	0x0720, r24
    14fa:	08 95       	ret

000014fc <MCAL_Timer_Timer1_voidOverflowInterruptEnable>:

}

void MCAL_Timer_Timer1_voidOverflowInterruptEnable(void)
{
	SET_BIT(TIMSK,TIMSK_TOIE1);
    14fc:	89 b7       	in	r24, 0x39	; 57
    14fe:	84 60       	ori	r24, 0x04	; 4
    1500:	89 bf       	out	0x39, r24	; 57
}
    1502:	08 95       	ret

00001504 <MCAL_Timer_Timer1_voidOverflowInterruptDisable>:

void MCAL_Timer_Timer1_voidOverflowInterruptDisable(void)
{
	CLR_BIT(TIMSK,TIMSK_TOIE1);
    1504:	89 b7       	in	r24, 0x39	; 57
    1506:	8b 7f       	andi	r24, 0xFB	; 251
    1508:	89 bf       	out	0x39, r24	; 57
}
    150a:	08 95       	ret

0000150c <MCAL_Timer_Timer1_voidCompareMatch1AInterruptEnable>:

void MCAL_Timer_Timer1_voidCompareMatch1AInterruptEnable(void)
{
	SET_BIT(TIMSK,TIMSK_OCIE1A);
    150c:	89 b7       	in	r24, 0x39	; 57
    150e:	80 61       	ori	r24, 0x10	; 16
    1510:	89 bf       	out	0x39, r24	; 57

}
    1512:	08 95       	ret

00001514 <MCAL_Timer_Timer1_voidCompareMatch1AInterruptDisable>:

void MCAL_Timer_Timer1_voidCompareMatch1AInterruptDisable(void)
{
	CLR_BIT(TIMSK,TIMSK_OCIE1A);
    1514:	89 b7       	in	r24, 0x39	; 57
    1516:	8f 7e       	andi	r24, 0xEF	; 239
    1518:	89 bf       	out	0x39, r24	; 57
}
    151a:	08 95       	ret

0000151c <MCAL_Timer_Timer1_voidCompareMatch1BInterruptEnable>:

void MCAL_Timer_Timer1_voidCompareMatch1BInterruptEnable(void)
{
	SET_BIT(TIMSK,TIMSK_OCIE1B);
    151c:	89 b7       	in	r24, 0x39	; 57
    151e:	88 60       	ori	r24, 0x08	; 8
    1520:	89 bf       	out	0x39, r24	; 57
}
    1522:	08 95       	ret

00001524 <MCAL_Timer_Timer1_voidCompareMatch1BInterruptDisable>:

void MCAL_Timer_Timer1_voidCompareMatch1BInterruptDisable(void)
{
	CLR_BIT(TIMSK,TIMSK_OCIE1B);
    1524:	89 b7       	in	r24, 0x39	; 57
    1526:	87 7f       	andi	r24, 0xF7	; 247
    1528:	89 bf       	out	0x39, r24	; 57
}
    152a:	08 95       	ret

0000152c <MCAL_Timer_Timer1_voidICUGetICR1Value>:

u16	 MCAL_Timer_Timer1_voidICUGetICR1Value(void)
{
	return ICR1;
    152c:	26 b5       	in	r18, 0x26	; 38
    152e:	37 b5       	in	r19, 0x27	; 39
}
    1530:	c9 01       	movw	r24, r18
    1532:	08 95       	ret

00001534 <MCAL_Timer_Timer1_voidICUSetTriggerEdge>:
void MCAL_Timer_Timer1_voidICUSetTriggerEdge(u8 LOC_u8TriggerEdge)
{
//ICES1
	if(LOC_u8TriggerEdge == RISING_EDGE)
    1534:	81 30       	cpi	r24, 0x01	; 1
    1536:	31 f0       	breq	.+12     	; 0x1544 <MCAL_Timer_Timer1_voidICUSetTriggerEdge+0x10>
	{
		SET_BIT(TCCR1B,TCCR1B_ICES1);
	}
	else if(LOC_u8TriggerEdge == FALLING_EDGE)
    1538:	88 23       	and	r24, r24
    153a:	19 f4       	brne	.+6      	; 0x1542 <MCAL_Timer_Timer1_voidICUSetTriggerEdge+0xe>
	{
		CLR_BIT(TCCR1B,TCCR1B_ICES1);
    153c:	8e b5       	in	r24, 0x2e	; 46
    153e:	8f 7b       	andi	r24, 0xBF	; 191
    1540:	8e bd       	out	0x2e, r24	; 46
    1542:	08 95       	ret
void MCAL_Timer_Timer1_voidICUSetTriggerEdge(u8 LOC_u8TriggerEdge)
{
//ICES1
	if(LOC_u8TriggerEdge == RISING_EDGE)
	{
		SET_BIT(TCCR1B,TCCR1B_ICES1);
    1544:	8e b5       	in	r24, 0x2e	; 46
    1546:	80 64       	ori	r24, 0x40	; 64
    1548:	8e bd       	out	0x2e, r24	; 46
    154a:	08 95       	ret

0000154c <MCAL_Timer_Timer1_voidICUInterruptEnable>:
	}
	else {/*Do Nothing.*/}
}
void MCAL_Timer_Timer1_voidICUInterruptEnable(void)
{
		SET_BIT(TIMSK,TIMSK_TICIE1);
    154c:	89 b7       	in	r24, 0x39	; 57
    154e:	80 62       	ori	r24, 0x20	; 32
    1550:	89 bf       	out	0x39, r24	; 57
}
    1552:	08 95       	ret

00001554 <MCAL_Timer_Timer1_voidICUInterruptDisable>:
void MCAL_Timer_Timer1_voidICUInterruptDisable(void)
{
		CLR_BIT(TIMSK,TIMSK_TICIE1);
    1554:	89 b7       	in	r24, 0x39	; 57
    1556:	8f 7d       	andi	r24, 0xDF	; 223
    1558:	89 bf       	out	0x39, r24	; 57
}
    155a:	08 95       	ret

0000155c <__vector_9>:




ISR(TIMER1_OVF_vect)
{
    155c:	1f 92       	push	r1
    155e:	0f 92       	push	r0
    1560:	0f b6       	in	r0, 0x3f	; 63
    1562:	0f 92       	push	r0
    1564:	11 24       	eor	r1, r1
    1566:	2f 93       	push	r18
    1568:	3f 93       	push	r19
    156a:	4f 93       	push	r20
    156c:	5f 93       	push	r21
    156e:	6f 93       	push	r22
    1570:	7f 93       	push	r23
    1572:	8f 93       	push	r24
    1574:	9f 93       	push	r25
    1576:	af 93       	push	r26
    1578:	bf 93       	push	r27
    157a:	ef 93       	push	r30
    157c:	ff 93       	push	r31
	if (GLOB_PTimer1OVF_CallBack != NULL)
    157e:	e0 91 24 07 	lds	r30, 0x0724
    1582:	f0 91 25 07 	lds	r31, 0x0725
    1586:	30 97       	sbiw	r30, 0x00	; 0
    1588:	09 f0       	breq	.+2      	; 0x158c <__vector_9+0x30>
	{
		GLOB_PTimer1OVF_CallBack();
    158a:	09 95       	icall
	}

}
    158c:	ff 91       	pop	r31
    158e:	ef 91       	pop	r30
    1590:	bf 91       	pop	r27
    1592:	af 91       	pop	r26
    1594:	9f 91       	pop	r25
    1596:	8f 91       	pop	r24
    1598:	7f 91       	pop	r23
    159a:	6f 91       	pop	r22
    159c:	5f 91       	pop	r21
    159e:	4f 91       	pop	r20
    15a0:	3f 91       	pop	r19
    15a2:	2f 91       	pop	r18
    15a4:	0f 90       	pop	r0
    15a6:	0f be       	out	0x3f, r0	; 63
    15a8:	0f 90       	pop	r0
    15aa:	1f 90       	pop	r1
    15ac:	18 95       	reti

000015ae <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
    15ae:	1f 92       	push	r1
    15b0:	0f 92       	push	r0
    15b2:	0f b6       	in	r0, 0x3f	; 63
    15b4:	0f 92       	push	r0
    15b6:	11 24       	eor	r1, r1
    15b8:	2f 93       	push	r18
    15ba:	3f 93       	push	r19
    15bc:	4f 93       	push	r20
    15be:	5f 93       	push	r21
    15c0:	6f 93       	push	r22
    15c2:	7f 93       	push	r23
    15c4:	8f 93       	push	r24
    15c6:	9f 93       	push	r25
    15c8:	af 93       	push	r26
    15ca:	bf 93       	push	r27
    15cc:	ef 93       	push	r30
    15ce:	ff 93       	push	r31
	if (GLOB_PTimer1COMPA_CallBack != NULL)
    15d0:	e0 91 22 07 	lds	r30, 0x0722
    15d4:	f0 91 23 07 	lds	r31, 0x0723
    15d8:	30 97       	sbiw	r30, 0x00	; 0
    15da:	09 f0       	breq	.+2      	; 0x15de <__vector_7+0x30>
	{
		GLOB_PTimer1COMPA_CallBack();
    15dc:	09 95       	icall
	}

}
    15de:	ff 91       	pop	r31
    15e0:	ef 91       	pop	r30
    15e2:	bf 91       	pop	r27
    15e4:	af 91       	pop	r26
    15e6:	9f 91       	pop	r25
    15e8:	8f 91       	pop	r24
    15ea:	7f 91       	pop	r23
    15ec:	6f 91       	pop	r22
    15ee:	5f 91       	pop	r21
    15f0:	4f 91       	pop	r20
    15f2:	3f 91       	pop	r19
    15f4:	2f 91       	pop	r18
    15f6:	0f 90       	pop	r0
    15f8:	0f be       	out	0x3f, r0	; 63
    15fa:	0f 90       	pop	r0
    15fc:	1f 90       	pop	r1
    15fe:	18 95       	reti

00001600 <__vector_8>:

ISR(TIMER1_COMPB_vect)
{
    1600:	1f 92       	push	r1
    1602:	0f 92       	push	r0
    1604:	0f b6       	in	r0, 0x3f	; 63
    1606:	0f 92       	push	r0
    1608:	11 24       	eor	r1, r1
    160a:	2f 93       	push	r18
    160c:	3f 93       	push	r19
    160e:	4f 93       	push	r20
    1610:	5f 93       	push	r21
    1612:	6f 93       	push	r22
    1614:	7f 93       	push	r23
    1616:	8f 93       	push	r24
    1618:	9f 93       	push	r25
    161a:	af 93       	push	r26
    161c:	bf 93       	push	r27
    161e:	ef 93       	push	r30
    1620:	ff 93       	push	r31
	if (GLOB_PTimer1COMPB_CallBack != NULL)
    1622:	e0 91 20 07 	lds	r30, 0x0720
    1626:	f0 91 21 07 	lds	r31, 0x0721
    162a:	30 97       	sbiw	r30, 0x00	; 0
    162c:	09 f0       	breq	.+2      	; 0x1630 <__vector_8+0x30>
	{
		GLOB_PTimer1COMPB_CallBack();
    162e:	09 95       	icall
	}

}
    1630:	ff 91       	pop	r31
    1632:	ef 91       	pop	r30
    1634:	bf 91       	pop	r27
    1636:	af 91       	pop	r26
    1638:	9f 91       	pop	r25
    163a:	8f 91       	pop	r24
    163c:	7f 91       	pop	r23
    163e:	6f 91       	pop	r22
    1640:	5f 91       	pop	r21
    1642:	4f 91       	pop	r20
    1644:	3f 91       	pop	r19
    1646:	2f 91       	pop	r18
    1648:	0f 90       	pop	r0
    164a:	0f be       	out	0x3f, r0	; 63
    164c:	0f 90       	pop	r0
    164e:	1f 90       	pop	r1
    1650:	18 95       	reti

00001652 <__vector_6>:

ISR(TIMER1_CAPT_vect)
{
    1652:	1f 92       	push	r1
    1654:	0f 92       	push	r0
    1656:	0f b6       	in	r0, 0x3f	; 63
    1658:	0f 92       	push	r0
    165a:	11 24       	eor	r1, r1
	if (GLOB_PTimer1CAPT_CallBack != NULL)
	{
		GLOB_PTimer1CAPT_CallBack();
	}

}
    165c:	0f 90       	pop	r0
    165e:	0f be       	out	0x3f, r0	; 63
    1660:	0f 90       	pop	r0
    1662:	1f 90       	pop	r1
    1664:	18 95       	reti

00001666 <MCAL_SPI_MASTER_SLAVE_u8_SpiSetMasterSlave>:


STD_TYPE MCAL_SPI_MASTER_SLAVE_u8_SpiSetMasterSlave(u8 Loc_u8_SelectMasterSlave)
{
	u8 Loc_u8_Retval = E_NOT_OK;
	if(Loc_u8_SelectMasterSlave == SPI_SLAVE)
    1666:	88 23       	and	r24, r24
    1668:	21 f0       	breq	.+8      	; 0x1672 <MCAL_SPI_MASTER_SLAVE_u8_SpiSetMasterSlave+0xc>
	{
		CLR_BIT(SPCR,MSTR);
		Loc_u8_Retval = EOK;
	}
	else if(Loc_u8_SelectMasterSlave == SPI_MASTER)
    166a:	81 30       	cpi	r24, 0x01	; 1
    166c:	21 f0       	breq	.+8      	; 0x1676 <MCAL_SPI_MASTER_SLAVE_u8_SpiSetMasterSlave+0x10>
    166e:	81 e0       	ldi	r24, 0x01	; 1
    1670:	08 95       	ret
STD_TYPE MCAL_SPI_MASTER_SLAVE_u8_SpiSetMasterSlave(u8 Loc_u8_SelectMasterSlave)
{
	u8 Loc_u8_Retval = E_NOT_OK;
	if(Loc_u8_SelectMasterSlave == SPI_SLAVE)
	{
		CLR_BIT(SPCR,MSTR);
    1672:	6c 98       	cbi	0x0d, 4	; 13
    1674:	08 95       	ret
		Loc_u8_Retval = EOK;
	}
	else if(Loc_u8_SelectMasterSlave == SPI_MASTER)
	{
		SET_BIT(SPCR,MSTR);
    1676:	6c 9a       	sbi	0x0d, 4	; 13
    1678:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		//Do Nothing
	}
	return Loc_u8_Retval;
}
    167a:	08 95       	ret

0000167c <MCAL_SPI_MASTER_SLAVE_void_SpiEnableInterrupt>:

void MCAL_SPI_MASTER_SLAVE_void_SpiEnableInterrupt(void)
{
	SET_BIT(SPCR,SPIE);
    167c:	6f 9a       	sbi	0x0d, 7	; 13
}
    167e:	08 95       	ret

00001680 <MCAL_SPI_MASTER_SLAVE_void_SpiEnable>:

void MCAL_SPI_MASTER_SLAVE_void_SpiEnable(void)
{
	SET_BIT(SPCR,SPE);
    1680:	6e 9a       	sbi	0x0d, 6	; 13
}
    1682:	08 95       	ret

00001684 <MCAL_SPI_MASTER_SLAVE_u8_SpiSetMsbLsb>:

STD_TYPE MCAL_SPI_MASTER_SLAVE_u8_SpiSetMsbLsb(u8 Loc_u8_SelectMsbLsb)
{
	u8 Loc_u8_Retval = E_NOT_OK;
	if(Loc_u8_SelectMsbLsb == SPI_MSB)
    1684:	82 30       	cpi	r24, 0x02	; 2
    1686:	39 f0       	breq	.+14     	; 0x1696 <MCAL_SPI_MASTER_SLAVE_u8_SpiSetMsbLsb+0x12>
	{
		CLR_BIT(SPCR,DORD);
		Loc_u8_Retval = EOK;
	}
	else if(Loc_u8_SelectMsbLsb == SPI_LSB)
    1688:	83 30       	cpi	r24, 0x03	; 3
    168a:	11 f0       	breq	.+4      	; 0x1690 <MCAL_SPI_MASTER_SLAVE_u8_SpiSetMsbLsb+0xc>
    168c:	81 e0       	ldi	r24, 0x01	; 1
    168e:	08 95       	ret
	{
		SET_BIT(SPCR,DORD);
    1690:	6d 9a       	sbi	0x0d, 5	; 13
    1692:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		//Do Nothing
	}
	return Loc_u8_Retval;
}
    1694:	08 95       	ret
STD_TYPE MCAL_SPI_MASTER_SLAVE_u8_SpiSetMsbLsb(u8 Loc_u8_SelectMsbLsb)
{
	u8 Loc_u8_Retval = E_NOT_OK;
	if(Loc_u8_SelectMsbLsb == SPI_MSB)
	{
		CLR_BIT(SPCR,DORD);
    1696:	6d 98       	cbi	0x0d, 5	; 13
    1698:	80 e0       	ldi	r24, 0x00	; 0
    169a:	08 95       	ret

0000169c <MCAL_SPI_MASTER_SLAVE_u8_SpiSetEdge>:
}

STD_TYPE MCAL_SPI_MASTER_SLAVE_u8_SpiSetEdge(u8 Loc_u8_SelectEdge)
{
	u8 Loc_u8_Retval = E_NOT_OK;
	if(Loc_u8_SelectEdge == SPI_RISING_EDGE)
    169c:	84 30       	cpi	r24, 0x04	; 4
    169e:	39 f0       	breq	.+14     	; 0x16ae <MCAL_SPI_MASTER_SLAVE_u8_SpiSetEdge+0x12>
	{
		CLR_BIT(SPCR,CPOL);
		Loc_u8_Retval = EOK;
	}
	else if(Loc_u8_SelectEdge == SPI_FALLING_EDGE)
    16a0:	85 30       	cpi	r24, 0x05	; 5
    16a2:	11 f0       	breq	.+4      	; 0x16a8 <MCAL_SPI_MASTER_SLAVE_u8_SpiSetEdge+0xc>
    16a4:	81 e0       	ldi	r24, 0x01	; 1
    16a6:	08 95       	ret
	{
		SET_BIT(SPCR,CPOL);
    16a8:	6b 9a       	sbi	0x0d, 3	; 13
    16aa:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		//Do Nothing
	}
	return Loc_u8_Retval;
}
    16ac:	08 95       	ret
STD_TYPE MCAL_SPI_MASTER_SLAVE_u8_SpiSetEdge(u8 Loc_u8_SelectEdge)
{
	u8 Loc_u8_Retval = E_NOT_OK;
	if(Loc_u8_SelectEdge == SPI_RISING_EDGE)
	{
		CLR_BIT(SPCR,CPOL);
    16ae:	6b 98       	cbi	0x0d, 3	; 13
    16b0:	80 e0       	ldi	r24, 0x00	; 0
    16b2:	08 95       	ret

000016b4 <MCAL_SPI_MASTER_SLAVE_u8_SpiSetLeadingEdge>:
}

STD_TYPE MCAL_SPI_MASTER_SLAVE_u8_SpiSetLeadingEdge(u8 Loc_u8_SelectLeadingEdge)
{
	u8 Loc_u8_Retval = E_NOT_OK;
	if(Loc_u8_SelectLeadingEdge == SPI_SAMPLE_LEADING)
    16b4:	86 30       	cpi	r24, 0x06	; 6
    16b6:	39 f0       	breq	.+14     	; 0x16c6 <MCAL_SPI_MASTER_SLAVE_u8_SpiSetLeadingEdge+0x12>
	{
		CLR_BIT(SPCR,CPHA);
		Loc_u8_Retval = EOK;
	}
	else if(Loc_u8_SelectLeadingEdge == SPI_SETUP_LEADING)
    16b8:	87 30       	cpi	r24, 0x07	; 7
    16ba:	11 f0       	breq	.+4      	; 0x16c0 <MCAL_SPI_MASTER_SLAVE_u8_SpiSetLeadingEdge+0xc>
    16bc:	81 e0       	ldi	r24, 0x01	; 1
    16be:	08 95       	ret
	{
		SET_BIT(SPCR,CPHA);
    16c0:	6a 9a       	sbi	0x0d, 2	; 13
    16c2:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		//Do Nothing
	}
	return Loc_u8_Retval;
}
    16c4:	08 95       	ret
STD_TYPE MCAL_SPI_MASTER_SLAVE_u8_SpiSetLeadingEdge(u8 Loc_u8_SelectLeadingEdge)
{
	u8 Loc_u8_Retval = E_NOT_OK;
	if(Loc_u8_SelectLeadingEdge == SPI_SAMPLE_LEADING)
	{
		CLR_BIT(SPCR,CPHA);
    16c6:	6a 98       	cbi	0x0d, 2	; 13
    16c8:	80 e0       	ldi	r24, 0x00	; 0
    16ca:	08 95       	ret

000016cc <MCAL_SPI_MASTER_SLAVE_u8_SpiSetPrescaler>:
}

STD_TYPE MCAL_SPI_MASTER_SLAVE_u8_SpiSetPrescaler(u8 Loc_u8_SelectPrescaler)
{
	u8 Loc_u8_Retval = E_NOT_OK;
	if(Loc_u8_SelectPrescaler == SPI_PRESCALER_4)
    16cc:	88 23       	and	r24, r24
    16ce:	81 f0       	breq	.+32     	; 0x16f0 <MCAL_SPI_MASTER_SLAVE_u8_SpiSetPrescaler+0x24>
		CLR_BIT(SPCR,SPR0);
		CLR_BIT(SPCR,SPR1);
		CLR_BIT(SPSR,SPI2X);
		Loc_u8_Retval = EOK;
	}
	else if(Loc_u8_SelectPrescaler == SPI_PRESCALER_16)
    16d0:	81 30       	cpi	r24, 0x01	; 1
    16d2:	91 f0       	breq	.+36     	; 0x16f8 <MCAL_SPI_MASTER_SLAVE_u8_SpiSetPrescaler+0x2c>
		SET_BIT(SPCR,SPR0);
		CLR_BIT(SPCR,SPR1);
		CLR_BIT(SPSR,SPI2X);
		Loc_u8_Retval = EOK;
	}
	else if(Loc_u8_SelectPrescaler == SPI_PRESCALER_64)
    16d4:	82 30       	cpi	r24, 0x02	; 2
    16d6:	d1 f0       	breq	.+52     	; 0x170c <MCAL_SPI_MASTER_SLAVE_u8_SpiSetPrescaler+0x40>
		CLR_BIT(SPCR,SPR0);
		SET_BIT(SPCR,SPR1);
		CLR_BIT(SPSR,SPI2X);
		Loc_u8_Retval = EOK;
	}
	else if(Loc_u8_SelectPrescaler == SPI_PRESCALER_128)
    16d8:	83 30       	cpi	r24, 0x03	; 3
    16da:	e9 f0       	breq	.+58     	; 0x1716 <MCAL_SPI_MASTER_SLAVE_u8_SpiSetPrescaler+0x4a>
		SET_BIT(SPCR,SPR0);
		SET_BIT(SPCR,SPR1);
		CLR_BIT(SPSR,SPI2X);
		Loc_u8_Retval = EOK;
	}
	else if(Loc_u8_SelectPrescaler == SPI_PRESCALER_SPI2X_2)
    16dc:	84 30       	cpi	r24, 0x04	; 4
    16de:	89 f0       	breq	.+34     	; 0x1702 <MCAL_SPI_MASTER_SLAVE_u8_SpiSetPrescaler+0x36>
		CLR_BIT(SPCR,SPR0);
		CLR_BIT(SPCR,SPR1);
		SET_BIT(SPSR,SPI2X);
		Loc_u8_Retval = EOK;
	}
	else if(Loc_u8_SelectPrescaler == SPI_PRESCALER_SPI2X_8)
    16e0:	85 30       	cpi	r24, 0x05	; 5
    16e2:	f1 f0       	breq	.+60     	; 0x1720 <MCAL_SPI_MASTER_SLAVE_u8_SpiSetPrescaler+0x54>
		SET_BIT(SPCR,SPR0);
		CLR_BIT(SPCR,SPR1);
		SET_BIT(SPSR,SPI2X);
		Loc_u8_Retval = EOK;
	}
	else if(Loc_u8_SelectPrescaler == SPI_PRESCALER_SPI2X_32)
    16e4:	86 30       	cpi	r24, 0x06	; 6
    16e6:	09 f1       	breq	.+66     	; 0x172a <MCAL_SPI_MASTER_SLAVE_u8_SpiSetPrescaler+0x5e>
		CLR_BIT(SPCR,SPR0);
		SET_BIT(SPCR,SPR1);
		SET_BIT(SPSR,SPI2X);
		Loc_u8_Retval = EOK;
	}
	else if(Loc_u8_SelectPrescaler == SPI_PRESCALER_SPI2X_64)
    16e8:	87 30       	cpi	r24, 0x07	; 7
    16ea:	21 f1       	breq	.+72     	; 0x1734 <MCAL_SPI_MASTER_SLAVE_u8_SpiSetPrescaler+0x68>
    16ec:	81 e0       	ldi	r24, 0x01	; 1
    16ee:	08 95       	ret
STD_TYPE MCAL_SPI_MASTER_SLAVE_u8_SpiSetPrescaler(u8 Loc_u8_SelectPrescaler)
{
	u8 Loc_u8_Retval = E_NOT_OK;
	if(Loc_u8_SelectPrescaler == SPI_PRESCALER_4)
	{
		CLR_BIT(SPCR,SPR0);
    16f0:	68 98       	cbi	0x0d, 0	; 13
		CLR_BIT(SPCR,SPR1);
    16f2:	69 98       	cbi	0x0d, 1	; 13
		CLR_BIT(SPSR,SPI2X);
    16f4:	70 98       	cbi	0x0e, 0	; 14
    16f6:	08 95       	ret
		Loc_u8_Retval = EOK;
	}
	else if(Loc_u8_SelectPrescaler == SPI_PRESCALER_16)
	{
		SET_BIT(SPCR,SPR0);
    16f8:	68 9a       	sbi	0x0d, 0	; 13
		CLR_BIT(SPCR,SPR1);
    16fa:	69 98       	cbi	0x0d, 1	; 13
		CLR_BIT(SPSR,SPI2X);
    16fc:	70 98       	cbi	0x0e, 0	; 14
    16fe:	80 e0       	ldi	r24, 0x00	; 0
    1700:	08 95       	ret
		CLR_BIT(SPSR,SPI2X);
		Loc_u8_Retval = EOK;
	}
	else if(Loc_u8_SelectPrescaler == SPI_PRESCALER_SPI2X_2)
	{
		CLR_BIT(SPCR,SPR0);
    1702:	68 98       	cbi	0x0d, 0	; 13
		CLR_BIT(SPCR,SPR1);
    1704:	69 98       	cbi	0x0d, 1	; 13
		SET_BIT(SPSR,SPI2X);
    1706:	70 9a       	sbi	0x0e, 0	; 14
    1708:	80 e0       	ldi	r24, 0x00	; 0
    170a:	08 95       	ret
		CLR_BIT(SPSR,SPI2X);
		Loc_u8_Retval = EOK;
	}
	else if(Loc_u8_SelectPrescaler == SPI_PRESCALER_64)
	{
		CLR_BIT(SPCR,SPR0);
    170c:	68 98       	cbi	0x0d, 0	; 13
		SET_BIT(SPCR,SPR1);
    170e:	69 9a       	sbi	0x0d, 1	; 13
		CLR_BIT(SPSR,SPI2X);
    1710:	70 98       	cbi	0x0e, 0	; 14
    1712:	80 e0       	ldi	r24, 0x00	; 0
    1714:	08 95       	ret
		Loc_u8_Retval = EOK;
	}
	else if(Loc_u8_SelectPrescaler == SPI_PRESCALER_128)
	{
		SET_BIT(SPCR,SPR0);
    1716:	68 9a       	sbi	0x0d, 0	; 13
		SET_BIT(SPCR,SPR1);
    1718:	69 9a       	sbi	0x0d, 1	; 13
		CLR_BIT(SPSR,SPI2X);
    171a:	70 98       	cbi	0x0e, 0	; 14
    171c:	80 e0       	ldi	r24, 0x00	; 0
    171e:	08 95       	ret
		SET_BIT(SPSR,SPI2X);
		Loc_u8_Retval = EOK;
	}
	else if(Loc_u8_SelectPrescaler == SPI_PRESCALER_SPI2X_8)
	{
		SET_BIT(SPCR,SPR0);
    1720:	68 9a       	sbi	0x0d, 0	; 13
		CLR_BIT(SPCR,SPR1);
    1722:	69 98       	cbi	0x0d, 1	; 13
		SET_BIT(SPSR,SPI2X);
    1724:	70 9a       	sbi	0x0e, 0	; 14
    1726:	80 e0       	ldi	r24, 0x00	; 0
    1728:	08 95       	ret
		Loc_u8_Retval = EOK;
	}
	else if(Loc_u8_SelectPrescaler == SPI_PRESCALER_SPI2X_32)
	{
		CLR_BIT(SPCR,SPR0);
    172a:	68 98       	cbi	0x0d, 0	; 13
		SET_BIT(SPCR,SPR1);
    172c:	69 9a       	sbi	0x0d, 1	; 13
		SET_BIT(SPSR,SPI2X);
    172e:	70 9a       	sbi	0x0e, 0	; 14
    1730:	80 e0       	ldi	r24, 0x00	; 0
    1732:	08 95       	ret
		Loc_u8_Retval = EOK;
	}
	else if(Loc_u8_SelectPrescaler == SPI_PRESCALER_SPI2X_64)
	{
		SET_BIT(SPCR,SPR0);
    1734:	68 9a       	sbi	0x0d, 0	; 13
		SET_BIT(SPCR,SPR1);
    1736:	69 9a       	sbi	0x0d, 1	; 13
		SET_BIT(SPSR,SPI2X);
    1738:	70 9a       	sbi	0x0e, 0	; 14
    173a:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		//Do Nothing
	}
	return Loc_u8_Retval;
}
    173c:	08 95       	ret

0000173e <MCAL_SPI_MASTER_u8_SpiMaster_Transceive>:

u8 MCAL_SPI_MASTER_u8_SpiMaster_Transceive(u8 Loc_u8_Data)
{

	SPDR = Loc_u8_Data;
    173e:	8f b9       	out	0x0f, r24	; 15
	while(!GET_BIT(SPSR,SPIF));
    1740:	77 9b       	sbis	0x0e, 7	; 14
    1742:	fe cf       	rjmp	.-4      	; 0x1740 <MCAL_SPI_MASTER_u8_SpiMaster_Transceive+0x2>
	return SPDR;
    1744:	8f b1       	in	r24, 0x0f	; 15
}
    1746:	08 95       	ret

00001748 <MCAL_SPI_SLAVE_u8_SpiSlave_Transceive>:
	}
}*/

u8 MCAL_SPI_SLAVE_u8_SpiSlave_Transceive(u8 Loc_u8_Data)
{
	SPDR = Loc_u8_Data;
    1748:	8f b9       	out	0x0f, r24	; 15
	while(!GET_BIT(SPSR,SPIF));
    174a:	77 9b       	sbis	0x0e, 7	; 14
    174c:	fe cf       	rjmp	.-4      	; 0x174a <MCAL_SPI_SLAVE_u8_SpiSlave_Transceive+0x2>
	return SPDR;
    174e:	8f b1       	in	r24, 0x0f	; 15
}
    1750:	08 95       	ret

00001752 <MCAL_SPI_MASTER_SLAVE_u8_SetMasterSalve_Prescaler_SpiMasterSlaveInit>:
 * **********************************************************************
 **/

STD_TYPE MCAL_SPI_MASTER_SLAVE_u8_SetMasterSalve_Prescaler_SpiMasterSlaveInit(u8 Loc_u8_SelectMasterSlave,
																			  u8 Loc_u8_SelectPrescaler)
{
    1752:	1f 93       	push	r17
    1754:	16 2f       	mov	r17, r22
	u8 Loc_u8_Retval = E_NOT_OK;
	if((Loc_u8_SelectMasterSlave <= SPI_MASTER) && (Loc_u8_SelectPrescaler <= SPI_PRESCALER_SPI2X_64))
    1756:	82 30       	cpi	r24, 0x02	; 2
    1758:	18 f0       	brcs	.+6      	; 0x1760 <MCAL_SPI_MASTER_SLAVE_u8_SetMasterSalve_Prescaler_SpiMasterSlaveInit+0xe>
	SET_BIT(SPCR,SPIE);
}

void MCAL_SPI_MASTER_SLAVE_void_SpiEnable(void)
{
	SET_BIT(SPCR,SPE);
    175a:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		//Do Nothing
	}
	return Loc_u8_Retval;
}
    175c:	1f 91       	pop	r17
    175e:	08 95       	ret

STD_TYPE MCAL_SPI_MASTER_SLAVE_u8_SetMasterSalve_Prescaler_SpiMasterSlaveInit(u8 Loc_u8_SelectMasterSlave,
																			  u8 Loc_u8_SelectPrescaler)
{
	u8 Loc_u8_Retval = E_NOT_OK;
	if((Loc_u8_SelectMasterSlave <= SPI_MASTER) && (Loc_u8_SelectPrescaler <= SPI_PRESCALER_SPI2X_64))
    1760:	68 30       	cpi	r22, 0x08	; 8
    1762:	d8 f7       	brcc	.-10     	; 0x175a <MCAL_SPI_MASTER_SLAVE_u8_SetMasterSalve_Prescaler_SpiMasterSlaveInit+0x8>
	{
		if  (Loc_u8_SelectMasterSlave == SPI_MASTER)
    1764:	81 30       	cpi	r24, 0x01	; 1
    1766:	b1 f0       	breq	.+44     	; 0x1794 <MCAL_SPI_MASTER_SLAVE_u8_SetMasterSalve_Prescaler_SpiMasterSlaveInit+0x42>
			Loc_u8_Retval = MCAL_SPI_MASTER_SLAVE_u8_SpiSetMasterSlave(Loc_u8_SelectMasterSlave);
			MCAL_SPI_MASTER_SLAVE_void_SpiEnable();
		}
		else if (Loc_u8_SelectMasterSlave == SPI_SLAVE)
		{
			Loc_u8_Retval = MCAL_DIO_u8SetPinDirection(MISO_PORT,MISO_PIN,PIN_OUTPUT);
    1768:	81 e0       	ldi	r24, 0x01	; 1
    176a:	66 e0       	ldi	r22, 0x06	; 6
    176c:	41 e0       	ldi	r20, 0x01	; 1
    176e:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <MCAL_DIO_u8SetPinDirection>
			Loc_u8_Retval = MCAL_SPI_MASTER_SLAVE_u8_SpiSetLeadingEdge(SPI_SETUP_LEADING);
    1772:	87 e0       	ldi	r24, 0x07	; 7
    1774:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <MCAL_SPI_MASTER_SLAVE_u8_SpiSetLeadingEdge>
			Loc_u8_Retval = MCAL_SPI_MASTER_SLAVE_u8_SpiSetEdge(SPI_FALLING_EDGE);
    1778:	85 e0       	ldi	r24, 0x05	; 5
    177a:	0e 94 4e 0b 	call	0x169c	; 0x169c <MCAL_SPI_MASTER_SLAVE_u8_SpiSetEdge>
			Loc_u8_Retval = MCAL_SPI_MASTER_SLAVE_u8_SpiSetMsbLsb(SPI_LSB);
    177e:	83 e0       	ldi	r24, 0x03	; 3
    1780:	0e 94 42 0b 	call	0x1684	; 0x1684 <MCAL_SPI_MASTER_SLAVE_u8_SpiSetMsbLsb>
			Loc_u8_Retval = MCAL_SPI_MASTER_SLAVE_u8_SpiSetPrescaler(Loc_u8_SelectPrescaler);
    1784:	81 2f       	mov	r24, r17
    1786:	0e 94 66 0b 	call	0x16cc	; 0x16cc <MCAL_SPI_MASTER_SLAVE_u8_SpiSetPrescaler>
			Loc_u8_Retval = MCAL_SPI_MASTER_SLAVE_u8_SpiSetMasterSlave(Loc_u8_SelectMasterSlave);
    178a:	80 e0       	ldi	r24, 0x00	; 0
    178c:	0e 94 33 0b 	call	0x1666	; 0x1666 <MCAL_SPI_MASTER_SLAVE_u8_SpiSetMasterSlave>
	SET_BIT(SPCR,SPIE);
}

void MCAL_SPI_MASTER_SLAVE_void_SpiEnable(void)
{
	SET_BIT(SPCR,SPE);
    1790:	6e 9a       	sbi	0x0d, 6	; 13
    1792:	e4 cf       	rjmp	.-56     	; 0x175c <MCAL_SPI_MASTER_SLAVE_u8_SetMasterSalve_Prescaler_SpiMasterSlaveInit+0xa>
	u8 Loc_u8_Retval = E_NOT_OK;
	if((Loc_u8_SelectMasterSlave <= SPI_MASTER) && (Loc_u8_SelectPrescaler <= SPI_PRESCALER_SPI2X_64))
	{
		if  (Loc_u8_SelectMasterSlave == SPI_MASTER)
		{
			Loc_u8_Retval = MCAL_DIO_u8SetPinDirection(MOSI_PORT,MOSI_PIN,PIN_OUTPUT);
    1794:	65 e0       	ldi	r22, 0x05	; 5
    1796:	41 e0       	ldi	r20, 0x01	; 1
    1798:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <MCAL_DIO_u8SetPinDirection>
			Loc_u8_Retval = MCAL_DIO_u8SetPinDirection(SS_PORT,SS_PIN,PIN_OUTPUT);
    179c:	81 e0       	ldi	r24, 0x01	; 1
    179e:	64 e0       	ldi	r22, 0x04	; 4
    17a0:	41 e0       	ldi	r20, 0x01	; 1
    17a2:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <MCAL_DIO_u8SetPinDirection>
			Loc_u8_Retval = MCAL_DIO_u8SetPinDirection(SCK_PORT,SCK_PIN,PIN_OUTPUT);
    17a6:	81 e0       	ldi	r24, 0x01	; 1
    17a8:	67 e0       	ldi	r22, 0x07	; 7
    17aa:	41 e0       	ldi	r20, 0x01	; 1
    17ac:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <MCAL_DIO_u8SetPinDirection>
			Loc_u8_Retval = MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_HIGH);
    17b0:	81 e0       	ldi	r24, 0x01	; 1
    17b2:	64 e0       	ldi	r22, 0x04	; 4
    17b4:	41 e0       	ldi	r20, 0x01	; 1
    17b6:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <MCAL_DIO_u8SetPinValue>
			Loc_u8_Retval = MCAL_SPI_MASTER_SLAVE_u8_SpiSetLeadingEdge(SPI_SETUP_LEADING);
    17ba:	87 e0       	ldi	r24, 0x07	; 7
    17bc:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <MCAL_SPI_MASTER_SLAVE_u8_SpiSetLeadingEdge>
			Loc_u8_Retval = MCAL_SPI_MASTER_SLAVE_u8_SpiSetEdge(SPI_FALLING_EDGE);
    17c0:	85 e0       	ldi	r24, 0x05	; 5
    17c2:	0e 94 4e 0b 	call	0x169c	; 0x169c <MCAL_SPI_MASTER_SLAVE_u8_SpiSetEdge>
			Loc_u8_Retval = MCAL_SPI_MASTER_SLAVE_u8_SpiSetMsbLsb(SPI_LSB);
    17c6:	83 e0       	ldi	r24, 0x03	; 3
    17c8:	0e 94 42 0b 	call	0x1684	; 0x1684 <MCAL_SPI_MASTER_SLAVE_u8_SpiSetMsbLsb>
			Loc_u8_Retval = MCAL_SPI_MASTER_SLAVE_u8_SpiSetPrescaler(Loc_u8_SelectPrescaler);
    17cc:	81 2f       	mov	r24, r17
    17ce:	0e 94 66 0b 	call	0x16cc	; 0x16cc <MCAL_SPI_MASTER_SLAVE_u8_SpiSetPrescaler>
			Loc_u8_Retval = MCAL_SPI_MASTER_SLAVE_u8_SpiSetMasterSlave(Loc_u8_SelectMasterSlave);
    17d2:	81 e0       	ldi	r24, 0x01	; 1
    17d4:	0e 94 33 0b 	call	0x1666	; 0x1666 <MCAL_SPI_MASTER_SLAVE_u8_SpiSetMasterSlave>
	SET_BIT(SPCR,SPIE);
}

void MCAL_SPI_MASTER_SLAVE_void_SpiEnable(void)
{
	SET_BIT(SPCR,SPE);
    17d8:	6e 9a       	sbi	0x0d, 6	; 13
    17da:	c0 cf       	rjmp	.-128    	; 0x175c <MCAL_SPI_MASTER_SLAVE_u8_SetMasterSalve_Prescaler_SpiMasterSlaveInit+0xa>

000017dc <MCAL_EXT_INT_voidEXTInt_Init>:

void (*GLOB_CallBackToAPP[3]) (void) = {NULL,NULL,NULL};

void MCAL_EXT_INT_voidEXTInt_Init(u8 LOC_u8IntNum,u8 LOC_u8SenseControl)
{
	if (LOC_u8IntNum == INT_0)
    17dc:	88 23       	and	r24, r24
    17de:	61 f4       	brne	.+24     	; 0x17f8 <MCAL_EXT_INT_voidEXTInt_Init+0x1c>
	{
		SET_BIT(GICR,INT0_BIT);
    17e0:	8b b7       	in	r24, 0x3b	; 59
    17e2:	80 64       	ori	r24, 0x40	; 64
    17e4:	8b bf       	out	0x3b, r24	; 59
		switch(LOC_u8SenseControl)
    17e6:	61 30       	cpi	r22, 0x01	; 1
    17e8:	61 f1       	breq	.+88     	; 0x1842 <MCAL_EXT_INT_voidEXTInt_Init+0x66>
    17ea:	61 30       	cpi	r22, 0x01	; 1
    17ec:	a8 f0       	brcs	.+42     	; 0x1818 <MCAL_EXT_INT_voidEXTInt_Init+0x3c>
    17ee:	62 30       	cpi	r22, 0x02	; 2
    17f0:	b1 f1       	breq	.+108    	; 0x185e <MCAL_EXT_INT_voidEXTInt_Init+0x82>
    17f2:	63 30       	cpi	r22, 0x03	; 3
    17f4:	69 f1       	breq	.+90     	; 0x1850 <MCAL_EXT_INT_voidEXTInt_Init+0x74>
    17f6:	08 95       	ret
			break;
		default:
			break;
		}
	}
	else if (LOC_u8IntNum == INT_1)
    17f8:	81 30       	cpi	r24, 0x01	; 1
    17fa:	a9 f0       	breq	.+42     	; 0x1826 <MCAL_EXT_INT_voidEXTInt_Init+0x4a>
		default:
			break;
		}

	}
	else if (LOC_u8IntNum == INT_2)
    17fc:	82 30       	cpi	r24, 0x02	; 2
    17fe:	d9 f7       	brne	.-10     	; 0x17f6 <MCAL_EXT_INT_voidEXTInt_Init+0x1a>
	{
		SET_BIT(GICR,INT2_BIT);
    1800:	8b b7       	in	r24, 0x3b	; 59
    1802:	80 62       	ori	r24, 0x20	; 32
    1804:	8b bf       	out	0x3b, r24	; 59
		switch(LOC_u8SenseControl)
    1806:	62 30       	cpi	r22, 0x02	; 2
    1808:	09 f4       	brne	.+2      	; 0x180c <MCAL_EXT_INT_voidEXTInt_Init+0x30>
    180a:	42 c0       	rjmp	.+132    	; 0x1890 <MCAL_EXT_INT_voidEXTInt_Init+0xb4>
    180c:	63 30       	cpi	r22, 0x03	; 3
    180e:	99 f7       	brne	.-26     	; 0x17f6 <MCAL_EXT_INT_voidEXTInt_Init+0x1a>
		{
		case FALLING_EDGE:
			CLR_BIT(MCUCSR,ISC2_BIT);
			break;
		case RISING_EDGE:
			SET_BIT(MCUCSR,ISC2_BIT);
    1810:	84 b7       	in	r24, 0x34	; 52
    1812:	80 64       	ori	r24, 0x40	; 64
    1814:	84 bf       	out	0x34, r24	; 52
    1816:	08 95       	ret
	{
		SET_BIT(GICR,INT0_BIT);
		switch(LOC_u8SenseControl)
		{
		case LOW_LEVEL:
			CLR_BIT(MCUCR,ISC00_BIT);
    1818:	85 b7       	in	r24, 0x35	; 53
    181a:	8e 7f       	andi	r24, 0xFE	; 254
    181c:	85 bf       	out	0x35, r24	; 53
			CLR_BIT(MCUCR,ISC01_BIT);
    181e:	85 b7       	in	r24, 0x35	; 53
    1820:	8d 7f       	andi	r24, 0xFD	; 253
    1822:	85 bf       	out	0x35, r24	; 53
    1824:	08 95       	ret
			break;
		}
	}
	else if (LOC_u8IntNum == INT_1)
	{
		SET_BIT(GICR,INT1_BIT);
    1826:	8b b7       	in	r24, 0x3b	; 59
    1828:	80 68       	ori	r24, 0x80	; 128
    182a:	8b bf       	out	0x3b, r24	; 59
		switch(LOC_u8SenseControl)
    182c:	61 30       	cpi	r22, 0x01	; 1
    182e:	a1 f1       	breq	.+104    	; 0x1898 <MCAL_EXT_INT_voidEXTInt_Init+0xbc>
    1830:	61 30       	cpi	r22, 0x01	; 1
    1832:	e0 f4       	brcc	.+56     	; 0x186c <MCAL_EXT_INT_voidEXTInt_Init+0x90>
		{
		case LOW_LEVEL:
			CLR_BIT(MCUCR,ISC10_BIT);
    1834:	85 b7       	in	r24, 0x35	; 53
    1836:	8b 7f       	andi	r24, 0xFB	; 251
    1838:	85 bf       	out	0x35, r24	; 53
			CLR_BIT(MCUCR,ISC11_BIT);
    183a:	85 b7       	in	r24, 0x35	; 53
    183c:	87 7f       	andi	r24, 0xF7	; 247
    183e:	85 bf       	out	0x35, r24	; 53
    1840:	08 95       	ret
		case LOW_LEVEL:
			CLR_BIT(MCUCR,ISC00_BIT);
			CLR_BIT(MCUCR,ISC01_BIT);
			break;
		case LOGICAL_CHANGE:
			SET_BIT(MCUCR,ISC00_BIT);
    1842:	85 b7       	in	r24, 0x35	; 53
    1844:	81 60       	ori	r24, 0x01	; 1
    1846:	85 bf       	out	0x35, r24	; 53
			CLR_BIT(MCUCR,ISC01_BIT);
    1848:	85 b7       	in	r24, 0x35	; 53
    184a:	8d 7f       	andi	r24, 0xFD	; 253
    184c:	85 bf       	out	0x35, r24	; 53
    184e:	08 95       	ret
		case FALLING_EDGE:
			CLR_BIT(MCUCR,ISC00_BIT);
			SET_BIT(MCUCR,ISC01_BIT);
			break;
		case RISING_EDGE:
			SET_BIT(MCUCR,ISC00_BIT);
    1850:	85 b7       	in	r24, 0x35	; 53
    1852:	81 60       	ori	r24, 0x01	; 1
    1854:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,ISC01_BIT);
    1856:	85 b7       	in	r24, 0x35	; 53
    1858:	82 60       	ori	r24, 0x02	; 2
    185a:	85 bf       	out	0x35, r24	; 53
    185c:	08 95       	ret
		case LOGICAL_CHANGE:
			SET_BIT(MCUCR,ISC00_BIT);
			CLR_BIT(MCUCR,ISC01_BIT);
			break;
		case FALLING_EDGE:
			CLR_BIT(MCUCR,ISC00_BIT);
    185e:	85 b7       	in	r24, 0x35	; 53
    1860:	8e 7f       	andi	r24, 0xFE	; 254
    1862:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,ISC01_BIT);
    1864:	85 b7       	in	r24, 0x35	; 53
    1866:	82 60       	ori	r24, 0x02	; 2
    1868:	85 bf       	out	0x35, r24	; 53
    186a:	08 95       	ret
		}
	}
	else if (LOC_u8IntNum == INT_1)
	{
		SET_BIT(GICR,INT1_BIT);
		switch(LOC_u8SenseControl)
    186c:	62 30       	cpi	r22, 0x02	; 2
    186e:	49 f0       	breq	.+18     	; 0x1882 <MCAL_EXT_INT_voidEXTInt_Init+0xa6>
    1870:	63 30       	cpi	r22, 0x03	; 3
    1872:	09 f6       	brne	.-126    	; 0x17f6 <MCAL_EXT_INT_voidEXTInt_Init+0x1a>
		case FALLING_EDGE:
			CLR_BIT(MCUCR,ISC10_BIT);
			SET_BIT(MCUCR,ISC11_BIT);
			break;
		case RISING_EDGE:
			SET_BIT(MCUCR,ISC10_BIT);
    1874:	85 b7       	in	r24, 0x35	; 53
    1876:	84 60       	ori	r24, 0x04	; 4
    1878:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,ISC11_BIT);
    187a:	85 b7       	in	r24, 0x35	; 53
    187c:	88 60       	ori	r24, 0x08	; 8
    187e:	85 bf       	out	0x35, r24	; 53
    1880:	08 95       	ret
		case LOGICAL_CHANGE:
			SET_BIT(MCUCR,ISC10_BIT);
			CLR_BIT(MCUCR,ISC11_BIT);
			break;
		case FALLING_EDGE:
			CLR_BIT(MCUCR,ISC10_BIT);
    1882:	85 b7       	in	r24, 0x35	; 53
    1884:	8b 7f       	andi	r24, 0xFB	; 251
    1886:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,ISC11_BIT);
    1888:	85 b7       	in	r24, 0x35	; 53
    188a:	88 60       	ori	r24, 0x08	; 8
    188c:	85 bf       	out	0x35, r24	; 53
    188e:	08 95       	ret
	{
		SET_BIT(GICR,INT2_BIT);
		switch(LOC_u8SenseControl)
		{
		case FALLING_EDGE:
			CLR_BIT(MCUCSR,ISC2_BIT);
    1890:	84 b7       	in	r24, 0x34	; 52
    1892:	8f 7b       	andi	r24, 0xBF	; 191
    1894:	84 bf       	out	0x34, r24	; 52
    1896:	08 95       	ret
		case LOW_LEVEL:
			CLR_BIT(MCUCR,ISC10_BIT);
			CLR_BIT(MCUCR,ISC11_BIT);
			break;
		case LOGICAL_CHANGE:
			SET_BIT(MCUCR,ISC10_BIT);
    1898:	85 b7       	in	r24, 0x35	; 53
    189a:	84 60       	ori	r24, 0x04	; 4
    189c:	85 bf       	out	0x35, r24	; 53
			CLR_BIT(MCUCR,ISC11_BIT);
    189e:	85 b7       	in	r24, 0x35	; 53
    18a0:	87 7f       	andi	r24, 0xF7	; 247
    18a2:	85 bf       	out	0x35, r24	; 53
    18a4:	08 95       	ret

000018a6 <MCAL_EXT_INT_voidEXTInt_CallBack>:
	}
}

void MCAL_EXT_INT_voidEXTInt_CallBack(u8 LOC_u8IntNum, void(*InterruptAction)(void))
{
	if (InterruptAction != NULL)
    18a6:	61 15       	cp	r22, r1
    18a8:	71 05       	cpc	r23, r1
    18aa:	41 f0       	breq	.+16     	; 0x18bc <MCAL_EXT_INT_voidEXTInt_CallBack+0x16>
	{
		GLOB_CallBackToAPP[LOC_u8IntNum] = InterruptAction;
    18ac:	e8 2f       	mov	r30, r24
    18ae:	f0 e0       	ldi	r31, 0x00	; 0
    18b0:	ee 0f       	add	r30, r30
    18b2:	ff 1f       	adc	r31, r31
    18b4:	ea 5d       	subi	r30, 0xDA	; 218
    18b6:	f8 4f       	sbci	r31, 0xF8	; 248
    18b8:	71 83       	std	Z+1, r23	; 0x01
    18ba:	60 83       	st	Z, r22
    18bc:	08 95       	ret

000018be <__vector_1>:
}



ISR(EXTINT0_vect)
{
    18be:	1f 92       	push	r1
    18c0:	0f 92       	push	r0
    18c2:	0f b6       	in	r0, 0x3f	; 63
    18c4:	0f 92       	push	r0
    18c6:	11 24       	eor	r1, r1
    18c8:	2f 93       	push	r18
    18ca:	3f 93       	push	r19
    18cc:	4f 93       	push	r20
    18ce:	5f 93       	push	r21
    18d0:	6f 93       	push	r22
    18d2:	7f 93       	push	r23
    18d4:	8f 93       	push	r24
    18d6:	9f 93       	push	r25
    18d8:	af 93       	push	r26
    18da:	bf 93       	push	r27
    18dc:	ef 93       	push	r30
    18de:	ff 93       	push	r31
	if (GLOB_CallBackToAPP[INT_0] != NULL)
    18e0:	e0 91 26 07 	lds	r30, 0x0726
    18e4:	f0 91 27 07 	lds	r31, 0x0727
    18e8:	30 97       	sbiw	r30, 0x00	; 0
    18ea:	09 f0       	breq	.+2      	; 0x18ee <__vector_1+0x30>
	{
		GLOB_CallBackToAPP[INT_0]();
    18ec:	09 95       	icall
	}
}
    18ee:	ff 91       	pop	r31
    18f0:	ef 91       	pop	r30
    18f2:	bf 91       	pop	r27
    18f4:	af 91       	pop	r26
    18f6:	9f 91       	pop	r25
    18f8:	8f 91       	pop	r24
    18fa:	7f 91       	pop	r23
    18fc:	6f 91       	pop	r22
    18fe:	5f 91       	pop	r21
    1900:	4f 91       	pop	r20
    1902:	3f 91       	pop	r19
    1904:	2f 91       	pop	r18
    1906:	0f 90       	pop	r0
    1908:	0f be       	out	0x3f, r0	; 63
    190a:	0f 90       	pop	r0
    190c:	1f 90       	pop	r1
    190e:	18 95       	reti

00001910 <__vector_2>:
ISR(EXTINT1_vect)
{
    1910:	1f 92       	push	r1
    1912:	0f 92       	push	r0
    1914:	0f b6       	in	r0, 0x3f	; 63
    1916:	0f 92       	push	r0
    1918:	11 24       	eor	r1, r1
    191a:	2f 93       	push	r18
    191c:	3f 93       	push	r19
    191e:	4f 93       	push	r20
    1920:	5f 93       	push	r21
    1922:	6f 93       	push	r22
    1924:	7f 93       	push	r23
    1926:	8f 93       	push	r24
    1928:	9f 93       	push	r25
    192a:	af 93       	push	r26
    192c:	bf 93       	push	r27
    192e:	ef 93       	push	r30
    1930:	ff 93       	push	r31
	if (GLOB_CallBackToAPP[INT_1] != NULL)
    1932:	e0 91 28 07 	lds	r30, 0x0728
    1936:	f0 91 29 07 	lds	r31, 0x0729
    193a:	30 97       	sbiw	r30, 0x00	; 0
    193c:	09 f0       	breq	.+2      	; 0x1940 <__vector_2+0x30>
	{
		GLOB_CallBackToAPP[INT_1]();
    193e:	09 95       	icall
	}
}
    1940:	ff 91       	pop	r31
    1942:	ef 91       	pop	r30
    1944:	bf 91       	pop	r27
    1946:	af 91       	pop	r26
    1948:	9f 91       	pop	r25
    194a:	8f 91       	pop	r24
    194c:	7f 91       	pop	r23
    194e:	6f 91       	pop	r22
    1950:	5f 91       	pop	r21
    1952:	4f 91       	pop	r20
    1954:	3f 91       	pop	r19
    1956:	2f 91       	pop	r18
    1958:	0f 90       	pop	r0
    195a:	0f be       	out	0x3f, r0	; 63
    195c:	0f 90       	pop	r0
    195e:	1f 90       	pop	r1
    1960:	18 95       	reti

00001962 <__vector_3>:
ISR(EXTINT2_vect)
{
    1962:	1f 92       	push	r1
    1964:	0f 92       	push	r0
    1966:	0f b6       	in	r0, 0x3f	; 63
    1968:	0f 92       	push	r0
    196a:	11 24       	eor	r1, r1
    196c:	2f 93       	push	r18
    196e:	3f 93       	push	r19
    1970:	4f 93       	push	r20
    1972:	5f 93       	push	r21
    1974:	6f 93       	push	r22
    1976:	7f 93       	push	r23
    1978:	8f 93       	push	r24
    197a:	9f 93       	push	r25
    197c:	af 93       	push	r26
    197e:	bf 93       	push	r27
    1980:	ef 93       	push	r30
    1982:	ff 93       	push	r31
	if (GLOB_CallBackToAPP[INT_2] != NULL)
    1984:	e0 91 2a 07 	lds	r30, 0x072A
    1988:	f0 91 2b 07 	lds	r31, 0x072B
    198c:	30 97       	sbiw	r30, 0x00	; 0
    198e:	09 f0       	breq	.+2      	; 0x1992 <__vector_3+0x30>
	{
		GLOB_CallBackToAPP[INT_2]();
    1990:	09 95       	icall
	}
}
    1992:	ff 91       	pop	r31
    1994:	ef 91       	pop	r30
    1996:	bf 91       	pop	r27
    1998:	af 91       	pop	r26
    199a:	9f 91       	pop	r25
    199c:	8f 91       	pop	r24
    199e:	7f 91       	pop	r23
    19a0:	6f 91       	pop	r22
    19a2:	5f 91       	pop	r21
    19a4:	4f 91       	pop	r20
    19a6:	3f 91       	pop	r19
    19a8:	2f 91       	pop	r18
    19aa:	0f 90       	pop	r0
    19ac:	0f be       	out	0x3f, r0	; 63
    19ae:	0f 90       	pop	r0
    19b0:	1f 90       	pop	r1
    19b2:	18 95       	reti

000019b4 <MCAL_Interrupt_GIE_Enable>:


void MCAL_Interrupt_GIE_Enable(void)
{
	/* To enable the global interrupt */
	SET_BIT(SREG,I_BIT);
    19b4:	8f b7       	in	r24, 0x3f	; 63
    19b6:	80 68       	ori	r24, 0x80	; 128
    19b8:	8f bf       	out	0x3f, r24	; 63
}
    19ba:	08 95       	ret

000019bc <MCAL_Interrupt_GIE_Disable>:

void MCAL_Interrupt_GIE_Disable(void)
{
	/* To disable the global interrupt */
	CLR_BIT(SREG,I_BIT);
    19bc:	8f b7       	in	r24, 0x3f	; 63
    19be:	8f 77       	andi	r24, 0x7F	; 127
    19c0:	8f bf       	out	0x3f, r24	; 63
}
    19c2:	08 95       	ret

000019c4 <MCAL_DIO_u8SetPinValue>:

//SetPinValue
STD_TYPE MCAL_DIO_u8SetPinValue (u8 LOC_u8PortID, u8 LOC_u8PinID, u8 LOC_u8PinValue)
{
	u8 LOC_u8Return_Value = E_NOT_OK;
	if( (LOC_u8PortID <= PortD) && (LOC_u8PinID <= Pin7) && (LOC_u8PinValue <= Pin_HIGH) )
    19c4:	84 30       	cpi	r24, 0x04	; 4
    19c6:	20 f4       	brcc	.+8      	; 0x19d0 <MCAL_DIO_u8SetPinValue+0xc>
    19c8:	68 30       	cpi	r22, 0x08	; 8
    19ca:	10 f4       	brcc	.+4      	; 0x19d0 <MCAL_DIO_u8SetPinValue+0xc>
    19cc:	42 30       	cpi	r20, 0x02	; 2
    19ce:	10 f0       	brcs	.+4      	; 0x19d4 <MCAL_DIO_u8SetPinValue+0x10>
				CLR_BIT(PORTC,LOC_u8PinID);
				LOC_u8Return_Value = E_OK;
			}
			else if(LOC_u8PortID ==PortD)
			{
				CLR_BIT(PORTD,LOC_u8PinID);
    19d0:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		//Do Nothing.
	}
	return LOC_u8Return_Value;
}
    19d2:	08 95       	ret
STD_TYPE MCAL_DIO_u8SetPinValue (u8 LOC_u8PortID, u8 LOC_u8PinID, u8 LOC_u8PinValue)
{
	u8 LOC_u8Return_Value = E_NOT_OK;
	if( (LOC_u8PortID <= PortD) && (LOC_u8PinID <= Pin7) && (LOC_u8PinValue <= Pin_HIGH) )
	{
		if(LOC_u8PinValue == Pin_HIGH)
    19d4:	41 30       	cpi	r20, 0x01	; 1
    19d6:	11 f1       	breq	.+68     	; 0x1a1c <MCAL_DIO_u8SetPinValue+0x58>
				//Do Nothing
			}
		}
		else if(LOC_u8PinValue == Pin_LOW)
		{
			if(LOC_u8PortID == PortA)
    19d8:	88 23       	and	r24, r24
    19da:	99 f0       	breq	.+38     	; 0x1a02 <MCAL_DIO_u8SetPinValue+0x3e>
			{
				CLR_BIT(PORTA,LOC_u8PinID);
				LOC_u8Return_Value = E_OK;
			}
			else if(LOC_u8PortID ==PortB)
    19dc:	81 30       	cpi	r24, 0x01	; 1
    19de:	09 f4       	brne	.+2      	; 0x19e2 <MCAL_DIO_u8SetPinValue+0x1e>
    19e0:	3c c0       	rjmp	.+120    	; 0x1a5a <MCAL_DIO_u8SetPinValue+0x96>
			{
				CLR_BIT(PORTB,LOC_u8PinID);
				LOC_u8Return_Value = E_OK;
			}
			else if(LOC_u8PortID ==PortC)
    19e2:	82 30       	cpi	r24, 0x02	; 2
    19e4:	09 f4       	brne	.+2      	; 0x19e8 <MCAL_DIO_u8SetPinValue+0x24>
    19e6:	52 c0       	rjmp	.+164    	; 0x1a8c <MCAL_DIO_u8SetPinValue+0xc8>
				CLR_BIT(PORTC,LOC_u8PinID);
				LOC_u8Return_Value = E_OK;
			}
			else if(LOC_u8PortID ==PortD)
			{
				CLR_BIT(PORTD,LOC_u8PinID);
    19e8:	22 b3       	in	r18, 0x12	; 18
    19ea:	81 e0       	ldi	r24, 0x01	; 1
    19ec:	90 e0       	ldi	r25, 0x00	; 0
    19ee:	02 c0       	rjmp	.+4      	; 0x19f4 <MCAL_DIO_u8SetPinValue+0x30>
    19f0:	88 0f       	add	r24, r24
    19f2:	99 1f       	adc	r25, r25
    19f4:	6a 95       	dec	r22
    19f6:	e2 f7       	brpl	.-8      	; 0x19f0 <MCAL_DIO_u8SetPinValue+0x2c>
    19f8:	80 95       	com	r24
    19fa:	82 23       	and	r24, r18
    19fc:	82 bb       	out	0x12, r24	; 18
    19fe:	80 e0       	ldi	r24, 0x00	; 0
    1a00:	08 95       	ret
		}
		else if(LOC_u8PinValue == Pin_LOW)
		{
			if(LOC_u8PortID == PortA)
			{
				CLR_BIT(PORTA,LOC_u8PinID);
    1a02:	2b b3       	in	r18, 0x1b	; 27
    1a04:	81 e0       	ldi	r24, 0x01	; 1
    1a06:	90 e0       	ldi	r25, 0x00	; 0
    1a08:	02 c0       	rjmp	.+4      	; 0x1a0e <MCAL_DIO_u8SetPinValue+0x4a>
    1a0a:	88 0f       	add	r24, r24
    1a0c:	99 1f       	adc	r25, r25
    1a0e:	6a 95       	dec	r22
    1a10:	e2 f7       	brpl	.-8      	; 0x1a0a <MCAL_DIO_u8SetPinValue+0x46>
    1a12:	80 95       	com	r24
    1a14:	82 23       	and	r24, r18
    1a16:	8b bb       	out	0x1b, r24	; 27
    1a18:	80 e0       	ldi	r24, 0x00	; 0
    1a1a:	08 95       	ret
	u8 LOC_u8Return_Value = E_NOT_OK;
	if( (LOC_u8PortID <= PortD) && (LOC_u8PinID <= Pin7) && (LOC_u8PinValue <= Pin_HIGH) )
	{
		if(LOC_u8PinValue == Pin_HIGH)
		{
			if(LOC_u8PortID == PortA)
    1a1c:	88 23       	and	r24, r24
    1a1e:	89 f0       	breq	.+34     	; 0x1a42 <MCAL_DIO_u8SetPinValue+0x7e>
			{
				SET_BIT(PORTA,LOC_u8PinID);
				LOC_u8Return_Value = E_OK;
			}
			else if(LOC_u8PortID ==PortB)
    1a20:	81 30       	cpi	r24, 0x01	; 1
    1a22:	41 f1       	breq	.+80     	; 0x1a74 <MCAL_DIO_u8SetPinValue+0xb0>
			{
				SET_BIT(PORTB,LOC_u8PinID);
				LOC_u8Return_Value = E_OK;
			}
			else if(LOC_u8PortID ==PortC)
    1a24:	82 30       	cpi	r24, 0x02	; 2
    1a26:	09 f4       	brne	.+2      	; 0x1a2a <MCAL_DIO_u8SetPinValue+0x66>
    1a28:	3e c0       	rjmp	.+124    	; 0x1aa6 <MCAL_DIO_u8SetPinValue+0xe2>
				SET_BIT(PORTC,LOC_u8PinID);
				LOC_u8Return_Value = E_OK;
			}
			else if(LOC_u8PortID ==PortD)
			{
				SET_BIT(PORTD,LOC_u8PinID);
    1a2a:	22 b3       	in	r18, 0x12	; 18
    1a2c:	81 e0       	ldi	r24, 0x01	; 1
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
    1a30:	02 c0       	rjmp	.+4      	; 0x1a36 <MCAL_DIO_u8SetPinValue+0x72>
    1a32:	88 0f       	add	r24, r24
    1a34:	99 1f       	adc	r25, r25
    1a36:	6a 95       	dec	r22
    1a38:	e2 f7       	brpl	.-8      	; 0x1a32 <MCAL_DIO_u8SetPinValue+0x6e>
    1a3a:	28 2b       	or	r18, r24
    1a3c:	22 bb       	out	0x12, r18	; 18
    1a3e:	80 e0       	ldi	r24, 0x00	; 0
    1a40:	08 95       	ret
	{
		if(LOC_u8PinValue == Pin_HIGH)
		{
			if(LOC_u8PortID == PortA)
			{
				SET_BIT(PORTA,LOC_u8PinID);
    1a42:	2b b3       	in	r18, 0x1b	; 27
    1a44:	81 e0       	ldi	r24, 0x01	; 1
    1a46:	90 e0       	ldi	r25, 0x00	; 0
    1a48:	02 c0       	rjmp	.+4      	; 0x1a4e <MCAL_DIO_u8SetPinValue+0x8a>
    1a4a:	88 0f       	add	r24, r24
    1a4c:	99 1f       	adc	r25, r25
    1a4e:	6a 95       	dec	r22
    1a50:	e2 f7       	brpl	.-8      	; 0x1a4a <MCAL_DIO_u8SetPinValue+0x86>
    1a52:	28 2b       	or	r18, r24
    1a54:	2b bb       	out	0x1b, r18	; 27
    1a56:	80 e0       	ldi	r24, 0x00	; 0
    1a58:	08 95       	ret
				CLR_BIT(PORTA,LOC_u8PinID);
				LOC_u8Return_Value = E_OK;
			}
			else if(LOC_u8PortID ==PortB)
			{
				CLR_BIT(PORTB,LOC_u8PinID);
    1a5a:	28 b3       	in	r18, 0x18	; 24
    1a5c:	81 e0       	ldi	r24, 0x01	; 1
    1a5e:	90 e0       	ldi	r25, 0x00	; 0
    1a60:	02 c0       	rjmp	.+4      	; 0x1a66 <MCAL_DIO_u8SetPinValue+0xa2>
    1a62:	88 0f       	add	r24, r24
    1a64:	99 1f       	adc	r25, r25
    1a66:	6a 95       	dec	r22
    1a68:	e2 f7       	brpl	.-8      	; 0x1a62 <MCAL_DIO_u8SetPinValue+0x9e>
    1a6a:	80 95       	com	r24
    1a6c:	82 23       	and	r24, r18
    1a6e:	88 bb       	out	0x18, r24	; 24
    1a70:	80 e0       	ldi	r24, 0x00	; 0
    1a72:	08 95       	ret
				SET_BIT(PORTA,LOC_u8PinID);
				LOC_u8Return_Value = E_OK;
			}
			else if(LOC_u8PortID ==PortB)
			{
				SET_BIT(PORTB,LOC_u8PinID);
    1a74:	28 b3       	in	r18, 0x18	; 24
    1a76:	81 e0       	ldi	r24, 0x01	; 1
    1a78:	90 e0       	ldi	r25, 0x00	; 0
    1a7a:	02 c0       	rjmp	.+4      	; 0x1a80 <MCAL_DIO_u8SetPinValue+0xbc>
    1a7c:	88 0f       	add	r24, r24
    1a7e:	99 1f       	adc	r25, r25
    1a80:	6a 95       	dec	r22
    1a82:	e2 f7       	brpl	.-8      	; 0x1a7c <MCAL_DIO_u8SetPinValue+0xb8>
    1a84:	28 2b       	or	r18, r24
    1a86:	28 bb       	out	0x18, r18	; 24
    1a88:	80 e0       	ldi	r24, 0x00	; 0
    1a8a:	08 95       	ret
				CLR_BIT(PORTB,LOC_u8PinID);
				LOC_u8Return_Value = E_OK;
			}
			else if(LOC_u8PortID ==PortC)
			{
				CLR_BIT(PORTC,LOC_u8PinID);
    1a8c:	25 b3       	in	r18, 0x15	; 21
    1a8e:	81 e0       	ldi	r24, 0x01	; 1
    1a90:	90 e0       	ldi	r25, 0x00	; 0
    1a92:	02 c0       	rjmp	.+4      	; 0x1a98 <MCAL_DIO_u8SetPinValue+0xd4>
    1a94:	88 0f       	add	r24, r24
    1a96:	99 1f       	adc	r25, r25
    1a98:	6a 95       	dec	r22
    1a9a:	e2 f7       	brpl	.-8      	; 0x1a94 <MCAL_DIO_u8SetPinValue+0xd0>
    1a9c:	80 95       	com	r24
    1a9e:	82 23       	and	r24, r18
    1aa0:	85 bb       	out	0x15, r24	; 21
    1aa2:	80 e0       	ldi	r24, 0x00	; 0
    1aa4:	08 95       	ret
				SET_BIT(PORTB,LOC_u8PinID);
				LOC_u8Return_Value = E_OK;
			}
			else if(LOC_u8PortID ==PortC)
			{
				SET_BIT(PORTC,LOC_u8PinID);
    1aa6:	25 b3       	in	r18, 0x15	; 21
    1aa8:	81 e0       	ldi	r24, 0x01	; 1
    1aaa:	90 e0       	ldi	r25, 0x00	; 0
    1aac:	02 c0       	rjmp	.+4      	; 0x1ab2 <MCAL_DIO_u8SetPinValue+0xee>
    1aae:	88 0f       	add	r24, r24
    1ab0:	99 1f       	adc	r25, r25
    1ab2:	6a 95       	dec	r22
    1ab4:	e2 f7       	brpl	.-8      	; 0x1aae <MCAL_DIO_u8SetPinValue+0xea>
    1ab6:	28 2b       	or	r18, r24
    1ab8:	25 bb       	out	0x15, r18	; 21
    1aba:	80 e0       	ldi	r24, 0x00	; 0
    1abc:	08 95       	ret

00001abe <MCAL_DIO_u8SetPinDirection>:

//SetPinDirection
STD_TYPE MCAL_DIO_u8SetPinDirection (u8 LOC_u8PortID, u8 LOC_u8PinID, u8 LOC_u8PinDirection)
{
	u8 LOC_u8Return_Value = E_NOT_OK;
	if( (LOC_u8PortID <= PortD) && (LOC_u8PinID <= Pin7) && (LOC_u8PinDirection <= Pin_Output) )
    1abe:	84 30       	cpi	r24, 0x04	; 4
    1ac0:	20 f4       	brcc	.+8      	; 0x1aca <MCAL_DIO_u8SetPinDirection+0xc>
    1ac2:	68 30       	cpi	r22, 0x08	; 8
    1ac4:	10 f4       	brcc	.+4      	; 0x1aca <MCAL_DIO_u8SetPinDirection+0xc>
    1ac6:	42 30       	cpi	r20, 0x02	; 2
    1ac8:	10 f0       	brcs	.+4      	; 0x1ace <MCAL_DIO_u8SetPinDirection+0x10>
				CLR_BIT(DDRC,LOC_u8PinID);
				LOC_u8Return_Value = E_OK;
			}
			else if(LOC_u8PortID ==PortD)
			{
				CLR_BIT(DDRD,LOC_u8PinID);
    1aca:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		//Do Nothing.
	}
	return LOC_u8Return_Value;
}
    1acc:	08 95       	ret
STD_TYPE MCAL_DIO_u8SetPinDirection (u8 LOC_u8PortID, u8 LOC_u8PinID, u8 LOC_u8PinDirection)
{
	u8 LOC_u8Return_Value = E_NOT_OK;
	if( (LOC_u8PortID <= PortD) && (LOC_u8PinID <= Pin7) && (LOC_u8PinDirection <= Pin_Output) )
	{
		if(LOC_u8PinDirection == Pin_Output)
    1ace:	41 30       	cpi	r20, 0x01	; 1
    1ad0:	11 f1       	breq	.+68     	; 0x1b16 <MCAL_DIO_u8SetPinDirection+0x58>
				//Do Nothing
			}
		}
		else if(LOC_u8PinDirection == Pin_Input)
		{
			if(LOC_u8PortID == PortA)
    1ad2:	88 23       	and	r24, r24
    1ad4:	99 f0       	breq	.+38     	; 0x1afc <MCAL_DIO_u8SetPinDirection+0x3e>
			{
				CLR_BIT(DDRA,LOC_u8PinID);
				LOC_u8Return_Value = E_OK;
			}
			else if(LOC_u8PortID ==PortB)
    1ad6:	81 30       	cpi	r24, 0x01	; 1
    1ad8:	09 f4       	brne	.+2      	; 0x1adc <MCAL_DIO_u8SetPinDirection+0x1e>
    1ada:	3c c0       	rjmp	.+120    	; 0x1b54 <MCAL_DIO_u8SetPinDirection+0x96>
			{
				CLR_BIT(DDRB,LOC_u8PinID);
				LOC_u8Return_Value = E_OK;
			}
			else if(LOC_u8PortID ==PortC)
    1adc:	82 30       	cpi	r24, 0x02	; 2
    1ade:	09 f4       	brne	.+2      	; 0x1ae2 <MCAL_DIO_u8SetPinDirection+0x24>
    1ae0:	52 c0       	rjmp	.+164    	; 0x1b86 <MCAL_DIO_u8SetPinDirection+0xc8>
				CLR_BIT(DDRC,LOC_u8PinID);
				LOC_u8Return_Value = E_OK;
			}
			else if(LOC_u8PortID ==PortD)
			{
				CLR_BIT(DDRD,LOC_u8PinID);
    1ae2:	21 b3       	in	r18, 0x11	; 17
    1ae4:	81 e0       	ldi	r24, 0x01	; 1
    1ae6:	90 e0       	ldi	r25, 0x00	; 0
    1ae8:	02 c0       	rjmp	.+4      	; 0x1aee <MCAL_DIO_u8SetPinDirection+0x30>
    1aea:	88 0f       	add	r24, r24
    1aec:	99 1f       	adc	r25, r25
    1aee:	6a 95       	dec	r22
    1af0:	e2 f7       	brpl	.-8      	; 0x1aea <MCAL_DIO_u8SetPinDirection+0x2c>
    1af2:	80 95       	com	r24
    1af4:	82 23       	and	r24, r18
    1af6:	81 bb       	out	0x11, r24	; 17
    1af8:	80 e0       	ldi	r24, 0x00	; 0
    1afa:	08 95       	ret
		}
		else if(LOC_u8PinDirection == Pin_Input)
		{
			if(LOC_u8PortID == PortA)
			{
				CLR_BIT(DDRA,LOC_u8PinID);
    1afc:	2a b3       	in	r18, 0x1a	; 26
    1afe:	81 e0       	ldi	r24, 0x01	; 1
    1b00:	90 e0       	ldi	r25, 0x00	; 0
    1b02:	02 c0       	rjmp	.+4      	; 0x1b08 <MCAL_DIO_u8SetPinDirection+0x4a>
    1b04:	88 0f       	add	r24, r24
    1b06:	99 1f       	adc	r25, r25
    1b08:	6a 95       	dec	r22
    1b0a:	e2 f7       	brpl	.-8      	; 0x1b04 <MCAL_DIO_u8SetPinDirection+0x46>
    1b0c:	80 95       	com	r24
    1b0e:	82 23       	and	r24, r18
    1b10:	8a bb       	out	0x1a, r24	; 26
    1b12:	80 e0       	ldi	r24, 0x00	; 0
    1b14:	08 95       	ret
	u8 LOC_u8Return_Value = E_NOT_OK;
	if( (LOC_u8PortID <= PortD) && (LOC_u8PinID <= Pin7) && (LOC_u8PinDirection <= Pin_Output) )
	{
		if(LOC_u8PinDirection == Pin_Output)
		{
			if(LOC_u8PortID == PortA)
    1b16:	88 23       	and	r24, r24
    1b18:	89 f0       	breq	.+34     	; 0x1b3c <MCAL_DIO_u8SetPinDirection+0x7e>
			{
				SET_BIT(DDRA,LOC_u8PinID);
				LOC_u8Return_Value = E_OK;
			}
			else if(LOC_u8PortID ==PortB)
    1b1a:	81 30       	cpi	r24, 0x01	; 1
    1b1c:	41 f1       	breq	.+80     	; 0x1b6e <MCAL_DIO_u8SetPinDirection+0xb0>
			{
				SET_BIT(DDRB,LOC_u8PinID);
				LOC_u8Return_Value = E_OK;
			}
			else if(LOC_u8PortID ==PortC)
    1b1e:	82 30       	cpi	r24, 0x02	; 2
    1b20:	09 f4       	brne	.+2      	; 0x1b24 <MCAL_DIO_u8SetPinDirection+0x66>
    1b22:	3e c0       	rjmp	.+124    	; 0x1ba0 <MCAL_DIO_u8SetPinDirection+0xe2>
				SET_BIT(DDRC,LOC_u8PinID);
				LOC_u8Return_Value = E_OK;
			}
			else if(LOC_u8PortID ==PortD)
			{
				SET_BIT(DDRD,LOC_u8PinID);
    1b24:	21 b3       	in	r18, 0x11	; 17
    1b26:	81 e0       	ldi	r24, 0x01	; 1
    1b28:	90 e0       	ldi	r25, 0x00	; 0
    1b2a:	02 c0       	rjmp	.+4      	; 0x1b30 <MCAL_DIO_u8SetPinDirection+0x72>
    1b2c:	88 0f       	add	r24, r24
    1b2e:	99 1f       	adc	r25, r25
    1b30:	6a 95       	dec	r22
    1b32:	e2 f7       	brpl	.-8      	; 0x1b2c <MCAL_DIO_u8SetPinDirection+0x6e>
    1b34:	28 2b       	or	r18, r24
    1b36:	21 bb       	out	0x11, r18	; 17
    1b38:	80 e0       	ldi	r24, 0x00	; 0
    1b3a:	08 95       	ret
	{
		if(LOC_u8PinDirection == Pin_Output)
		{
			if(LOC_u8PortID == PortA)
			{
				SET_BIT(DDRA,LOC_u8PinID);
    1b3c:	2a b3       	in	r18, 0x1a	; 26
    1b3e:	81 e0       	ldi	r24, 0x01	; 1
    1b40:	90 e0       	ldi	r25, 0x00	; 0
    1b42:	02 c0       	rjmp	.+4      	; 0x1b48 <MCAL_DIO_u8SetPinDirection+0x8a>
    1b44:	88 0f       	add	r24, r24
    1b46:	99 1f       	adc	r25, r25
    1b48:	6a 95       	dec	r22
    1b4a:	e2 f7       	brpl	.-8      	; 0x1b44 <MCAL_DIO_u8SetPinDirection+0x86>
    1b4c:	28 2b       	or	r18, r24
    1b4e:	2a bb       	out	0x1a, r18	; 26
    1b50:	80 e0       	ldi	r24, 0x00	; 0
    1b52:	08 95       	ret
				CLR_BIT(DDRA,LOC_u8PinID);
				LOC_u8Return_Value = E_OK;
			}
			else if(LOC_u8PortID ==PortB)
			{
				CLR_BIT(DDRB,LOC_u8PinID);
    1b54:	27 b3       	in	r18, 0x17	; 23
    1b56:	81 e0       	ldi	r24, 0x01	; 1
    1b58:	90 e0       	ldi	r25, 0x00	; 0
    1b5a:	02 c0       	rjmp	.+4      	; 0x1b60 <MCAL_DIO_u8SetPinDirection+0xa2>
    1b5c:	88 0f       	add	r24, r24
    1b5e:	99 1f       	adc	r25, r25
    1b60:	6a 95       	dec	r22
    1b62:	e2 f7       	brpl	.-8      	; 0x1b5c <MCAL_DIO_u8SetPinDirection+0x9e>
    1b64:	80 95       	com	r24
    1b66:	82 23       	and	r24, r18
    1b68:	87 bb       	out	0x17, r24	; 23
    1b6a:	80 e0       	ldi	r24, 0x00	; 0
    1b6c:	08 95       	ret
				SET_BIT(DDRA,LOC_u8PinID);
				LOC_u8Return_Value = E_OK;
			}
			else if(LOC_u8PortID ==PortB)
			{
				SET_BIT(DDRB,LOC_u8PinID);
    1b6e:	27 b3       	in	r18, 0x17	; 23
    1b70:	81 e0       	ldi	r24, 0x01	; 1
    1b72:	90 e0       	ldi	r25, 0x00	; 0
    1b74:	02 c0       	rjmp	.+4      	; 0x1b7a <MCAL_DIO_u8SetPinDirection+0xbc>
    1b76:	88 0f       	add	r24, r24
    1b78:	99 1f       	adc	r25, r25
    1b7a:	6a 95       	dec	r22
    1b7c:	e2 f7       	brpl	.-8      	; 0x1b76 <MCAL_DIO_u8SetPinDirection+0xb8>
    1b7e:	28 2b       	or	r18, r24
    1b80:	27 bb       	out	0x17, r18	; 23
    1b82:	80 e0       	ldi	r24, 0x00	; 0
    1b84:	08 95       	ret
				CLR_BIT(DDRB,LOC_u8PinID);
				LOC_u8Return_Value = E_OK;
			}
			else if(LOC_u8PortID ==PortC)
			{
				CLR_BIT(DDRC,LOC_u8PinID);
    1b86:	24 b3       	in	r18, 0x14	; 20
    1b88:	81 e0       	ldi	r24, 0x01	; 1
    1b8a:	90 e0       	ldi	r25, 0x00	; 0
    1b8c:	02 c0       	rjmp	.+4      	; 0x1b92 <MCAL_DIO_u8SetPinDirection+0xd4>
    1b8e:	88 0f       	add	r24, r24
    1b90:	99 1f       	adc	r25, r25
    1b92:	6a 95       	dec	r22
    1b94:	e2 f7       	brpl	.-8      	; 0x1b8e <MCAL_DIO_u8SetPinDirection+0xd0>
    1b96:	80 95       	com	r24
    1b98:	82 23       	and	r24, r18
    1b9a:	84 bb       	out	0x14, r24	; 20
    1b9c:	80 e0       	ldi	r24, 0x00	; 0
    1b9e:	08 95       	ret
				SET_BIT(DDRB,LOC_u8PinID);
				LOC_u8Return_Value = E_OK;
			}
			else if(LOC_u8PortID ==PortC)
			{
				SET_BIT(DDRC,LOC_u8PinID);
    1ba0:	24 b3       	in	r18, 0x14	; 20
    1ba2:	81 e0       	ldi	r24, 0x01	; 1
    1ba4:	90 e0       	ldi	r25, 0x00	; 0
    1ba6:	02 c0       	rjmp	.+4      	; 0x1bac <MCAL_DIO_u8SetPinDirection+0xee>
    1ba8:	88 0f       	add	r24, r24
    1baa:	99 1f       	adc	r25, r25
    1bac:	6a 95       	dec	r22
    1bae:	e2 f7       	brpl	.-8      	; 0x1ba8 <MCAL_DIO_u8SetPinDirection+0xea>
    1bb0:	28 2b       	or	r18, r24
    1bb2:	24 bb       	out	0x14, r18	; 20
    1bb4:	80 e0       	ldi	r24, 0x00	; 0
    1bb6:	08 95       	ret

00001bb8 <MCAL_DIO_u8TogglePinValue>:
//TogglePortValue
//TogglePinValue
STD_TYPE MCAL_DIO_u8TogglePinValue (u8 LOC_u8PortID, u8 LOC_u8PinID)
{
	u8 LOC_u8Return_Value = E_NOT_OK;
	if( (LOC_u8PortID <= PortD) && (LOC_u8PinID <= Pin7) )
    1bb8:	84 30       	cpi	r24, 0x04	; 4
    1bba:	a0 f4       	brcc	.+40     	; 0x1be4 <MCAL_DIO_u8TogglePinValue+0x2c>
    1bbc:	68 30       	cpi	r22, 0x08	; 8
    1bbe:	90 f4       	brcc	.+36     	; 0x1be4 <MCAL_DIO_u8TogglePinValue+0x2c>
	{

		if(LOC_u8PortID == PortA)
    1bc0:	88 23       	and	r24, r24
    1bc2:	91 f0       	breq	.+36     	; 0x1be8 <MCAL_DIO_u8TogglePinValue+0x30>
		{
			TOGGLE_BIT(PORTA,LOC_u8PinID);
			LOC_u8Return_Value = E_OK;
		}
		else if(LOC_u8PortID ==PortB)
    1bc4:	81 30       	cpi	r24, 0x01	; 1
    1bc6:	e1 f0       	breq	.+56     	; 0x1c00 <MCAL_DIO_u8TogglePinValue+0x48>
		{
			TOGGLE_BIT(PORTB,LOC_u8PinID);
			LOC_u8Return_Value = E_OK;
		}
		else if(LOC_u8PortID ==PortC)
    1bc8:	82 30       	cpi	r24, 0x02	; 2
    1bca:	31 f1       	breq	.+76     	; 0x1c18 <MCAL_DIO_u8TogglePinValue+0x60>
			TOGGLE_BIT(PORTC,LOC_u8PinID);
			LOC_u8Return_Value = E_OK;
		}
		else if(LOC_u8PortID ==PortD)
		{
			TOGGLE_BIT(PORTD,LOC_u8PinID);
    1bcc:	22 b3       	in	r18, 0x12	; 18
    1bce:	81 e0       	ldi	r24, 0x01	; 1
    1bd0:	90 e0       	ldi	r25, 0x00	; 0
    1bd2:	02 c0       	rjmp	.+4      	; 0x1bd8 <MCAL_DIO_u8TogglePinValue+0x20>
    1bd4:	88 0f       	add	r24, r24
    1bd6:	99 1f       	adc	r25, r25
    1bd8:	6a 95       	dec	r22
    1bda:	e2 f7       	brpl	.-8      	; 0x1bd4 <MCAL_DIO_u8TogglePinValue+0x1c>
    1bdc:	28 27       	eor	r18, r24
    1bde:	22 bb       	out	0x12, r18	; 18
    1be0:	80 e0       	ldi	r24, 0x00	; 0
    1be2:	08 95       	ret
    1be4:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		//Do Nothing.
	}
	return LOC_u8Return_Value;
}
    1be6:	08 95       	ret
	if( (LOC_u8PortID <= PortD) && (LOC_u8PinID <= Pin7) )
	{

		if(LOC_u8PortID == PortA)
		{
			TOGGLE_BIT(PORTA,LOC_u8PinID);
    1be8:	2b b3       	in	r18, 0x1b	; 27
    1bea:	81 e0       	ldi	r24, 0x01	; 1
    1bec:	90 e0       	ldi	r25, 0x00	; 0
    1bee:	02 c0       	rjmp	.+4      	; 0x1bf4 <MCAL_DIO_u8TogglePinValue+0x3c>
    1bf0:	88 0f       	add	r24, r24
    1bf2:	99 1f       	adc	r25, r25
    1bf4:	6a 95       	dec	r22
    1bf6:	e2 f7       	brpl	.-8      	; 0x1bf0 <MCAL_DIO_u8TogglePinValue+0x38>
    1bf8:	28 27       	eor	r18, r24
    1bfa:	2b bb       	out	0x1b, r18	; 27
    1bfc:	80 e0       	ldi	r24, 0x00	; 0
    1bfe:	08 95       	ret
			LOC_u8Return_Value = E_OK;
		}
		else if(LOC_u8PortID ==PortB)
		{
			TOGGLE_BIT(PORTB,LOC_u8PinID);
    1c00:	28 b3       	in	r18, 0x18	; 24
    1c02:	81 e0       	ldi	r24, 0x01	; 1
    1c04:	90 e0       	ldi	r25, 0x00	; 0
    1c06:	02 c0       	rjmp	.+4      	; 0x1c0c <MCAL_DIO_u8TogglePinValue+0x54>
    1c08:	88 0f       	add	r24, r24
    1c0a:	99 1f       	adc	r25, r25
    1c0c:	6a 95       	dec	r22
    1c0e:	e2 f7       	brpl	.-8      	; 0x1c08 <MCAL_DIO_u8TogglePinValue+0x50>
    1c10:	28 27       	eor	r18, r24
    1c12:	28 bb       	out	0x18, r18	; 24
    1c14:	80 e0       	ldi	r24, 0x00	; 0
    1c16:	08 95       	ret
			LOC_u8Return_Value = E_OK;
		}
		else if(LOC_u8PortID ==PortC)
		{
			TOGGLE_BIT(PORTC,LOC_u8PinID);
    1c18:	25 b3       	in	r18, 0x15	; 21
    1c1a:	81 e0       	ldi	r24, 0x01	; 1
    1c1c:	90 e0       	ldi	r25, 0x00	; 0
    1c1e:	02 c0       	rjmp	.+4      	; 0x1c24 <MCAL_DIO_u8TogglePinValue+0x6c>
    1c20:	88 0f       	add	r24, r24
    1c22:	99 1f       	adc	r25, r25
    1c24:	6a 95       	dec	r22
    1c26:	e2 f7       	brpl	.-8      	; 0x1c20 <MCAL_DIO_u8TogglePinValue+0x68>
    1c28:	28 27       	eor	r18, r24
    1c2a:	25 bb       	out	0x15, r18	; 21
    1c2c:	80 e0       	ldi	r24, 0x00	; 0
    1c2e:	08 95       	ret

00001c30 <MCAL_ADC_ADC_Init>:
//(Volt_Ref,LEFT/RIGHT_ADJUST,INPUT_Channel) //Single Ended Input

void MCAL_ADC_ADC_Init(void)
{
#if   ADC_V_REF   ==   AVCC
	SET_BIT(ADMUX,REFS0);
    1c30:	3e 9a       	sbi	0x07, 6	; 7
	CLR_BIT(ADMUX,REFS1);
    1c32:	3f 98       	cbi	0x07, 7	; 7
#elif ADC_V_REF   ==   V_256
	SET_BIT(ADMUX,REFS0);
	SET_BIT(ADMUX,REFS1);
#endif
#if   	ADJUST   ==   LEFT
	SET_BIT(ADMUX,ADLAR);
    1c34:	3d 9a       	sbi	0x07, 5	; 7
#elif   ADJUST   ==   RIGHT
	CLR_BIT(ADMUX,ADLAR);
#endif

	/* To select an ADC channel */
	ADMUX = (ADMUX & KEEP_ADMUX) | ADC_CHANNEL ;
    1c36:	87 b1       	in	r24, 0x07	; 7
    1c38:	81 74       	andi	r24, 0x41	; 65
    1c3a:	87 b9       	out	0x07, r24	; 7
	/* To select the ADC frequency (Under Editing) */
	ADCSRA = 0b10000111;
    1c3c:	87 e8       	ldi	r24, 0x87	; 135
    1c3e:	86 b9       	out	0x06, r24	; 6
	//MCAL_Interrupt_GIE_Enable();
	/* To enable ADC circuit */
	//SET_BIT(ADCSRA,ADEN_BIT);


}
    1c40:	08 95       	ret

00001c42 <MCAL_ADC_ADC_InterruptEnable>:

void MCAL_ADC_ADC_InterruptEnable(void)
{
	/* To Enable ADC Interrupt */
	SET_BIT(ADCSRA,ADIE);
    1c42:	33 9a       	sbi	0x06, 3	; 6
}
    1c44:	08 95       	ret

00001c46 <MCAL_ADC_ADC_InterruptDisable>:
void MCAL_ADC_ADC_InterruptDisable(void)
{
	/* To Disable ADC Interrupt */
	CLR_BIT(ADCSRA,ADIE);
    1c46:	33 98       	cbi	0x06, 3	; 6
}
    1c48:	08 95       	ret

00001c4a <MCAL_ADC_ADC_StartConversion>:


void MCAL_ADC_ADC_StartConversion(void)
{
	/* To start conversion */
	SET_BIT(ADCSRA,ADSC);
    1c4a:	36 9a       	sbi	0x06, 6	; 6
	//while(IS_BIT_CLEARED(ADCSRA,ADIF_BIT));
}
    1c4c:	08 95       	ret

00001c4e <MCAL_ADC_voidADC_CallBack>:

void MCAL_ADC_voidADC_CallBack(void(*ADCAction)(void))
{
	if (ADCAction != NULL)
    1c4e:	00 97       	sbiw	r24, 0x00	; 0
    1c50:	21 f0       	breq	.+8      	; 0x1c5a <MCAL_ADC_voidADC_CallBack+0xc>
	{
		GLOB_PADC_CallBack = ADCAction;
    1c52:	90 93 2d 07 	sts	0x072D, r25
    1c56:	80 93 2c 07 	sts	0x072C, r24
    1c5a:	08 95       	ret

00001c5c <__vector_16>:
}



ISR(ADC_vect)
{
    1c5c:	1f 92       	push	r1
    1c5e:	0f 92       	push	r0
    1c60:	0f b6       	in	r0, 0x3f	; 63
    1c62:	0f 92       	push	r0
    1c64:	11 24       	eor	r1, r1
    1c66:	2f 93       	push	r18
    1c68:	3f 93       	push	r19
    1c6a:	4f 93       	push	r20
    1c6c:	5f 93       	push	r21
    1c6e:	6f 93       	push	r22
    1c70:	7f 93       	push	r23
    1c72:	8f 93       	push	r24
    1c74:	9f 93       	push	r25
    1c76:	af 93       	push	r26
    1c78:	bf 93       	push	r27
    1c7a:	ef 93       	push	r30
    1c7c:	ff 93       	push	r31
	if (GLOB_PADC_CallBack != NULL)
    1c7e:	e0 91 2c 07 	lds	r30, 0x072C
    1c82:	f0 91 2d 07 	lds	r31, 0x072D
    1c86:	30 97       	sbiw	r30, 0x00	; 0
    1c88:	09 f0       	breq	.+2      	; 0x1c8c <__vector_16+0x30>
	{
		GLOB_PADC_CallBack();
    1c8a:	09 95       	icall
	}

}
    1c8c:	ff 91       	pop	r31
    1c8e:	ef 91       	pop	r30
    1c90:	bf 91       	pop	r27
    1c92:	af 91       	pop	r26
    1c94:	9f 91       	pop	r25
    1c96:	8f 91       	pop	r24
    1c98:	7f 91       	pop	r23
    1c9a:	6f 91       	pop	r22
    1c9c:	5f 91       	pop	r21
    1c9e:	4f 91       	pop	r20
    1ca0:	3f 91       	pop	r19
    1ca2:	2f 91       	pop	r18
    1ca4:	0f 90       	pop	r0
    1ca6:	0f be       	out	0x3f, r0	; 63
    1ca8:	0f 90       	pop	r0
    1caa:	1f 90       	pop	r1
    1cac:	18 95       	reti

00001cae <HAL_Servo_voidServoCloseDoor>:
	MCAL_Timer_Timer1_voidSetOCR1AValue(1500);
}

void HAL_Servo_voidServoCloseDoor(void)
{
	MCAL_Timer_Timer1_voidSetOCR1AValue(750);
    1cae:	8e ee       	ldi	r24, 0xEE	; 238
    1cb0:	92 e0       	ldi	r25, 0x02	; 2
    1cb2:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <MCAL_Timer_Timer1_voidSetOCR1AValue>
}
    1cb6:	08 95       	ret

00001cb8 <HAL_Servo_voidServoOpenDoor>:
	MCAL_DIO_u8SetPinDirection(SERVO_PORT,SERVO_PIN,OUTPUT);
}

void HAL_Servo_voidServoOpenDoor(void)
{
	MCAL_Timer_Timer1_voidSetOCR1AValue(1500);
    1cb8:	8c ed       	ldi	r24, 0xDC	; 220
    1cba:	95 e0       	ldi	r25, 0x05	; 5
    1cbc:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <MCAL_Timer_Timer1_voidSetOCR1AValue>
}
    1cc0:	08 95       	ret

00001cc2 <HAL_Servo_voidServoInit>:
 */
#include"Servo.h"

void HAL_Servo_voidServoInit(void)
{
	ServiceLayer_PWM_voidGenerateHZ(SERVO_FREQUENC_50_HZ,STARTING_DUTYCYCLE_5_);
    1cc2:	82 e3       	ldi	r24, 0x32	; 50
    1cc4:	90 e0       	ldi	r25, 0x00	; 0
    1cc6:	65 e0       	ldi	r22, 0x05	; 5
    1cc8:	0e 94 78 06 	call	0xcf0	; 0xcf0 <ServiceLayer_PWM_voidGenerateHZ>
	MCAL_DIO_u8SetPinDirection(SERVO_PORT,SERVO_PIN,OUTPUT);
    1ccc:	83 e0       	ldi	r24, 0x03	; 3
    1cce:	65 e0       	ldi	r22, 0x05	; 5
    1cd0:	41 e0       	ldi	r20, 0x01	; 1
    1cd2:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <MCAL_DIO_u8SetPinDirection>
}
    1cd6:	08 95       	ret

00001cd8 <HAL_MCP4018_POT_voidWriteStep>:
	MCAL_TWI_voidMasterInit();
}


void HAL_MCP4018_POT_voidWriteStep(u8 LOC_u8Step)
{
    1cd8:	1f 93       	push	r17
    1cda:	18 2f       	mov	r17, r24
	if(LOC_u8Step <= MAX_STEPS)
    1cdc:	87 fd       	sbrc	r24, 7
    1cde:	0e c0       	rjmp	.+28     	; 0x1cfc <HAL_MCP4018_POT_voidWriteStep+0x24>
	{
		MCAL_TWI_voidStartCondition();
    1ce0:	0e 94 85 07 	call	0xf0a	; 0xf0a <MCAL_TWI_voidStartCondition>
		MCAL_TWI_voidSendSlaveAddressWithWrite(DEVICE_SLAVE_ADDRESS);
    1ce4:	8f ea       	ldi	r24, 0xAF	; 175
    1ce6:	0e 94 a3 07 	call	0xf46	; 0xf46 <MCAL_TWI_voidSendSlaveAddressWithWrite>
		MCAL_TWI_voidMasterSendData(LOC_u8Step);
    1cea:	81 2f       	mov	r24, r17
    1cec:	0e 94 ca 07 	call	0xf94	; 0xf94 <MCAL_TWI_voidMasterSendData>
		MCAL_TWI_voidStopCondition();
    1cf0:	0e 94 99 07 	call	0xf32	; 0xf32 <MCAL_TWI_voidStopCondition>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1cf4:	80 e4       	ldi	r24, 0x40	; 64
    1cf6:	9c e9       	ldi	r25, 0x9C	; 156
    1cf8:	01 97       	sbiw	r24, 0x01	; 1
    1cfa:	f1 f7       	brne	.-4      	; 0x1cf8 <HAL_MCP4018_POT_voidWriteStep+0x20>
	}
	else
	{
		//Do Nothing.
	}
}
    1cfc:	1f 91       	pop	r17
    1cfe:	08 95       	ret

00001d00 <HAL_MCP4018_POT_voidDeviceInit>:
 */
#include"POT.h"

void HAL_MCP4018_POT_voidDeviceInit(void)
{
	MCAL_TWI_voidMasterInit();
    1d00:	0e 94 69 07 	call	0xed2	; 0xed2 <MCAL_TWI_voidMasterInit>
}
    1d04:	08 95       	ret

00001d06 <LM35_Read>:
u8 LM35_Read(void)
{

	u16 LOC_u16AnalogValue,LOC_u16DigitalValue;
	u8 LOC_u8Temp;
	MCAL_ADC_ADC_StartConversion();
    1d06:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <MCAL_ADC_ADC_StartConversion>

	LOC_u16DigitalValue = ADC_DATA;
    1d0a:	64 b1       	in	r22, 0x04	; 4
    1d0c:	75 b1       	in	r23, 0x05	; 5
    1d0e:	80 e0       	ldi	r24, 0x00	; 0
    1d10:	90 e0       	ldi	r25, 0x00	; 0
    1d12:	28 e8       	ldi	r18, 0x88	; 136
    1d14:	33 e1       	ldi	r19, 0x13	; 19
    1d16:	40 e0       	ldi	r20, 0x00	; 0
    1d18:	50 e0       	ldi	r21, 0x00	; 0
    1d1a:	0e 94 73 2b 	call	0x56e6	; 0x56e6 <__mulsi3>
    1d1e:	dc 01       	movw	r26, r24
    1d20:	cb 01       	movw	r24, r22
    1d22:	2a e0       	ldi	r18, 0x0A	; 10
    1d24:	b6 95       	lsr	r27
    1d26:	a7 95       	ror	r26
    1d28:	97 95       	ror	r25
    1d2a:	87 95       	ror	r24
    1d2c:	2a 95       	dec	r18
    1d2e:	d1 f7       	brne	.-12     	; 0x1d24 <LM35_Read+0x1e>
    1d30:	6a e0       	ldi	r22, 0x0A	; 10
    1d32:	70 e0       	ldi	r23, 0x00	; 0
    1d34:	0e 94 92 2b 	call	0x5724	; 0x5724 <__udivmodhi4>
    1d38:	86 2f       	mov	r24, r22

	LOC_u8Temp = LOC_u16AnalogValue/10;


	return LOC_u8Temp;
}
    1d3a:	08 95       	ret

00001d3c <LM35_Init>:

void LM35_Init(void)
{
	//ADC Initialization.
	//
	MCAL_ADC_ADC_Init();
    1d3c:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <MCAL_ADC_ADC_Init>
	//Set LM35 Pin Direction as Input.
	MCAL_DIO_u8SetPinDirection(PortA,Pin0,PIN_INPUT);
    1d40:	80 e0       	ldi	r24, 0x00	; 0
    1d42:	60 e0       	ldi	r22, 0x00	; 0
    1d44:	40 e0       	ldi	r20, 0x00	; 0
    1d46:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <MCAL_DIO_u8SetPinDirection>

}
    1d4a:	08 95       	ret

00001d4c <HAL_LED_u8LedMode>:

//LED_Mode
STD_TYPE HAL_LED_u8LedMode(u8 LOC_u8LEDPortID, u8 LOC_u8LEDPinID, u8 LOC_u8LEDMode)
{
	u8 LOC_u8Return_Value = E_NOT_OK;
	if( (LOC_u8LEDPortID <= PortD) && (LOC_u8LEDPinID <= Pin7) && (LOC_u8LEDMode <= LED_TOG))
    1d4c:	84 30       	cpi	r24, 0x04	; 4
    1d4e:	50 f4       	brcc	.+20     	; 0x1d64 <HAL_LED_u8LedMode+0x18>
    1d50:	68 30       	cpi	r22, 0x08	; 8
    1d52:	40 f4       	brcc	.+16     	; 0x1d64 <HAL_LED_u8LedMode+0x18>
    1d54:	43 30       	cpi	r20, 0x03	; 3
    1d56:	30 f4       	brcc	.+12     	; 0x1d64 <HAL_LED_u8LedMode+0x18>
	{
		if (LOC_u8LEDMode == LED_ON)
    1d58:	41 30       	cpi	r20, 0x01	; 1
    1d5a:	31 f0       	breq	.+12     	; 0x1d68 <HAL_LED_u8LedMode+0x1c>
		{
			LOC_u8Return_Value = MCAL_DIO_u8SetPinValue(LOC_u8LEDPortID, LOC_u8LEDPinID, LED_ON);
		}
		else if (LOC_u8LEDMode == LED_OFF)
    1d5c:	44 23       	and	r20, r20
    1d5e:	21 f0       	breq	.+8      	; 0x1d68 <HAL_LED_u8LedMode+0x1c>
		{
			LOC_u8Return_Value = MCAL_DIO_u8SetPinValue(LOC_u8LEDPortID, LOC_u8LEDPinID, LED_OFF);
		}
		else if (LOC_u8LEDMode == LED_TOG)
    1d60:	42 30       	cpi	r20, 0x02	; 2
    1d62:	29 f0       	breq	.+10     	; 0x1d6e <HAL_LED_u8LedMode+0x22>
		{
			LOC_u8Return_Value = MCAL_DIO_u8TogglePinValue(LOC_u8LEDPortID, LOC_u8LEDPinID);
    1d64:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		//Do Nothing.
	}
	return LOC_u8Return_Value;
}
    1d66:	08 95       	ret
		{
			LOC_u8Return_Value = MCAL_DIO_u8SetPinValue(LOC_u8LEDPortID, LOC_u8LEDPinID, LED_ON);
		}
		else if (LOC_u8LEDMode == LED_OFF)
		{
			LOC_u8Return_Value = MCAL_DIO_u8SetPinValue(LOC_u8LEDPortID, LOC_u8LEDPinID, LED_OFF);
    1d68:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <MCAL_DIO_u8SetPinValue>
    1d6c:	08 95       	ret
		}
		else if (LOC_u8LEDMode == LED_TOG)
		{
			LOC_u8Return_Value = MCAL_DIO_u8TogglePinValue(LOC_u8LEDPortID, LOC_u8LEDPinID);
    1d6e:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <MCAL_DIO_u8TogglePinValue>
    1d72:	08 95       	ret

00001d74 <HAL_LED_u8LedInit>:

//LED_Init
STD_TYPE HAL_LED_u8LedInit(u8 LOC_u8LEDPortID, u8 LOC_u8LEDPinID)
{
	u8 LOC_u8Return_Value = E_NOT_OK;
	if( (LOC_u8LEDPortID <= PortD) && (LOC_u8LEDPinID <= Pin7) )
    1d74:	84 30       	cpi	r24, 0x04	; 4
    1d76:	10 f4       	brcc	.+4      	; 0x1d7c <HAL_LED_u8LedInit+0x8>
    1d78:	68 30       	cpi	r22, 0x08	; 8
    1d7a:	10 f0       	brcs	.+4      	; 0x1d80 <HAL_LED_u8LedInit+0xc>
	{
		LOC_u8Return_Value = MCAL_DIO_u8SetPinDirection(LOC_u8LEDPortID,LOC_u8LEDPinID,Pin_Output);
    1d7c:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		//Do Nothing.
	}
	return LOC_u8Return_Value;
}
    1d7e:	08 95       	ret
STD_TYPE HAL_LED_u8LedInit(u8 LOC_u8LEDPortID, u8 LOC_u8LEDPinID)
{
	u8 LOC_u8Return_Value = E_NOT_OK;
	if( (LOC_u8LEDPortID <= PortD) && (LOC_u8LEDPinID <= Pin7) )
	{
		LOC_u8Return_Value = MCAL_DIO_u8SetPinDirection(LOC_u8LEDPortID,LOC_u8LEDPinID,Pin_Output);
    1d80:	41 e0       	ldi	r20, 0x01	; 1
    1d82:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <MCAL_DIO_u8SetPinDirection>
    1d86:	08 95       	ret

00001d88 <HAL_EEPROM_voidReadData>:
	_delay_ms(10);
}


void HAL_EEPROM_voidReadData(u16 LOC_u16Location,u8* LOC_Pu8Data)
{
    1d88:	0f 93       	push	r16
    1d8a:	1f 93       	push	r17
    1d8c:	cf 93       	push	r28
    1d8e:	df 93       	push	r29
    1d90:	9c 01       	movw	r18, r24
    1d92:	eb 01       	movw	r28, r22
	u8 LOC_u8FixedAddress = 0b01010000,LOC_u8Location;
	if (LOC_u16Location <=255 )
    1d94:	8f 3f       	cpi	r24, 0xFF	; 255
    1d96:	91 05       	cpc	r25, r1
    1d98:	89 f1       	breq	.+98     	; 0x1dfc <HAL_EEPROM_voidReadData+0x74>
    1d9a:	80 f1       	brcs	.+96     	; 0x1dfc <HAL_EEPROM_voidReadData+0x74>
	{
		LOC_u8FixedAddress = 0b01010000;
		LOC_u8Location =  (u8) LOC_u16Location;
	}
	else if ((LOC_u16Location >= 256) && (LOC_u16Location <= 511))
    1d9c:	80 50       	subi	r24, 0x00	; 0
    1d9e:	91 40       	sbci	r25, 0x01	; 1
    1da0:	8f 3f       	cpi	r24, 0xFF	; 255
    1da2:	91 05       	cpc	r25, r1
    1da4:	91 f0       	breq	.+36     	; 0x1dca <HAL_EEPROM_voidReadData+0x42>
    1da6:	88 f0       	brcs	.+34     	; 0x1dca <HAL_EEPROM_voidReadData+0x42>
	{
		LOC_u8FixedAddress = 0b01010001;
		LOC_u8Location =  (u8) (LOC_u16Location - 256);
	}
	else if ((LOC_u16Location >= 512) && (LOC_u16Location <= 767))
    1da8:	c9 01       	movw	r24, r18
    1daa:	80 50       	subi	r24, 0x00	; 0
    1dac:	92 40       	sbci	r25, 0x02	; 2
    1dae:	8f 3f       	cpi	r24, 0xFF	; 255
    1db0:	91 05       	cpc	r25, r1
    1db2:	39 f1       	breq	.+78     	; 0x1e02 <HAL_EEPROM_voidReadData+0x7a>
    1db4:	30 f1       	brcs	.+76     	; 0x1e02 <HAL_EEPROM_voidReadData+0x7a>
	{
		LOC_u8FixedAddress = 0b01010010;
		LOC_u8Location =  (u8) (LOC_u16Location - 512);
	}
	else if ((LOC_u16Location >= 768) && (LOC_u16Location <= 1023))
    1db6:	c9 01       	movw	r24, r18
    1db8:	80 50       	subi	r24, 0x00	; 0
    1dba:	93 40       	sbci	r25, 0x03	; 3
    1dbc:	8f 3f       	cpi	r24, 0xFF	; 255
    1dbe:	91 05       	cpc	r25, r1
    1dc0:	09 f0       	breq	.+2      	; 0x1dc4 <HAL_EEPROM_voidReadData+0x3c>
    1dc2:	10 f5       	brcc	.+68     	; 0x1e08 <HAL_EEPROM_voidReadData+0x80>
	{
		LOC_u8FixedAddress = 0b01010100;
		LOC_u8Location =  (u8) (LOC_u16Location - 768);
    1dc4:	02 2f       	mov	r16, r18
    1dc6:	14 e5       	ldi	r17, 0x54	; 84
    1dc8:	02 c0       	rjmp	.+4      	; 0x1dce <HAL_EEPROM_voidReadData+0x46>
		LOC_u8Location =  (u8) LOC_u16Location;
	}
	else if ((LOC_u16Location >= 256) && (LOC_u16Location <= 511))
	{
		LOC_u8FixedAddress = 0b01010001;
		LOC_u8Location =  (u8) (LOC_u16Location - 256);
    1dca:	02 2f       	mov	r16, r18
    1dcc:	11 e5       	ldi	r17, 0x51	; 81
		LOC_u8FixedAddress = 0b01010100;
		LOC_u8Location =  (u8) (LOC_u16Location - 768);
	}
	else {/*Do Nothing*/}

	MCAL_TWI_voidStartCondition();
    1dce:	0e 94 85 07 	call	0xf0a	; 0xf0a <MCAL_TWI_voidStartCondition>
	MCAL_TWI_voidSendSlaveAddressWithWrite(LOC_u8FixedAddress);
    1dd2:	81 2f       	mov	r24, r17
    1dd4:	0e 94 a3 07 	call	0xf46	; 0xf46 <MCAL_TWI_voidSendSlaveAddressWithWrite>
	MCAL_TWI_voidMasterSendData(LOC_u8Location);
    1dd8:	80 2f       	mov	r24, r16
    1dda:	0e 94 ca 07 	call	0xf94	; 0xf94 <MCAL_TWI_voidMasterSendData>
	MCAL_TWI_voidRepeatedStartCondition();
    1dde:	0e 94 8f 07 	call	0xf1e	; 0xf1e <MCAL_TWI_voidRepeatedStartCondition>
	MCAL_TWI_voidSendSlaveAddressWithRead(LOC_u8FixedAddress);
    1de2:	81 2f       	mov	r24, r17
    1de4:	0e 94 b0 07 	call	0xf60	; 0xf60 <MCAL_TWI_voidSendSlaveAddressWithRead>
	MCAL_TWI_voidMasterReceiveDataNACK(LOC_Pu8Data);
    1de8:	ce 01       	movw	r24, r28
    1dea:	0e 94 d6 07 	call	0xfac	; 0xfac <MCAL_TWI_voidMasterReceiveDataNACK>
	MCAL_TWI_voidStopCondition();
    1dee:	0e 94 99 07 	call	0xf32	; 0xf32 <MCAL_TWI_voidStopCondition>

}
    1df2:	df 91       	pop	r29
    1df4:	cf 91       	pop	r28
    1df6:	1f 91       	pop	r17
    1df8:	0f 91       	pop	r16
    1dfa:	08 95       	ret
{
	u8 LOC_u8FixedAddress = 0b01010000,LOC_u8Location;
	if (LOC_u16Location <=255 )
	{
		LOC_u8FixedAddress = 0b01010000;
		LOC_u8Location =  (u8) LOC_u16Location;
    1dfc:	08 2f       	mov	r16, r24
    1dfe:	10 e5       	ldi	r17, 0x50	; 80
    1e00:	e6 cf       	rjmp	.-52     	; 0x1dce <HAL_EEPROM_voidReadData+0x46>
		LOC_u8Location =  (u8) (LOC_u16Location - 256);
	}
	else if ((LOC_u16Location >= 512) && (LOC_u16Location <= 767))
	{
		LOC_u8FixedAddress = 0b01010010;
		LOC_u8Location =  (u8) (LOC_u16Location - 512);
    1e02:	02 2f       	mov	r16, r18
    1e04:	12 e5       	ldi	r17, 0x52	; 82
    1e06:	e3 cf       	rjmp	.-58     	; 0x1dce <HAL_EEPROM_voidReadData+0x46>
	}
	else if ((LOC_u16Location >= 768) && (LOC_u16Location <= 1023))
    1e08:	10 e5       	ldi	r17, 0x50	; 80
    1e0a:	e1 cf       	rjmp	.-62     	; 0x1dce <HAL_EEPROM_voidReadData+0x46>

00001e0c <HAL_EEPROM_voidWriteData>:
 *      Author: Abdulrahman Ayman
 */
#include"EEPROM.h"

void HAL_EEPROM_voidWriteData(u16 LOC_u16Location,u8 LOC_u8Data)
{
    1e0c:	ff 92       	push	r15
    1e0e:	0f 93       	push	r16
    1e10:	1f 93       	push	r17
    1e12:	9c 01       	movw	r18, r24
    1e14:	f6 2e       	mov	r15, r22
	u8 LOC_u8FixedAddress = 0b01010000,LOC_u8Location;
	if (LOC_u16Location <=255 )
    1e16:	8f 3f       	cpi	r24, 0xFF	; 255
    1e18:	91 05       	cpc	r25, r1
    1e1a:	79 f1       	breq	.+94     	; 0x1e7a <HAL_EEPROM_voidWriteData+0x6e>
    1e1c:	70 f1       	brcs	.+92     	; 0x1e7a <HAL_EEPROM_voidWriteData+0x6e>
	{
		LOC_u8FixedAddress = 0b01010000;
		LOC_u8Location =  (u8) LOC_u16Location;
	}
	else if ((LOC_u16Location >= 256) && (LOC_u16Location <= 511))
    1e1e:	80 50       	subi	r24, 0x00	; 0
    1e20:	91 40       	sbci	r25, 0x01	; 1
    1e22:	8f 3f       	cpi	r24, 0xFF	; 255
    1e24:	91 05       	cpc	r25, r1
    1e26:	91 f0       	breq	.+36     	; 0x1e4c <HAL_EEPROM_voidWriteData+0x40>
    1e28:	88 f0       	brcs	.+34     	; 0x1e4c <HAL_EEPROM_voidWriteData+0x40>
	{
		LOC_u8FixedAddress = 0b01010001;
		LOC_u8Location =  (u8) (LOC_u16Location - 256);
	}
	else if ((LOC_u16Location >= 512) && (LOC_u16Location <= 767))
    1e2a:	c9 01       	movw	r24, r18
    1e2c:	80 50       	subi	r24, 0x00	; 0
    1e2e:	92 40       	sbci	r25, 0x02	; 2
    1e30:	8f 3f       	cpi	r24, 0xFF	; 255
    1e32:	91 05       	cpc	r25, r1
    1e34:	29 f1       	breq	.+74     	; 0x1e80 <HAL_EEPROM_voidWriteData+0x74>
    1e36:	20 f1       	brcs	.+72     	; 0x1e80 <HAL_EEPROM_voidWriteData+0x74>
	{
		LOC_u8FixedAddress = 0b01010010;
		LOC_u8Location =  (u8) (LOC_u16Location - 512);
	}
	else if ((LOC_u16Location >= 768) && (LOC_u16Location <= 1023))
    1e38:	c9 01       	movw	r24, r18
    1e3a:	80 50       	subi	r24, 0x00	; 0
    1e3c:	93 40       	sbci	r25, 0x03	; 3
    1e3e:	8f 3f       	cpi	r24, 0xFF	; 255
    1e40:	91 05       	cpc	r25, r1
    1e42:	09 f0       	breq	.+2      	; 0x1e46 <HAL_EEPROM_voidWriteData+0x3a>
    1e44:	00 f5       	brcc	.+64     	; 0x1e86 <HAL_EEPROM_voidWriteData+0x7a>
	{
		LOC_u8FixedAddress = 0b01010100;
		LOC_u8Location =  (u8) (LOC_u16Location - 768);
    1e46:	02 2f       	mov	r16, r18
    1e48:	14 e5       	ldi	r17, 0x54	; 84
    1e4a:	02 c0       	rjmp	.+4      	; 0x1e50 <HAL_EEPROM_voidWriteData+0x44>
		LOC_u8Location =  (u8) LOC_u16Location;
	}
	else if ((LOC_u16Location >= 256) && (LOC_u16Location <= 511))
	{
		LOC_u8FixedAddress = 0b01010001;
		LOC_u8Location =  (u8) (LOC_u16Location - 256);
    1e4c:	02 2f       	mov	r16, r18
    1e4e:	11 e5       	ldi	r17, 0x51	; 81
		LOC_u8FixedAddress = 0b01010100;
		LOC_u8Location =  (u8) (LOC_u16Location - 768);
	}
	else {/*Do Nothing*/}

	MCAL_TWI_voidStartCondition();
    1e50:	0e 94 85 07 	call	0xf0a	; 0xf0a <MCAL_TWI_voidStartCondition>
	MCAL_TWI_voidSendSlaveAddressWithWrite(LOC_u8FixedAddress);
    1e54:	81 2f       	mov	r24, r17
    1e56:	0e 94 a3 07 	call	0xf46	; 0xf46 <MCAL_TWI_voidSendSlaveAddressWithWrite>
	MCAL_TWI_voidMasterSendData(LOC_u8Location);
    1e5a:	80 2f       	mov	r24, r16
    1e5c:	0e 94 ca 07 	call	0xf94	; 0xf94 <MCAL_TWI_voidMasterSendData>
	MCAL_TWI_voidMasterSendData(LOC_u8Data);
    1e60:	8f 2d       	mov	r24, r15
    1e62:	0e 94 ca 07 	call	0xf94	; 0xf94 <MCAL_TWI_voidMasterSendData>
	MCAL_TWI_voidStopCondition();
    1e66:	0e 94 99 07 	call	0xf32	; 0xf32 <MCAL_TWI_voidStopCondition>
    1e6a:	80 e4       	ldi	r24, 0x40	; 64
    1e6c:	9c e9       	ldi	r25, 0x9C	; 156
    1e6e:	01 97       	sbiw	r24, 0x01	; 1
    1e70:	f1 f7       	brne	.-4      	; 0x1e6e <HAL_EEPROM_voidWriteData+0x62>
	_delay_ms(10);
}
    1e72:	1f 91       	pop	r17
    1e74:	0f 91       	pop	r16
    1e76:	ff 90       	pop	r15
    1e78:	08 95       	ret
{
	u8 LOC_u8FixedAddress = 0b01010000,LOC_u8Location;
	if (LOC_u16Location <=255 )
	{
		LOC_u8FixedAddress = 0b01010000;
		LOC_u8Location =  (u8) LOC_u16Location;
    1e7a:	08 2f       	mov	r16, r24
    1e7c:	10 e5       	ldi	r17, 0x50	; 80
    1e7e:	e8 cf       	rjmp	.-48     	; 0x1e50 <HAL_EEPROM_voidWriteData+0x44>
		LOC_u8Location =  (u8) (LOC_u16Location - 256);
	}
	else if ((LOC_u16Location >= 512) && (LOC_u16Location <= 767))
	{
		LOC_u8FixedAddress = 0b01010010;
		LOC_u8Location =  (u8) (LOC_u16Location - 512);
    1e80:	02 2f       	mov	r16, r18
    1e82:	12 e5       	ldi	r17, 0x52	; 82
    1e84:	e5 cf       	rjmp	.-54     	; 0x1e50 <HAL_EEPROM_voidWriteData+0x44>
	}
	else if ((LOC_u16Location >= 768) && (LOC_u16Location <= 1023))
    1e86:	10 e5       	ldi	r17, 0x50	; 80
    1e88:	e3 cf       	rjmp	.-58     	; 0x1e50 <HAL_EEPROM_voidWriteData+0x44>

00001e8a <HAL_DCMOTOR_void_DcMotorStop>:
	MCAL_DIO_u8SetPinValue(PortC,Pin3,Pin_LOW);
	MCAL_DIO_u8SetPinValue(PortC,Pin4,Pin_HIGH);
}
void HAL_DCMOTOR_void_DcMotorStop(void)
{
	MCAL_DIO_u8SetPinValue(PortC,Pin3,Pin_LOW);
    1e8a:	82 e0       	ldi	r24, 0x02	; 2
    1e8c:	63 e0       	ldi	r22, 0x03	; 3
    1e8e:	40 e0       	ldi	r20, 0x00	; 0
    1e90:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPinValue(PortC,Pin4,Pin_LOW);
    1e94:	82 e0       	ldi	r24, 0x02	; 2
    1e96:	64 e0       	ldi	r22, 0x04	; 4
    1e98:	40 e0       	ldi	r20, 0x00	; 0
    1e9a:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <MCAL_DIO_u8SetPinValue>
}
    1e9e:	08 95       	ret

00001ea0 <HAL_DCMOTOR_void_DcMotorAntiClockWise>:
	MCAL_DIO_u8SetPinValue(PortC,Pin3,Pin_HIGH);
	MCAL_DIO_u8SetPinValue(PortC,Pin4,Pin_LOW);
}
void HAL_DCMOTOR_void_DcMotorAntiClockWise(u8 Loc_u8_Speed)
{
	MCAL_Timer_Timer1_voidSetOCR1BValue(Loc_u8_Speed);
    1ea0:	90 e0       	ldi	r25, 0x00	; 0
    1ea2:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <MCAL_Timer_Timer1_voidSetOCR1BValue>
	MCAL_DIO_u8SetPinValue(PortC,Pin3,Pin_LOW);
    1ea6:	82 e0       	ldi	r24, 0x02	; 2
    1ea8:	63 e0       	ldi	r22, 0x03	; 3
    1eaa:	40 e0       	ldi	r20, 0x00	; 0
    1eac:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPinValue(PortC,Pin4,Pin_HIGH);
    1eb0:	82 e0       	ldi	r24, 0x02	; 2
    1eb2:	64 e0       	ldi	r22, 0x04	; 4
    1eb4:	41 e0       	ldi	r20, 0x01	; 1
    1eb6:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <MCAL_DIO_u8SetPinValue>
}
    1eba:	08 95       	ret

00001ebc <HAL_DCMOTOR_void_DcMotorClockWise>:
	MCAL_DIO_u8SetPinDirection(PortC,Pin3,Pin_Output);
	MCAL_DIO_u8SetPinDirection(PortC,Pin4,Pin_Output);
}
void HAL_DCMOTOR_void_DcMotorClockWise(u8 Loc_u8_Speed)
{
	MCAL_Timer_Timer1_voidSetOCR1BValue(Loc_u8_Speed);
    1ebc:	90 e0       	ldi	r25, 0x00	; 0
    1ebe:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <MCAL_Timer_Timer1_voidSetOCR1BValue>
	MCAL_DIO_u8SetPinValue(PortC,Pin3,Pin_HIGH);
    1ec2:	82 e0       	ldi	r24, 0x02	; 2
    1ec4:	63 e0       	ldi	r22, 0x03	; 3
    1ec6:	41 e0       	ldi	r20, 0x01	; 1
    1ec8:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPinValue(PortC,Pin4,Pin_LOW);
    1ecc:	82 e0       	ldi	r24, 0x02	; 2
    1ece:	64 e0       	ldi	r22, 0x04	; 4
    1ed0:	40 e0       	ldi	r20, 0x00	; 0
    1ed2:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <MCAL_DIO_u8SetPinValue>
}
    1ed6:	08 95       	ret

00001ed8 <HAL_DCMOTOR_void_DcMotorInit>:
#include "DC_Motor.h"
#include "../../MCAL/TIMER/Timer1_interfacing.h"

void HAL_DCMOTOR_void_DcMotorInit(void)
{
	MCAL_DIO_u8SetPinDirection(PortC,Pin3,Pin_Output);
    1ed8:	82 e0       	ldi	r24, 0x02	; 2
    1eda:	63 e0       	ldi	r22, 0x03	; 3
    1edc:	41 e0       	ldi	r20, 0x01	; 1
    1ede:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <MCAL_DIO_u8SetPinDirection>
	MCAL_DIO_u8SetPinDirection(PortC,Pin4,Pin_Output);
    1ee2:	82 e0       	ldi	r24, 0x02	; 2
    1ee4:	64 e0       	ldi	r22, 0x04	; 4
    1ee6:	41 e0       	ldi	r20, 0x01	; 1
    1ee8:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <MCAL_DIO_u8SetPinDirection>
}
    1eec:	08 95       	ret

00001eee <HAL_Buzzer_u8BuzzerMode>:

//BuzzerMode
STD_TYPE HAL_Buzzer_u8BuzzerMode(u8 LOC_u8BuzzerPortID, u8 LOC_u8BuzzerPinID, u8 LOC_u8BuzzerMode)
{
	u8 LOC_u8Return_Value = E_NOT_OK;
	if( (LOC_u8BuzzerPortID <= PortD) && (LOC_u8BuzzerPinID <= Pin7) && (LOC_u8BuzzerMode <= Buzzer_TOG))
    1eee:	84 30       	cpi	r24, 0x04	; 4
    1ef0:	50 f4       	brcc	.+20     	; 0x1f06 <HAL_Buzzer_u8BuzzerMode+0x18>
    1ef2:	68 30       	cpi	r22, 0x08	; 8
    1ef4:	40 f4       	brcc	.+16     	; 0x1f06 <HAL_Buzzer_u8BuzzerMode+0x18>
    1ef6:	43 30       	cpi	r20, 0x03	; 3
    1ef8:	30 f4       	brcc	.+12     	; 0x1f06 <HAL_Buzzer_u8BuzzerMode+0x18>
	{
		if (LOC_u8BuzzerMode == Buzzer_ON)
    1efa:	41 30       	cpi	r20, 0x01	; 1
    1efc:	31 f0       	breq	.+12     	; 0x1f0a <HAL_Buzzer_u8BuzzerMode+0x1c>
		{
			LOC_u8Return_Value = MCAL_DIO_u8SetPinValue(LOC_u8BuzzerPortID, LOC_u8BuzzerPinID, Buzzer_ON);
		}
		else if (LOC_u8BuzzerMode == Buzzer_OFF)
    1efe:	44 23       	and	r20, r20
    1f00:	21 f0       	breq	.+8      	; 0x1f0a <HAL_Buzzer_u8BuzzerMode+0x1c>
		{
			LOC_u8Return_Value = MCAL_DIO_u8SetPinValue(LOC_u8BuzzerPortID, LOC_u8BuzzerPinID, Buzzer_OFF);
		}
		else if (LOC_u8BuzzerMode == Buzzer_TOG)
    1f02:	42 30       	cpi	r20, 0x02	; 2
    1f04:	29 f0       	breq	.+10     	; 0x1f10 <HAL_Buzzer_u8BuzzerMode+0x22>
		{
			LOC_u8Return_Value = MCAL_DIO_u8TogglePinValue(LOC_u8BuzzerPortID, LOC_u8BuzzerPinID);
    1f06:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		//Do Nothing.
	}
	return LOC_u8Return_Value;
}
    1f08:	08 95       	ret
		{
			LOC_u8Return_Value = MCAL_DIO_u8SetPinValue(LOC_u8BuzzerPortID, LOC_u8BuzzerPinID, Buzzer_ON);
		}
		else if (LOC_u8BuzzerMode == Buzzer_OFF)
		{
			LOC_u8Return_Value = MCAL_DIO_u8SetPinValue(LOC_u8BuzzerPortID, LOC_u8BuzzerPinID, Buzzer_OFF);
    1f0a:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <MCAL_DIO_u8SetPinValue>
    1f0e:	08 95       	ret
		}
		else if (LOC_u8BuzzerMode == Buzzer_TOG)
		{
			LOC_u8Return_Value = MCAL_DIO_u8TogglePinValue(LOC_u8BuzzerPortID, LOC_u8BuzzerPinID);
    1f10:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <MCAL_DIO_u8TogglePinValue>
    1f14:	08 95       	ret

00001f16 <HAL_Buzzer_u8BuzzerInit>:

//BuzzerInit
STD_TYPE HAL_Buzzer_u8BuzzerInit(u8 LOC_u8BuzzerPortID, u8 LOC_u8BuzzerPinID)
{
	u8 LOC_u8Return_Value = E_NOT_OK;
	if( (LOC_u8BuzzerPortID <= PortD) && (LOC_u8BuzzerPinID <= Pin7) )
    1f16:	84 30       	cpi	r24, 0x04	; 4
    1f18:	10 f4       	brcc	.+4      	; 0x1f1e <HAL_Buzzer_u8BuzzerInit+0x8>
    1f1a:	68 30       	cpi	r22, 0x08	; 8
    1f1c:	10 f0       	brcs	.+4      	; 0x1f22 <HAL_Buzzer_u8BuzzerInit+0xc>
	{
		LOC_u8Return_Value = MCAL_DIO_u8SetPinDirection(LOC_u8BuzzerPortID,LOC_u8BuzzerPinID,Pin_Output);
    1f1e:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		//Do Nothing.
	}
	return LOC_u8Return_Value;
}
    1f20:	08 95       	ret
STD_TYPE HAL_Buzzer_u8BuzzerInit(u8 LOC_u8BuzzerPortID, u8 LOC_u8BuzzerPinID)
{
	u8 LOC_u8Return_Value = E_NOT_OK;
	if( (LOC_u8BuzzerPortID <= PortD) && (LOC_u8BuzzerPinID <= Pin7) )
	{
		LOC_u8Return_Value = MCAL_DIO_u8SetPinDirection(LOC_u8BuzzerPortID,LOC_u8BuzzerPinID,Pin_Output);
    1f22:	41 e0       	ldi	r20, 0x01	; 1
    1f24:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <MCAL_DIO_u8SetPinDirection>
    1f28:	08 95       	ret

00001f2a <APP_LM35WithDCmotor_Void_LM35WithDCmotorOnOff>:
}

u8 APP_LM35WithDCmotor_Void_LM35WithDCmotorOnOff(void)
{

	if(G_FanFlag == 0)
    1f2a:	80 91 2e 07 	lds	r24, 0x072E
    1f2e:	81 11       	cpse	r24, r1


		return LOC_su8FanState;
    }

}
    1f30:	08 95       	ret
u8 APP_LM35WithDCmotor_Void_LM35WithDCmotorOnOff(void)
{

	if(G_FanFlag == 0)
    {
	    u8 Tempreture_Sensor_read =LM35_Read();
    1f32:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <LM35_Read>
	    static u8 LOC_su8FanState = FAN_OFF ;


	    if (Tempreture_Sensor_read>TURN_DC_ON_TEMP)
    1f36:	8d 31       	cpi	r24, 0x1D	; 29
    1f38:	48 f4       	brcc	.+18     	; 0x1f4c <APP_LM35WithDCmotor_Void_LM35WithDCmotorOnOff+0x22>
	    {
	    	LOC_su8FanState=FAN_ON;
	    }
	    else if (Tempreture_Sensor_read<TURN_DC_OFF_TEMP)
    1f3a:	85 31       	cpi	r24, 0x15	; 21
    1f3c:	80 f4       	brcc	.+32     	; 0x1f5e <APP_LM35WithDCmotor_Void_LM35WithDCmotorOnOff+0x34>
	    {
	    	LOC_su8FanState=FAN_OFF;
    1f3e:	10 92 2f 07 	sts	0x072F, r1
	    {
		    HAL_DCMOTOR_void_DcMotorClockWise(motor_speed);
	    }
	    else if(LOC_su8FanState==FAN_OFF)
	    {
		    HAL_DCMOTOR_void_DcMotorStop();
    1f42:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <HAL_DCMOTOR_void_DcMotorStop>
    1f46:	80 91 2f 07 	lds	r24, 0x072F
    1f4a:	08 95       	ret
	    static u8 LOC_su8FanState = FAN_OFF ;


	    if (Tempreture_Sensor_read>TURN_DC_ON_TEMP)
	    {
	    	LOC_su8FanState=FAN_ON;
    1f4c:	81 e0       	ldi	r24, 0x01	; 1
    1f4e:	80 93 2f 07 	sts	0x072F, r24
	    	LOC_su8FanState=FAN_OFF;
	    }

	    if (LOC_su8FanState==FAN_ON)
	    {
		    HAL_DCMOTOR_void_DcMotorClockWise(motor_speed);
    1f52:	87 e0       	ldi	r24, 0x07	; 7
    1f54:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <HAL_DCMOTOR_void_DcMotorClockWise>
    1f58:	80 91 2f 07 	lds	r24, 0x072F
    1f5c:	08 95       	ret
	    else if (Tempreture_Sensor_read<TURN_DC_OFF_TEMP)
	    {
	    	LOC_su8FanState=FAN_OFF;
	    }

	    if (LOC_su8FanState==FAN_ON)
    1f5e:	80 91 2f 07 	lds	r24, 0x072F
    1f62:	81 30       	cpi	r24, 0x01	; 1
    1f64:	b1 f3       	breq	.-20     	; 0x1f52 <APP_LM35WithDCmotor_Void_LM35WithDCmotorOnOff+0x28>
	    {
		    HAL_DCMOTOR_void_DcMotorClockWise(motor_speed);
	    }
	    else if(LOC_su8FanState==FAN_OFF)
    1f66:	88 23       	and	r24, r24
    1f68:	61 f3       	breq	.-40     	; 0x1f42 <APP_LM35WithDCmotor_Void_LM35WithDCmotorOnOff+0x18>


		return LOC_su8FanState;
    }

}
    1f6a:	08 95       	ret

00001f6c <APP_LM35WithDCmotor_Void_LM35WithDCmotorinit>:
//extern void APP_DEVICES_void_AppGetAnyDeviceOn(void);


void APP_LM35WithDCmotor_Void_LM35WithDCmotorinit(void)
{
		LM35_Init();
    1f6c:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <LM35_Init>
		HAL_DCMOTOR_void_DcMotorInit();
    1f70:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <HAL_DCMOTOR_void_DcMotorInit>
}
    1f74:	08 95       	ret

00001f76 <INT0_APP_CALLBACK>:
	MCAL_SPI_MASTER_SLAVE_u8_SetMasterSalve_Prescaler_SpiMasterSlaveInit(SPI_SLAVE,SPI_PRESCALER_128);
}

void INT0_APP_CALLBACK(void)
{
	while(GET_BIT(PINB,PIN4));
    1f76:	b4 99       	sbic	0x16, 4	; 22
    1f78:	fe cf       	rjmp	.-4      	; 0x1f76 <INT0_APP_CALLBACK>
	G_u8_Receive = MCAL_SPI_SLAVE_u8_SpiSlave_Transceive('F');
    1f7a:	86 e4       	ldi	r24, 0x46	; 70
    1f7c:	0e 94 a4 0b 	call	0x1748	; 0x1748 <MCAL_SPI_SLAVE_u8_SpiSlave_Transceive>
    1f80:	80 93 38 07 	sts	0x0738, r24
	if(G_u8_Receive == '1')
    1f84:	81 33       	cpi	r24, 0x31	; 49
    1f86:	91 f0       	breq	.+36     	; 0x1fac <INT0_APP_CALLBACK+0x36>
		{
			HAL_LED_u8LedMode(LED1_Port,LED1_Pin,LED_TOG);
			TOGGLE_BIT(GLOB_u8Flag_LED1,PIN0);
		}
	}
	else if(G_u8_Receive == '2')
    1f88:	82 33       	cpi	r24, 0x32	; 50
    1f8a:	59 f1       	breq	.+86     	; 0x1fe2 <INT0_APP_CALLBACK+0x6c>
		{
			HAL_LED_u8LedMode(LED2_Port,LED2_Pin,LED_TOG);
			TOGGLE_BIT(GLOB_u8Flag_LED2,PIN0);
		}
	}
	else if(G_u8_Receive == '3')
    1f8c:	83 33       	cpi	r24, 0x33	; 51
    1f8e:	09 f4       	brne	.+2      	; 0x1f92 <INT0_APP_CALLBACK+0x1c>
    1f90:	43 c0       	rjmp	.+134    	; 0x2018 <INT0_APP_CALLBACK+0xa2>
		{
			HAL_LED_u8LedMode(LED3_Port,LED3_Pin,LED_TOG);
			TOGGLE_BIT(GLOB_u8Flag_LED3,PIN0);
		}
	}
	else if(G_u8_Receive == '4')
    1f92:	84 33       	cpi	r24, 0x34	; 52
    1f94:	09 f4       	brne	.+2      	; 0x1f98 <INT0_APP_CALLBACK+0x22>
    1f96:	5c c0       	rjmp	.+184    	; 0x2050 <INT0_APP_CALLBACK+0xda>
		{
			HAL_LED_u8LedMode(LED4_Port,LED4_Pin,LED_TOG);
			TOGGLE_BIT(GLOB_u8Flag_LED4,PIN0);
		}
	}
	else if(G_u8_Receive == '5')
    1f98:	85 33       	cpi	r24, 0x35	; 53
    1f9a:	09 f4       	brne	.+2      	; 0x1f9e <INT0_APP_CALLBACK+0x28>
    1f9c:	75 c0       	rjmp	.+234    	; 0x2088 <INT0_APP_CALLBACK+0x112>
		{
			HAL_LED_u8LedMode(LED5_Port,LED5_Pin,LED_TOG);
			TOGGLE_BIT(GLOB_u8Flag_LED5,PIN0);
		}
	}
	else if(G_u8_Receive == 'B')
    1f9e:	82 34       	cpi	r24, 0x42	; 66
    1fa0:	09 f4       	brne	.+2      	; 0x1fa4 <INT0_APP_CALLBACK+0x2e>
    1fa2:	8e c0       	rjmp	.+284    	; 0x20c0 <INT0_APP_CALLBACK+0x14a>
		else if(G_u8_Receive == 'F')
		{
			HAL_Buzzer_u8BuzzerMode(Buzzer_Port,Buzzer_Pin,Buzzer_OFF);
		}
	}
	else if(G_u8_Receive == 'F')
    1fa4:	86 34       	cpi	r24, 0x46	; 70
    1fa6:	09 f4       	brne	.+2      	; 0x1faa <INT0_APP_CALLBACK+0x34>
    1fa8:	9e c0       	rjmp	.+316    	; 0x20e6 <INT0_APP_CALLBACK+0x170>
    1faa:	08 95       	ret
{
	while(GET_BIT(PINB,PIN4));
	G_u8_Receive = MCAL_SPI_SLAVE_u8_SpiSlave_Transceive('F');
	if(G_u8_Receive == '1')
	{
		while(GET_BIT(PINB,PIN4));
    1fac:	b4 99       	sbic	0x16, 4	; 22
    1fae:	fe cf       	rjmp	.-4      	; 0x1fac <INT0_APP_CALLBACK+0x36>
		G_u8_Receive = MCAL_SPI_SLAVE_u8_SpiSlave_Transceive('F');
    1fb0:	86 e4       	ldi	r24, 0x46	; 70
    1fb2:	0e 94 a4 0b 	call	0x1748	; 0x1748 <MCAL_SPI_SLAVE_u8_SpiSlave_Transceive>
    1fb6:	80 93 38 07 	sts	0x0738, r24
		if(G_u8_Receive == 'N')
    1fba:	8e 34       	cpi	r24, 0x4E	; 78
    1fbc:	09 f4       	brne	.+2      	; 0x1fc0 <INT0_APP_CALLBACK+0x4a>
    1fbe:	b6 c0       	rjmp	.+364    	; 0x212c <INT0_APP_CALLBACK+0x1b6>
		{
			HAL_LED_u8LedMode(LED1_Port,LED1_Pin,LED_ON);
			GLOB_u8Flag_LED1 = 1;
		}
		else if(G_u8_Receive == 'F')
    1fc0:	86 34       	cpi	r24, 0x46	; 70
    1fc2:	09 f4       	brne	.+2      	; 0x1fc6 <INT0_APP_CALLBACK+0x50>
    1fc4:	bc c0       	rjmp	.+376    	; 0x213e <INT0_APP_CALLBACK+0x1c8>
		{
			HAL_LED_u8LedMode(LED1_Port,LED1_Pin,LED_OFF);
			GLOB_u8Flag_LED1 = 0;
		}
		else if(G_u8_Receive == 'T')
    1fc6:	84 35       	cpi	r24, 0x54	; 84
    1fc8:	81 f7       	brne	.-32     	; 0x1faa <INT0_APP_CALLBACK+0x34>
		{
			HAL_LED_u8LedMode(LED1_Port,LED1_Pin,LED_TOG);
    1fca:	80 e0       	ldi	r24, 0x00	; 0
    1fcc:	63 e0       	ldi	r22, 0x03	; 3
    1fce:	42 e0       	ldi	r20, 0x02	; 2
    1fd0:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <HAL_LED_u8LedMode>
			TOGGLE_BIT(GLOB_u8Flag_LED1,PIN0);
    1fd4:	80 91 3e 07 	lds	r24, 0x073E
    1fd8:	91 e0       	ldi	r25, 0x01	; 1
    1fda:	89 27       	eor	r24, r25
    1fdc:	80 93 3e 07 	sts	0x073E, r24
    1fe0:	08 95       	ret
		}
	}
	else if(G_u8_Receive == '2')
	{
		while(GET_BIT(PINB,PIN4));
    1fe2:	b4 99       	sbic	0x16, 4	; 22
    1fe4:	fe cf       	rjmp	.-4      	; 0x1fe2 <INT0_APP_CALLBACK+0x6c>
		G_u8_Receive = MCAL_SPI_SLAVE_u8_SpiSlave_Transceive('F');
    1fe6:	86 e4       	ldi	r24, 0x46	; 70
    1fe8:	0e 94 a4 0b 	call	0x1748	; 0x1748 <MCAL_SPI_SLAVE_u8_SpiSlave_Transceive>
    1fec:	80 93 38 07 	sts	0x0738, r24
		if(G_u8_Receive == 'N')
    1ff0:	8e 34       	cpi	r24, 0x4E	; 78
    1ff2:	09 f4       	brne	.+2      	; 0x1ff6 <INT0_APP_CALLBACK+0x80>
    1ff4:	ac c0       	rjmp	.+344    	; 0x214e <INT0_APP_CALLBACK+0x1d8>
		{
			HAL_LED_u8LedMode(LED2_Port,LED2_Pin,LED_ON);
			GLOB_u8Flag_LED2 = 1;
		}
		else if(G_u8_Receive == 'F')
    1ff6:	86 34       	cpi	r24, 0x46	; 70
    1ff8:	09 f4       	brne	.+2      	; 0x1ffc <INT0_APP_CALLBACK+0x86>
    1ffa:	b2 c0       	rjmp	.+356    	; 0x2160 <INT0_APP_CALLBACK+0x1ea>
		{
			HAL_LED_u8LedMode(LED2_Port,LED2_Pin,LED_OFF);
			GLOB_u8Flag_LED2 = 0;
		}
		else if(G_u8_Receive == 'T')
    1ffc:	84 35       	cpi	r24, 0x54	; 84
    1ffe:	a9 f6       	brne	.-86     	; 0x1faa <INT0_APP_CALLBACK+0x34>
		{
			HAL_LED_u8LedMode(LED2_Port,LED2_Pin,LED_TOG);
    2000:	80 e0       	ldi	r24, 0x00	; 0
    2002:	64 e0       	ldi	r22, 0x04	; 4
    2004:	42 e0       	ldi	r20, 0x02	; 2
    2006:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <HAL_LED_u8LedMode>
			TOGGLE_BIT(GLOB_u8Flag_LED2,PIN0);
    200a:	80 91 40 07 	lds	r24, 0x0740
    200e:	91 e0       	ldi	r25, 0x01	; 1
    2010:	89 27       	eor	r24, r25
    2012:	80 93 40 07 	sts	0x0740, r24
    2016:	08 95       	ret
		}
	}
	else if(G_u8_Receive == '3')
	{
		while(GET_BIT(PINB,PIN4));
    2018:	b4 99       	sbic	0x16, 4	; 22
    201a:	fe cf       	rjmp	.-4      	; 0x2018 <INT0_APP_CALLBACK+0xa2>
		G_u8_Receive = MCAL_SPI_SLAVE_u8_SpiSlave_Transceive('F');
    201c:	86 e4       	ldi	r24, 0x46	; 70
    201e:	0e 94 a4 0b 	call	0x1748	; 0x1748 <MCAL_SPI_SLAVE_u8_SpiSlave_Transceive>
    2022:	80 93 38 07 	sts	0x0738, r24
		if(G_u8_Receive == 'N')
    2026:	8e 34       	cpi	r24, 0x4E	; 78
    2028:	09 f4       	brne	.+2      	; 0x202c <INT0_APP_CALLBACK+0xb6>
    202a:	a2 c0       	rjmp	.+324    	; 0x2170 <INT0_APP_CALLBACK+0x1fa>
		{
			HAL_LED_u8LedMode(LED3_Port,LED3_Pin,LED_ON);
			GLOB_u8Flag_LED3 = 1;
		}
		else if(G_u8_Receive == 'F')
    202c:	86 34       	cpi	r24, 0x46	; 70
    202e:	09 f4       	brne	.+2      	; 0x2032 <INT0_APP_CALLBACK+0xbc>
    2030:	a8 c0       	rjmp	.+336    	; 0x2182 <INT0_APP_CALLBACK+0x20c>
		{
			HAL_LED_u8LedMode(LED3_Port,LED3_Pin,LED_OFF);
			GLOB_u8Flag_LED3 = 0;
		}
		else if(G_u8_Receive == 'T')
    2032:	84 35       	cpi	r24, 0x54	; 84
    2034:	09 f0       	breq	.+2      	; 0x2038 <INT0_APP_CALLBACK+0xc2>
    2036:	b9 cf       	rjmp	.-142    	; 0x1faa <INT0_APP_CALLBACK+0x34>
		{
			HAL_LED_u8LedMode(LED3_Port,LED3_Pin,LED_TOG);
    2038:	80 e0       	ldi	r24, 0x00	; 0
    203a:	65 e0       	ldi	r22, 0x05	; 5
    203c:	42 e0       	ldi	r20, 0x02	; 2
    203e:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <HAL_LED_u8LedMode>
			TOGGLE_BIT(GLOB_u8Flag_LED3,PIN0);
    2042:	80 91 3c 07 	lds	r24, 0x073C
    2046:	91 e0       	ldi	r25, 0x01	; 1
    2048:	89 27       	eor	r24, r25
    204a:	80 93 3c 07 	sts	0x073C, r24
    204e:	08 95       	ret
		}
	}
	else if(G_u8_Receive == '4')
	{
		while(GET_BIT(PINB,PIN4));
    2050:	b4 99       	sbic	0x16, 4	; 22
    2052:	fe cf       	rjmp	.-4      	; 0x2050 <INT0_APP_CALLBACK+0xda>
		G_u8_Receive = MCAL_SPI_SLAVE_u8_SpiSlave_Transceive('F');
    2054:	86 e4       	ldi	r24, 0x46	; 70
    2056:	0e 94 a4 0b 	call	0x1748	; 0x1748 <MCAL_SPI_SLAVE_u8_SpiSlave_Transceive>
    205a:	80 93 38 07 	sts	0x0738, r24
		if(G_u8_Receive == 'N')
    205e:	8e 34       	cpi	r24, 0x4E	; 78
    2060:	09 f4       	brne	.+2      	; 0x2064 <INT0_APP_CALLBACK+0xee>
    2062:	97 c0       	rjmp	.+302    	; 0x2192 <INT0_APP_CALLBACK+0x21c>
		{
			HAL_LED_u8LedMode(LED4_Port,LED4_Pin,LED_ON);
			GLOB_u8Flag_LED4 = 1;
		}
		else if(G_u8_Receive == 'F')
    2064:	86 34       	cpi	r24, 0x46	; 70
    2066:	09 f4       	brne	.+2      	; 0x206a <INT0_APP_CALLBACK+0xf4>
    2068:	9d c0       	rjmp	.+314    	; 0x21a4 <INT0_APP_CALLBACK+0x22e>
		{
			HAL_LED_u8LedMode(LED4_Port,LED4_Pin,LED_OFF);
			GLOB_u8Flag_LED4 = 0;
		}
		else if(G_u8_Receive == 'T')
    206a:	84 35       	cpi	r24, 0x54	; 84
    206c:	09 f0       	breq	.+2      	; 0x2070 <INT0_APP_CALLBACK+0xfa>
    206e:	9d cf       	rjmp	.-198    	; 0x1faa <INT0_APP_CALLBACK+0x34>
		{
			HAL_LED_u8LedMode(LED4_Port,LED4_Pin,LED_TOG);
    2070:	80 e0       	ldi	r24, 0x00	; 0
    2072:	66 e0       	ldi	r22, 0x06	; 6
    2074:	42 e0       	ldi	r20, 0x02	; 2
    2076:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <HAL_LED_u8LedMode>
			TOGGLE_BIT(GLOB_u8Flag_LED4,PIN0);
    207a:	80 91 3d 07 	lds	r24, 0x073D
    207e:	91 e0       	ldi	r25, 0x01	; 1
    2080:	89 27       	eor	r24, r25
    2082:	80 93 3d 07 	sts	0x073D, r24
    2086:	08 95       	ret
		}
	}
	else if(G_u8_Receive == '5')
	{
		while(GET_BIT(PINB,PIN4));
    2088:	b4 99       	sbic	0x16, 4	; 22
    208a:	fe cf       	rjmp	.-4      	; 0x2088 <INT0_APP_CALLBACK+0x112>
		G_u8_Receive = MCAL_SPI_SLAVE_u8_SpiSlave_Transceive('F');
    208c:	86 e4       	ldi	r24, 0x46	; 70
    208e:	0e 94 a4 0b 	call	0x1748	; 0x1748 <MCAL_SPI_SLAVE_u8_SpiSlave_Transceive>
    2092:	80 93 38 07 	sts	0x0738, r24
		if(G_u8_Receive == 'N')
    2096:	8e 34       	cpi	r24, 0x4E	; 78
    2098:	09 f4       	brne	.+2      	; 0x209c <INT0_APP_CALLBACK+0x126>
    209a:	8c c0       	rjmp	.+280    	; 0x21b4 <INT0_APP_CALLBACK+0x23e>
		{
			HAL_LED_u8LedMode(LED5_Port,LED5_Pin,LED_ON);
			GLOB_u8Flag_LED5 = 1;
		}
		else if(G_u8_Receive == 'F')
    209c:	86 34       	cpi	r24, 0x46	; 70
    209e:	09 f4       	brne	.+2      	; 0x20a2 <INT0_APP_CALLBACK+0x12c>
    20a0:	92 c0       	rjmp	.+292    	; 0x21c6 <INT0_APP_CALLBACK+0x250>
		{
			HAL_LED_u8LedMode(LED5_Port,LED5_Pin,LED_OFF);
			GLOB_u8Flag_LED5 = 0;
		}
		else if(G_u8_Receive == 'T')
    20a2:	84 35       	cpi	r24, 0x54	; 84
    20a4:	09 f0       	breq	.+2      	; 0x20a8 <INT0_APP_CALLBACK+0x132>
    20a6:	81 cf       	rjmp	.-254    	; 0x1faa <INT0_APP_CALLBACK+0x34>
		{
			HAL_LED_u8LedMode(LED5_Port,LED5_Pin,LED_TOG);
    20a8:	80 e0       	ldi	r24, 0x00	; 0
    20aa:	67 e0       	ldi	r22, 0x07	; 7
    20ac:	42 e0       	ldi	r20, 0x02	; 2
    20ae:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <HAL_LED_u8LedMode>
			TOGGLE_BIT(GLOB_u8Flag_LED5,PIN0);
    20b2:	80 91 3a 07 	lds	r24, 0x073A
    20b6:	91 e0       	ldi	r25, 0x01	; 1
    20b8:	89 27       	eor	r24, r25
    20ba:	80 93 3a 07 	sts	0x073A, r24
    20be:	08 95       	ret
		}
	}
	else if(G_u8_Receive == 'B')
	{
		while(GET_BIT(PINB,PIN4));
    20c0:	b4 99       	sbic	0x16, 4	; 22
    20c2:	fe cf       	rjmp	.-4      	; 0x20c0 <INT0_APP_CALLBACK+0x14a>
		G_u8_Receive = MCAL_SPI_SLAVE_u8_SpiSlave_Transceive('F');
    20c4:	86 e4       	ldi	r24, 0x46	; 70
    20c6:	0e 94 a4 0b 	call	0x1748	; 0x1748 <MCAL_SPI_SLAVE_u8_SpiSlave_Transceive>
    20ca:	80 93 38 07 	sts	0x0738, r24
		if(G_u8_Receive == 'N')
    20ce:	8e 34       	cpi	r24, 0x4E	; 78
    20d0:	09 f4       	brne	.+2      	; 0x20d4 <INT0_APP_CALLBACK+0x15e>
    20d2:	81 c0       	rjmp	.+258    	; 0x21d6 <INT0_APP_CALLBACK+0x260>
		{
			HAL_Buzzer_u8BuzzerMode(Buzzer_Port,Buzzer_Pin,Buzzer_ON);
		}
		else if(G_u8_Receive == 'F')
    20d4:	86 34       	cpi	r24, 0x46	; 70
    20d6:	09 f0       	breq	.+2      	; 0x20da <INT0_APP_CALLBACK+0x164>
    20d8:	68 cf       	rjmp	.-304    	; 0x1faa <INT0_APP_CALLBACK+0x34>
		{
			HAL_Buzzer_u8BuzzerMode(Buzzer_Port,Buzzer_Pin,Buzzer_OFF);
    20da:	81 e0       	ldi	r24, 0x01	; 1
    20dc:	60 e0       	ldi	r22, 0x00	; 0
    20de:	40 e0       	ldi	r20, 0x00	; 0
    20e0:	0e 94 77 0f 	call	0x1eee	; 0x1eee <HAL_Buzzer_u8BuzzerMode>
    20e4:	08 95       	ret
		}
	}
	else if(G_u8_Receive == 'F')
	{
		while(GET_BIT(PINB,PIN4));
    20e6:	b4 99       	sbic	0x16, 4	; 22
    20e8:	fe cf       	rjmp	.-4      	; 0x20e6 <INT0_APP_CALLBACK+0x170>
		G_u8_Receive = MCAL_SPI_SLAVE_u8_SpiSlave_Transceive('F');
    20ea:	86 e4       	ldi	r24, 0x46	; 70
    20ec:	0e 94 a4 0b 	call	0x1748	; 0x1748 <MCAL_SPI_SLAVE_u8_SpiSlave_Transceive>
    20f0:	80 93 38 07 	sts	0x0738, r24
		if(G_u8_Receive == 'N')
    20f4:	8e 34       	cpi	r24, 0x4E	; 78
    20f6:	09 f4       	brne	.+2      	; 0x20fa <INT0_APP_CALLBACK+0x184>
    20f8:	74 c0       	rjmp	.+232    	; 0x21e2 <INT0_APP_CALLBACK+0x26c>
		{
			HAL_DCMOTOR_void_DcMotorClockWise(7);
			GLOB_u8Flag_AC = 1;
		}
		else if(G_u8_Receive == 'F')
    20fa:	86 34       	cpi	r24, 0x46	; 70
    20fc:	09 f4       	brne	.+2      	; 0x2100 <INT0_APP_CALLBACK+0x18a>
    20fe:	79 c0       	rjmp	.+242    	; 0x21f2 <INT0_APP_CALLBACK+0x27c>
		{
			HAL_DCMOTOR_void_DcMotorStop();
			GLOB_u8Flag_AC = 0;
		}
		else if(G_u8_Receive == 'T')
    2100:	84 35       	cpi	r24, 0x54	; 84
    2102:	09 f0       	breq	.+2      	; 0x2106 <INT0_APP_CALLBACK+0x190>
    2104:	52 cf       	rjmp	.-348    	; 0x1faa <INT0_APP_CALLBACK+0x34>
		{
			TOGGLE_BIT(GLOB_u8Flag_AC,PIN0);
    2106:	80 91 3b 07 	lds	r24, 0x073B
    210a:	91 e0       	ldi	r25, 0x01	; 1
    210c:	89 27       	eor	r24, r25
    210e:	80 93 3b 07 	sts	0x073B, r24
			if(GLOB_u8Flag_AC == 1)
    2112:	80 91 3b 07 	lds	r24, 0x073B
    2116:	81 30       	cpi	r24, 0x01	; 1
    2118:	09 f4       	brne	.+2      	; 0x211c <INT0_APP_CALLBACK+0x1a6>
    211a:	70 c0       	rjmp	.+224    	; 0x21fc <INT0_APP_CALLBACK+0x286>
			{
				HAL_DCMOTOR_void_DcMotorClockWise(7);
			}
			else if(GLOB_u8Flag_AC == 0)
    211c:	80 91 3b 07 	lds	r24, 0x073B
    2120:	88 23       	and	r24, r24
    2122:	09 f0       	breq	.+2      	; 0x2126 <INT0_APP_CALLBACK+0x1b0>
    2124:	42 cf       	rjmp	.-380    	; 0x1faa <INT0_APP_CALLBACK+0x34>
			{
				HAL_DCMOTOR_void_DcMotorStop();
    2126:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <HAL_DCMOTOR_void_DcMotorStop>
    212a:	08 95       	ret
	{
		while(GET_BIT(PINB,PIN4));
		G_u8_Receive = MCAL_SPI_SLAVE_u8_SpiSlave_Transceive('F');
		if(G_u8_Receive == 'N')
		{
			HAL_LED_u8LedMode(LED1_Port,LED1_Pin,LED_ON);
    212c:	80 e0       	ldi	r24, 0x00	; 0
    212e:	63 e0       	ldi	r22, 0x03	; 3
    2130:	41 e0       	ldi	r20, 0x01	; 1
    2132:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <HAL_LED_u8LedMode>
			GLOB_u8Flag_LED1 = 1;
    2136:	81 e0       	ldi	r24, 0x01	; 1
    2138:	80 93 3e 07 	sts	0x073E, r24
    213c:	08 95       	ret
		}
		else if(G_u8_Receive == 'F')
		{
			HAL_LED_u8LedMode(LED1_Port,LED1_Pin,LED_OFF);
    213e:	80 e0       	ldi	r24, 0x00	; 0
    2140:	63 e0       	ldi	r22, 0x03	; 3
    2142:	40 e0       	ldi	r20, 0x00	; 0
    2144:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <HAL_LED_u8LedMode>
			GLOB_u8Flag_LED1 = 0;
    2148:	10 92 3e 07 	sts	0x073E, r1
    214c:	08 95       	ret
	{
		while(GET_BIT(PINB,PIN4));
		G_u8_Receive = MCAL_SPI_SLAVE_u8_SpiSlave_Transceive('F');
		if(G_u8_Receive == 'N')
		{
			HAL_LED_u8LedMode(LED2_Port,LED2_Pin,LED_ON);
    214e:	80 e0       	ldi	r24, 0x00	; 0
    2150:	64 e0       	ldi	r22, 0x04	; 4
    2152:	41 e0       	ldi	r20, 0x01	; 1
    2154:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <HAL_LED_u8LedMode>
			GLOB_u8Flag_LED2 = 1;
    2158:	81 e0       	ldi	r24, 0x01	; 1
    215a:	80 93 40 07 	sts	0x0740, r24
    215e:	08 95       	ret
		}
		else if(G_u8_Receive == 'F')
		{
			HAL_LED_u8LedMode(LED2_Port,LED2_Pin,LED_OFF);
    2160:	80 e0       	ldi	r24, 0x00	; 0
    2162:	64 e0       	ldi	r22, 0x04	; 4
    2164:	40 e0       	ldi	r20, 0x00	; 0
    2166:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <HAL_LED_u8LedMode>
			GLOB_u8Flag_LED2 = 0;
    216a:	10 92 40 07 	sts	0x0740, r1
    216e:	08 95       	ret
	{
		while(GET_BIT(PINB,PIN4));
		G_u8_Receive = MCAL_SPI_SLAVE_u8_SpiSlave_Transceive('F');
		if(G_u8_Receive == 'N')
		{
			HAL_LED_u8LedMode(LED3_Port,LED3_Pin,LED_ON);
    2170:	80 e0       	ldi	r24, 0x00	; 0
    2172:	65 e0       	ldi	r22, 0x05	; 5
    2174:	41 e0       	ldi	r20, 0x01	; 1
    2176:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <HAL_LED_u8LedMode>
			GLOB_u8Flag_LED3 = 1;
    217a:	81 e0       	ldi	r24, 0x01	; 1
    217c:	80 93 3c 07 	sts	0x073C, r24
    2180:	08 95       	ret
		}
		else if(G_u8_Receive == 'F')
		{
			HAL_LED_u8LedMode(LED3_Port,LED3_Pin,LED_OFF);
    2182:	80 e0       	ldi	r24, 0x00	; 0
    2184:	65 e0       	ldi	r22, 0x05	; 5
    2186:	40 e0       	ldi	r20, 0x00	; 0
    2188:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <HAL_LED_u8LedMode>
			GLOB_u8Flag_LED3 = 0;
    218c:	10 92 3c 07 	sts	0x073C, r1
    2190:	08 95       	ret
	{
		while(GET_BIT(PINB,PIN4));
		G_u8_Receive = MCAL_SPI_SLAVE_u8_SpiSlave_Transceive('F');
		if(G_u8_Receive == 'N')
		{
			HAL_LED_u8LedMode(LED4_Port,LED4_Pin,LED_ON);
    2192:	80 e0       	ldi	r24, 0x00	; 0
    2194:	66 e0       	ldi	r22, 0x06	; 6
    2196:	41 e0       	ldi	r20, 0x01	; 1
    2198:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <HAL_LED_u8LedMode>
			GLOB_u8Flag_LED4 = 1;
    219c:	81 e0       	ldi	r24, 0x01	; 1
    219e:	80 93 3d 07 	sts	0x073D, r24
    21a2:	08 95       	ret
		}
		else if(G_u8_Receive == 'F')
		{
			HAL_LED_u8LedMode(LED4_Port,LED4_Pin,LED_OFF);
    21a4:	80 e0       	ldi	r24, 0x00	; 0
    21a6:	66 e0       	ldi	r22, 0x06	; 6
    21a8:	40 e0       	ldi	r20, 0x00	; 0
    21aa:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <HAL_LED_u8LedMode>
			GLOB_u8Flag_LED4 = 0;
    21ae:	10 92 3d 07 	sts	0x073D, r1
    21b2:	08 95       	ret
	{
		while(GET_BIT(PINB,PIN4));
		G_u8_Receive = MCAL_SPI_SLAVE_u8_SpiSlave_Transceive('F');
		if(G_u8_Receive == 'N')
		{
			HAL_LED_u8LedMode(LED5_Port,LED5_Pin,LED_ON);
    21b4:	80 e0       	ldi	r24, 0x00	; 0
    21b6:	67 e0       	ldi	r22, 0x07	; 7
    21b8:	41 e0       	ldi	r20, 0x01	; 1
    21ba:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <HAL_LED_u8LedMode>
			GLOB_u8Flag_LED5 = 1;
    21be:	81 e0       	ldi	r24, 0x01	; 1
    21c0:	80 93 3a 07 	sts	0x073A, r24
    21c4:	08 95       	ret
		}
		else if(G_u8_Receive == 'F')
		{
			HAL_LED_u8LedMode(LED5_Port,LED5_Pin,LED_OFF);
    21c6:	80 e0       	ldi	r24, 0x00	; 0
    21c8:	67 e0       	ldi	r22, 0x07	; 7
    21ca:	40 e0       	ldi	r20, 0x00	; 0
    21cc:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <HAL_LED_u8LedMode>
			GLOB_u8Flag_LED5 = 0;
    21d0:	10 92 3a 07 	sts	0x073A, r1
    21d4:	08 95       	ret
	{
		while(GET_BIT(PINB,PIN4));
		G_u8_Receive = MCAL_SPI_SLAVE_u8_SpiSlave_Transceive('F');
		if(G_u8_Receive == 'N')
		{
			HAL_Buzzer_u8BuzzerMode(Buzzer_Port,Buzzer_Pin,Buzzer_ON);
    21d6:	81 e0       	ldi	r24, 0x01	; 1
    21d8:	60 e0       	ldi	r22, 0x00	; 0
    21da:	41 e0       	ldi	r20, 0x01	; 1
    21dc:	0e 94 77 0f 	call	0x1eee	; 0x1eee <HAL_Buzzer_u8BuzzerMode>
    21e0:	08 95       	ret
	{
		while(GET_BIT(PINB,PIN4));
		G_u8_Receive = MCAL_SPI_SLAVE_u8_SpiSlave_Transceive('F');
		if(G_u8_Receive == 'N')
		{
			HAL_DCMOTOR_void_DcMotorClockWise(7);
    21e2:	87 e0       	ldi	r24, 0x07	; 7
    21e4:	90 e0       	ldi	r25, 0x00	; 0
    21e6:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <HAL_DCMOTOR_void_DcMotorClockWise>
			GLOB_u8Flag_AC = 1;
    21ea:	81 e0       	ldi	r24, 0x01	; 1
    21ec:	80 93 3b 07 	sts	0x073B, r24
    21f0:	08 95       	ret
		}
		else if(G_u8_Receive == 'F')
		{
			HAL_DCMOTOR_void_DcMotorStop();
    21f2:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <HAL_DCMOTOR_void_DcMotorStop>
			GLOB_u8Flag_AC = 0;
    21f6:	10 92 3b 07 	sts	0x073B, r1
    21fa:	08 95       	ret
		else if(G_u8_Receive == 'T')
		{
			TOGGLE_BIT(GLOB_u8Flag_AC,PIN0);
			if(GLOB_u8Flag_AC == 1)
			{
				HAL_DCMOTOR_void_DcMotorClockWise(7);
    21fc:	87 e0       	ldi	r24, 0x07	; 7
    21fe:	90 e0       	ldi	r25, 0x00	; 0
    2200:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <HAL_DCMOTOR_void_DcMotorClockWise>
    2204:	08 95       	ret

00002206 <APP_STATE_void_AppStateInit>:
extern u8 volatile GLOB_u8Flag_AC;

u8 G_u8_Receive;
void APP_STATE_void_AppStateInit(void)
{
	MCAL_Interrupt_GIE_Enable();
    2206:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <MCAL_Interrupt_GIE_Enable>
	MCAL_EXT_INT_voidEXTInt_Init(INT_0,RISING_EDGE);
    220a:	80 e0       	ldi	r24, 0x00	; 0
    220c:	63 e0       	ldi	r22, 0x03	; 3
    220e:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <MCAL_EXT_INT_voidEXTInt_Init>
	MCAL_EXT_INT_voidEXTInt_CallBack(INT_0,INT0_APP_CALLBACK);
    2212:	80 e0       	ldi	r24, 0x00	; 0
    2214:	6b eb       	ldi	r22, 0xBB	; 187
    2216:	7f e0       	ldi	r23, 0x0F	; 15
    2218:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <MCAL_EXT_INT_voidEXTInt_CallBack>
	MCAL_DIO_u8SetPinDirection(PortB,PIN2,PIN_OUTPUT);
    221c:	81 e0       	ldi	r24, 0x01	; 1
    221e:	62 e0       	ldi	r22, 0x02	; 2
    2220:	41 e0       	ldi	r20, 0x01	; 1
    2222:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <MCAL_DIO_u8SetPinDirection>
	MCAL_SPI_MASTER_SLAVE_u8_SetMasterSalve_Prescaler_SpiMasterSlaveInit(SPI_SLAVE,SPI_PRESCALER_128);
    2226:	80 e0       	ldi	r24, 0x00	; 0
    2228:	63 e0       	ldi	r22, 0x03	; 3
    222a:	0e 94 a9 0b 	call	0x1752	; 0x1752 <MCAL_SPI_MASTER_SLAVE_u8_SetMasterSalve_Prescaler_SpiMasterSlaveInit>
}
    222e:	08 95       	ret

00002230 <APP_AC_Check>:
	}while(LOC_u8BackFlag != 1);
}

void APP_AC_Check(void)
{
	GLOB_u8Flag_AC = APP_LM35WithDCmotor_Void_LM35WithDCmotorOnOff();
    2230:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <APP_LM35WithDCmotor_Void_LM35WithDCmotorOnOff>
    2234:	80 93 3b 07 	sts	0x073B, r24
}
    2238:	08 95       	ret

0000223a <APP_Devices_Status>:


}

void APP_Devices_Status(void)
{
    223a:	0f 93       	push	r16
    223c:	1f 93       	push	r17
    223e:	df 93       	push	r29
    2240:	cf 93       	push	r28
    2242:	0f 92       	push	r0
    2244:	cd b7       	in	r28, 0x3d	; 61
    2246:	de b7       	in	r29, 0x3e	; 62
	u8 LOC_u8Option=0,LOC_u8BackFlag=0;
    2248:	19 82       	std	Y+1, r1	; 0x01
    224a:	8e 01       	movw	r16, r28
    224c:	0f 5f       	subi	r16, 0xFF	; 255
    224e:	1f 4f       	sbci	r17, 0xFF	; 255
	do
	{
		if(GLOB_u8Flag_Door){MCAL_UART_voidSendString((u8*)"Door: Open"); 	MCAL_UART_voidSendString(GLOB_u8NewLine);}
    2250:	80 91 39 07 	lds	r24, 0x0739
    2254:	88 23       	and	r24, r24
    2256:	09 f4       	brne	.+2      	; 0x225a <APP_Devices_Status+0x20>
    2258:	b3 c0       	rjmp	.+358    	; 0x23c0 <APP_Devices_Status+0x186>
    225a:	80 e6       	ldi	r24, 0x60	; 96
    225c:	90 e0       	ldi	r25, 0x00	; 0
    225e:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
    2262:	82 e1       	ldi	r24, 0x12	; 18
    2264:	97 e0       	ldi	r25, 0x07	; 7
    2266:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
		else{MCAL_UART_voidSendString((u8*)"Door: Closed");					MCAL_UART_voidSendString(GLOB_u8NewLine);}

		if(GLOB_u8Flag_AC){MCAL_UART_voidSendString((u8*)"AC: ON");			MCAL_UART_voidSendString(GLOB_u8NewLine);}
    226a:	80 91 3b 07 	lds	r24, 0x073B
    226e:	88 23       	and	r24, r24
    2270:	09 f4       	brne	.+2      	; 0x2274 <APP_Devices_Status+0x3a>
    2272:	9d c0       	rjmp	.+314    	; 0x23ae <APP_Devices_Status+0x174>
    2274:	88 e7       	ldi	r24, 0x78	; 120
    2276:	90 e0       	ldi	r25, 0x00	; 0
    2278:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
    227c:	82 e1       	ldi	r24, 0x12	; 18
    227e:	97 e0       	ldi	r25, 0x07	; 7
    2280:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
		else{MCAL_UART_voidSendString((u8*)"AC: OFF");						MCAL_UART_voidSendString(GLOB_u8NewLine);}

		if(GLOB_u8Flag_LED1){MCAL_UART_voidSendString((u8*)"LED1: ON");		MCAL_UART_voidSendString(GLOB_u8NewLine);}
    2284:	80 91 3e 07 	lds	r24, 0x073E
    2288:	88 23       	and	r24, r24
    228a:	09 f4       	brne	.+2      	; 0x228e <APP_Devices_Status+0x54>
    228c:	87 c0       	rjmp	.+270    	; 0x239c <APP_Devices_Status+0x162>
    228e:	87 e8       	ldi	r24, 0x87	; 135
    2290:	90 e0       	ldi	r25, 0x00	; 0
    2292:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
    2296:	82 e1       	ldi	r24, 0x12	; 18
    2298:	97 e0       	ldi	r25, 0x07	; 7
    229a:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
		else{MCAL_UART_voidSendString((u8*)"LED1: OFF");					MCAL_UART_voidSendString(GLOB_u8NewLine);}
		if(GLOB_u8Flag_LED2){MCAL_UART_voidSendString((u8*)"LED2: ON");		MCAL_UART_voidSendString(GLOB_u8NewLine);}
    229e:	80 91 40 07 	lds	r24, 0x0740
    22a2:	88 23       	and	r24, r24
    22a4:	09 f4       	brne	.+2      	; 0x22a8 <APP_Devices_Status+0x6e>
    22a6:	71 c0       	rjmp	.+226    	; 0x238a <APP_Devices_Status+0x150>
    22a8:	8a e9       	ldi	r24, 0x9A	; 154
    22aa:	90 e0       	ldi	r25, 0x00	; 0
    22ac:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
    22b0:	82 e1       	ldi	r24, 0x12	; 18
    22b2:	97 e0       	ldi	r25, 0x07	; 7
    22b4:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
		else{MCAL_UART_voidSendString((u8*)"LED2: OFF");					MCAL_UART_voidSendString(GLOB_u8NewLine);}
		if(GLOB_u8Flag_LED3){MCAL_UART_voidSendString((u8*)"LED3: ON");		MCAL_UART_voidSendString(GLOB_u8NewLine);}
    22b8:	80 91 3c 07 	lds	r24, 0x073C
    22bc:	88 23       	and	r24, r24
    22be:	09 f4       	brne	.+2      	; 0x22c2 <APP_Devices_Status+0x88>
    22c0:	5b c0       	rjmp	.+182    	; 0x2378 <APP_Devices_Status+0x13e>
    22c2:	8d ea       	ldi	r24, 0xAD	; 173
    22c4:	90 e0       	ldi	r25, 0x00	; 0
    22c6:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
    22ca:	82 e1       	ldi	r24, 0x12	; 18
    22cc:	97 e0       	ldi	r25, 0x07	; 7
    22ce:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
		else{MCAL_UART_voidSendString((u8*)"LED3: OFF");					MCAL_UART_voidSendString(GLOB_u8NewLine);}
		if(GLOB_u8Flag_LED4){MCAL_UART_voidSendString((u8*)"LED4: ON");		MCAL_UART_voidSendString(GLOB_u8NewLine);}
    22d2:	80 91 3d 07 	lds	r24, 0x073D
    22d6:	88 23       	and	r24, r24
    22d8:	09 f4       	brne	.+2      	; 0x22dc <APP_Devices_Status+0xa2>
    22da:	45 c0       	rjmp	.+138    	; 0x2366 <APP_Devices_Status+0x12c>
    22dc:	80 ec       	ldi	r24, 0xC0	; 192
    22de:	90 e0       	ldi	r25, 0x00	; 0
    22e0:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
    22e4:	82 e1       	ldi	r24, 0x12	; 18
    22e6:	97 e0       	ldi	r25, 0x07	; 7
    22e8:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
		else{MCAL_UART_voidSendString((u8*)"LED4: OFF");					MCAL_UART_voidSendString(GLOB_u8NewLine);}
		if(GLOB_u8Flag_LED5){MCAL_UART_voidSendString((u8*)"LED5: ON");		MCAL_UART_voidSendString(GLOB_u8NewLine);}
    22ec:	80 91 3a 07 	lds	r24, 0x073A
    22f0:	88 23       	and	r24, r24
    22f2:	81 f1       	breq	.+96     	; 0x2354 <APP_Devices_Status+0x11a>
    22f4:	83 ed       	ldi	r24, 0xD3	; 211
    22f6:	90 e0       	ldi	r25, 0x00	; 0
    22f8:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
    22fc:	82 e1       	ldi	r24, 0x12	; 18
    22fe:	97 e0       	ldi	r25, 0x07	; 7
    2300:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
		else{MCAL_UART_voidSendString((u8*)"LED5: OFF");					MCAL_UART_voidSendString(GLOB_u8NewLine);}

		MCAL_UART_voidSendString((u8*)"0.BACK ");
    2304:	86 ee       	ldi	r24, 0xE6	; 230
    2306:	90 e0       	ldi	r25, 0x00	; 0
    2308:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
		MCAL_UART_voidSendString(GLOB_u8NewLine);
    230c:	82 e1       	ldi	r24, 0x12	; 18
    230e:	97 e0       	ldi	r25, 0x07	; 7
    2310:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
		MCAL_UART_voidReceiveData(&LOC_u8Option);
    2314:	c8 01       	movw	r24, r16
    2316:	0e 94 c8 06 	call	0xd90	; 0xd90 <MCAL_UART_voidReceiveData>

		switch(LOC_u8Option)
    231a:	89 81       	ldd	r24, Y+1	; 0x01
    231c:	80 33       	cpi	r24, 0x30	; 48
    231e:	09 f0       	breq	.+2      	; 0x2322 <APP_Devices_Status+0xe8>
    2320:	97 cf       	rjmp	.-210    	; 0x2250 <APP_Devices_Status+0x16>


			break;

		case '0':
			MCAL_UART_voidTransmitData('0');
    2322:	80 e3       	ldi	r24, 0x30	; 48
    2324:	0e 94 c1 06 	call	0xd82	; 0xd82 <MCAL_UART_voidTransmitData>
			MCAL_UART_voidSendString(GLOB_u8NewLine);
    2328:	82 e1       	ldi	r24, 0x12	; 18
    232a:	97 e0       	ldi	r25, 0x07	; 7
    232c:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
			MCAL_UART_voidSendString((u8*)"BACK");
    2330:	8e ee       	ldi	r24, 0xEE	; 238
    2332:	90 e0       	ldi	r25, 0x00	; 0
    2334:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
			MCAL_UART_voidSendString(GLOB_u8NewLine);
    2338:	82 e1       	ldi	r24, 0x12	; 18
    233a:	97 e0       	ldi	r25, 0x07	; 7
    233c:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
    2340:	80 e4       	ldi	r24, 0x40	; 64
    2342:	9c e9       	ldi	r25, 0x9C	; 156
    2344:	01 97       	sbiw	r24, 0x01	; 1
    2346:	f1 f7       	brne	.-4      	; 0x2344 <APP_Devices_Status+0x10a>
			LOC_u8BackFlag = 1;

			break;
		}
	}while(LOC_u8BackFlag != 1);
}
    2348:	0f 90       	pop	r0
    234a:	cf 91       	pop	r28
    234c:	df 91       	pop	r29
    234e:	1f 91       	pop	r17
    2350:	0f 91       	pop	r16
    2352:	08 95       	ret
		if(GLOB_u8Flag_LED3){MCAL_UART_voidSendString((u8*)"LED3: ON");		MCAL_UART_voidSendString(GLOB_u8NewLine);}
		else{MCAL_UART_voidSendString((u8*)"LED3: OFF");					MCAL_UART_voidSendString(GLOB_u8NewLine);}
		if(GLOB_u8Flag_LED4){MCAL_UART_voidSendString((u8*)"LED4: ON");		MCAL_UART_voidSendString(GLOB_u8NewLine);}
		else{MCAL_UART_voidSendString((u8*)"LED4: OFF");					MCAL_UART_voidSendString(GLOB_u8NewLine);}
		if(GLOB_u8Flag_LED5){MCAL_UART_voidSendString((u8*)"LED5: ON");		MCAL_UART_voidSendString(GLOB_u8NewLine);}
		else{MCAL_UART_voidSendString((u8*)"LED5: OFF");					MCAL_UART_voidSendString(GLOB_u8NewLine);}
    2354:	8c ed       	ldi	r24, 0xDC	; 220
    2356:	90 e0       	ldi	r25, 0x00	; 0
    2358:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
    235c:	82 e1       	ldi	r24, 0x12	; 18
    235e:	97 e0       	ldi	r25, 0x07	; 7
    2360:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
    2364:	cf cf       	rjmp	.-98     	; 0x2304 <APP_Devices_Status+0xca>
		if(GLOB_u8Flag_LED2){MCAL_UART_voidSendString((u8*)"LED2: ON");		MCAL_UART_voidSendString(GLOB_u8NewLine);}
		else{MCAL_UART_voidSendString((u8*)"LED2: OFF");					MCAL_UART_voidSendString(GLOB_u8NewLine);}
		if(GLOB_u8Flag_LED3){MCAL_UART_voidSendString((u8*)"LED3: ON");		MCAL_UART_voidSendString(GLOB_u8NewLine);}
		else{MCAL_UART_voidSendString((u8*)"LED3: OFF");					MCAL_UART_voidSendString(GLOB_u8NewLine);}
		if(GLOB_u8Flag_LED4){MCAL_UART_voidSendString((u8*)"LED4: ON");		MCAL_UART_voidSendString(GLOB_u8NewLine);}
		else{MCAL_UART_voidSendString((u8*)"LED4: OFF");					MCAL_UART_voidSendString(GLOB_u8NewLine);}
    2366:	89 ec       	ldi	r24, 0xC9	; 201
    2368:	90 e0       	ldi	r25, 0x00	; 0
    236a:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
    236e:	82 e1       	ldi	r24, 0x12	; 18
    2370:	97 e0       	ldi	r25, 0x07	; 7
    2372:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
    2376:	ba cf       	rjmp	.-140    	; 0x22ec <APP_Devices_Status+0xb2>
		if(GLOB_u8Flag_LED1){MCAL_UART_voidSendString((u8*)"LED1: ON");		MCAL_UART_voidSendString(GLOB_u8NewLine);}
		else{MCAL_UART_voidSendString((u8*)"LED1: OFF");					MCAL_UART_voidSendString(GLOB_u8NewLine);}
		if(GLOB_u8Flag_LED2){MCAL_UART_voidSendString((u8*)"LED2: ON");		MCAL_UART_voidSendString(GLOB_u8NewLine);}
		else{MCAL_UART_voidSendString((u8*)"LED2: OFF");					MCAL_UART_voidSendString(GLOB_u8NewLine);}
		if(GLOB_u8Flag_LED3){MCAL_UART_voidSendString((u8*)"LED3: ON");		MCAL_UART_voidSendString(GLOB_u8NewLine);}
		else{MCAL_UART_voidSendString((u8*)"LED3: OFF");					MCAL_UART_voidSendString(GLOB_u8NewLine);}
    2378:	86 eb       	ldi	r24, 0xB6	; 182
    237a:	90 e0       	ldi	r25, 0x00	; 0
    237c:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
    2380:	82 e1       	ldi	r24, 0x12	; 18
    2382:	97 e0       	ldi	r25, 0x07	; 7
    2384:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
    2388:	a4 cf       	rjmp	.-184    	; 0x22d2 <APP_Devices_Status+0x98>
		else{MCAL_UART_voidSendString((u8*)"AC: OFF");						MCAL_UART_voidSendString(GLOB_u8NewLine);}

		if(GLOB_u8Flag_LED1){MCAL_UART_voidSendString((u8*)"LED1: ON");		MCAL_UART_voidSendString(GLOB_u8NewLine);}
		else{MCAL_UART_voidSendString((u8*)"LED1: OFF");					MCAL_UART_voidSendString(GLOB_u8NewLine);}
		if(GLOB_u8Flag_LED2){MCAL_UART_voidSendString((u8*)"LED2: ON");		MCAL_UART_voidSendString(GLOB_u8NewLine);}
		else{MCAL_UART_voidSendString((u8*)"LED2: OFF");					MCAL_UART_voidSendString(GLOB_u8NewLine);}
    238a:	83 ea       	ldi	r24, 0xA3	; 163
    238c:	90 e0       	ldi	r25, 0x00	; 0
    238e:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
    2392:	82 e1       	ldi	r24, 0x12	; 18
    2394:	97 e0       	ldi	r25, 0x07	; 7
    2396:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
    239a:	8e cf       	rjmp	.-228    	; 0x22b8 <APP_Devices_Status+0x7e>

		if(GLOB_u8Flag_AC){MCAL_UART_voidSendString((u8*)"AC: ON");			MCAL_UART_voidSendString(GLOB_u8NewLine);}
		else{MCAL_UART_voidSendString((u8*)"AC: OFF");						MCAL_UART_voidSendString(GLOB_u8NewLine);}

		if(GLOB_u8Flag_LED1){MCAL_UART_voidSendString((u8*)"LED1: ON");		MCAL_UART_voidSendString(GLOB_u8NewLine);}
		else{MCAL_UART_voidSendString((u8*)"LED1: OFF");					MCAL_UART_voidSendString(GLOB_u8NewLine);}
    239c:	80 e9       	ldi	r24, 0x90	; 144
    239e:	90 e0       	ldi	r25, 0x00	; 0
    23a0:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
    23a4:	82 e1       	ldi	r24, 0x12	; 18
    23a6:	97 e0       	ldi	r25, 0x07	; 7
    23a8:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
    23ac:	78 cf       	rjmp	.-272    	; 0x229e <APP_Devices_Status+0x64>
	{
		if(GLOB_u8Flag_Door){MCAL_UART_voidSendString((u8*)"Door: Open"); 	MCAL_UART_voidSendString(GLOB_u8NewLine);}
		else{MCAL_UART_voidSendString((u8*)"Door: Closed");					MCAL_UART_voidSendString(GLOB_u8NewLine);}

		if(GLOB_u8Flag_AC){MCAL_UART_voidSendString((u8*)"AC: ON");			MCAL_UART_voidSendString(GLOB_u8NewLine);}
		else{MCAL_UART_voidSendString((u8*)"AC: OFF");						MCAL_UART_voidSendString(GLOB_u8NewLine);}
    23ae:	8f e7       	ldi	r24, 0x7F	; 127
    23b0:	90 e0       	ldi	r25, 0x00	; 0
    23b2:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
    23b6:	82 e1       	ldi	r24, 0x12	; 18
    23b8:	97 e0       	ldi	r25, 0x07	; 7
    23ba:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
    23be:	62 cf       	rjmp	.-316    	; 0x2284 <APP_Devices_Status+0x4a>
{
	u8 LOC_u8Option=0,LOC_u8BackFlag=0;
	do
	{
		if(GLOB_u8Flag_Door){MCAL_UART_voidSendString((u8*)"Door: Open"); 	MCAL_UART_voidSendString(GLOB_u8NewLine);}
		else{MCAL_UART_voidSendString((u8*)"Door: Closed");					MCAL_UART_voidSendString(GLOB_u8NewLine);}
    23c0:	8b e6       	ldi	r24, 0x6B	; 107
    23c2:	90 e0       	ldi	r25, 0x00	; 0
    23c4:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
    23c8:	82 e1       	ldi	r24, 0x12	; 18
    23ca:	97 e0       	ldi	r25, 0x07	; 7
    23cc:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
    23d0:	4c cf       	rjmp	.-360    	; 0x226a <APP_Devices_Status+0x30>

000023d2 <APP_AC_Contol_Page>:
	while(LOC_u8BackFlag != 1);

}

void APP_AC_Contol_Page(void)
{
    23d2:	cf 92       	push	r12
    23d4:	df 92       	push	r13
    23d6:	ef 92       	push	r14
    23d8:	ff 92       	push	r15
    23da:	0f 93       	push	r16
    23dc:	1f 93       	push	r17
    23de:	df 93       	push	r29
    23e0:	cf 93       	push	r28
    23e2:	0f 92       	push	r0
    23e4:	cd b7       	in	r28, 0x3d	; 61
    23e6:	de b7       	in	r29, 0x3e	; 62
	u8 LOC_u8Option = 0,LOC_u8BackFlag = 0;
    23e8:	19 82       	std	Y+1, r1	; 0x01
    23ea:	7e 01       	movw	r14, r28
    23ec:	08 94       	sec
    23ee:	e1 1c       	adc	r14, r1
    23f0:	f1 1c       	adc	r15, r1
    23f2:	80 e4       	ldi	r24, 0x40	; 64
    23f4:	c8 2e       	mov	r12, r24
    23f6:	8c e9       	ldi	r24, 0x9C	; 156
    23f8:	d8 2e       	mov	r13, r24
    23fa:	00 e9       	ldi	r16, 0x90	; 144
    23fc:	11 e0       	ldi	r17, 0x01	; 1
	do
	{

		MCAL_UART_voidSendString((u8*)"1.ON");
    23fe:	83 ef       	ldi	r24, 0xF3	; 243
    2400:	90 e0       	ldi	r25, 0x00	; 0
    2402:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
		MCAL_UART_voidSendString(GLOB_u8NewLine);
    2406:	82 e1       	ldi	r24, 0x12	; 18
    2408:	97 e0       	ldi	r25, 0x07	; 7
    240a:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
		MCAL_UART_voidSendString((u8*)"2.OFF");
    240e:	88 ef       	ldi	r24, 0xF8	; 248
    2410:	90 e0       	ldi	r25, 0x00	; 0
    2412:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
		MCAL_UART_voidSendString(GLOB_u8NewLine);
    2416:	82 e1       	ldi	r24, 0x12	; 18
    2418:	97 e0       	ldi	r25, 0x07	; 7
    241a:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
		MCAL_UART_voidSendString((u8*)"3.AUTO");
    241e:	8e ef       	ldi	r24, 0xFE	; 254
    2420:	90 e0       	ldi	r25, 0x00	; 0
    2422:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
		MCAL_UART_voidSendString(GLOB_u8NewLine);
    2426:	82 e1       	ldi	r24, 0x12	; 18
    2428:	97 e0       	ldi	r25, 0x07	; 7
    242a:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
		MCAL_UART_voidSendString((u8*)"4.Manual");
    242e:	85 e0       	ldi	r24, 0x05	; 5
    2430:	91 e0       	ldi	r25, 0x01	; 1
    2432:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
		MCAL_UART_voidSendString(GLOB_u8NewLine);
    2436:	82 e1       	ldi	r24, 0x12	; 18
    2438:	97 e0       	ldi	r25, 0x07	; 7
    243a:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
		MCAL_UART_voidSendString((u8*)"0.BACK ");
    243e:	86 ee       	ldi	r24, 0xE6	; 230
    2440:	90 e0       	ldi	r25, 0x00	; 0
    2442:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
		MCAL_UART_voidSendString(GLOB_u8NewLine);
    2446:	82 e1       	ldi	r24, 0x12	; 18
    2448:	97 e0       	ldi	r25, 0x07	; 7
    244a:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
		MCAL_UART_voidReceiveData(&LOC_u8Option);
    244e:	c7 01       	movw	r24, r14
    2450:	0e 94 c8 06 	call	0xd90	; 0xd90 <MCAL_UART_voidReceiveData>

		switch(LOC_u8Option)
    2454:	89 81       	ldd	r24, Y+1	; 0x01
    2456:	82 33       	cpi	r24, 0x32	; 50
    2458:	09 f4       	brne	.+2      	; 0x245c <APP_AC_Contol_Page+0x8a>
    245a:	b7 c0       	rjmp	.+366    	; 0x25ca <APP_AC_Contol_Page+0x1f8>
    245c:	83 33       	cpi	r24, 0x33	; 51
    245e:	08 f0       	brcs	.+2      	; 0x2462 <APP_AC_Contol_Page+0x90>
    2460:	3f c0       	rjmp	.+126    	; 0x24e0 <APP_AC_Contol_Page+0x10e>
    2462:	80 33       	cpi	r24, 0x30	; 48
    2464:	09 f4       	brne	.+2      	; 0x2468 <APP_AC_Contol_Page+0x96>
    2466:	94 c0       	rjmp	.+296    	; 0x2590 <APP_AC_Contol_Page+0x1be>
    2468:	81 33       	cpi	r24, 0x31	; 49
    246a:	49 f6       	brne	.-110    	; 0x23fe <APP_AC_Contol_Page+0x2c>
		{
		case '1':
			MCAL_UART_voidTransmitData('1');
    246c:	81 e3       	ldi	r24, 0x31	; 49
    246e:	0e 94 c1 06 	call	0xd82	; 0xd82 <MCAL_UART_voidTransmitData>
			MCAL_UART_voidSendString(GLOB_u8NewLine);
    2472:	82 e1       	ldi	r24, 0x12	; 18
    2474:	97 e0       	ldi	r25, 0x07	; 7
    2476:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
			MCAL_UART_voidSendString((u8*)"ON");
    247a:	8e e0       	ldi	r24, 0x0E	; 14
    247c:	91 e0       	ldi	r25, 0x01	; 1
    247e:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
			MCAL_UART_voidSendString(GLOB_u8NewLine);
    2482:	82 e1       	ldi	r24, 0x12	; 18
    2484:	97 e0       	ldi	r25, 0x07	; 7
    2486:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
			MCAL_TIMER_Timer0_InterruptOVF_Disable();
    248a:	0e 94 8d 08 	call	0x111a	; 0x111a <MCAL_TIMER_Timer0_InterruptOVF_Disable>
    248e:	20 e0       	ldi	r18, 0x00	; 0
    2490:	30 e0       	ldi	r19, 0x00	; 0
    2492:	c8 01       	movw	r24, r16
    2494:	01 97       	sbiw	r24, 0x01	; 1
    2496:	f1 f7       	brne	.-4      	; 0x2494 <APP_AC_Contol_Page+0xc2>
    2498:	2f 5f       	subi	r18, 0xFF	; 255
    249a:	3f 4f       	sbci	r19, 0xFF	; 255
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    249c:	83 e0       	ldi	r24, 0x03	; 3
    249e:	28 3e       	cpi	r18, 0xE8	; 232
    24a0:	38 07       	cpc	r19, r24
    24a2:	b9 f7       	brne	.-18     	; 0x2492 <APP_AC_Contol_Page+0xc0>
			_delay_ms(100);
			HAL_DCMOTOR_void_DcMotorClockWise(7);
    24a4:	87 e0       	ldi	r24, 0x07	; 7
    24a6:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <HAL_DCMOTOR_void_DcMotorClockWise>
			GLOB_u8Flag_AC = 1;
    24aa:	81 e0       	ldi	r24, 0x01	; 1
    24ac:	80 93 3b 07 	sts	0x073B, r24
			LOC_u8BackFlag = 0;
			MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_HIGH);
    24b0:	62 e0       	ldi	r22, 0x02	; 2
    24b2:	41 e0       	ldi	r20, 0x01	; 1
    24b4:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <MCAL_DIO_u8SetPinValue>
			while(GET_BIT(PINB,PIN4));
    24b8:	b4 99       	sbic	0x16, 4	; 22
    24ba:	fe cf       	rjmp	.-4      	; 0x24b8 <APP_AC_Contol_Page+0xe6>
			G_u8_Receive = MCAL_SPI_SLAVE_u8_SpiSlave_Transceive('F');
    24bc:	86 e4       	ldi	r24, 0x46	; 70
    24be:	0e 94 a4 0b 	call	0x1748	; 0x1748 <MCAL_SPI_SLAVE_u8_SpiSlave_Transceive>
    24c2:	80 93 38 07 	sts	0x0738, r24
			while(GET_BIT(PINB,PIN4));
    24c6:	b4 99       	sbic	0x16, 4	; 22
    24c8:	fe cf       	rjmp	.-4      	; 0x24c6 <APP_AC_Contol_Page+0xf4>
			G_u8_Receive = MCAL_SPI_SLAVE_u8_SpiSlave_Transceive('N');
    24ca:	8e e4       	ldi	r24, 0x4E	; 78
			LOC_u8BackFlag = 0;
			MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_HIGH);
			while(GET_BIT(PINB,PIN4));
			G_u8_Receive = MCAL_SPI_SLAVE_u8_SpiSlave_Transceive('F');
			while(GET_BIT(PINB,PIN4));
			G_u8_Receive = MCAL_SPI_SLAVE_u8_SpiSlave_Transceive('F');
    24cc:	0e 94 a4 0b 	call	0x1748	; 0x1748 <MCAL_SPI_SLAVE_u8_SpiSlave_Transceive>
    24d0:	80 93 38 07 	sts	0x0738, r24
			MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_LOW);
    24d4:	81 e0       	ldi	r24, 0x01	; 1
    24d6:	62 e0       	ldi	r22, 0x02	; 2
    24d8:	40 e0       	ldi	r20, 0x00	; 0
    24da:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <MCAL_DIO_u8SetPinValue>
    24de:	8f cf       	rjmp	.-226    	; 0x23fe <APP_AC_Contol_Page+0x2c>
		MCAL_UART_voidSendString(GLOB_u8NewLine);
		MCAL_UART_voidSendString((u8*)"0.BACK ");
		MCAL_UART_voidSendString(GLOB_u8NewLine);
		MCAL_UART_voidReceiveData(&LOC_u8Option);

		switch(LOC_u8Option)
    24e0:	83 33       	cpi	r24, 0x33	; 51
    24e2:	71 f1       	breq	.+92     	; 0x2540 <APP_AC_Contol_Page+0x16e>
    24e4:	84 33       	cpi	r24, 0x34	; 52
    24e6:	09 f0       	breq	.+2      	; 0x24ea <APP_AC_Contol_Page+0x118>
    24e8:	8a cf       	rjmp	.-236    	; 0x23fe <APP_AC_Contol_Page+0x2c>
			G_u8_Receive = MCAL_SPI_SLAVE_u8_SpiSlave_Transceive('F');
			while(GET_BIT(PINB,PIN4));
			G_u8_Receive = MCAL_SPI_SLAVE_u8_SpiSlave_Transceive('T');
			MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_LOW);
		case '4':
			MCAL_UART_voidTransmitData('4');
    24ea:	84 e3       	ldi	r24, 0x34	; 52
    24ec:	0e 94 c1 06 	call	0xd82	; 0xd82 <MCAL_UART_voidTransmitData>
			MCAL_UART_voidSendString(GLOB_u8NewLine);
    24f0:	82 e1       	ldi	r24, 0x12	; 18
    24f2:	97 e0       	ldi	r25, 0x07	; 7
    24f4:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
			MCAL_UART_voidSendString((u8*)"Manual");
    24f8:	8a e1       	ldi	r24, 0x1A	; 26
    24fa:	91 e0       	ldi	r25, 0x01	; 1
    24fc:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
			MCAL_UART_voidSendString(GLOB_u8NewLine);
    2500:	82 e1       	ldi	r24, 0x12	; 18
    2502:	97 e0       	ldi	r25, 0x07	; 7
    2504:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
			MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_HIGH);
    2508:	81 e0       	ldi	r24, 0x01	; 1
    250a:	62 e0       	ldi	r22, 0x02	; 2
    250c:	41 e0       	ldi	r20, 0x01	; 1
    250e:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <MCAL_DIO_u8SetPinValue>
			while(GET_BIT(PINB,PIN4));
    2512:	b4 99       	sbic	0x16, 4	; 22
    2514:	fe cf       	rjmp	.-4      	; 0x2512 <APP_AC_Contol_Page+0x140>
			G_u8_Receive = MCAL_SPI_SLAVE_u8_SpiSlave_Transceive('F');
    2516:	86 e4       	ldi	r24, 0x46	; 70
    2518:	0e 94 a4 0b 	call	0x1748	; 0x1748 <MCAL_SPI_SLAVE_u8_SpiSlave_Transceive>
    251c:	80 93 38 07 	sts	0x0738, r24
			while(GET_BIT(PINB,PIN4));
    2520:	b4 99       	sbic	0x16, 4	; 22
    2522:	fe cf       	rjmp	.-4      	; 0x2520 <APP_AC_Contol_Page+0x14e>
			G_u8_Receive = MCAL_SPI_SLAVE_u8_SpiSlave_Transceive('M');
    2524:	8d e4       	ldi	r24, 0x4D	; 77
    2526:	0e 94 a4 0b 	call	0x1748	; 0x1748 <MCAL_SPI_SLAVE_u8_SpiSlave_Transceive>
    252a:	80 93 38 07 	sts	0x0738, r24
			MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_LOW);
    252e:	81 e0       	ldi	r24, 0x01	; 1
    2530:	62 e0       	ldi	r22, 0x02	; 2
    2532:	40 e0       	ldi	r20, 0x00	; 0
    2534:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <MCAL_DIO_u8SetPinValue>
    2538:	c6 01       	movw	r24, r12
    253a:	01 97       	sbiw	r24, 0x01	; 1
    253c:	f1 f7       	brne	.-4      	; 0x253a <APP_AC_Contol_Page+0x168>
    253e:	5f cf       	rjmp	.-322    	; 0x23fe <APP_AC_Contol_Page+0x2c>
			while(GET_BIT(PINB,PIN4));
			G_u8_Receive = MCAL_SPI_SLAVE_u8_SpiSlave_Transceive('F');
			MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_LOW);
			break;
		case '3':
			MCAL_UART_voidTransmitData('3');
    2540:	83 e3       	ldi	r24, 0x33	; 51
    2542:	0e 94 c1 06 	call	0xd82	; 0xd82 <MCAL_UART_voidTransmitData>
			MCAL_UART_voidSendString(GLOB_u8NewLine);
    2546:	82 e1       	ldi	r24, 0x12	; 18
    2548:	97 e0       	ldi	r25, 0x07	; 7
    254a:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
			MCAL_UART_voidSendString((u8*)"AUTO");
    254e:	85 e1       	ldi	r24, 0x15	; 21
    2550:	91 e0       	ldi	r25, 0x01	; 1
    2552:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
			MCAL_UART_voidSendString(GLOB_u8NewLine);
    2556:	82 e1       	ldi	r24, 0x12	; 18
    2558:	97 e0       	ldi	r25, 0x07	; 7
    255a:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
			MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_HIGH);
    255e:	81 e0       	ldi	r24, 0x01	; 1
    2560:	62 e0       	ldi	r22, 0x02	; 2
    2562:	41 e0       	ldi	r20, 0x01	; 1
    2564:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <MCAL_DIO_u8SetPinValue>
			while(GET_BIT(PINB,PIN4));
    2568:	b4 99       	sbic	0x16, 4	; 22
    256a:	fe cf       	rjmp	.-4      	; 0x2568 <APP_AC_Contol_Page+0x196>
			G_u8_Receive = MCAL_SPI_SLAVE_u8_SpiSlave_Transceive('F');
    256c:	86 e4       	ldi	r24, 0x46	; 70
    256e:	0e 94 a4 0b 	call	0x1748	; 0x1748 <MCAL_SPI_SLAVE_u8_SpiSlave_Transceive>
    2572:	80 93 38 07 	sts	0x0738, r24
			while(GET_BIT(PINB,PIN4));
    2576:	b4 99       	sbic	0x16, 4	; 22
    2578:	fe cf       	rjmp	.-4      	; 0x2576 <APP_AC_Contol_Page+0x1a4>
			G_u8_Receive = MCAL_SPI_SLAVE_u8_SpiSlave_Transceive('T');
    257a:	84 e5       	ldi	r24, 0x54	; 84
    257c:	0e 94 a4 0b 	call	0x1748	; 0x1748 <MCAL_SPI_SLAVE_u8_SpiSlave_Transceive>
    2580:	80 93 38 07 	sts	0x0738, r24
			MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_LOW);
    2584:	81 e0       	ldi	r24, 0x01	; 1
    2586:	62 e0       	ldi	r22, 0x02	; 2
    2588:	40 e0       	ldi	r20, 0x00	; 0
    258a:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <MCAL_DIO_u8SetPinValue>
    258e:	ad cf       	rjmp	.-166    	; 0x24ea <APP_AC_Contol_Page+0x118>
			MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_LOW);
			_delay_ms(10);
			LOC_u8BackFlag = 0;
			break;
		case '0':
			MCAL_UART_voidTransmitData('0');
    2590:	80 e3       	ldi	r24, 0x30	; 48
    2592:	0e 94 c1 06 	call	0xd82	; 0xd82 <MCAL_UART_voidTransmitData>
			MCAL_UART_voidSendString(GLOB_u8NewLine);
    2596:	82 e1       	ldi	r24, 0x12	; 18
    2598:	97 e0       	ldi	r25, 0x07	; 7
    259a:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
			MCAL_UART_voidSendString((u8*)"BACK");
    259e:	8e ee       	ldi	r24, 0xEE	; 238
    25a0:	90 e0       	ldi	r25, 0x00	; 0
    25a2:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
			MCAL_UART_voidSendString(GLOB_u8NewLine);
    25a6:	82 e1       	ldi	r24, 0x12	; 18
    25a8:	97 e0       	ldi	r25, 0x07	; 7
    25aa:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
    25ae:	80 e4       	ldi	r24, 0x40	; 64
    25b0:	9c e9       	ldi	r25, 0x9C	; 156
    25b2:	01 97       	sbiw	r24, 0x01	; 1
    25b4:	f1 f7       	brne	.-4      	; 0x25b2 <APP_AC_Contol_Page+0x1e0>
			break;
		}
	}while(LOC_u8BackFlag != 1);


}
    25b6:	0f 90       	pop	r0
    25b8:	cf 91       	pop	r28
    25ba:	df 91       	pop	r29
    25bc:	1f 91       	pop	r17
    25be:	0f 91       	pop	r16
    25c0:	ff 90       	pop	r15
    25c2:	ef 90       	pop	r14
    25c4:	df 90       	pop	r13
    25c6:	cf 90       	pop	r12
    25c8:	08 95       	ret
			while(GET_BIT(PINB,PIN4));
			G_u8_Receive = MCAL_SPI_SLAVE_u8_SpiSlave_Transceive('N');
			MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_LOW);
			break;
		case '2':
			MCAL_UART_voidTransmitData('2');
    25ca:	82 e3       	ldi	r24, 0x32	; 50
    25cc:	0e 94 c1 06 	call	0xd82	; 0xd82 <MCAL_UART_voidTransmitData>
			MCAL_UART_voidSendString(GLOB_u8NewLine);
    25d0:	82 e1       	ldi	r24, 0x12	; 18
    25d2:	97 e0       	ldi	r25, 0x07	; 7
    25d4:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
			MCAL_UART_voidSendString((u8*)"OFF");
    25d8:	81 e1       	ldi	r24, 0x11	; 17
    25da:	91 e0       	ldi	r25, 0x01	; 1
    25dc:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
			MCAL_UART_voidSendString(GLOB_u8NewLine);
    25e0:	82 e1       	ldi	r24, 0x12	; 18
    25e2:	97 e0       	ldi	r25, 0x07	; 7
    25e4:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
			MCAL_TIMER_Timer0_InterruptOVF_Disable();
    25e8:	0e 94 8d 08 	call	0x111a	; 0x111a <MCAL_TIMER_Timer0_InterruptOVF_Disable>
    25ec:	20 e0       	ldi	r18, 0x00	; 0
    25ee:	30 e0       	ldi	r19, 0x00	; 0
    25f0:	c8 01       	movw	r24, r16
    25f2:	01 97       	sbiw	r24, 0x01	; 1
    25f4:	f1 f7       	brne	.-4      	; 0x25f2 <APP_AC_Contol_Page+0x220>
    25f6:	2f 5f       	subi	r18, 0xFF	; 255
    25f8:	3f 4f       	sbci	r19, 0xFF	; 255
    25fa:	83 e0       	ldi	r24, 0x03	; 3
    25fc:	28 3e       	cpi	r18, 0xE8	; 232
    25fe:	38 07       	cpc	r19, r24
    2600:	b9 f7       	brne	.-18     	; 0x25f0 <APP_AC_Contol_Page+0x21e>
			_delay_ms(100);
			HAL_DCMOTOR_void_DcMotorStop();
    2602:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <HAL_DCMOTOR_void_DcMotorStop>
			GLOB_u8Flag_AC = 0;
    2606:	10 92 3b 07 	sts	0x073B, r1
			LOC_u8BackFlag = 0;
			MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_HIGH);
    260a:	81 e0       	ldi	r24, 0x01	; 1
    260c:	62 e0       	ldi	r22, 0x02	; 2
    260e:	41 e0       	ldi	r20, 0x01	; 1
    2610:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <MCAL_DIO_u8SetPinValue>
			while(GET_BIT(PINB,PIN4));
    2614:	b4 99       	sbic	0x16, 4	; 22
    2616:	fe cf       	rjmp	.-4      	; 0x2614 <APP_AC_Contol_Page+0x242>
			G_u8_Receive = MCAL_SPI_SLAVE_u8_SpiSlave_Transceive('F');
    2618:	86 e4       	ldi	r24, 0x46	; 70
    261a:	0e 94 a4 0b 	call	0x1748	; 0x1748 <MCAL_SPI_SLAVE_u8_SpiSlave_Transceive>
    261e:	80 93 38 07 	sts	0x0738, r24
			while(GET_BIT(PINB,PIN4));
    2622:	b4 99       	sbic	0x16, 4	; 22
    2624:	fe cf       	rjmp	.-4      	; 0x2622 <APP_AC_Contol_Page+0x250>
			G_u8_Receive = MCAL_SPI_SLAVE_u8_SpiSlave_Transceive('F');
    2626:	86 e4       	ldi	r24, 0x46	; 70
    2628:	51 cf       	rjmp	.-350    	; 0x24cc <APP_AC_Contol_Page+0xfa>

0000262a <APP_RoomLights_Page>:




void APP_RoomLights_Page(void)
{
    262a:	8f 92       	push	r8
    262c:	9f 92       	push	r9
    262e:	af 92       	push	r10
    2630:	bf 92       	push	r11
    2632:	cf 92       	push	r12
    2634:	df 92       	push	r13
    2636:	ef 92       	push	r14
    2638:	ff 92       	push	r15
    263a:	0f 93       	push	r16
    263c:	1f 93       	push	r17
    263e:	df 93       	push	r29
    2640:	cf 93       	push	r28
    2642:	cd b7       	in	r28, 0x3d	; 61
    2644:	de b7       	in	r29, 0x3e	; 62
    2646:	27 97       	sbiw	r28, 0x07	; 7
    2648:	0f b6       	in	r0, 0x3f	; 63
    264a:	f8 94       	cli
    264c:	de bf       	out	0x3e, r29	; 62
    264e:	0f be       	out	0x3f, r0	; 63
    2650:	cd bf       	out	0x3d, r28	; 61
    2652:	7e 01       	movw	r14, r28
    2654:	08 94       	sec
    2656:	e1 1c       	adc	r14, r1
    2658:	f1 1c       	adc	r15, r1
    265a:	36 e0       	ldi	r19, 0x06	; 6
    265c:	c3 2e       	mov	r12, r19
    265e:	d1 2c       	mov	r13, r1
    2660:	cc 0e       	add	r12, r28
    2662:	dd 1e       	adc	r13, r29
    2664:	25 e0       	ldi	r18, 0x05	; 5
    2666:	a2 2e       	mov	r10, r18
    2668:	b1 2c       	mov	r11, r1
    266a:	ac 0e       	add	r10, r28
    266c:	bd 1e       	adc	r11, r29
			MCAL_UART_voidSendString((u8*)"Dimmer:");
			 */
			MCAL_UART_voidSendString(GLOB_u8NewLine);
			MCAL_UART_voidSendString((u8*)"Choose Brightness level (0 <--> 9):");
			MCAL_UART_voidSendString(GLOB_u8NewLine);
			MCAL_UART_voidReceiveData(&LOC_u8Dimmer);
    266e:	97 e0       	ldi	r25, 0x07	; 7
    2670:	89 2e       	mov	r8, r25
    2672:	91 2c       	mov	r9, r1
    2674:	8c 0e       	add	r8, r28
    2676:	9d 1e       	adc	r9, r29
{
	u8 LOC_u8BackFlag = 0 ;

	do
	{
		u8 LOC_u8Option = 0,LOC_u8LED1_Option =0,LOC_u8LED2_Option =0,LOC_u8LED3_Option =0,LOC_u8LED4_Option =0,LOC_u8LED5_Option =0,LOC_u8Dimmer = 0;
    2678:	19 82       	std	Y+1, r1	; 0x01
    267a:	1a 82       	std	Y+2, r1	; 0x02
    267c:	1b 82       	std	Y+3, r1	; 0x03
    267e:	1c 82       	std	Y+4, r1	; 0x04
    2680:	1d 82       	std	Y+5, r1	; 0x05
    2682:	1e 82       	std	Y+6, r1	; 0x06
    2684:	1f 82       	std	Y+7, r1	; 0x07

		MCAL_UART_voidSendString(LIGHT1);
    2686:	81 e2       	ldi	r24, 0x21	; 33
    2688:	91 e0       	ldi	r25, 0x01	; 1
    268a:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
		MCAL_UART_voidSendString(LIGHT2);
    268e:	8e e2       	ldi	r24, 0x2E	; 46
    2690:	91 e0       	ldi	r25, 0x01	; 1
    2692:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
		MCAL_UART_voidSendString(LIGHT3);
    2696:	8b e3       	ldi	r24, 0x3B	; 59
    2698:	91 e0       	ldi	r25, 0x01	; 1
    269a:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
		MCAL_UART_voidSendString(LIGHT4);
    269e:	88 e4       	ldi	r24, 0x48	; 72
    26a0:	91 e0       	ldi	r25, 0x01	; 1
    26a2:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
		MCAL_UART_voidSendString(LIGHT5);
    26a6:	85 e5       	ldi	r24, 0x55	; 85
    26a8:	91 e0       	ldi	r25, 0x01	; 1
    26aa:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
		MCAL_UART_voidSendString(DIMMER);
    26ae:	82 e6       	ldi	r24, 0x62	; 98
    26b0:	91 e0       	ldi	r25, 0x01	; 1
    26b2:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
		MCAL_UART_voidSendString(BACK);
    26b6:	8e e6       	ldi	r24, 0x6E	; 110
    26b8:	91 e0       	ldi	r25, 0x01	; 1
    26ba:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>


		MCAL_UART_voidReceiveData(&LOC_u8Option);
    26be:	c7 01       	movw	r24, r14
    26c0:	0e 94 c8 06 	call	0xd90	; 0xd90 <MCAL_UART_voidReceiveData>

		switch(LOC_u8Option)
    26c4:	89 81       	ldd	r24, Y+1	; 0x01
    26c6:	83 33       	cpi	r24, 0x33	; 51
    26c8:	09 f4       	brne	.+2      	; 0x26cc <APP_RoomLights_Page+0xa2>
    26ca:	0d c2       	rjmp	.+1050   	; 0x2ae6 <APP_RoomLights_Page+0x4bc>
    26cc:	84 33       	cpi	r24, 0x34	; 52
    26ce:	50 f5       	brcc	.+84     	; 0x2724 <APP_RoomLights_Page+0xfa>
    26d0:	81 33       	cpi	r24, 0x31	; 49
    26d2:	09 f4       	brne	.+2      	; 0x26d6 <APP_RoomLights_Page+0xac>
    26d4:	b0 c3       	rjmp	.+1888   	; 0x2e36 <APP_RoomLights_Page+0x80c>
    26d6:	82 33       	cpi	r24, 0x32	; 50
    26d8:	08 f0       	brcs	.+2      	; 0x26dc <APP_RoomLights_Page+0xb2>
    26da:	d7 c2       	rjmp	.+1454   	; 0x2c8a <APP_RoomLights_Page+0x660>
    26dc:	80 33       	cpi	r24, 0x30	; 48
    26de:	61 f6       	brne	.-104    	; 0x2678 <APP_RoomLights_Page+0x4e>

			LOC_u8BackFlag = 0;
			//Dimmer Function
			break;
		case '0':
			MCAL_UART_voidTransmitData('0');
    26e0:	80 e3       	ldi	r24, 0x30	; 48
    26e2:	0e 94 c1 06 	call	0xd82	; 0xd82 <MCAL_UART_voidTransmitData>
			MCAL_UART_voidSendString(GLOB_u8NewLine);
    26e6:	82 e1       	ldi	r24, 0x12	; 18
    26e8:	97 e0       	ldi	r25, 0x07	; 7
    26ea:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
			MCAL_UART_voidSendString((u8*)"Back");
    26ee:	89 ee       	ldi	r24, 0xE9	; 233
    26f0:	91 e0       	ldi	r25, 0x01	; 1
    26f2:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
			MCAL_UART_voidSendString(GLOB_u8NewLine);
    26f6:	82 e1       	ldi	r24, 0x12	; 18
    26f8:	97 e0       	ldi	r25, 0x07	; 7
    26fa:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
		}

	}
	while(LOC_u8BackFlag != 1);

}
    26fe:	27 96       	adiw	r28, 0x07	; 7
    2700:	0f b6       	in	r0, 0x3f	; 63
    2702:	f8 94       	cli
    2704:	de bf       	out	0x3e, r29	; 62
    2706:	0f be       	out	0x3f, r0	; 63
    2708:	cd bf       	out	0x3d, r28	; 61
    270a:	cf 91       	pop	r28
    270c:	df 91       	pop	r29
    270e:	1f 91       	pop	r17
    2710:	0f 91       	pop	r16
    2712:	ff 90       	pop	r15
    2714:	ef 90       	pop	r14
    2716:	df 90       	pop	r13
    2718:	cf 90       	pop	r12
    271a:	bf 90       	pop	r11
    271c:	af 90       	pop	r10
    271e:	9f 90       	pop	r9
    2720:	8f 90       	pop	r8
    2722:	08 95       	ret
		MCAL_UART_voidSendString(BACK);


		MCAL_UART_voidReceiveData(&LOC_u8Option);

		switch(LOC_u8Option)
    2724:	85 33       	cpi	r24, 0x35	; 53
    2726:	09 f4       	brne	.+2      	; 0x272a <APP_RoomLights_Page+0x100>
    2728:	0b c1       	rjmp	.+534    	; 0x2940 <APP_RoomLights_Page+0x316>
    272a:	85 33       	cpi	r24, 0x35	; 53
    272c:	50 f1       	brcs	.+84     	; 0x2782 <APP_RoomLights_Page+0x158>
    272e:	86 33       	cpi	r24, 0x36	; 54
    2730:	09 f0       	breq	.+2      	; 0x2734 <APP_RoomLights_Page+0x10a>
    2732:	a2 cf       	rjmp	.-188    	; 0x2678 <APP_RoomLights_Page+0x4e>

			LOC_u8BackFlag = 0;

			break;
		case '6':
			LOC_u8Dimmer =0;
    2734:	1f 82       	std	Y+7, r1	; 0x07
			MCAL_UART_voidTransmitData('6');
    2736:	86 e3       	ldi	r24, 0x36	; 54
    2738:	0e 94 c1 06 	call	0xd82	; 0xd82 <MCAL_UART_voidTransmitData>
			MCAL_UART_voidSendString(GLOB_u8NewLine);
    273c:	82 e1       	ldi	r24, 0x12	; 18
    273e:	97 e0       	ldi	r25, 0x07	; 7
    2740:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
			/*
			MCAL_UART_voidSendString((u8*)"Dimmer:");
			 */
			MCAL_UART_voidSendString(GLOB_u8NewLine);
    2744:	82 e1       	ldi	r24, 0x12	; 18
    2746:	97 e0       	ldi	r25, 0x07	; 7
    2748:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
			MCAL_UART_voidSendString((u8*)"Choose Brightness level (0 <--> 9):");
    274c:	86 e2       	ldi	r24, 0x26	; 38
    274e:	92 e0       	ldi	r25, 0x02	; 2
    2750:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
			MCAL_UART_voidSendString(GLOB_u8NewLine);
    2754:	82 e1       	ldi	r24, 0x12	; 18
    2756:	97 e0       	ldi	r25, 0x07	; 7
    2758:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
			MCAL_UART_voidReceiveData(&LOC_u8Dimmer);
    275c:	c4 01       	movw	r24, r8
    275e:	0e 94 c8 06 	call	0xd90	; 0xd90 <MCAL_UART_voidReceiveData>
			MCAL_UART_voidTransmitData(LOC_u8Dimmer);
    2762:	8f 81       	ldd	r24, Y+7	; 0x07
    2764:	0e 94 c1 06 	call	0xd82	; 0xd82 <MCAL_UART_voidTransmitData>
			MCAL_UART_voidSendString(GLOB_u8NewLine);
    2768:	82 e1       	ldi	r24, 0x12	; 18
    276a:	97 e0       	ldi	r25, 0x07	; 7
    276c:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
			HAL_MCP4018_POT_voidWriteStep(((LOC_u8Dimmer-'0')*14));
    2770:	8f 81       	ldd	r24, Y+7	; 0x07
    2772:	2e e0       	ldi	r18, 0x0E	; 14
    2774:	82 9f       	mul	r24, r18
    2776:	c0 01       	movw	r24, r0
    2778:	11 24       	eor	r1, r1
    277a:	80 5a       	subi	r24, 0xA0	; 160
    277c:	0e 94 6c 0e 	call	0x1cd8	; 0x1cd8 <HAL_MCP4018_POT_voidWriteStep>
    2780:	7b cf       	rjmp	.-266    	; 0x2678 <APP_RoomLights_Page+0x4e>

			LOC_u8BackFlag = 0;

			break;
		case '4':
			MCAL_UART_voidTransmitData('4');
    2782:	84 e3       	ldi	r24, 0x34	; 52
    2784:	0e 94 c1 06 	call	0xd82	; 0xd82 <MCAL_UART_voidTransmitData>
			u8 LOC_u8InsideRoom4 = 0 ;
			do
			{

				MCAL_UART_voidSendString(GLOB_u8NewLine);
    2788:	82 e1       	ldi	r24, 0x12	; 18
    278a:	97 e0       	ldi	r25, 0x07	; 7
    278c:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
				MCAL_UART_voidSendString((u8*)"Room 4 Light:");
    2790:	8a e0       	ldi	r24, 0x0A	; 10
    2792:	92 e0       	ldi	r25, 0x02	; 2
    2794:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
				MCAL_UART_voidSendString(GLOB_u8NewLine);
    2798:	82 e1       	ldi	r24, 0x12	; 18
    279a:	97 e0       	ldi	r25, 0x07	; 7
    279c:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>

				MCAL_UART_voidSendString((u8*)"1 --> Turn ON Light");
    27a0:	89 e8       	ldi	r24, 0x89	; 137
    27a2:	91 e0       	ldi	r25, 0x01	; 1
    27a4:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
				MCAL_UART_voidSendString(GLOB_u8NewLine);
    27a8:	82 e1       	ldi	r24, 0x12	; 18
    27aa:	97 e0       	ldi	r25, 0x07	; 7
    27ac:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
				MCAL_UART_voidSendString((u8*)"2 --> Turn OFF Light");
    27b0:	8d e9       	ldi	r24, 0x9D	; 157
    27b2:	91 e0       	ldi	r25, 0x01	; 1
    27b4:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
				MCAL_UART_voidSendString(GLOB_u8NewLine);
    27b8:	82 e1       	ldi	r24, 0x12	; 18
    27ba:	97 e0       	ldi	r25, 0x07	; 7
    27bc:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
				MCAL_UART_voidSendString((u8*)"3 --> Toggle Light");
    27c0:	82 eb       	ldi	r24, 0xB2	; 178
    27c2:	91 e0       	ldi	r25, 0x01	; 1
    27c4:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
				MCAL_UART_voidSendString(GLOB_u8NewLine);
    27c8:	82 e1       	ldi	r24, 0x12	; 18
    27ca:	97 e0       	ldi	r25, 0x07	; 7
    27cc:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
				MCAL_UART_voidSendString(BACK);
    27d0:	8e e6       	ldi	r24, 0x6E	; 110
    27d2:	91 e0       	ldi	r25, 0x01	; 1
    27d4:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>

				MCAL_UART_voidReceiveData(&LOC_u8LED4_Option);
    27d8:	c5 01       	movw	r24, r10
    27da:	0e 94 c8 06 	call	0xd90	; 0xd90 <MCAL_UART_voidReceiveData>

				switch(LOC_u8LED4_Option)
    27de:	8d 81       	ldd	r24, Y+5	; 0x05
    27e0:	81 33       	cpi	r24, 0x31	; 49
    27e2:	09 f4       	brne	.+2      	; 0x27e6 <APP_RoomLights_Page+0x1bc>
    27e4:	7d c0       	rjmp	.+250    	; 0x28e0 <APP_RoomLights_Page+0x2b6>
    27e6:	82 33       	cpi	r24, 0x32	; 50
    27e8:	90 f4       	brcc	.+36     	; 0x280e <APP_RoomLights_Page+0x1e4>
    27ea:	80 33       	cpi	r24, 0x30	; 48
    27ec:	69 f6       	brne	.-102    	; 0x2788 <APP_RoomLights_Page+0x15e>
					GLOB_u8Flag_LED5 = !GLOB_u8Flag_LED5;

					LOC_u8InsideRoom5 = 0;
					break;
				case '0':
					MCAL_UART_voidTransmitData('0');
    27ee:	80 e3       	ldi	r24, 0x30	; 48
    27f0:	0e 94 c1 06 	call	0xd82	; 0xd82 <MCAL_UART_voidTransmitData>
					MCAL_UART_voidSendString(GLOB_u8NewLine);
    27f4:	82 e1       	ldi	r24, 0x12	; 18
    27f6:	97 e0       	ldi	r25, 0x07	; 7
    27f8:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
					MCAL_UART_voidSendString((u8*)"Back");
    27fc:	89 ee       	ldi	r24, 0xE9	; 233
    27fe:	91 e0       	ldi	r25, 0x01	; 1
    2800:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
					MCAL_UART_voidSendString(GLOB_u8NewLine);
    2804:	82 e1       	ldi	r24, 0x12	; 18
    2806:	97 e0       	ldi	r25, 0x07	; 7
    2808:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
    280c:	35 cf       	rjmp	.-406    	; 0x2678 <APP_RoomLights_Page+0x4e>
				MCAL_UART_voidSendString(GLOB_u8NewLine);
				MCAL_UART_voidSendString(BACK);

				MCAL_UART_voidReceiveData(&LOC_u8LED4_Option);

				switch(LOC_u8LED4_Option)
    280e:	82 33       	cpi	r24, 0x32	; 50
    2810:	c1 f1       	breq	.+112    	; 0x2882 <APP_RoomLights_Page+0x258>
    2812:	83 33       	cpi	r24, 0x33	; 51
    2814:	09 f0       	breq	.+2      	; 0x2818 <APP_RoomLights_Page+0x1ee>
    2816:	b8 cf       	rjmp	.-144    	; 0x2788 <APP_RoomLights_Page+0x15e>
					GLOB_u8Flag_LED4 = 0;

					LOC_u8InsideRoom4 = 0;
					break;
				case '3':
					MCAL_UART_voidTransmitData('3');
    2818:	83 e3       	ldi	r24, 0x33	; 51
    281a:	0e 94 c1 06 	call	0xd82	; 0xd82 <MCAL_UART_voidTransmitData>
					MCAL_UART_voidSendString(GLOB_u8NewLine);
    281e:	82 e1       	ldi	r24, 0x12	; 18
    2820:	97 e0       	ldi	r25, 0x07	; 7
    2822:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
					MCAL_UART_voidSendString((u8*)"Toggling...");
    2826:	8d ed       	ldi	r24, 0xDD	; 221
    2828:	91 e0       	ldi	r25, 0x01	; 1
    282a:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
					MCAL_UART_voidSendString(GLOB_u8NewLine);
    282e:	82 e1       	ldi	r24, 0x12	; 18
    2830:	97 e0       	ldi	r25, 0x07	; 7
    2832:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
					HAL_LED_u8LedMode(LED4_Port,LED4_Pin,LED_TOG);
    2836:	80 e0       	ldi	r24, 0x00	; 0
    2838:	66 e0       	ldi	r22, 0x06	; 6
    283a:	42 e0       	ldi	r20, 0x02	; 2
    283c:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <HAL_LED_u8LedMode>
					MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_HIGH);
    2840:	81 e0       	ldi	r24, 0x01	; 1
    2842:	62 e0       	ldi	r22, 0x02	; 2
    2844:	41 e0       	ldi	r20, 0x01	; 1
    2846:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <MCAL_DIO_u8SetPinValue>
					while(GET_BIT(PINB,PIN4));
    284a:	b4 99       	sbic	0x16, 4	; 22
    284c:	fe cf       	rjmp	.-4      	; 0x284a <APP_RoomLights_Page+0x220>
					G_u8_Receive = MCAL_SPI_SLAVE_u8_SpiSlave_Transceive('4');
    284e:	84 e3       	ldi	r24, 0x34	; 52
    2850:	0e 94 a4 0b 	call	0x1748	; 0x1748 <MCAL_SPI_SLAVE_u8_SpiSlave_Transceive>
    2854:	80 93 38 07 	sts	0x0738, r24
					while(GET_BIT(PINB,PIN4));
    2858:	b4 99       	sbic	0x16, 4	; 22
    285a:	fe cf       	rjmp	.-4      	; 0x2858 <APP_RoomLights_Page+0x22e>
					G_u8_Receive = MCAL_SPI_SLAVE_u8_SpiSlave_Transceive('T');
    285c:	84 e5       	ldi	r24, 0x54	; 84
    285e:	0e 94 a4 0b 	call	0x1748	; 0x1748 <MCAL_SPI_SLAVE_u8_SpiSlave_Transceive>
    2862:	80 93 38 07 	sts	0x0738, r24
					MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_LOW);
    2866:	81 e0       	ldi	r24, 0x01	; 1
    2868:	62 e0       	ldi	r22, 0x02	; 2
    286a:	40 e0       	ldi	r20, 0x00	; 0
    286c:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <MCAL_DIO_u8SetPinValue>
					GLOB_u8Flag_LED4 = !GLOB_u8Flag_LED4;
    2870:	80 91 3d 07 	lds	r24, 0x073D
    2874:	90 e0       	ldi	r25, 0x00	; 0
    2876:	88 23       	and	r24, r24
    2878:	09 f4       	brne	.+2      	; 0x287c <APP_RoomLights_Page+0x252>
    287a:	91 e0       	ldi	r25, 0x01	; 1
    287c:	90 93 3d 07 	sts	0x073D, r25
    2880:	83 cf       	rjmp	.-250    	; 0x2788 <APP_RoomLights_Page+0x15e>
					GLOB_u8Flag_LED4 = 1;

					LOC_u8InsideRoom4 = 0;
					break;
				case '2':
					MCAL_UART_voidTransmitData('2');
    2882:	82 e3       	ldi	r24, 0x32	; 50
    2884:	0e 94 c1 06 	call	0xd82	; 0xd82 <MCAL_UART_voidTransmitData>
					MCAL_UART_voidSendString(GLOB_u8NewLine);
    2888:	82 e1       	ldi	r24, 0x12	; 18
    288a:	97 e0       	ldi	r25, 0x07	; 7
    288c:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
					MCAL_UART_voidSendString((u8*)"OFF...");
    2890:	86 ed       	ldi	r24, 0xD6	; 214
    2892:	91 e0       	ldi	r25, 0x01	; 1
    2894:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
					MCAL_UART_voidSendString(GLOB_u8NewLine);
    2898:	82 e1       	ldi	r24, 0x12	; 18
    289a:	97 e0       	ldi	r25, 0x07	; 7
    289c:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
					HAL_LED_u8LedMode(LED4_Port,LED4_Pin,LED_OFF);
    28a0:	80 e0       	ldi	r24, 0x00	; 0
    28a2:	66 e0       	ldi	r22, 0x06	; 6
    28a4:	40 e0       	ldi	r20, 0x00	; 0
    28a6:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <HAL_LED_u8LedMode>
					MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_HIGH);
    28aa:	81 e0       	ldi	r24, 0x01	; 1
    28ac:	62 e0       	ldi	r22, 0x02	; 2
    28ae:	41 e0       	ldi	r20, 0x01	; 1
    28b0:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <MCAL_DIO_u8SetPinValue>
					while(GET_BIT(PINB,PIN4));
    28b4:	b4 99       	sbic	0x16, 4	; 22
    28b6:	fe cf       	rjmp	.-4      	; 0x28b4 <APP_RoomLights_Page+0x28a>
					G_u8_Receive = MCAL_SPI_SLAVE_u8_SpiSlave_Transceive('4');
    28b8:	84 e3       	ldi	r24, 0x34	; 52
    28ba:	0e 94 a4 0b 	call	0x1748	; 0x1748 <MCAL_SPI_SLAVE_u8_SpiSlave_Transceive>
    28be:	80 93 38 07 	sts	0x0738, r24
					while(GET_BIT(PINB,PIN4));
    28c2:	b4 99       	sbic	0x16, 4	; 22
    28c4:	fe cf       	rjmp	.-4      	; 0x28c2 <APP_RoomLights_Page+0x298>
					G_u8_Receive = MCAL_SPI_SLAVE_u8_SpiSlave_Transceive('F');
    28c6:	86 e4       	ldi	r24, 0x46	; 70
    28c8:	0e 94 a4 0b 	call	0x1748	; 0x1748 <MCAL_SPI_SLAVE_u8_SpiSlave_Transceive>
    28cc:	80 93 38 07 	sts	0x0738, r24
					MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_LOW);
    28d0:	81 e0       	ldi	r24, 0x01	; 1
    28d2:	62 e0       	ldi	r22, 0x02	; 2
    28d4:	40 e0       	ldi	r20, 0x00	; 0
    28d6:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <MCAL_DIO_u8SetPinValue>
					GLOB_u8Flag_LED4 = 0;
    28da:	10 92 3d 07 	sts	0x073D, r1
    28de:	54 cf       	rjmp	.-344    	; 0x2788 <APP_RoomLights_Page+0x15e>
				MCAL_UART_voidReceiveData(&LOC_u8LED4_Option);

				switch(LOC_u8LED4_Option)
				{
				case '1':
					MCAL_UART_voidTransmitData('1');
    28e0:	81 e3       	ldi	r24, 0x31	; 49
    28e2:	0e 94 c1 06 	call	0xd82	; 0xd82 <MCAL_UART_voidTransmitData>
					MCAL_UART_voidSendString(GLOB_u8NewLine);
    28e6:	82 e1       	ldi	r24, 0x12	; 18
    28e8:	97 e0       	ldi	r25, 0x07	; 7
    28ea:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
					MCAL_UART_voidSendString((u8*)"ON...");
    28ee:	80 ed       	ldi	r24, 0xD0	; 208
    28f0:	91 e0       	ldi	r25, 0x01	; 1
    28f2:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
					MCAL_UART_voidSendString(GLOB_u8NewLine);
    28f6:	82 e1       	ldi	r24, 0x12	; 18
    28f8:	97 e0       	ldi	r25, 0x07	; 7
    28fa:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
					HAL_LED_u8LedMode(LED4_Port,LED4_Pin,LED_ON);
    28fe:	80 e0       	ldi	r24, 0x00	; 0
    2900:	66 e0       	ldi	r22, 0x06	; 6
    2902:	41 e0       	ldi	r20, 0x01	; 1
    2904:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <HAL_LED_u8LedMode>
					MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_HIGH);
    2908:	81 e0       	ldi	r24, 0x01	; 1
    290a:	62 e0       	ldi	r22, 0x02	; 2
    290c:	41 e0       	ldi	r20, 0x01	; 1
    290e:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <MCAL_DIO_u8SetPinValue>
					while(GET_BIT(PINB,PIN4));
    2912:	b4 99       	sbic	0x16, 4	; 22
    2914:	fe cf       	rjmp	.-4      	; 0x2912 <APP_RoomLights_Page+0x2e8>
					G_u8_Receive = MCAL_SPI_SLAVE_u8_SpiSlave_Transceive('4');
    2916:	84 e3       	ldi	r24, 0x34	; 52
    2918:	0e 94 a4 0b 	call	0x1748	; 0x1748 <MCAL_SPI_SLAVE_u8_SpiSlave_Transceive>
    291c:	80 93 38 07 	sts	0x0738, r24
					while(GET_BIT(PINB,PIN4));
    2920:	b4 99       	sbic	0x16, 4	; 22
    2922:	fe cf       	rjmp	.-4      	; 0x2920 <APP_RoomLights_Page+0x2f6>
					G_u8_Receive = MCAL_SPI_SLAVE_u8_SpiSlave_Transceive('N');
    2924:	8e e4       	ldi	r24, 0x4E	; 78
    2926:	0e 94 a4 0b 	call	0x1748	; 0x1748 <MCAL_SPI_SLAVE_u8_SpiSlave_Transceive>
    292a:	80 93 38 07 	sts	0x0738, r24
					MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_LOW);
    292e:	81 e0       	ldi	r24, 0x01	; 1
    2930:	62 e0       	ldi	r22, 0x02	; 2
    2932:	40 e0       	ldi	r20, 0x00	; 0
    2934:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <MCAL_DIO_u8SetPinValue>
					GLOB_u8Flag_LED4 = 1;
    2938:	81 e0       	ldi	r24, 0x01	; 1
    293a:	80 93 3d 07 	sts	0x073D, r24
    293e:	24 cf       	rjmp	.-440    	; 0x2788 <APP_RoomLights_Page+0x15e>

			LOC_u8BackFlag = 0;

			break;
		case '5':
			MCAL_UART_voidTransmitData('5');
    2940:	85 e3       	ldi	r24, 0x35	; 53
    2942:	0e 94 c1 06 	call	0xd82	; 0xd82 <MCAL_UART_voidTransmitData>
			u8 LOC_u8InsideRoom5 = 0 ;
			do
			{

				MCAL_UART_voidSendString(GLOB_u8NewLine);
    2946:	82 e1       	ldi	r24, 0x12	; 18
    2948:	97 e0       	ldi	r25, 0x07	; 7
    294a:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
				MCAL_UART_voidSendString((u8*)"Room 5 Light:");
    294e:	88 e1       	ldi	r24, 0x18	; 24
    2950:	92 e0       	ldi	r25, 0x02	; 2
    2952:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
				MCAL_UART_voidSendString(GLOB_u8NewLine);
    2956:	82 e1       	ldi	r24, 0x12	; 18
    2958:	97 e0       	ldi	r25, 0x07	; 7
    295a:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>

				MCAL_UART_voidSendString((u8*)"1 --> Turn ON Light");
    295e:	89 e8       	ldi	r24, 0x89	; 137
    2960:	91 e0       	ldi	r25, 0x01	; 1
    2962:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
				MCAL_UART_voidSendString(GLOB_u8NewLine);
    2966:	82 e1       	ldi	r24, 0x12	; 18
    2968:	97 e0       	ldi	r25, 0x07	; 7
    296a:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
				MCAL_UART_voidSendString((u8*)"2 --> Turn OFF Light");
    296e:	8d e9       	ldi	r24, 0x9D	; 157
    2970:	91 e0       	ldi	r25, 0x01	; 1
    2972:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
				MCAL_UART_voidSendString(GLOB_u8NewLine);
    2976:	82 e1       	ldi	r24, 0x12	; 18
    2978:	97 e0       	ldi	r25, 0x07	; 7
    297a:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
				MCAL_UART_voidSendString((u8*)"3 --> Toggle Light");
    297e:	82 eb       	ldi	r24, 0xB2	; 178
    2980:	91 e0       	ldi	r25, 0x01	; 1
    2982:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
				MCAL_UART_voidSendString(GLOB_u8NewLine);
    2986:	82 e1       	ldi	r24, 0x12	; 18
    2988:	97 e0       	ldi	r25, 0x07	; 7
    298a:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
				MCAL_UART_voidSendString(BACK);
    298e:	8e e6       	ldi	r24, 0x6E	; 110
    2990:	91 e0       	ldi	r25, 0x01	; 1
    2992:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
				MCAL_UART_voidSendString(GLOB_u8NewLine);
    2996:	82 e1       	ldi	r24, 0x12	; 18
    2998:	97 e0       	ldi	r25, 0x07	; 7
    299a:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>

				MCAL_UART_voidReceiveData(&LOC_u8LED5_Option);
    299e:	c6 01       	movw	r24, r12
    29a0:	0e 94 c8 06 	call	0xd90	; 0xd90 <MCAL_UART_voidReceiveData>

				switch(LOC_u8LED5_Option)
    29a4:	8e 81       	ldd	r24, Y+6	; 0x06
    29a6:	81 33       	cpi	r24, 0x31	; 49
    29a8:	09 f4       	brne	.+2      	; 0x29ac <APP_RoomLights_Page+0x382>
    29aa:	6d c0       	rjmp	.+218    	; 0x2a86 <APP_RoomLights_Page+0x45c>
    29ac:	82 33       	cpi	r24, 0x32	; 50
    29ae:	18 f4       	brcc	.+6      	; 0x29b6 <APP_RoomLights_Page+0x38c>
    29b0:	80 33       	cpi	r24, 0x30	; 48
    29b2:	49 f6       	brne	.-110    	; 0x2946 <APP_RoomLights_Page+0x31c>
    29b4:	1c cf       	rjmp	.-456    	; 0x27ee <APP_RoomLights_Page+0x1c4>
    29b6:	82 33       	cpi	r24, 0x32	; 50
    29b8:	b9 f1       	breq	.+110    	; 0x2a28 <APP_RoomLights_Page+0x3fe>
    29ba:	83 33       	cpi	r24, 0x33	; 51
    29bc:	21 f6       	brne	.-120    	; 0x2946 <APP_RoomLights_Page+0x31c>
					GLOB_u8Flag_LED5 = 0;

					LOC_u8InsideRoom5 = 0;
					break;
				case '3':
					MCAL_UART_voidTransmitData('3');
    29be:	83 e3       	ldi	r24, 0x33	; 51
    29c0:	0e 94 c1 06 	call	0xd82	; 0xd82 <MCAL_UART_voidTransmitData>
					MCAL_UART_voidSendString(GLOB_u8NewLine);
    29c4:	82 e1       	ldi	r24, 0x12	; 18
    29c6:	97 e0       	ldi	r25, 0x07	; 7
    29c8:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
					MCAL_UART_voidSendString((u8*)"Toggling...");
    29cc:	8d ed       	ldi	r24, 0xDD	; 221
    29ce:	91 e0       	ldi	r25, 0x01	; 1
    29d0:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
					MCAL_UART_voidSendString(GLOB_u8NewLine);
    29d4:	82 e1       	ldi	r24, 0x12	; 18
    29d6:	97 e0       	ldi	r25, 0x07	; 7
    29d8:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
					HAL_LED_u8LedMode(LED5_Port,LED5_Pin,LED_TOG);
    29dc:	80 e0       	ldi	r24, 0x00	; 0
    29de:	67 e0       	ldi	r22, 0x07	; 7
    29e0:	42 e0       	ldi	r20, 0x02	; 2
    29e2:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <HAL_LED_u8LedMode>
					MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_HIGH);
    29e6:	81 e0       	ldi	r24, 0x01	; 1
    29e8:	62 e0       	ldi	r22, 0x02	; 2
    29ea:	41 e0       	ldi	r20, 0x01	; 1
    29ec:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <MCAL_DIO_u8SetPinValue>
					while(GET_BIT(PINB,PIN4));
    29f0:	b4 99       	sbic	0x16, 4	; 22
    29f2:	fe cf       	rjmp	.-4      	; 0x29f0 <APP_RoomLights_Page+0x3c6>
					G_u8_Receive = MCAL_SPI_SLAVE_u8_SpiSlave_Transceive('5');
    29f4:	85 e3       	ldi	r24, 0x35	; 53
    29f6:	0e 94 a4 0b 	call	0x1748	; 0x1748 <MCAL_SPI_SLAVE_u8_SpiSlave_Transceive>
    29fa:	80 93 38 07 	sts	0x0738, r24
					while(GET_BIT(PINB,PIN4));
    29fe:	b4 99       	sbic	0x16, 4	; 22
    2a00:	fe cf       	rjmp	.-4      	; 0x29fe <APP_RoomLights_Page+0x3d4>
					G_u8_Receive = MCAL_SPI_SLAVE_u8_SpiSlave_Transceive('T');
    2a02:	84 e5       	ldi	r24, 0x54	; 84
    2a04:	0e 94 a4 0b 	call	0x1748	; 0x1748 <MCAL_SPI_SLAVE_u8_SpiSlave_Transceive>
    2a08:	80 93 38 07 	sts	0x0738, r24
					MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_LOW);
    2a0c:	81 e0       	ldi	r24, 0x01	; 1
    2a0e:	62 e0       	ldi	r22, 0x02	; 2
    2a10:	40 e0       	ldi	r20, 0x00	; 0
    2a12:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <MCAL_DIO_u8SetPinValue>
					GLOB_u8Flag_LED5 = !GLOB_u8Flag_LED5;
    2a16:	80 91 3a 07 	lds	r24, 0x073A
    2a1a:	90 e0       	ldi	r25, 0x00	; 0
    2a1c:	88 23       	and	r24, r24
    2a1e:	09 f4       	brne	.+2      	; 0x2a22 <APP_RoomLights_Page+0x3f8>
    2a20:	91 e0       	ldi	r25, 0x01	; 1
    2a22:	90 93 3a 07 	sts	0x073A, r25
    2a26:	8f cf       	rjmp	.-226    	; 0x2946 <APP_RoomLights_Page+0x31c>
					GLOB_u8Flag_LED5 = 1;

					LOC_u8InsideRoom5 = 0;
					break;
				case '2':
					MCAL_UART_voidTransmitData('2');
    2a28:	82 e3       	ldi	r24, 0x32	; 50
    2a2a:	0e 94 c1 06 	call	0xd82	; 0xd82 <MCAL_UART_voidTransmitData>
					MCAL_UART_voidSendString(GLOB_u8NewLine);
    2a2e:	82 e1       	ldi	r24, 0x12	; 18
    2a30:	97 e0       	ldi	r25, 0x07	; 7
    2a32:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
					MCAL_UART_voidSendString((u8*)"OFF...");
    2a36:	86 ed       	ldi	r24, 0xD6	; 214
    2a38:	91 e0       	ldi	r25, 0x01	; 1
    2a3a:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
					MCAL_UART_voidSendString(GLOB_u8NewLine);
    2a3e:	82 e1       	ldi	r24, 0x12	; 18
    2a40:	97 e0       	ldi	r25, 0x07	; 7
    2a42:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
					HAL_LED_u8LedMode(LED5_Port,LED5_Pin,LED_OFF);
    2a46:	80 e0       	ldi	r24, 0x00	; 0
    2a48:	67 e0       	ldi	r22, 0x07	; 7
    2a4a:	40 e0       	ldi	r20, 0x00	; 0
    2a4c:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <HAL_LED_u8LedMode>
					MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_HIGH);
    2a50:	81 e0       	ldi	r24, 0x01	; 1
    2a52:	62 e0       	ldi	r22, 0x02	; 2
    2a54:	41 e0       	ldi	r20, 0x01	; 1
    2a56:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <MCAL_DIO_u8SetPinValue>
					while(GET_BIT(PINB,PIN4));
    2a5a:	b4 99       	sbic	0x16, 4	; 22
    2a5c:	fe cf       	rjmp	.-4      	; 0x2a5a <APP_RoomLights_Page+0x430>
					G_u8_Receive = MCAL_SPI_SLAVE_u8_SpiSlave_Transceive('5');
    2a5e:	85 e3       	ldi	r24, 0x35	; 53
    2a60:	0e 94 a4 0b 	call	0x1748	; 0x1748 <MCAL_SPI_SLAVE_u8_SpiSlave_Transceive>
    2a64:	80 93 38 07 	sts	0x0738, r24
					while(GET_BIT(PINB,PIN4));
    2a68:	b4 99       	sbic	0x16, 4	; 22
    2a6a:	fe cf       	rjmp	.-4      	; 0x2a68 <APP_RoomLights_Page+0x43e>
					G_u8_Receive = MCAL_SPI_SLAVE_u8_SpiSlave_Transceive('F');
    2a6c:	86 e4       	ldi	r24, 0x46	; 70
    2a6e:	0e 94 a4 0b 	call	0x1748	; 0x1748 <MCAL_SPI_SLAVE_u8_SpiSlave_Transceive>
    2a72:	80 93 38 07 	sts	0x0738, r24
					MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_LOW);
    2a76:	81 e0       	ldi	r24, 0x01	; 1
    2a78:	62 e0       	ldi	r22, 0x02	; 2
    2a7a:	40 e0       	ldi	r20, 0x00	; 0
    2a7c:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <MCAL_DIO_u8SetPinValue>
					GLOB_u8Flag_LED5 = 0;
    2a80:	10 92 3a 07 	sts	0x073A, r1
    2a84:	60 cf       	rjmp	.-320    	; 0x2946 <APP_RoomLights_Page+0x31c>
				MCAL_UART_voidReceiveData(&LOC_u8LED5_Option);

				switch(LOC_u8LED5_Option)
				{
				case '1':
					MCAL_UART_voidTransmitData('1');
    2a86:	81 e3       	ldi	r24, 0x31	; 49
    2a88:	0e 94 c1 06 	call	0xd82	; 0xd82 <MCAL_UART_voidTransmitData>
					MCAL_UART_voidSendString(GLOB_u8NewLine);
    2a8c:	82 e1       	ldi	r24, 0x12	; 18
    2a8e:	97 e0       	ldi	r25, 0x07	; 7
    2a90:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
					MCAL_UART_voidSendString((u8*)"ON...");
    2a94:	80 ed       	ldi	r24, 0xD0	; 208
    2a96:	91 e0       	ldi	r25, 0x01	; 1
    2a98:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
					MCAL_UART_voidSendString(GLOB_u8NewLine);
    2a9c:	82 e1       	ldi	r24, 0x12	; 18
    2a9e:	97 e0       	ldi	r25, 0x07	; 7
    2aa0:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
					HAL_LED_u8LedMode(LED5_Port,LED5_Pin,LED_ON);
    2aa4:	80 e0       	ldi	r24, 0x00	; 0
    2aa6:	67 e0       	ldi	r22, 0x07	; 7
    2aa8:	41 e0       	ldi	r20, 0x01	; 1
    2aaa:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <HAL_LED_u8LedMode>
					MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_HIGH);
    2aae:	81 e0       	ldi	r24, 0x01	; 1
    2ab0:	62 e0       	ldi	r22, 0x02	; 2
    2ab2:	41 e0       	ldi	r20, 0x01	; 1
    2ab4:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <MCAL_DIO_u8SetPinValue>
					while(GET_BIT(PINB,PIN4));
    2ab8:	b4 99       	sbic	0x16, 4	; 22
    2aba:	fe cf       	rjmp	.-4      	; 0x2ab8 <APP_RoomLights_Page+0x48e>
					G_u8_Receive = MCAL_SPI_SLAVE_u8_SpiSlave_Transceive('5');
    2abc:	85 e3       	ldi	r24, 0x35	; 53
    2abe:	0e 94 a4 0b 	call	0x1748	; 0x1748 <MCAL_SPI_SLAVE_u8_SpiSlave_Transceive>
    2ac2:	80 93 38 07 	sts	0x0738, r24
					while(GET_BIT(PINB,PIN4));
    2ac6:	b4 99       	sbic	0x16, 4	; 22
    2ac8:	fe cf       	rjmp	.-4      	; 0x2ac6 <APP_RoomLights_Page+0x49c>
					G_u8_Receive = MCAL_SPI_SLAVE_u8_SpiSlave_Transceive('N');
    2aca:	8e e4       	ldi	r24, 0x4E	; 78
    2acc:	0e 94 a4 0b 	call	0x1748	; 0x1748 <MCAL_SPI_SLAVE_u8_SpiSlave_Transceive>
    2ad0:	80 93 38 07 	sts	0x0738, r24
					MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_LOW);
    2ad4:	81 e0       	ldi	r24, 0x01	; 1
    2ad6:	62 e0       	ldi	r22, 0x02	; 2
    2ad8:	40 e0       	ldi	r20, 0x00	; 0
    2ada:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <MCAL_DIO_u8SetPinValue>
					GLOB_u8Flag_LED5 = 1;
    2ade:	81 e0       	ldi	r24, 0x01	; 1
    2ae0:	80 93 3a 07 	sts	0x073A, r24
    2ae4:	30 cf       	rjmp	.-416    	; 0x2946 <APP_RoomLights_Page+0x31c>

			LOC_u8BackFlag = 0;

			break;
		case '3':
			MCAL_UART_voidTransmitData('3');
    2ae6:	83 e3       	ldi	r24, 0x33	; 51
    2ae8:	0e 94 c1 06 	call	0xd82	; 0xd82 <MCAL_UART_voidTransmitData>
    2aec:	8e 01       	movw	r16, r28
    2aee:	0c 5f       	subi	r16, 0xFC	; 252
    2af0:	1f 4f       	sbci	r17, 0xFF	; 255
			u8 LOC_u8InsideRoom3 = 0 ;
			do
			{

				MCAL_UART_voidSendString(GLOB_u8NewLine);
    2af2:	82 e1       	ldi	r24, 0x12	; 18
    2af4:	97 e0       	ldi	r25, 0x07	; 7
    2af6:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
				MCAL_UART_voidSendString((u8*)"Room 3 Light:");
    2afa:	8c ef       	ldi	r24, 0xFC	; 252
    2afc:	91 e0       	ldi	r25, 0x01	; 1
    2afe:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
				MCAL_UART_voidSendString(GLOB_u8NewLine);
    2b02:	82 e1       	ldi	r24, 0x12	; 18
    2b04:	97 e0       	ldi	r25, 0x07	; 7
    2b06:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>

				MCAL_UART_voidSendString((u8*)"1 --> Turn ON Light");
    2b0a:	89 e8       	ldi	r24, 0x89	; 137
    2b0c:	91 e0       	ldi	r25, 0x01	; 1
    2b0e:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
				MCAL_UART_voidSendString(GLOB_u8NewLine);
    2b12:	82 e1       	ldi	r24, 0x12	; 18
    2b14:	97 e0       	ldi	r25, 0x07	; 7
    2b16:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
				MCAL_UART_voidSendString((u8*)"2 --> Turn OFF Light");
    2b1a:	8d e9       	ldi	r24, 0x9D	; 157
    2b1c:	91 e0       	ldi	r25, 0x01	; 1
    2b1e:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
				MCAL_UART_voidSendString(GLOB_u8NewLine);
    2b22:	82 e1       	ldi	r24, 0x12	; 18
    2b24:	97 e0       	ldi	r25, 0x07	; 7
    2b26:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
				MCAL_UART_voidSendString((u8*)"3 --> Toggle Light");
    2b2a:	82 eb       	ldi	r24, 0xB2	; 178
    2b2c:	91 e0       	ldi	r25, 0x01	; 1
    2b2e:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
				MCAL_UART_voidSendString(GLOB_u8NewLine);
    2b32:	82 e1       	ldi	r24, 0x12	; 18
    2b34:	97 e0       	ldi	r25, 0x07	; 7
    2b36:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
				MCAL_UART_voidSendString(BACK);
    2b3a:	8e e6       	ldi	r24, 0x6E	; 110
    2b3c:	91 e0       	ldi	r25, 0x01	; 1
    2b3e:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>

				MCAL_UART_voidReceiveData(&LOC_u8LED3_Option);
    2b42:	c8 01       	movw	r24, r16
    2b44:	0e 94 c8 06 	call	0xd90	; 0xd90 <MCAL_UART_voidReceiveData>

				switch(LOC_u8LED3_Option)
    2b48:	8c 81       	ldd	r24, Y+4	; 0x04
    2b4a:	81 33       	cpi	r24, 0x31	; 49
    2b4c:	09 f4       	brne	.+2      	; 0x2b50 <APP_RoomLights_Page+0x526>
    2b4e:	6d c0       	rjmp	.+218    	; 0x2c2a <APP_RoomLights_Page+0x600>
    2b50:	82 33       	cpi	r24, 0x32	; 50
    2b52:	18 f4       	brcc	.+6      	; 0x2b5a <APP_RoomLights_Page+0x530>
    2b54:	80 33       	cpi	r24, 0x30	; 48
    2b56:	69 f6       	brne	.-102    	; 0x2af2 <APP_RoomLights_Page+0x4c8>
    2b58:	4a ce       	rjmp	.-876    	; 0x27ee <APP_RoomLights_Page+0x1c4>
    2b5a:	82 33       	cpi	r24, 0x32	; 50
    2b5c:	b9 f1       	breq	.+110    	; 0x2bcc <APP_RoomLights_Page+0x5a2>
    2b5e:	83 33       	cpi	r24, 0x33	; 51
    2b60:	41 f6       	brne	.-112    	; 0x2af2 <APP_RoomLights_Page+0x4c8>
					GLOB_u8Flag_LED3=0;

					LOC_u8InsideRoom3 = 0;
					break;
				case '3':
					MCAL_UART_voidTransmitData('3');
    2b62:	83 e3       	ldi	r24, 0x33	; 51
    2b64:	0e 94 c1 06 	call	0xd82	; 0xd82 <MCAL_UART_voidTransmitData>
					MCAL_UART_voidSendString(GLOB_u8NewLine);
    2b68:	82 e1       	ldi	r24, 0x12	; 18
    2b6a:	97 e0       	ldi	r25, 0x07	; 7
    2b6c:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
					MCAL_UART_voidSendString((u8*)"Toggling...");
    2b70:	8d ed       	ldi	r24, 0xDD	; 221
    2b72:	91 e0       	ldi	r25, 0x01	; 1
    2b74:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
					MCAL_UART_voidSendString(GLOB_u8NewLine);
    2b78:	82 e1       	ldi	r24, 0x12	; 18
    2b7a:	97 e0       	ldi	r25, 0x07	; 7
    2b7c:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
					HAL_LED_u8LedMode(LED3_Port,LED3_Pin,LED_TOG);
    2b80:	80 e0       	ldi	r24, 0x00	; 0
    2b82:	65 e0       	ldi	r22, 0x05	; 5
    2b84:	42 e0       	ldi	r20, 0x02	; 2
    2b86:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <HAL_LED_u8LedMode>
					MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_HIGH);
    2b8a:	81 e0       	ldi	r24, 0x01	; 1
    2b8c:	62 e0       	ldi	r22, 0x02	; 2
    2b8e:	41 e0       	ldi	r20, 0x01	; 1
    2b90:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <MCAL_DIO_u8SetPinValue>
					while(GET_BIT(PINB,PIN4));
    2b94:	b4 99       	sbic	0x16, 4	; 22
    2b96:	fe cf       	rjmp	.-4      	; 0x2b94 <APP_RoomLights_Page+0x56a>
					G_u8_Receive = MCAL_SPI_SLAVE_u8_SpiSlave_Transceive('3');
    2b98:	83 e3       	ldi	r24, 0x33	; 51
    2b9a:	0e 94 a4 0b 	call	0x1748	; 0x1748 <MCAL_SPI_SLAVE_u8_SpiSlave_Transceive>
    2b9e:	80 93 38 07 	sts	0x0738, r24
					while(GET_BIT(PINB,PIN4));
    2ba2:	b4 99       	sbic	0x16, 4	; 22
    2ba4:	fe cf       	rjmp	.-4      	; 0x2ba2 <APP_RoomLights_Page+0x578>
					G_u8_Receive = MCAL_SPI_SLAVE_u8_SpiSlave_Transceive('T');
    2ba6:	84 e5       	ldi	r24, 0x54	; 84
    2ba8:	0e 94 a4 0b 	call	0x1748	; 0x1748 <MCAL_SPI_SLAVE_u8_SpiSlave_Transceive>
    2bac:	80 93 38 07 	sts	0x0738, r24
					MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_LOW);
    2bb0:	81 e0       	ldi	r24, 0x01	; 1
    2bb2:	62 e0       	ldi	r22, 0x02	; 2
    2bb4:	40 e0       	ldi	r20, 0x00	; 0
    2bb6:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <MCAL_DIO_u8SetPinValue>
					GLOB_u8Flag_LED3 = !GLOB_u8Flag_LED3;
    2bba:	80 91 3c 07 	lds	r24, 0x073C
    2bbe:	90 e0       	ldi	r25, 0x00	; 0
    2bc0:	88 23       	and	r24, r24
    2bc2:	09 f4       	brne	.+2      	; 0x2bc6 <APP_RoomLights_Page+0x59c>
    2bc4:	91 e0       	ldi	r25, 0x01	; 1
    2bc6:	90 93 3c 07 	sts	0x073C, r25
    2bca:	93 cf       	rjmp	.-218    	; 0x2af2 <APP_RoomLights_Page+0x4c8>
					GLOB_u8Flag_LED3 = 1;

					LOC_u8InsideRoom3 = 0;
					break;
				case '2':
					MCAL_UART_voidTransmitData('2');
    2bcc:	82 e3       	ldi	r24, 0x32	; 50
    2bce:	0e 94 c1 06 	call	0xd82	; 0xd82 <MCAL_UART_voidTransmitData>
					MCAL_UART_voidSendString(GLOB_u8NewLine);
    2bd2:	82 e1       	ldi	r24, 0x12	; 18
    2bd4:	97 e0       	ldi	r25, 0x07	; 7
    2bd6:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
					MCAL_UART_voidSendString((u8*)"OFF...");
    2bda:	86 ed       	ldi	r24, 0xD6	; 214
    2bdc:	91 e0       	ldi	r25, 0x01	; 1
    2bde:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
					MCAL_UART_voidSendString(GLOB_u8NewLine);
    2be2:	82 e1       	ldi	r24, 0x12	; 18
    2be4:	97 e0       	ldi	r25, 0x07	; 7
    2be6:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
					HAL_LED_u8LedMode(LED3_Port,LED3_Pin,LED_OFF);
    2bea:	80 e0       	ldi	r24, 0x00	; 0
    2bec:	65 e0       	ldi	r22, 0x05	; 5
    2bee:	40 e0       	ldi	r20, 0x00	; 0
    2bf0:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <HAL_LED_u8LedMode>
					MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_HIGH);
    2bf4:	81 e0       	ldi	r24, 0x01	; 1
    2bf6:	62 e0       	ldi	r22, 0x02	; 2
    2bf8:	41 e0       	ldi	r20, 0x01	; 1
    2bfa:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <MCAL_DIO_u8SetPinValue>
					while(GET_BIT(PINB,PIN4));
    2bfe:	b4 99       	sbic	0x16, 4	; 22
    2c00:	fe cf       	rjmp	.-4      	; 0x2bfe <APP_RoomLights_Page+0x5d4>
					G_u8_Receive = MCAL_SPI_SLAVE_u8_SpiSlave_Transceive('3');
    2c02:	83 e3       	ldi	r24, 0x33	; 51
    2c04:	0e 94 a4 0b 	call	0x1748	; 0x1748 <MCAL_SPI_SLAVE_u8_SpiSlave_Transceive>
    2c08:	80 93 38 07 	sts	0x0738, r24
					while(GET_BIT(PINB,PIN4));
    2c0c:	b4 99       	sbic	0x16, 4	; 22
    2c0e:	fe cf       	rjmp	.-4      	; 0x2c0c <APP_RoomLights_Page+0x5e2>
					G_u8_Receive = MCAL_SPI_SLAVE_u8_SpiSlave_Transceive('F');
    2c10:	86 e4       	ldi	r24, 0x46	; 70
    2c12:	0e 94 a4 0b 	call	0x1748	; 0x1748 <MCAL_SPI_SLAVE_u8_SpiSlave_Transceive>
    2c16:	80 93 38 07 	sts	0x0738, r24
					MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_LOW);
    2c1a:	81 e0       	ldi	r24, 0x01	; 1
    2c1c:	62 e0       	ldi	r22, 0x02	; 2
    2c1e:	40 e0       	ldi	r20, 0x00	; 0
    2c20:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <MCAL_DIO_u8SetPinValue>
					GLOB_u8Flag_LED3=0;
    2c24:	10 92 3c 07 	sts	0x073C, r1
    2c28:	64 cf       	rjmp	.-312    	; 0x2af2 <APP_RoomLights_Page+0x4c8>
				MCAL_UART_voidReceiveData(&LOC_u8LED3_Option);

				switch(LOC_u8LED3_Option)
				{
				case '1':
					MCAL_UART_voidTransmitData('1');
    2c2a:	81 e3       	ldi	r24, 0x31	; 49
    2c2c:	0e 94 c1 06 	call	0xd82	; 0xd82 <MCAL_UART_voidTransmitData>
					MCAL_UART_voidSendString(GLOB_u8NewLine);
    2c30:	82 e1       	ldi	r24, 0x12	; 18
    2c32:	97 e0       	ldi	r25, 0x07	; 7
    2c34:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
					MCAL_UART_voidSendString((u8*)"ON...");
    2c38:	80 ed       	ldi	r24, 0xD0	; 208
    2c3a:	91 e0       	ldi	r25, 0x01	; 1
    2c3c:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
					MCAL_UART_voidSendString(GLOB_u8NewLine);
    2c40:	82 e1       	ldi	r24, 0x12	; 18
    2c42:	97 e0       	ldi	r25, 0x07	; 7
    2c44:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
					HAL_LED_u8LedMode(LED3_Port,LED3_Pin,LED_ON);
    2c48:	80 e0       	ldi	r24, 0x00	; 0
    2c4a:	65 e0       	ldi	r22, 0x05	; 5
    2c4c:	41 e0       	ldi	r20, 0x01	; 1
    2c4e:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <HAL_LED_u8LedMode>
					MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_HIGH);
    2c52:	81 e0       	ldi	r24, 0x01	; 1
    2c54:	62 e0       	ldi	r22, 0x02	; 2
    2c56:	41 e0       	ldi	r20, 0x01	; 1
    2c58:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <MCAL_DIO_u8SetPinValue>
					while(GET_BIT(PINB,PIN4));
    2c5c:	b4 99       	sbic	0x16, 4	; 22
    2c5e:	fe cf       	rjmp	.-4      	; 0x2c5c <APP_RoomLights_Page+0x632>
					G_u8_Receive = MCAL_SPI_SLAVE_u8_SpiSlave_Transceive('3');
    2c60:	83 e3       	ldi	r24, 0x33	; 51
    2c62:	0e 94 a4 0b 	call	0x1748	; 0x1748 <MCAL_SPI_SLAVE_u8_SpiSlave_Transceive>
    2c66:	80 93 38 07 	sts	0x0738, r24
					while(GET_BIT(PINB,PIN4));
    2c6a:	b4 99       	sbic	0x16, 4	; 22
    2c6c:	fe cf       	rjmp	.-4      	; 0x2c6a <APP_RoomLights_Page+0x640>
					G_u8_Receive = MCAL_SPI_SLAVE_u8_SpiSlave_Transceive('N');
    2c6e:	8e e4       	ldi	r24, 0x4E	; 78
    2c70:	0e 94 a4 0b 	call	0x1748	; 0x1748 <MCAL_SPI_SLAVE_u8_SpiSlave_Transceive>
    2c74:	80 93 38 07 	sts	0x0738, r24
					MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_LOW);
    2c78:	81 e0       	ldi	r24, 0x01	; 1
    2c7a:	62 e0       	ldi	r22, 0x02	; 2
    2c7c:	40 e0       	ldi	r20, 0x00	; 0
    2c7e:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <MCAL_DIO_u8SetPinValue>
					GLOB_u8Flag_LED3 = 1;
    2c82:	81 e0       	ldi	r24, 0x01	; 1
    2c84:	80 93 3c 07 	sts	0x073C, r24
    2c88:	34 cf       	rjmp	.-408    	; 0x2af2 <APP_RoomLights_Page+0x4c8>
			LOC_u8BackFlag = 0;


			break;
		case '2':
			MCAL_UART_voidTransmitData('2');
    2c8a:	82 e3       	ldi	r24, 0x32	; 50
    2c8c:	0e 94 c1 06 	call	0xd82	; 0xd82 <MCAL_UART_voidTransmitData>
    2c90:	8e 01       	movw	r16, r28
    2c92:	0d 5f       	subi	r16, 0xFD	; 253
    2c94:	1f 4f       	sbci	r17, 0xFF	; 255
			u8 LOC_u8InsideRoom2 = 0 ;

			do
			{

				MCAL_UART_voidSendString(GLOB_u8NewLine);
    2c96:	82 e1       	ldi	r24, 0x12	; 18
    2c98:	97 e0       	ldi	r25, 0x07	; 7
    2c9a:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
				MCAL_UART_voidSendString((u8*)"Room 2 Light:");
    2c9e:	8e ee       	ldi	r24, 0xEE	; 238
    2ca0:	91 e0       	ldi	r25, 0x01	; 1
    2ca2:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
				MCAL_UART_voidSendString(GLOB_u8NewLine);
    2ca6:	82 e1       	ldi	r24, 0x12	; 18
    2ca8:	97 e0       	ldi	r25, 0x07	; 7
    2caa:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>

				MCAL_UART_voidSendString((u8*)"1 --> Turn ON Light");
    2cae:	89 e8       	ldi	r24, 0x89	; 137
    2cb0:	91 e0       	ldi	r25, 0x01	; 1
    2cb2:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
				MCAL_UART_voidSendString(GLOB_u8NewLine);
    2cb6:	82 e1       	ldi	r24, 0x12	; 18
    2cb8:	97 e0       	ldi	r25, 0x07	; 7
    2cba:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
				MCAL_UART_voidSendString((u8*)"2 --> Turn OFF Light");
    2cbe:	8d e9       	ldi	r24, 0x9D	; 157
    2cc0:	91 e0       	ldi	r25, 0x01	; 1
    2cc2:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
				MCAL_UART_voidSendString(GLOB_u8NewLine);
    2cc6:	82 e1       	ldi	r24, 0x12	; 18
    2cc8:	97 e0       	ldi	r25, 0x07	; 7
    2cca:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
				MCAL_UART_voidSendString((u8*)"3 --> Toggle Light");
    2cce:	82 eb       	ldi	r24, 0xB2	; 178
    2cd0:	91 e0       	ldi	r25, 0x01	; 1
    2cd2:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
				MCAL_UART_voidSendString(GLOB_u8NewLine);
    2cd6:	82 e1       	ldi	r24, 0x12	; 18
    2cd8:	97 e0       	ldi	r25, 0x07	; 7
    2cda:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
				MCAL_UART_voidSendString((u8*)"0 --> Back");
    2cde:	85 ec       	ldi	r24, 0xC5	; 197
    2ce0:	91 e0       	ldi	r25, 0x01	; 1
    2ce2:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
				MCAL_UART_voidSendString(GLOB_u8NewLine);
    2ce6:	82 e1       	ldi	r24, 0x12	; 18
    2ce8:	97 e0       	ldi	r25, 0x07	; 7
    2cea:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>

				MCAL_UART_voidReceiveData(&LOC_u8LED2_Option);
    2cee:	c8 01       	movw	r24, r16
    2cf0:	0e 94 c8 06 	call	0xd90	; 0xd90 <MCAL_UART_voidReceiveData>

				switch(LOC_u8LED2_Option)
    2cf4:	8b 81       	ldd	r24, Y+3	; 0x03
    2cf6:	81 33       	cpi	r24, 0x31	; 49
    2cf8:	09 f4       	brne	.+2      	; 0x2cfc <APP_RoomLights_Page+0x6d2>
    2cfa:	6d c0       	rjmp	.+218    	; 0x2dd6 <APP_RoomLights_Page+0x7ac>
    2cfc:	82 33       	cpi	r24, 0x32	; 50
    2cfe:	18 f4       	brcc	.+6      	; 0x2d06 <APP_RoomLights_Page+0x6dc>
    2d00:	80 33       	cpi	r24, 0x30	; 48
    2d02:	49 f6       	brne	.-110    	; 0x2c96 <APP_RoomLights_Page+0x66c>
    2d04:	74 cd       	rjmp	.-1304   	; 0x27ee <APP_RoomLights_Page+0x1c4>
    2d06:	82 33       	cpi	r24, 0x32	; 50
    2d08:	b9 f1       	breq	.+110    	; 0x2d78 <APP_RoomLights_Page+0x74e>
    2d0a:	83 33       	cpi	r24, 0x33	; 51
    2d0c:	21 f6       	brne	.-120    	; 0x2c96 <APP_RoomLights_Page+0x66c>
					MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_LOW);
					GLOB_u8Flag_LED2 = 0;
					LOC_u8InsideRoom2 = 0;
					break;
				case '3':
					MCAL_UART_voidTransmitData('3');
    2d0e:	83 e3       	ldi	r24, 0x33	; 51
    2d10:	0e 94 c1 06 	call	0xd82	; 0xd82 <MCAL_UART_voidTransmitData>
					MCAL_UART_voidSendString(GLOB_u8NewLine);
    2d14:	82 e1       	ldi	r24, 0x12	; 18
    2d16:	97 e0       	ldi	r25, 0x07	; 7
    2d18:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
					MCAL_UART_voidSendString((u8*)"Toggling...");
    2d1c:	8d ed       	ldi	r24, 0xDD	; 221
    2d1e:	91 e0       	ldi	r25, 0x01	; 1
    2d20:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
					MCAL_UART_voidSendString(GLOB_u8NewLine);
    2d24:	82 e1       	ldi	r24, 0x12	; 18
    2d26:	97 e0       	ldi	r25, 0x07	; 7
    2d28:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
					HAL_LED_u8LedMode(LED2_Port,LED2_Pin,LED_TOG);
    2d2c:	80 e0       	ldi	r24, 0x00	; 0
    2d2e:	64 e0       	ldi	r22, 0x04	; 4
    2d30:	42 e0       	ldi	r20, 0x02	; 2
    2d32:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <HAL_LED_u8LedMode>
					MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_HIGH);
    2d36:	81 e0       	ldi	r24, 0x01	; 1
    2d38:	62 e0       	ldi	r22, 0x02	; 2
    2d3a:	41 e0       	ldi	r20, 0x01	; 1
    2d3c:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <MCAL_DIO_u8SetPinValue>
					while(GET_BIT(PINB,PIN4));
    2d40:	b4 99       	sbic	0x16, 4	; 22
    2d42:	fe cf       	rjmp	.-4      	; 0x2d40 <APP_RoomLights_Page+0x716>
					G_u8_Receive = MCAL_SPI_SLAVE_u8_SpiSlave_Transceive('2');
    2d44:	82 e3       	ldi	r24, 0x32	; 50
    2d46:	0e 94 a4 0b 	call	0x1748	; 0x1748 <MCAL_SPI_SLAVE_u8_SpiSlave_Transceive>
    2d4a:	80 93 38 07 	sts	0x0738, r24
					while(GET_BIT(PINB,PIN4));
    2d4e:	b4 99       	sbic	0x16, 4	; 22
    2d50:	fe cf       	rjmp	.-4      	; 0x2d4e <APP_RoomLights_Page+0x724>
					G_u8_Receive = MCAL_SPI_SLAVE_u8_SpiSlave_Transceive('T');
    2d52:	84 e5       	ldi	r24, 0x54	; 84
    2d54:	0e 94 a4 0b 	call	0x1748	; 0x1748 <MCAL_SPI_SLAVE_u8_SpiSlave_Transceive>
    2d58:	80 93 38 07 	sts	0x0738, r24
					MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_LOW);
    2d5c:	81 e0       	ldi	r24, 0x01	; 1
    2d5e:	62 e0       	ldi	r22, 0x02	; 2
    2d60:	40 e0       	ldi	r20, 0x00	; 0
    2d62:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <MCAL_DIO_u8SetPinValue>
					GLOB_u8Flag_LED2 = !GLOB_u8Flag_LED2;
    2d66:	80 91 40 07 	lds	r24, 0x0740
    2d6a:	90 e0       	ldi	r25, 0x00	; 0
    2d6c:	88 23       	and	r24, r24
    2d6e:	09 f4       	brne	.+2      	; 0x2d72 <APP_RoomLights_Page+0x748>
    2d70:	91 e0       	ldi	r25, 0x01	; 1
    2d72:	90 93 40 07 	sts	0x0740, r25
    2d76:	8f cf       	rjmp	.-226    	; 0x2c96 <APP_RoomLights_Page+0x66c>
					MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_LOW);
					GLOB_u8Flag_LED2 = 1;
					LOC_u8InsideRoom2 = 0;
					break;
				case '2':
					MCAL_UART_voidTransmitData('2');
    2d78:	82 e3       	ldi	r24, 0x32	; 50
    2d7a:	0e 94 c1 06 	call	0xd82	; 0xd82 <MCAL_UART_voidTransmitData>
					MCAL_UART_voidSendString(GLOB_u8NewLine);
    2d7e:	82 e1       	ldi	r24, 0x12	; 18
    2d80:	97 e0       	ldi	r25, 0x07	; 7
    2d82:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
					MCAL_UART_voidSendString((u8*)"OFF...");
    2d86:	86 ed       	ldi	r24, 0xD6	; 214
    2d88:	91 e0       	ldi	r25, 0x01	; 1
    2d8a:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
					MCAL_UART_voidSendString(GLOB_u8NewLine);
    2d8e:	82 e1       	ldi	r24, 0x12	; 18
    2d90:	97 e0       	ldi	r25, 0x07	; 7
    2d92:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
					HAL_LED_u8LedMode(LED2_Port,LED2_Pin,LED_OFF);
    2d96:	80 e0       	ldi	r24, 0x00	; 0
    2d98:	64 e0       	ldi	r22, 0x04	; 4
    2d9a:	40 e0       	ldi	r20, 0x00	; 0
    2d9c:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <HAL_LED_u8LedMode>
					MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_HIGH);
    2da0:	81 e0       	ldi	r24, 0x01	; 1
    2da2:	62 e0       	ldi	r22, 0x02	; 2
    2da4:	41 e0       	ldi	r20, 0x01	; 1
    2da6:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <MCAL_DIO_u8SetPinValue>
					while(GET_BIT(PINB,PIN4));
    2daa:	b4 99       	sbic	0x16, 4	; 22
    2dac:	fe cf       	rjmp	.-4      	; 0x2daa <APP_RoomLights_Page+0x780>
					G_u8_Receive = MCAL_SPI_SLAVE_u8_SpiSlave_Transceive('2');
    2dae:	82 e3       	ldi	r24, 0x32	; 50
    2db0:	0e 94 a4 0b 	call	0x1748	; 0x1748 <MCAL_SPI_SLAVE_u8_SpiSlave_Transceive>
    2db4:	80 93 38 07 	sts	0x0738, r24
					while(GET_BIT(PINB,PIN4));
    2db8:	b4 99       	sbic	0x16, 4	; 22
    2dba:	fe cf       	rjmp	.-4      	; 0x2db8 <APP_RoomLights_Page+0x78e>
					G_u8_Receive = MCAL_SPI_SLAVE_u8_SpiSlave_Transceive('F');
    2dbc:	86 e4       	ldi	r24, 0x46	; 70
    2dbe:	0e 94 a4 0b 	call	0x1748	; 0x1748 <MCAL_SPI_SLAVE_u8_SpiSlave_Transceive>
    2dc2:	80 93 38 07 	sts	0x0738, r24
					MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_LOW);
    2dc6:	81 e0       	ldi	r24, 0x01	; 1
    2dc8:	62 e0       	ldi	r22, 0x02	; 2
    2dca:	40 e0       	ldi	r20, 0x00	; 0
    2dcc:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <MCAL_DIO_u8SetPinValue>
					GLOB_u8Flag_LED2 = 0;
    2dd0:	10 92 40 07 	sts	0x0740, r1
    2dd4:	60 cf       	rjmp	.-320    	; 0x2c96 <APP_RoomLights_Page+0x66c>
				MCAL_UART_voidReceiveData(&LOC_u8LED2_Option);

				switch(LOC_u8LED2_Option)
				{
				case '1':
					MCAL_UART_voidTransmitData('1');
    2dd6:	81 e3       	ldi	r24, 0x31	; 49
    2dd8:	0e 94 c1 06 	call	0xd82	; 0xd82 <MCAL_UART_voidTransmitData>
					MCAL_UART_voidSendString(GLOB_u8NewLine);
    2ddc:	82 e1       	ldi	r24, 0x12	; 18
    2dde:	97 e0       	ldi	r25, 0x07	; 7
    2de0:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
					MCAL_UART_voidSendString((u8*)"ON...");
    2de4:	80 ed       	ldi	r24, 0xD0	; 208
    2de6:	91 e0       	ldi	r25, 0x01	; 1
    2de8:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
					MCAL_UART_voidSendString(GLOB_u8NewLine);
    2dec:	82 e1       	ldi	r24, 0x12	; 18
    2dee:	97 e0       	ldi	r25, 0x07	; 7
    2df0:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
					HAL_LED_u8LedMode(LED2_Port,LED2_Pin,LED_ON);
    2df4:	80 e0       	ldi	r24, 0x00	; 0
    2df6:	64 e0       	ldi	r22, 0x04	; 4
    2df8:	41 e0       	ldi	r20, 0x01	; 1
    2dfa:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <HAL_LED_u8LedMode>
					MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_HIGH);
    2dfe:	81 e0       	ldi	r24, 0x01	; 1
    2e00:	62 e0       	ldi	r22, 0x02	; 2
    2e02:	41 e0       	ldi	r20, 0x01	; 1
    2e04:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <MCAL_DIO_u8SetPinValue>
					while(GET_BIT(PINB,PIN4));
    2e08:	b4 99       	sbic	0x16, 4	; 22
    2e0a:	fe cf       	rjmp	.-4      	; 0x2e08 <APP_RoomLights_Page+0x7de>
					G_u8_Receive = MCAL_SPI_SLAVE_u8_SpiSlave_Transceive('2');
    2e0c:	82 e3       	ldi	r24, 0x32	; 50
    2e0e:	0e 94 a4 0b 	call	0x1748	; 0x1748 <MCAL_SPI_SLAVE_u8_SpiSlave_Transceive>
    2e12:	80 93 38 07 	sts	0x0738, r24
					while(GET_BIT(PINB,PIN4));
    2e16:	b4 99       	sbic	0x16, 4	; 22
    2e18:	fe cf       	rjmp	.-4      	; 0x2e16 <APP_RoomLights_Page+0x7ec>
					G_u8_Receive = MCAL_SPI_SLAVE_u8_SpiSlave_Transceive('N');
    2e1a:	8e e4       	ldi	r24, 0x4E	; 78
    2e1c:	0e 94 a4 0b 	call	0x1748	; 0x1748 <MCAL_SPI_SLAVE_u8_SpiSlave_Transceive>
    2e20:	80 93 38 07 	sts	0x0738, r24
					MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_LOW);
    2e24:	81 e0       	ldi	r24, 0x01	; 1
    2e26:	62 e0       	ldi	r22, 0x02	; 2
    2e28:	40 e0       	ldi	r20, 0x00	; 0
    2e2a:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <MCAL_DIO_u8SetPinValue>
					GLOB_u8Flag_LED2 = 1;
    2e2e:	81 e0       	ldi	r24, 0x01	; 1
    2e30:	80 93 40 07 	sts	0x0740, r24
    2e34:	30 cf       	rjmp	.-416    	; 0x2c96 <APP_RoomLights_Page+0x66c>
		MCAL_UART_voidReceiveData(&LOC_u8Option);

		switch(LOC_u8Option)
		{
		case '1':
			MCAL_UART_voidTransmitData('1');
    2e36:	81 e3       	ldi	r24, 0x31	; 49
    2e38:	0e 94 c1 06 	call	0xd82	; 0xd82 <MCAL_UART_voidTransmitData>
    2e3c:	8e 01       	movw	r16, r28
    2e3e:	0e 5f       	subi	r16, 0xFE	; 254
    2e40:	1f 4f       	sbci	r17, 0xFF	; 255
			u8 LOC_u8InsideRoom1 = 0 ;
			do
			{

				MCAL_UART_voidSendString(GLOB_u8NewLine);
    2e42:	82 e1       	ldi	r24, 0x12	; 18
    2e44:	97 e0       	ldi	r25, 0x07	; 7
    2e46:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
				MCAL_UART_voidSendString((u8*)"Room 1 Light:");
    2e4a:	8b e7       	ldi	r24, 0x7B	; 123
    2e4c:	91 e0       	ldi	r25, 0x01	; 1
    2e4e:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
				MCAL_UART_voidSendString(GLOB_u8NewLine);
    2e52:	82 e1       	ldi	r24, 0x12	; 18
    2e54:	97 e0       	ldi	r25, 0x07	; 7
    2e56:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>

				MCAL_UART_voidSendString((u8*)"1 --> Turn ON Light");
    2e5a:	89 e8       	ldi	r24, 0x89	; 137
    2e5c:	91 e0       	ldi	r25, 0x01	; 1
    2e5e:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
				MCAL_UART_voidSendString(GLOB_u8NewLine);
    2e62:	82 e1       	ldi	r24, 0x12	; 18
    2e64:	97 e0       	ldi	r25, 0x07	; 7
    2e66:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
				MCAL_UART_voidSendString((u8*)"2 --> Turn OFF Light");
    2e6a:	8d e9       	ldi	r24, 0x9D	; 157
    2e6c:	91 e0       	ldi	r25, 0x01	; 1
    2e6e:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
				MCAL_UART_voidSendString(GLOB_u8NewLine);
    2e72:	82 e1       	ldi	r24, 0x12	; 18
    2e74:	97 e0       	ldi	r25, 0x07	; 7
    2e76:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
				MCAL_UART_voidSendString((u8*)"3 --> Toggle Light");
    2e7a:	82 eb       	ldi	r24, 0xB2	; 178
    2e7c:	91 e0       	ldi	r25, 0x01	; 1
    2e7e:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
				MCAL_UART_voidSendString(GLOB_u8NewLine);
    2e82:	82 e1       	ldi	r24, 0x12	; 18
    2e84:	97 e0       	ldi	r25, 0x07	; 7
    2e86:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
				MCAL_UART_voidSendString((u8*)"0 --> Back");
    2e8a:	85 ec       	ldi	r24, 0xC5	; 197
    2e8c:	91 e0       	ldi	r25, 0x01	; 1
    2e8e:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
				MCAL_UART_voidSendString(GLOB_u8NewLine);
    2e92:	82 e1       	ldi	r24, 0x12	; 18
    2e94:	97 e0       	ldi	r25, 0x07	; 7
    2e96:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>

				MCAL_UART_voidReceiveData(&LOC_u8LED1_Option);
    2e9a:	c8 01       	movw	r24, r16
    2e9c:	0e 94 c8 06 	call	0xd90	; 0xd90 <MCAL_UART_voidReceiveData>

				switch(LOC_u8LED1_Option)
    2ea0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ea2:	81 33       	cpi	r24, 0x31	; 49
    2ea4:	09 f4       	brne	.+2      	; 0x2ea8 <APP_RoomLights_Page+0x87e>
    2ea6:	6d c0       	rjmp	.+218    	; 0x2f82 <APP_RoomLights_Page+0x958>
    2ea8:	82 33       	cpi	r24, 0x32	; 50
    2eaa:	18 f4       	brcc	.+6      	; 0x2eb2 <APP_RoomLights_Page+0x888>
    2eac:	80 33       	cpi	r24, 0x30	; 48
    2eae:	49 f6       	brne	.-110    	; 0x2e42 <APP_RoomLights_Page+0x818>
    2eb0:	9e cc       	rjmp	.-1732   	; 0x27ee <APP_RoomLights_Page+0x1c4>
    2eb2:	82 33       	cpi	r24, 0x32	; 50
    2eb4:	b9 f1       	breq	.+110    	; 0x2f24 <APP_RoomLights_Page+0x8fa>
    2eb6:	83 33       	cpi	r24, 0x33	; 51
    2eb8:	21 f6       	brne	.-120    	; 0x2e42 <APP_RoomLights_Page+0x818>
					MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_LOW);
					GLOB_u8Flag_LED1 = 0;
					LOC_u8InsideRoom1 = 0;
					break;
				case '3':
					MCAL_UART_voidTransmitData('3');
    2eba:	83 e3       	ldi	r24, 0x33	; 51
    2ebc:	0e 94 c1 06 	call	0xd82	; 0xd82 <MCAL_UART_voidTransmitData>
					MCAL_UART_voidSendString(GLOB_u8NewLine);
    2ec0:	82 e1       	ldi	r24, 0x12	; 18
    2ec2:	97 e0       	ldi	r25, 0x07	; 7
    2ec4:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
					MCAL_UART_voidSendString((u8*)"Toggling...");
    2ec8:	8d ed       	ldi	r24, 0xDD	; 221
    2eca:	91 e0       	ldi	r25, 0x01	; 1
    2ecc:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
					MCAL_UART_voidSendString(GLOB_u8NewLine);
    2ed0:	82 e1       	ldi	r24, 0x12	; 18
    2ed2:	97 e0       	ldi	r25, 0x07	; 7
    2ed4:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
					HAL_LED_u8LedMode(LED1_Port,LED1_Pin,LED_TOG);
    2ed8:	80 e0       	ldi	r24, 0x00	; 0
    2eda:	63 e0       	ldi	r22, 0x03	; 3
    2edc:	42 e0       	ldi	r20, 0x02	; 2
    2ede:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <HAL_LED_u8LedMode>
					MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_HIGH);
    2ee2:	81 e0       	ldi	r24, 0x01	; 1
    2ee4:	62 e0       	ldi	r22, 0x02	; 2
    2ee6:	41 e0       	ldi	r20, 0x01	; 1
    2ee8:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <MCAL_DIO_u8SetPinValue>
					while(GET_BIT(PINB,PIN4));
    2eec:	b4 99       	sbic	0x16, 4	; 22
    2eee:	fe cf       	rjmp	.-4      	; 0x2eec <APP_RoomLights_Page+0x8c2>
					G_u8_Receive = MCAL_SPI_SLAVE_u8_SpiSlave_Transceive('1');
    2ef0:	81 e3       	ldi	r24, 0x31	; 49
    2ef2:	0e 94 a4 0b 	call	0x1748	; 0x1748 <MCAL_SPI_SLAVE_u8_SpiSlave_Transceive>
    2ef6:	80 93 38 07 	sts	0x0738, r24
					while(GET_BIT(PINB,PIN4));
    2efa:	b4 99       	sbic	0x16, 4	; 22
    2efc:	fe cf       	rjmp	.-4      	; 0x2efa <APP_RoomLights_Page+0x8d0>
					G_u8_Receive = MCAL_SPI_SLAVE_u8_SpiSlave_Transceive('T');
    2efe:	84 e5       	ldi	r24, 0x54	; 84
    2f00:	0e 94 a4 0b 	call	0x1748	; 0x1748 <MCAL_SPI_SLAVE_u8_SpiSlave_Transceive>
    2f04:	80 93 38 07 	sts	0x0738, r24
					MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_LOW);
    2f08:	81 e0       	ldi	r24, 0x01	; 1
    2f0a:	62 e0       	ldi	r22, 0x02	; 2
    2f0c:	40 e0       	ldi	r20, 0x00	; 0
    2f0e:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <MCAL_DIO_u8SetPinValue>
					GLOB_u8Flag_LED1 = !GLOB_u8Flag_LED1;
    2f12:	80 91 3e 07 	lds	r24, 0x073E
    2f16:	90 e0       	ldi	r25, 0x00	; 0
    2f18:	88 23       	and	r24, r24
    2f1a:	09 f4       	brne	.+2      	; 0x2f1e <APP_RoomLights_Page+0x8f4>
    2f1c:	91 e0       	ldi	r25, 0x01	; 1
    2f1e:	90 93 3e 07 	sts	0x073E, r25
    2f22:	8f cf       	rjmp	.-226    	; 0x2e42 <APP_RoomLights_Page+0x818>
					MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_LOW);
					GLOB_u8Flag_LED1 = 1;
					LOC_u8InsideRoom1 = 0;
					break;
				case '2':
					MCAL_UART_voidTransmitData('2');
    2f24:	82 e3       	ldi	r24, 0x32	; 50
    2f26:	0e 94 c1 06 	call	0xd82	; 0xd82 <MCAL_UART_voidTransmitData>
					MCAL_UART_voidSendString(GLOB_u8NewLine);
    2f2a:	82 e1       	ldi	r24, 0x12	; 18
    2f2c:	97 e0       	ldi	r25, 0x07	; 7
    2f2e:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
					MCAL_UART_voidSendString((u8*)"OFF...");
    2f32:	86 ed       	ldi	r24, 0xD6	; 214
    2f34:	91 e0       	ldi	r25, 0x01	; 1
    2f36:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
					MCAL_UART_voidSendString(GLOB_u8NewLine);
    2f3a:	82 e1       	ldi	r24, 0x12	; 18
    2f3c:	97 e0       	ldi	r25, 0x07	; 7
    2f3e:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
					HAL_LED_u8LedMode(LED1_Port,LED1_Pin,LED_OFF);
    2f42:	80 e0       	ldi	r24, 0x00	; 0
    2f44:	63 e0       	ldi	r22, 0x03	; 3
    2f46:	40 e0       	ldi	r20, 0x00	; 0
    2f48:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <HAL_LED_u8LedMode>
					MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_HIGH);
    2f4c:	81 e0       	ldi	r24, 0x01	; 1
    2f4e:	62 e0       	ldi	r22, 0x02	; 2
    2f50:	41 e0       	ldi	r20, 0x01	; 1
    2f52:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <MCAL_DIO_u8SetPinValue>
					while(GET_BIT(PINB,PIN4));
    2f56:	b4 99       	sbic	0x16, 4	; 22
    2f58:	fe cf       	rjmp	.-4      	; 0x2f56 <APP_RoomLights_Page+0x92c>
					G_u8_Receive = MCAL_SPI_SLAVE_u8_SpiSlave_Transceive('1');
    2f5a:	81 e3       	ldi	r24, 0x31	; 49
    2f5c:	0e 94 a4 0b 	call	0x1748	; 0x1748 <MCAL_SPI_SLAVE_u8_SpiSlave_Transceive>
    2f60:	80 93 38 07 	sts	0x0738, r24
					while(GET_BIT(PINB,PIN4));
    2f64:	b4 99       	sbic	0x16, 4	; 22
    2f66:	fe cf       	rjmp	.-4      	; 0x2f64 <APP_RoomLights_Page+0x93a>
					G_u8_Receive = MCAL_SPI_SLAVE_u8_SpiSlave_Transceive('F');
    2f68:	86 e4       	ldi	r24, 0x46	; 70
    2f6a:	0e 94 a4 0b 	call	0x1748	; 0x1748 <MCAL_SPI_SLAVE_u8_SpiSlave_Transceive>
    2f6e:	80 93 38 07 	sts	0x0738, r24
					MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_LOW);
    2f72:	81 e0       	ldi	r24, 0x01	; 1
    2f74:	62 e0       	ldi	r22, 0x02	; 2
    2f76:	40 e0       	ldi	r20, 0x00	; 0
    2f78:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <MCAL_DIO_u8SetPinValue>
					GLOB_u8Flag_LED1 = 0;
    2f7c:	10 92 3e 07 	sts	0x073E, r1
    2f80:	60 cf       	rjmp	.-320    	; 0x2e42 <APP_RoomLights_Page+0x818>
				MCAL_UART_voidReceiveData(&LOC_u8LED1_Option);

				switch(LOC_u8LED1_Option)
				{
				case '1':
					MCAL_UART_voidTransmitData('1');
    2f82:	81 e3       	ldi	r24, 0x31	; 49
    2f84:	0e 94 c1 06 	call	0xd82	; 0xd82 <MCAL_UART_voidTransmitData>
					MCAL_UART_voidSendString(GLOB_u8NewLine);
    2f88:	82 e1       	ldi	r24, 0x12	; 18
    2f8a:	97 e0       	ldi	r25, 0x07	; 7
    2f8c:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
					MCAL_UART_voidSendString((u8*)"ON...");
    2f90:	80 ed       	ldi	r24, 0xD0	; 208
    2f92:	91 e0       	ldi	r25, 0x01	; 1
    2f94:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
					MCAL_UART_voidSendString(GLOB_u8NewLine);
    2f98:	82 e1       	ldi	r24, 0x12	; 18
    2f9a:	97 e0       	ldi	r25, 0x07	; 7
    2f9c:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
					HAL_LED_u8LedMode(LED1_Port,LED1_Pin,LED_ON);
    2fa0:	80 e0       	ldi	r24, 0x00	; 0
    2fa2:	63 e0       	ldi	r22, 0x03	; 3
    2fa4:	41 e0       	ldi	r20, 0x01	; 1
    2fa6:	0e 94 a6 0e 	call	0x1d4c	; 0x1d4c <HAL_LED_u8LedMode>
					MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_HIGH);
    2faa:	81 e0       	ldi	r24, 0x01	; 1
    2fac:	62 e0       	ldi	r22, 0x02	; 2
    2fae:	41 e0       	ldi	r20, 0x01	; 1
    2fb0:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <MCAL_DIO_u8SetPinValue>
					while(GET_BIT(PINB,PIN4));
    2fb4:	b4 99       	sbic	0x16, 4	; 22
    2fb6:	fe cf       	rjmp	.-4      	; 0x2fb4 <APP_RoomLights_Page+0x98a>
					G_u8_Receive = MCAL_SPI_SLAVE_u8_SpiSlave_Transceive('1');
    2fb8:	81 e3       	ldi	r24, 0x31	; 49
    2fba:	0e 94 a4 0b 	call	0x1748	; 0x1748 <MCAL_SPI_SLAVE_u8_SpiSlave_Transceive>
    2fbe:	80 93 38 07 	sts	0x0738, r24
					while(GET_BIT(PINB,PIN4));
    2fc2:	b4 99       	sbic	0x16, 4	; 22
    2fc4:	fe cf       	rjmp	.-4      	; 0x2fc2 <APP_RoomLights_Page+0x998>
					G_u8_Receive = MCAL_SPI_SLAVE_u8_SpiSlave_Transceive('N');
    2fc6:	8e e4       	ldi	r24, 0x4E	; 78
    2fc8:	0e 94 a4 0b 	call	0x1748	; 0x1748 <MCAL_SPI_SLAVE_u8_SpiSlave_Transceive>
    2fcc:	80 93 38 07 	sts	0x0738, r24
					MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_LOW);
    2fd0:	81 e0       	ldi	r24, 0x01	; 1
    2fd2:	62 e0       	ldi	r22, 0x02	; 2
    2fd4:	40 e0       	ldi	r20, 0x00	; 0
    2fd6:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <MCAL_DIO_u8SetPinValue>
					GLOB_u8Flag_LED1 = 1;
    2fda:	81 e0       	ldi	r24, 0x01	; 1
    2fdc:	80 93 3e 07 	sts	0x073E, r24
    2fe0:	30 cf       	rjmp	.-416    	; 0x2e42 <APP_RoomLights_Page+0x818>

00002fe2 <APP_DeviceControl_Page>:
	}
	while(LOC_u8BackFlag != 1);
}

void APP_DeviceControl_Page(void)
{
    2fe2:	0f 93       	push	r16
    2fe4:	1f 93       	push	r17
    2fe6:	df 93       	push	r29
    2fe8:	cf 93       	push	r28
    2fea:	0f 92       	push	r0
    2fec:	cd b7       	in	r28, 0x3d	; 61
    2fee:	de b7       	in	r29, 0x3e	; 62
	u8 LOC_u8Option = 0 ,LOC_u8BackFlag = 0 ;
    2ff0:	19 82       	std	Y+1, r1	; 0x01
    2ff2:	8e 01       	movw	r16, r28
    2ff4:	0f 5f       	subi	r16, 0xFF	; 255
    2ff6:	1f 4f       	sbci	r17, 0xFF	; 255
	do
	{
		MCAL_UART_voidSendString((u8*)"1. Lights\r\n");
    2ff8:	8a e4       	ldi	r24, 0x4A	; 74
    2ffa:	92 e0       	ldi	r25, 0x02	; 2
    2ffc:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
		MCAL_UART_voidSendString((u8*)"2. AC\r\n");
    3000:	86 e5       	ldi	r24, 0x56	; 86
    3002:	92 e0       	ldi	r25, 0x02	; 2
    3004:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
		MCAL_UART_voidSendString((u8*)"3. Devices Status\r\n");
    3008:	8e e5       	ldi	r24, 0x5E	; 94
    300a:	92 e0       	ldi	r25, 0x02	; 2
    300c:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
		MCAL_UART_voidSendString(BACK);
    3010:	8e e6       	ldi	r24, 0x6E	; 110
    3012:	91 e0       	ldi	r25, 0x01	; 1
    3014:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>

		MCAL_UART_voidReceiveData(&LOC_u8Option);
    3018:	c8 01       	movw	r24, r16
    301a:	0e 94 c8 06 	call	0xd90	; 0xd90 <MCAL_UART_voidReceiveData>

		switch(LOC_u8Option)
    301e:	89 81       	ldd	r24, Y+1	; 0x01
    3020:	81 33       	cpi	r24, 0x31	; 49
    3022:	09 f4       	brne	.+2      	; 0x3026 <APP_DeviceControl_Page+0x44>
    3024:	41 c0       	rjmp	.+130    	; 0x30a8 <APP_DeviceControl_Page+0xc6>
    3026:	82 33       	cpi	r24, 0x32	; 50
    3028:	b8 f4       	brcc	.+46     	; 0x3058 <APP_DeviceControl_Page+0x76>
    302a:	80 33       	cpi	r24, 0x30	; 48
    302c:	29 f7       	brne	.-54     	; 0x2ff8 <APP_DeviceControl_Page+0x16>
			MCAL_UART_voidSendString(GLOB_u8NewLine);
			LOC_u8BackFlag = 0;
			APP_Devices_Status();
			break;
		case '0':
			MCAL_UART_voidTransmitData('0');
    302e:	80 e3       	ldi	r24, 0x30	; 48
    3030:	0e 94 c1 06 	call	0xd82	; 0xd82 <MCAL_UART_voidTransmitData>
			MCAL_UART_voidSendString(GLOB_u8NewLine);
    3034:	82 e1       	ldi	r24, 0x12	; 18
    3036:	97 e0       	ldi	r25, 0x07	; 7
    3038:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
			MCAL_UART_voidSendString((u8*)"Back");
    303c:	89 ee       	ldi	r24, 0xE9	; 233
    303e:	91 e0       	ldi	r25, 0x01	; 1
    3040:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
			MCAL_UART_voidSendString(GLOB_u8NewLine);
    3044:	82 e1       	ldi	r24, 0x12	; 18
    3046:	97 e0       	ldi	r25, 0x07	; 7
    3048:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
		}

	}
	while(LOC_u8BackFlag != 1);

}
    304c:	0f 90       	pop	r0
    304e:	cf 91       	pop	r28
    3050:	df 91       	pop	r29
    3052:	1f 91       	pop	r17
    3054:	0f 91       	pop	r16
    3056:	08 95       	ret
		MCAL_UART_voidSendString((u8*)"3. Devices Status\r\n");
		MCAL_UART_voidSendString(BACK);

		MCAL_UART_voidReceiveData(&LOC_u8Option);

		switch(LOC_u8Option)
    3058:	82 33       	cpi	r24, 0x32	; 50
    305a:	a1 f0       	breq	.+40     	; 0x3084 <APP_DeviceControl_Page+0xa2>
    305c:	83 33       	cpi	r24, 0x33	; 51
    305e:	61 f6       	brne	.-104    	; 0x2ff8 <APP_DeviceControl_Page+0x16>
			MCAL_UART_voidSendString(GLOB_u8NewLine);
			LOC_u8BackFlag = 0;
			APP_AC_Contol_Page();
			break;
		case '3':
			MCAL_UART_voidTransmitData('3');
    3060:	83 e3       	ldi	r24, 0x33	; 51
    3062:	0e 94 c1 06 	call	0xd82	; 0xd82 <MCAL_UART_voidTransmitData>
			MCAL_UART_voidSendString(GLOB_u8NewLine);
    3066:	82 e1       	ldi	r24, 0x12	; 18
    3068:	97 e0       	ldi	r25, 0x07	; 7
    306a:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
			MCAL_UART_voidSendString((u8*)"Running Devices:");
    306e:	8e e7       	ldi	r24, 0x7E	; 126
    3070:	92 e0       	ldi	r25, 0x02	; 2
    3072:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
			MCAL_UART_voidSendString(GLOB_u8NewLine);
    3076:	82 e1       	ldi	r24, 0x12	; 18
    3078:	97 e0       	ldi	r25, 0x07	; 7
    307a:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
			LOC_u8BackFlag = 0;
			APP_Devices_Status();
    307e:	0e 94 1d 11 	call	0x223a	; 0x223a <APP_Devices_Status>
    3082:	ba cf       	rjmp	.-140    	; 0x2ff8 <APP_DeviceControl_Page+0x16>

			APP_RoomLights_Page();

			break;
		case '2':
			MCAL_UART_voidTransmitData('2');
    3084:	82 e3       	ldi	r24, 0x32	; 50
    3086:	0e 94 c1 06 	call	0xd82	; 0xd82 <MCAL_UART_voidTransmitData>
			MCAL_UART_voidSendString(GLOB_u8NewLine);
    308a:	82 e1       	ldi	r24, 0x12	; 18
    308c:	97 e0       	ldi	r25, 0x07	; 7
    308e:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
			MCAL_UART_voidSendString((u8*)"AC:");
    3092:	8a e7       	ldi	r24, 0x7A	; 122
    3094:	92 e0       	ldi	r25, 0x02	; 2
    3096:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
			MCAL_UART_voidSendString(GLOB_u8NewLine);
    309a:	82 e1       	ldi	r24, 0x12	; 18
    309c:	97 e0       	ldi	r25, 0x07	; 7
    309e:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
			LOC_u8BackFlag = 0;
			APP_AC_Contol_Page();
    30a2:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <APP_AC_Contol_Page>
    30a6:	a8 cf       	rjmp	.-176    	; 0x2ff8 <APP_DeviceControl_Page+0x16>
		MCAL_UART_voidReceiveData(&LOC_u8Option);

		switch(LOC_u8Option)
		{
		case '1':
			MCAL_UART_voidTransmitData('1');
    30a8:	81 e3       	ldi	r24, 0x31	; 49
    30aa:	0e 94 c1 06 	call	0xd82	; 0xd82 <MCAL_UART_voidTransmitData>
			MCAL_UART_voidSendString(GLOB_u8NewLine);
    30ae:	82 e1       	ldi	r24, 0x12	; 18
    30b0:	97 e0       	ldi	r25, 0x07	; 7
    30b2:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
			MCAL_UART_voidSendString((u8*)"Lights:");
    30b6:	82 e7       	ldi	r24, 0x72	; 114
    30b8:	92 e0       	ldi	r25, 0x02	; 2
    30ba:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
			MCAL_UART_voidSendString(GLOB_u8NewLine);
    30be:	82 e1       	ldi	r24, 0x12	; 18
    30c0:	97 e0       	ldi	r25, 0x07	; 7
    30c2:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
			LOC_u8BackFlag = 0;

			APP_RoomLights_Page();
    30c6:	0e 94 15 13 	call	0x262a	; 0x262a <APP_RoomLights_Page>
    30ca:	96 cf       	rjmp	.-212    	; 0x2ff8 <APP_DeviceControl_Page+0x16>

000030cc <APP_DeleteAllUsers_Page>:
	while (LOC_u8BackFlag != 1);

}

void APP_DeleteAllUsers_Page(void)
{
    30cc:	df 93       	push	r29
    30ce:	cf 93       	push	r28
    30d0:	0f 92       	push	r0
    30d2:	cd b7       	in	r28, 0x3d	; 61
    30d4:	de b7       	in	r29, 0x3e	; 62
	u8 LOC_u8Option = 0;
    30d6:	19 82       	std	Y+1, r1	; 0x01
	MCAL_UART_voidSendString((u8*)"1.Confirm ");
    30d8:	8f e8       	ldi	r24, 0x8F	; 143
    30da:	92 e0       	ldi	r25, 0x02	; 2
    30dc:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
	MCAL_UART_voidSendString(GLOB_u8NewLine);
    30e0:	82 e1       	ldi	r24, 0x12	; 18
    30e2:	97 e0       	ldi	r25, 0x07	; 7
    30e4:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
	MCAL_UART_voidSendString((u8*)"0.Cancel ");
    30e8:	8a e9       	ldi	r24, 0x9A	; 154
    30ea:	92 e0       	ldi	r25, 0x02	; 2
    30ec:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
	MCAL_UART_voidSendString(GLOB_u8NewLine);
    30f0:	82 e1       	ldi	r24, 0x12	; 18
    30f2:	97 e0       	ldi	r25, 0x07	; 7
    30f4:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
	MCAL_UART_voidReceiveData(&LOC_u8Option);
    30f8:	ce 01       	movw	r24, r28
    30fa:	01 96       	adiw	r24, 0x01	; 1
    30fc:	0e 94 c8 06 	call	0xd90	; 0xd90 <MCAL_UART_voidReceiveData>

	switch(LOC_u8Option)
    3100:	89 81       	ldd	r24, Y+1	; 0x01
    3102:	80 33       	cpi	r24, 0x30	; 48
    3104:	31 f0       	breq	.+12     	; 0x3112 <APP_DeleteAllUsers_Page+0x46>
    3106:	81 33       	cpi	r24, 0x31	; 49
    3108:	21 f1       	breq	.+72     	; 0x3152 <APP_DeleteAllUsers_Page+0x86>
		MCAL_UART_voidSendString(GLOB_u8NewLine);
		_delay_ms(1000);
		break;
	}

}
    310a:	0f 90       	pop	r0
    310c:	cf 91       	pop	r28
    310e:	df 91       	pop	r29
    3110:	08 95       	ret
		APP_Registeration_voidDeleteAllUsers();
		_delay_ms(1000);

		break;
	case '0':
		MCAL_UART_voidTransmitData('0');
    3112:	80 e3       	ldi	r24, 0x30	; 48
    3114:	0e 94 c1 06 	call	0xd82	; 0xd82 <MCAL_UART_voidTransmitData>
		MCAL_UART_voidSendString(GLOB_u8NewLine);
    3118:	82 e1       	ldi	r24, 0x12	; 18
    311a:	97 e0       	ldi	r25, 0x07	; 7
    311c:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
		MCAL_UART_voidSendString((u8*)"Cancel ...");
    3120:	81 eb       	ldi	r24, 0xB1	; 177
    3122:	92 e0       	ldi	r25, 0x02	; 2
    3124:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
		MCAL_UART_voidSendString(GLOB_u8NewLine);
    3128:	82 e1       	ldi	r24, 0x12	; 18
    312a:	97 e0       	ldi	r25, 0x07	; 7
    312c:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
    3130:	20 e0       	ldi	r18, 0x00	; 0
    3132:	30 e0       	ldi	r19, 0x00	; 0
    3134:	40 e9       	ldi	r20, 0x90	; 144
    3136:	51 e0       	ldi	r21, 0x01	; 1
    3138:	ca 01       	movw	r24, r20
    313a:	01 97       	sbiw	r24, 0x01	; 1
    313c:	f1 f7       	brne	.-4      	; 0x313a <APP_DeleteAllUsers_Page+0x6e>
    313e:	2f 5f       	subi	r18, 0xFF	; 255
    3140:	3f 4f       	sbci	r19, 0xFF	; 255
    3142:	87 e2       	ldi	r24, 0x27	; 39
    3144:	20 31       	cpi	r18, 0x10	; 16
    3146:	38 07       	cpc	r19, r24
    3148:	b9 f7       	brne	.-18     	; 0x3138 <APP_DeleteAllUsers_Page+0x6c>
		_delay_ms(1000);
		break;
	}

}
    314a:	0f 90       	pop	r0
    314c:	cf 91       	pop	r28
    314e:	df 91       	pop	r29
    3150:	08 95       	ret
	MCAL_UART_voidReceiveData(&LOC_u8Option);

	switch(LOC_u8Option)
	{
	case '1':
		MCAL_UART_voidTransmitData('1');
    3152:	81 e3       	ldi	r24, 0x31	; 49
    3154:	0e 94 c1 06 	call	0xd82	; 0xd82 <MCAL_UART_voidTransmitData>
		MCAL_UART_voidSendString(GLOB_u8NewLine);
    3158:	82 e1       	ldi	r24, 0x12	; 18
    315a:	97 e0       	ldi	r25, 0x07	; 7
    315c:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
		MCAL_UART_voidSendString((u8*)"Deleting ...");
    3160:	84 ea       	ldi	r24, 0xA4	; 164
    3162:	92 e0       	ldi	r25, 0x02	; 2
    3164:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
		MCAL_UART_voidSendString(GLOB_u8NewLine);
    3168:	82 e1       	ldi	r24, 0x12	; 18
    316a:	97 e0       	ldi	r25, 0x07	; 7
    316c:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
		APP_Registeration_voidDeleteAllUsers();
    3170:	0e 94 24 23 	call	0x4648	; 0x4648 <APP_Registeration_voidDeleteAllUsers>
    3174:	20 e0       	ldi	r18, 0x00	; 0
    3176:	30 e0       	ldi	r19, 0x00	; 0
    3178:	40 e9       	ldi	r20, 0x90	; 144
    317a:	51 e0       	ldi	r21, 0x01	; 1
    317c:	ca 01       	movw	r24, r20
    317e:	01 97       	sbiw	r24, 0x01	; 1
    3180:	f1 f7       	brne	.-4      	; 0x317e <APP_DeleteAllUsers_Page+0xb2>
    3182:	2f 5f       	subi	r18, 0xFF	; 255
    3184:	3f 4f       	sbci	r19, 0xFF	; 255
    3186:	87 e2       	ldi	r24, 0x27	; 39
    3188:	20 31       	cpi	r18, 0x10	; 16
    318a:	38 07       	cpc	r19, r24
    318c:	b9 f7       	brne	.-18     	; 0x317c <APP_DeleteAllUsers_Page+0xb0>
		MCAL_UART_voidSendString(GLOB_u8NewLine);
		_delay_ms(1000);
		break;
	}

}
    318e:	0f 90       	pop	r0
    3190:	cf 91       	pop	r28
    3192:	df 91       	pop	r29
    3194:	08 95       	ret

00003196 <APP_RemoveUser_Page>:
	while (LOC_u8BackFlag != 1);
}


void APP_RemoveUser_Page(void)
{
    3196:	2f 92       	push	r2
    3198:	3f 92       	push	r3
    319a:	4f 92       	push	r4
    319c:	5f 92       	push	r5
    319e:	6f 92       	push	r6
    31a0:	7f 92       	push	r7
    31a2:	8f 92       	push	r8
    31a4:	9f 92       	push	r9
    31a6:	af 92       	push	r10
    31a8:	bf 92       	push	r11
    31aa:	cf 92       	push	r12
    31ac:	df 92       	push	r13
    31ae:	ef 92       	push	r14
    31b0:	ff 92       	push	r15
    31b2:	0f 93       	push	r16
    31b4:	1f 93       	push	r17
    31b6:	df 93       	push	r29
    31b8:	cf 93       	push	r28
    31ba:	00 d0       	rcall	.+0      	; 0x31bc <APP_RemoveUser_Page+0x26>
    31bc:	0f 92       	push	r0
    31be:	cd b7       	in	r28, 0x3d	; 61
    31c0:	de b7       	in	r29, 0x3e	; 62
	u8 LOC_u8Option = 0,LOC_u8BackFlag = 0;
    31c2:	19 82       	std	Y+1, r1	; 0x01
    31c4:	4e 01       	movw	r8, r28
    31c6:	08 94       	sec
    31c8:	81 1c       	adc	r8, r1
    31ca:	91 1c       	adc	r9, r1

			i = 1000;
			MCAL_UART_voidSendString((u8*)"Enter UserID To Be Removed: ");
			do
			{
				MCAL_UART_voidReceiveData(&LOC_u8BufferA);
    31cc:	a2 e0       	ldi	r26, 0x02	; 2
    31ce:	aa 2e       	mov	r10, r26
    31d0:	b1 2c       	mov	r11, r1
    31d2:	ac 0e       	add	r10, r28
    31d4:	bd 1e       	adc	r11, r29
				MCAL_UART_voidTransmitData((LOC_u8BufferA));
				LOC_u16ID = LOC_u16ID + ((LOC_u8BufferA - '0') * i);
    31d6:	f8 ee       	ldi	r31, 0xE8	; 232
    31d8:	6f 2e       	mov	r6, r31
    31da:	f3 e0       	ldi	r31, 0x03	; 3
    31dc:	7f 2e       	mov	r7, r31
    31de:	e4 e6       	ldi	r30, 0x64	; 100
    31e0:	4e 2e       	mov	r4, r30
    31e2:	51 2c       	mov	r5, r1
			MCAL_UART_voidSendString((u8*)"1 --> Confirm Removing User");
			MCAL_UART_voidSendString(GLOB_u8NewLine);
			MCAL_UART_voidSendString((u8*)"0 --> Cancel");
			MCAL_UART_voidSendString(GLOB_u8NewLine);

			MCAL_UART_voidReceiveData(&LOC_u8CheckConfirmation);
    31e4:	73 e0       	ldi	r23, 0x03	; 3
    31e6:	27 2e       	mov	r2, r23
    31e8:	31 2c       	mov	r3, r1
    31ea:	2c 0e       	add	r2, r28
    31ec:	3d 1e       	adc	r3, r29
    31ee:	60 e9       	ldi	r22, 0x90	; 144
    31f0:	c6 2e       	mov	r12, r22
    31f2:	61 e0       	ldi	r22, 0x01	; 1
    31f4:	d6 2e       	mov	r13, r22
{
	u8 LOC_u8Option = 0,LOC_u8BackFlag = 0;
	do
	{

		MCAL_UART_voidSendString((u8*)"1 --> Remove User");
    31f6:	8c eb       	ldi	r24, 0xBC	; 188
    31f8:	92 e0       	ldi	r25, 0x02	; 2
    31fa:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
		MCAL_UART_voidSendString(GLOB_u8NewLine);
    31fe:	82 e1       	ldi	r24, 0x12	; 18
    3200:	97 e0       	ldi	r25, 0x07	; 7
    3202:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
		MCAL_UART_voidSendString(BACK);
    3206:	8e e6       	ldi	r24, 0x6E	; 110
    3208:	91 e0       	ldi	r25, 0x01	; 1
    320a:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>

		MCAL_UART_voidReceiveData(&LOC_u8Option);
    320e:	c4 01       	movw	r24, r8
    3210:	0e 94 c8 06 	call	0xd90	; 0xd90 <MCAL_UART_voidReceiveData>

		switch(LOC_u8Option)
    3214:	89 81       	ldd	r24, Y+1	; 0x01
    3216:	80 33       	cpi	r24, 0x30	; 48
    3218:	39 f0       	breq	.+14     	; 0x3228 <APP_RemoveUser_Page+0x92>
    321a:	81 33       	cpi	r24, 0x31	; 49
    321c:	51 f1       	breq	.+84     	; 0x3272 <APP_RemoveUser_Page+0xdc>
			MCAL_UART_voidSendString(GLOB_u8NewLine);
			//		Go back to the previous page
			LOC_u8BackFlag = 1;
			break;
		default:
			MCAL_UART_voidSendString((u8*)"Invalid Input!");
    321e:	83 e6       	ldi	r24, 0x63	; 99
    3220:	93 e0       	ldi	r25, 0x03	; 3
    3222:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
    3226:	e7 cf       	rjmp	.-50     	; 0x31f6 <APP_RemoveUser_Page+0x60>
			}
			break;


		case '0':
			MCAL_UART_voidTransmitData('0');
    3228:	80 e3       	ldi	r24, 0x30	; 48
    322a:	0e 94 c1 06 	call	0xd82	; 0xd82 <MCAL_UART_voidTransmitData>
			MCAL_UART_voidSendString(GLOB_u8NewLine);
    322e:	82 e1       	ldi	r24, 0x12	; 18
    3230:	97 e0       	ldi	r25, 0x07	; 7
    3232:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
			MCAL_UART_voidSendString((u8*)"Back");
    3236:	89 ee       	ldi	r24, 0xE9	; 233
    3238:	91 e0       	ldi	r25, 0x01	; 1
    323a:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
			MCAL_UART_voidSendString(GLOB_u8NewLine);
    323e:	82 e1       	ldi	r24, 0x12	; 18
    3240:	97 e0       	ldi	r25, 0x07	; 7
    3242:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
			break;
		}
	}
	while (LOC_u8BackFlag != 1);

}
    3246:	0f 90       	pop	r0
    3248:	0f 90       	pop	r0
    324a:	0f 90       	pop	r0
    324c:	cf 91       	pop	r28
    324e:	df 91       	pop	r29
    3250:	1f 91       	pop	r17
    3252:	0f 91       	pop	r16
    3254:	ff 90       	pop	r15
    3256:	ef 90       	pop	r14
    3258:	df 90       	pop	r13
    325a:	cf 90       	pop	r12
    325c:	bf 90       	pop	r11
    325e:	af 90       	pop	r10
    3260:	9f 90       	pop	r9
    3262:	8f 90       	pop	r8
    3264:	7f 90       	pop	r7
    3266:	6f 90       	pop	r6
    3268:	5f 90       	pop	r5
    326a:	4f 90       	pop	r4
    326c:	3f 90       	pop	r3
    326e:	2f 90       	pop	r2
    3270:	08 95       	ret
		MCAL_UART_voidReceiveData(&LOC_u8Option);

		switch(LOC_u8Option)
		{
		case '1':
			MCAL_UART_voidTransmitData('1');
    3272:	81 e3       	ldi	r24, 0x31	; 49
    3274:	0e 94 c1 06 	call	0xd82	; 0xd82 <MCAL_UART_voidTransmitData>
			MCAL_UART_voidSendString(GLOB_u8NewLine);
    3278:	82 e1       	ldi	r24, 0x12	; 18
    327a:	97 e0       	ldi	r25, 0x07	; 7
    327c:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
			MCAL_UART_voidSendString((u8*)"Remove User: ");
    3280:	8e ec       	ldi	r24, 0xCE	; 206
    3282:	92 e0       	ldi	r25, 0x02	; 2
    3284:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
			MCAL_UART_voidSendString(GLOB_u8NewLine);
    3288:	82 e1       	ldi	r24, 0x12	; 18
    328a:	97 e0       	ldi	r25, 0x07	; 7
    328c:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>

			u8 LOC_u8BufferA = 0, LOC_u8CheckConfirmation = 0,LOC_u8UserRemoveFlag = 0;
    3290:	1a 82       	std	Y+2, r1	; 0x02
    3292:	1b 82       	std	Y+3, r1	; 0x03
			u16 LOC_u16ID = 0,i = 0;


			i = 1000;
			MCAL_UART_voidSendString((u8*)"Enter UserID To Be Removed: ");
    3294:	8c ed       	ldi	r24, 0xDC	; 220
    3296:	92 e0       	ldi	r25, 0x02	; 2
    3298:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
			do
			{
				MCAL_UART_voidReceiveData(&LOC_u8BufferA);
    329c:	c5 01       	movw	r24, r10
    329e:	0e 94 c8 06 	call	0xd90	; 0xd90 <MCAL_UART_voidReceiveData>
				MCAL_UART_voidTransmitData((LOC_u8BufferA));
    32a2:	8a 81       	ldd	r24, Y+2	; 0x02
    32a4:	0e 94 c1 06 	call	0xd82	; 0xd82 <MCAL_UART_voidTransmitData>
				LOC_u16ID = LOC_u16ID + ((LOC_u8BufferA - '0') * i);
    32a8:	8a 81       	ldd	r24, Y+2	; 0x02
    32aa:	90 e0       	ldi	r25, 0x00	; 0
    32ac:	c0 97       	sbiw	r24, 0x30	; 48
    32ae:	86 9d       	mul	r24, r6
    32b0:	80 01       	movw	r16, r0
    32b2:	87 9d       	mul	r24, r7
    32b4:	10 0d       	add	r17, r0
    32b6:	96 9d       	mul	r25, r6
    32b8:	10 0d       	add	r17, r0
    32ba:	11 24       	eor	r1, r1

			i = 1000;
			MCAL_UART_voidSendString((u8*)"Enter UserID To Be Removed: ");
			do
			{
				MCAL_UART_voidReceiveData(&LOC_u8BufferA);
    32bc:	c5 01       	movw	r24, r10
    32be:	0e 94 c8 06 	call	0xd90	; 0xd90 <MCAL_UART_voidReceiveData>
				MCAL_UART_voidTransmitData((LOC_u8BufferA));
    32c2:	8a 81       	ldd	r24, Y+2	; 0x02
    32c4:	0e 94 c1 06 	call	0xd82	; 0xd82 <MCAL_UART_voidTransmitData>
				LOC_u16ID = LOC_u16ID + ((LOC_u8BufferA - '0') * i);
    32c8:	8a 81       	ldd	r24, Y+2	; 0x02
    32ca:	90 e0       	ldi	r25, 0x00	; 0
    32cc:	c0 97       	sbiw	r24, 0x30	; 48
    32ce:	84 9d       	mul	r24, r4
    32d0:	70 01       	movw	r14, r0
    32d2:	85 9d       	mul	r24, r5
    32d4:	f0 0c       	add	r15, r0
    32d6:	94 9d       	mul	r25, r4
    32d8:	f0 0c       	add	r15, r0
    32da:	11 24       	eor	r1, r1

			i = 1000;
			MCAL_UART_voidSendString((u8*)"Enter UserID To Be Removed: ");
			do
			{
				MCAL_UART_voidReceiveData(&LOC_u8BufferA);
    32dc:	c5 01       	movw	r24, r10
    32de:	0e 94 c8 06 	call	0xd90	; 0xd90 <MCAL_UART_voidReceiveData>
				MCAL_UART_voidTransmitData((LOC_u8BufferA));
    32e2:	8a 81       	ldd	r24, Y+2	; 0x02
    32e4:	0e 94 c1 06 	call	0xd82	; 0xd82 <MCAL_UART_voidTransmitData>
				LOC_u16ID = LOC_u16ID + ((LOC_u8BufferA - '0') * i);
    32e8:	8a 81       	ldd	r24, Y+2	; 0x02
    32ea:	90 e0       	ldi	r25, 0x00	; 0
    32ec:	c0 97       	sbiw	r24, 0x30	; 48
    32ee:	9c 01       	movw	r18, r24
    32f0:	22 0f       	add	r18, r18
    32f2:	33 1f       	adc	r19, r19
    32f4:	22 0f       	add	r18, r18
    32f6:	33 1f       	adc	r19, r19
    32f8:	22 0f       	add	r18, r18
    32fa:	33 1f       	adc	r19, r19
    32fc:	88 0f       	add	r24, r24
    32fe:	99 1f       	adc	r25, r25
    3300:	28 0f       	add	r18, r24
    3302:	39 1f       	adc	r19, r25
    3304:	2e 0d       	add	r18, r14
    3306:	3f 1d       	adc	r19, r15
    3308:	02 0f       	add	r16, r18
    330a:	13 1f       	adc	r17, r19

			i = 1000;
			MCAL_UART_voidSendString((u8*)"Enter UserID To Be Removed: ");
			do
			{
				MCAL_UART_voidReceiveData(&LOC_u8BufferA);
    330c:	c5 01       	movw	r24, r10
    330e:	0e 94 c8 06 	call	0xd90	; 0xd90 <MCAL_UART_voidReceiveData>
				MCAL_UART_voidTransmitData((LOC_u8BufferA));
    3312:	8a 81       	ldd	r24, Y+2	; 0x02
    3314:	0e 94 c1 06 	call	0xd82	; 0xd82 <MCAL_UART_voidTransmitData>
				LOC_u16ID = LOC_u16ID + ((LOC_u8BufferA - '0') * i);
    3318:	8a 81       	ldd	r24, Y+2	; 0x02
    331a:	e8 2e       	mov	r14, r24
    331c:	ff 24       	eor	r15, r15
    331e:	80 ed       	ldi	r24, 0xD0	; 208
    3320:	9f ef       	ldi	r25, 0xFF	; 255
    3322:	e8 0e       	add	r14, r24
    3324:	f9 1e       	adc	r15, r25
    3326:	e0 0e       	add	r14, r16
    3328:	f1 1e       	adc	r15, r17
				i /= 10;

			}while(i != 0);

			MCAL_UART_voidSendString(GLOB_u8NewLine);
    332a:	82 e1       	ldi	r24, 0x12	; 18
    332c:	97 e0       	ldi	r25, 0x07	; 7
    332e:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>

			MCAL_UART_voidSendString((u8*)"1 --> Confirm Removing User");
    3332:	89 ef       	ldi	r24, 0xF9	; 249
    3334:	92 e0       	ldi	r25, 0x02	; 2
    3336:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
			MCAL_UART_voidSendString(GLOB_u8NewLine);
    333a:	82 e1       	ldi	r24, 0x12	; 18
    333c:	97 e0       	ldi	r25, 0x07	; 7
    333e:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
			MCAL_UART_voidSendString((u8*)"0 --> Cancel");
    3342:	85 e1       	ldi	r24, 0x15	; 21
    3344:	93 e0       	ldi	r25, 0x03	; 3
    3346:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
			MCAL_UART_voidSendString(GLOB_u8NewLine);
    334a:	82 e1       	ldi	r24, 0x12	; 18
    334c:	97 e0       	ldi	r25, 0x07	; 7
    334e:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>

			MCAL_UART_voidReceiveData(&LOC_u8CheckConfirmation);
    3352:	c1 01       	movw	r24, r2
    3354:	0e 94 c8 06 	call	0xd90	; 0xd90 <MCAL_UART_voidReceiveData>

			if(LOC_u8CheckConfirmation == '1')
    3358:	8b 81       	ldd	r24, Y+3	; 0x03
    335a:	81 33       	cpi	r24, 0x31	; 49
    335c:	f9 f0       	breq	.+62     	; 0x339c <APP_RemoveUser_Page+0x206>
					MCAL_UART_voidSendString(GLOB_u8NewLine);
					LOC_u8BackFlag = 0;
				}
				else{/*Do Nothing*/}
			}
			else if (LOC_u8CheckConfirmation == '0')
    335e:	80 33       	cpi	r24, 0x30	; 48
    3360:	09 f0       	breq	.+2      	; 0x3364 <APP_RemoveUser_Page+0x1ce>
    3362:	49 cf       	rjmp	.-366    	; 0x31f6 <APP_RemoveUser_Page+0x60>
			{
				MCAL_UART_voidTransmitData('0');
    3364:	0e 94 c1 06 	call	0xd82	; 0xd82 <MCAL_UART_voidTransmitData>
				MCAL_UART_voidSendString(GLOB_u8NewLine);
    3368:	82 e1       	ldi	r24, 0x12	; 18
    336a:	97 e0       	ldi	r25, 0x07	; 7
    336c:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
				MCAL_UART_voidSendString((u8*)"Cancel ...");
    3370:	81 eb       	ldi	r24, 0xB1	; 177
    3372:	92 e0       	ldi	r25, 0x02	; 2
    3374:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
				MCAL_UART_voidSendString(GLOB_u8NewLine);
    3378:	82 e1       	ldi	r24, 0x12	; 18
    337a:	97 e0       	ldi	r25, 0x07	; 7
    337c:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
    3380:	20 e0       	ldi	r18, 0x00	; 0
    3382:	30 e0       	ldi	r19, 0x00	; 0
    3384:	40 e9       	ldi	r20, 0x90	; 144
    3386:	51 e0       	ldi	r21, 0x01	; 1
    3388:	ca 01       	movw	r24, r20
    338a:	01 97       	sbiw	r24, 0x01	; 1
    338c:	f1 f7       	brne	.-4      	; 0x338a <APP_RemoveUser_Page+0x1f4>
    338e:	2f 5f       	subi	r18, 0xFF	; 255
    3390:	3f 4f       	sbci	r19, 0xFF	; 255
    3392:	87 e2       	ldi	r24, 0x27	; 39
    3394:	20 31       	cpi	r18, 0x10	; 16
    3396:	38 07       	cpc	r19, r24
    3398:	b9 f7       	brne	.-18     	; 0x3388 <APP_RemoveUser_Page+0x1f2>
    339a:	55 cf       	rjmp	.-342    	; 0x3246 <APP_RemoveUser_Page+0xb0>

			MCAL_UART_voidReceiveData(&LOC_u8CheckConfirmation);

			if(LOC_u8CheckConfirmation == '1')
			{
				MCAL_UART_voidTransmitData('1');
    339c:	0e 94 c1 06 	call	0xd82	; 0xd82 <MCAL_UART_voidTransmitData>
				MCAL_UART_voidSendString(GLOB_u8NewLine);
    33a0:	82 e1       	ldi	r24, 0x12	; 18
    33a2:	97 e0       	ldi	r25, 0x07	; 7
    33a4:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
				MCAL_UART_voidSendString((u8*)"REMOVING USER ...");
    33a8:	82 e2       	ldi	r24, 0x22	; 34
    33aa:	93 e0       	ldi	r25, 0x03	; 3
    33ac:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
				MCAL_UART_voidSendString(GLOB_u8NewLine);
    33b0:	82 e1       	ldi	r24, 0x12	; 18
    33b2:	97 e0       	ldi	r25, 0x07	; 7
    33b4:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
				LOC_u8UserRemoveFlag = Remove_User(LOC_u16ID);
    33b8:	c7 01       	movw	r24, r14
    33ba:	0e 94 e4 29 	call	0x53c8	; 0x53c8 <Remove_User>
    33be:	20 e0       	ldi	r18, 0x00	; 0
    33c0:	30 e0       	ldi	r19, 0x00	; 0
    33c2:	f6 01       	movw	r30, r12
    33c4:	31 97       	sbiw	r30, 0x01	; 1
    33c6:	f1 f7       	brne	.-4      	; 0x33c4 <APP_RemoveUser_Page+0x22e>
    33c8:	2f 5f       	subi	r18, 0xFF	; 255
    33ca:	3f 4f       	sbci	r19, 0xFF	; 255
    33cc:	97 e2       	ldi	r25, 0x27	; 39
    33ce:	20 31       	cpi	r18, 0x10	; 16
    33d0:	39 07       	cpc	r19, r25
    33d2:	b9 f7       	brne	.-18     	; 0x33c2 <APP_RemoveUser_Page+0x22c>
				_delay_ms(1000);
				if (LOC_u8UserRemoveFlag == USER_REMOVED_SUCCESSFULLY)
    33d4:	82 30       	cpi	r24, 0x02	; 2
    33d6:	61 f0       	breq	.+24     	; 0x33f0 <APP_RemoveUser_Page+0x25a>
					MCAL_UART_voidSendString((u8*)"USER REMOVED SUCCESSFULLY !!");
					MCAL_UART_voidSendString(GLOB_u8NewLine);
					LOC_u8BackFlag = 1;

				}
				else if (LOC_u8UserRemoveFlag == USER_NOT_FOUND)
    33d8:	8b 3b       	cpi	r24, 0xBB	; 187
    33da:	09 f0       	breq	.+2      	; 0x33de <APP_RemoveUser_Page+0x248>
    33dc:	0c cf       	rjmp	.-488    	; 0x31f6 <APP_RemoveUser_Page+0x60>
				{
					MCAL_UART_voidSendString((u8*)"USER NOT FOUND !!");
    33de:	81 e5       	ldi	r24, 0x51	; 81
    33e0:	93 e0       	ldi	r25, 0x03	; 3
    33e2:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
					MCAL_UART_voidSendString(GLOB_u8NewLine);
    33e6:	82 e1       	ldi	r24, 0x12	; 18
    33e8:	97 e0       	ldi	r25, 0x07	; 7
    33ea:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
    33ee:	03 cf       	rjmp	.-506    	; 0x31f6 <APP_RemoveUser_Page+0x60>
				MCAL_UART_voidSendString(GLOB_u8NewLine);
				LOC_u8UserRemoveFlag = Remove_User(LOC_u16ID);
				_delay_ms(1000);
				if (LOC_u8UserRemoveFlag == USER_REMOVED_SUCCESSFULLY)
				{
					MCAL_UART_voidSendString((u8*)"USER REMOVED SUCCESSFULLY !!");
    33f0:	84 e3       	ldi	r24, 0x34	; 52
    33f2:	93 e0       	ldi	r25, 0x03	; 3
    33f4:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
					MCAL_UART_voidSendString(GLOB_u8NewLine);
    33f8:	82 e1       	ldi	r24, 0x12	; 18
    33fa:	97 e0       	ldi	r25, 0x07	; 7
    33fc:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
    3400:	22 cf       	rjmp	.-444    	; 0x3246 <APP_RemoveUser_Page+0xb0>

00003402 <APP_RegisterNewUser_Page>:
	while(LOC_u8Break != 1);
}


void APP_RegisterNewUser_Page(void)
{
    3402:	2f 92       	push	r2
    3404:	3f 92       	push	r3
    3406:	4f 92       	push	r4
    3408:	5f 92       	push	r5
    340a:	6f 92       	push	r6
    340c:	7f 92       	push	r7
    340e:	8f 92       	push	r8
    3410:	9f 92       	push	r9
    3412:	af 92       	push	r10
    3414:	bf 92       	push	r11
    3416:	cf 92       	push	r12
    3418:	df 92       	push	r13
    341a:	ef 92       	push	r14
    341c:	ff 92       	push	r15
    341e:	0f 93       	push	r16
    3420:	1f 93       	push	r17
    3422:	df 93       	push	r29
    3424:	cf 93       	push	r28
    3426:	00 d0       	rcall	.+0      	; 0x3428 <APP_RegisterNewUser_Page+0x26>
    3428:	00 d0       	rcall	.+0      	; 0x342a <APP_RegisterNewUser_Page+0x28>
    342a:	cd b7       	in	r28, 0x3d	; 61
    342c:	de b7       	in	r29, 0x3e	; 62
	u8 LOC_u8Option = 0,LOC_u8BackFlag = 0;
    342e:	19 82       	std	Y+1, r1	; 0x01
    3430:	1e 01       	movw	r2, r28
    3432:	08 94       	sec
    3434:	21 1c       	adc	r2, r1
    3436:	31 1c       	adc	r3, r1

			i = 1000;
			MCAL_UART_voidSendString((u8*)"Enter Username: ");
			do
			{
				MCAL_UART_voidReceiveData(&LOC_u8BufferA);
    3438:	b2 e0       	ldi	r27, 0x02	; 2
    343a:	8b 2e       	mov	r8, r27
    343c:	91 2c       	mov	r9, r1
    343e:	8c 0e       	add	r8, r28
    3440:	9d 1e       	adc	r9, r29
				MCAL_UART_voidTransmitData((LOC_u8BufferA));
				LOC_u16ID = LOC_u16ID + ((LOC_u8BufferA - '0') * i);
    3442:	a8 ee       	ldi	r26, 0xE8	; 232
    3444:	6a 2e       	mov	r6, r26
    3446:	a3 e0       	ldi	r26, 0x03	; 3
    3448:	7a 2e       	mov	r7, r26
    344a:	f4 e6       	ldi	r31, 0x64	; 100
    344c:	4f 2e       	mov	r4, r31
    344e:	51 2c       	mov	r5, r1
{
	u8 LOC_u8Option = 0,LOC_u8BackFlag = 0;
	do
	{

		MCAL_UART_voidSendString((u8*)"1 --> New User\r\n");
    3450:	82 e7       	ldi	r24, 0x72	; 114
    3452:	93 e0       	ldi	r25, 0x03	; 3
    3454:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
		MCAL_UART_voidSendString(GLOB_u8NewLine);
    3458:	82 e1       	ldi	r24, 0x12	; 18
    345a:	97 e0       	ldi	r25, 0x07	; 7
    345c:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
		MCAL_UART_voidSendString(BACK);
    3460:	8e e6       	ldi	r24, 0x6E	; 110
    3462:	91 e0       	ldi	r25, 0x01	; 1
    3464:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>

		MCAL_UART_voidReceiveData(&LOC_u8Option);
    3468:	c1 01       	movw	r24, r2
    346a:	0e 94 c8 06 	call	0xd90	; 0xd90 <MCAL_UART_voidReceiveData>

		switch(LOC_u8Option)
    346e:	89 81       	ldd	r24, Y+1	; 0x01
    3470:	80 33       	cpi	r24, 0x30	; 48
    3472:	09 f4       	brne	.+2      	; 0x3476 <APP_RegisterNewUser_Page+0x74>
    3474:	71 c0       	rjmp	.+226    	; 0x3558 <APP_RegisterNewUser_Page+0x156>
    3476:	81 33       	cpi	r24, 0x31	; 49
    3478:	59 f7       	brne	.-42     	; 0x3450 <APP_RegisterNewUser_Page+0x4e>
		{
		case '1':
			MCAL_UART_voidTransmitData('1');
    347a:	81 e3       	ldi	r24, 0x31	; 49
    347c:	0e 94 c1 06 	call	0xd82	; 0xd82 <MCAL_UART_voidTransmitData>
			MCAL_UART_voidSendString(GLOB_u8NewLine);
    3480:	82 e1       	ldi	r24, 0x12	; 18
    3482:	97 e0       	ldi	r25, 0x07	; 7
    3484:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
			MCAL_UART_voidSendString((u8*)"New User:");
    3488:	83 e8       	ldi	r24, 0x83	; 131
    348a:	93 e0       	ldi	r25, 0x03	; 3
    348c:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
			MCAL_UART_voidSendString(GLOB_u8NewLine);
    3490:	82 e1       	ldi	r24, 0x12	; 18
    3492:	97 e0       	ldi	r25, 0x07	; 7
    3494:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>

			u8 LOC_u8BufferA = 0,LOC_u8BufferB = 0,LOC_u8BufferC = 0, LOC_u8CheckID = 0,LOC_u8UserEnteryFlag = 0;
    3498:	1a 82       	std	Y+2, r1	; 0x02
    349a:	1b 82       	std	Y+3, r1	; 0x03
    349c:	1c 82       	std	Y+4, r1	; 0x04
			u16 LOC_u16ID = 0,LOC_u16Pass = 0,LOC_u16PassConfirm = 0,i = 0,j = 0,k = 0;


			i = 1000;
			MCAL_UART_voidSendString((u8*)"Enter Username: ");
    349e:	8d e8       	ldi	r24, 0x8D	; 141
    34a0:	93 e0       	ldi	r25, 0x03	; 3
    34a2:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
			do
			{
				MCAL_UART_voidReceiveData(&LOC_u8BufferA);
    34a6:	c4 01       	movw	r24, r8
    34a8:	0e 94 c8 06 	call	0xd90	; 0xd90 <MCAL_UART_voidReceiveData>
				MCAL_UART_voidTransmitData((LOC_u8BufferA));
    34ac:	8a 81       	ldd	r24, Y+2	; 0x02
    34ae:	0e 94 c1 06 	call	0xd82	; 0xd82 <MCAL_UART_voidTransmitData>
				LOC_u16ID = LOC_u16ID + ((LOC_u8BufferA - '0') * i);
    34b2:	8a 81       	ldd	r24, Y+2	; 0x02
    34b4:	90 e0       	ldi	r25, 0x00	; 0
    34b6:	c0 97       	sbiw	r24, 0x30	; 48
    34b8:	86 9d       	mul	r24, r6
    34ba:	80 01       	movw	r16, r0
    34bc:	87 9d       	mul	r24, r7
    34be:	10 0d       	add	r17, r0
    34c0:	96 9d       	mul	r25, r6
    34c2:	10 0d       	add	r17, r0
    34c4:	11 24       	eor	r1, r1

			i = 1000;
			MCAL_UART_voidSendString((u8*)"Enter Username: ");
			do
			{
				MCAL_UART_voidReceiveData(&LOC_u8BufferA);
    34c6:	c4 01       	movw	r24, r8
    34c8:	0e 94 c8 06 	call	0xd90	; 0xd90 <MCAL_UART_voidReceiveData>
				MCAL_UART_voidTransmitData((LOC_u8BufferA));
    34cc:	8a 81       	ldd	r24, Y+2	; 0x02
    34ce:	0e 94 c1 06 	call	0xd82	; 0xd82 <MCAL_UART_voidTransmitData>
				LOC_u16ID = LOC_u16ID + ((LOC_u8BufferA - '0') * i);
    34d2:	8a 81       	ldd	r24, Y+2	; 0x02
    34d4:	90 e0       	ldi	r25, 0x00	; 0
    34d6:	c0 97       	sbiw	r24, 0x30	; 48
    34d8:	84 9d       	mul	r24, r4
    34da:	70 01       	movw	r14, r0
    34dc:	85 9d       	mul	r24, r5
    34de:	f0 0c       	add	r15, r0
    34e0:	94 9d       	mul	r25, r4
    34e2:	f0 0c       	add	r15, r0
    34e4:	11 24       	eor	r1, r1

			i = 1000;
			MCAL_UART_voidSendString((u8*)"Enter Username: ");
			do
			{
				MCAL_UART_voidReceiveData(&LOC_u8BufferA);
    34e6:	c4 01       	movw	r24, r8
    34e8:	0e 94 c8 06 	call	0xd90	; 0xd90 <MCAL_UART_voidReceiveData>
				MCAL_UART_voidTransmitData((LOC_u8BufferA));
    34ec:	8a 81       	ldd	r24, Y+2	; 0x02
    34ee:	0e 94 c1 06 	call	0xd82	; 0xd82 <MCAL_UART_voidTransmitData>
				LOC_u16ID = LOC_u16ID + ((LOC_u8BufferA - '0') * i);
    34f2:	8a 81       	ldd	r24, Y+2	; 0x02
    34f4:	90 e0       	ldi	r25, 0x00	; 0
    34f6:	c0 97       	sbiw	r24, 0x30	; 48
    34f8:	9c 01       	movw	r18, r24
    34fa:	22 0f       	add	r18, r18
    34fc:	33 1f       	adc	r19, r19
    34fe:	22 0f       	add	r18, r18
    3500:	33 1f       	adc	r19, r19
    3502:	22 0f       	add	r18, r18
    3504:	33 1f       	adc	r19, r19
    3506:	88 0f       	add	r24, r24
    3508:	99 1f       	adc	r25, r25
    350a:	28 0f       	add	r18, r24
    350c:	39 1f       	adc	r19, r25
    350e:	2e 0d       	add	r18, r14
    3510:	3f 1d       	adc	r19, r15
    3512:	02 0f       	add	r16, r18
    3514:	13 1f       	adc	r17, r19

			i = 1000;
			MCAL_UART_voidSendString((u8*)"Enter Username: ");
			do
			{
				MCAL_UART_voidReceiveData(&LOC_u8BufferA);
    3516:	c4 01       	movw	r24, r8
    3518:	0e 94 c8 06 	call	0xd90	; 0xd90 <MCAL_UART_voidReceiveData>
				MCAL_UART_voidTransmitData((LOC_u8BufferA));
    351c:	8a 81       	ldd	r24, Y+2	; 0x02
    351e:	0e 94 c1 06 	call	0xd82	; 0xd82 <MCAL_UART_voidTransmitData>
				LOC_u16ID = LOC_u16ID + ((LOC_u8BufferA - '0') * i);
    3522:	8a 81       	ldd	r24, Y+2	; 0x02
    3524:	c8 2e       	mov	r12, r24
    3526:	dd 24       	eor	r13, r13
    3528:	80 ed       	ldi	r24, 0xD0	; 208
    352a:	9f ef       	ldi	r25, 0xFF	; 255
    352c:	c8 0e       	add	r12, r24
    352e:	d9 1e       	adc	r13, r25
    3530:	c0 0e       	add	r12, r16
    3532:	d1 1e       	adc	r13, r17
				i /= 10;

			}while(i != 0);

			MCAL_UART_voidSendString(GLOB_u8NewLine);
    3534:	82 e1       	ldi	r24, 0x12	; 18
    3536:	97 e0       	ldi	r25, 0x07	; 7
    3538:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>

			LOC_u8CheckID = Check_UserID(LOC_u16ID);
    353c:	c6 01       	movw	r24, r12
    353e:	0e 94 44 21 	call	0x4288	; 0x4288 <Check_UserID>
			if(LOC_u8CheckID != ADMIN_NOT_FOUND)
    3542:	8b 3b       	cpi	r24, 0xBB	; 187
    3544:	79 f1       	breq	.+94     	; 0x35a4 <APP_RegisterNewUser_Page+0x1a2>
			{
				MCAL_UART_voidSendString((u8*)"USERNAME ALREADY EXIST!!!");
    3546:	8e e9       	ldi	r24, 0x9E	; 158
    3548:	93 e0       	ldi	r25, 0x03	; 3
    354a:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
				MCAL_UART_voidSendString(GLOB_u8NewLine);
    354e:	82 e1       	ldi	r24, 0x12	; 18
    3550:	97 e0       	ldi	r25, 0x07	; 7
    3552:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
    3556:	7c cf       	rjmp	.-264    	; 0x3450 <APP_RegisterNewUser_Page+0x4e>


			//			break;

		case '0':
			MCAL_UART_voidTransmitData('0');
    3558:	80 e3       	ldi	r24, 0x30	; 48
    355a:	0e 94 c1 06 	call	0xd82	; 0xd82 <MCAL_UART_voidTransmitData>
			MCAL_UART_voidSendString(GLOB_u8NewLine);
    355e:	82 e1       	ldi	r24, 0x12	; 18
    3560:	97 e0       	ldi	r25, 0x07	; 7
    3562:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
			MCAL_UART_voidSendString((u8*)"Back");
    3566:	89 ee       	ldi	r24, 0xE9	; 233
    3568:	91 e0       	ldi	r25, 0x01	; 1
    356a:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
			MCAL_UART_voidSendString(GLOB_u8NewLine);
    356e:	82 e1       	ldi	r24, 0x12	; 18
    3570:	97 e0       	ldi	r25, 0x07	; 7
    3572:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
			LOC_u8BackFlag = 1;
			break;
		}
	}
	while (LOC_u8BackFlag != 1);
}
    3576:	0f 90       	pop	r0
    3578:	0f 90       	pop	r0
    357a:	0f 90       	pop	r0
    357c:	0f 90       	pop	r0
    357e:	cf 91       	pop	r28
    3580:	df 91       	pop	r29
    3582:	1f 91       	pop	r17
    3584:	0f 91       	pop	r16
    3586:	ff 90       	pop	r15
    3588:	ef 90       	pop	r14
    358a:	df 90       	pop	r13
    358c:	cf 90       	pop	r12
    358e:	bf 90       	pop	r11
    3590:	af 90       	pop	r10
    3592:	9f 90       	pop	r9
    3594:	8f 90       	pop	r8
    3596:	7f 90       	pop	r7
    3598:	6f 90       	pop	r6
    359a:	5f 90       	pop	r5
    359c:	4f 90       	pop	r4
    359e:	3f 90       	pop	r3
    35a0:	2f 90       	pop	r2
    35a2:	08 95       	ret
			}
			else {/*Do Nothing*/}

			//		Pass:
			j = 1000;
			MCAL_UART_voidSendString((u8*)"Enter Your Password: ");
    35a4:	88 eb       	ldi	r24, 0xB8	; 184
    35a6:	93 e0       	ldi	r25, 0x03	; 3
    35a8:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
			do
			{
				MCAL_UART_voidReceiveData(&LOC_u8BufferB);
    35ac:	ce 01       	movw	r24, r28
    35ae:	03 96       	adiw	r24, 0x03	; 3
    35b0:	0e 94 c8 06 	call	0xd90	; 0xd90 <MCAL_UART_voidReceiveData>
				MCAL_UART_voidTransmitData((LOC_u8BufferB));
    35b4:	8b 81       	ldd	r24, Y+3	; 0x03
    35b6:	0e 94 c1 06 	call	0xd82	; 0xd82 <MCAL_UART_voidTransmitData>
				LOC_u16Pass = LOC_u16Pass + ((LOC_u8BufferB - '0') * j);
    35ba:	8b 81       	ldd	r24, Y+3	; 0x03
    35bc:	90 e0       	ldi	r25, 0x00	; 0
    35be:	c0 97       	sbiw	r24, 0x30	; 48
    35c0:	86 9d       	mul	r24, r6
    35c2:	80 01       	movw	r16, r0
    35c4:	87 9d       	mul	r24, r7
    35c6:	10 0d       	add	r17, r0
    35c8:	96 9d       	mul	r25, r6
    35ca:	10 0d       	add	r17, r0
    35cc:	11 24       	eor	r1, r1
			//		Pass:
			j = 1000;
			MCAL_UART_voidSendString((u8*)"Enter Your Password: ");
			do
			{
				MCAL_UART_voidReceiveData(&LOC_u8BufferB);
    35ce:	ce 01       	movw	r24, r28
    35d0:	03 96       	adiw	r24, 0x03	; 3
    35d2:	0e 94 c8 06 	call	0xd90	; 0xd90 <MCAL_UART_voidReceiveData>
				MCAL_UART_voidTransmitData((LOC_u8BufferB));
    35d6:	8b 81       	ldd	r24, Y+3	; 0x03
    35d8:	0e 94 c1 06 	call	0xd82	; 0xd82 <MCAL_UART_voidTransmitData>
				LOC_u16Pass = LOC_u16Pass + ((LOC_u8BufferB - '0') * j);
    35dc:	8b 81       	ldd	r24, Y+3	; 0x03
    35de:	90 e0       	ldi	r25, 0x00	; 0
    35e0:	c0 97       	sbiw	r24, 0x30	; 48
    35e2:	84 9d       	mul	r24, r4
    35e4:	70 01       	movw	r14, r0
    35e6:	85 9d       	mul	r24, r5
    35e8:	f0 0c       	add	r15, r0
    35ea:	94 9d       	mul	r25, r4
    35ec:	f0 0c       	add	r15, r0
    35ee:	11 24       	eor	r1, r1
			//		Pass:
			j = 1000;
			MCAL_UART_voidSendString((u8*)"Enter Your Password: ");
			do
			{
				MCAL_UART_voidReceiveData(&LOC_u8BufferB);
    35f0:	ce 01       	movw	r24, r28
    35f2:	03 96       	adiw	r24, 0x03	; 3
    35f4:	0e 94 c8 06 	call	0xd90	; 0xd90 <MCAL_UART_voidReceiveData>
				MCAL_UART_voidTransmitData((LOC_u8BufferB));
    35f8:	8b 81       	ldd	r24, Y+3	; 0x03
    35fa:	0e 94 c1 06 	call	0xd82	; 0xd82 <MCAL_UART_voidTransmitData>
				LOC_u16Pass = LOC_u16Pass + ((LOC_u8BufferB - '0') * j);
    35fe:	8b 81       	ldd	r24, Y+3	; 0x03
    3600:	90 e0       	ldi	r25, 0x00	; 0
    3602:	c0 97       	sbiw	r24, 0x30	; 48
    3604:	9c 01       	movw	r18, r24
    3606:	22 0f       	add	r18, r18
    3608:	33 1f       	adc	r19, r19
    360a:	22 0f       	add	r18, r18
    360c:	33 1f       	adc	r19, r19
    360e:	22 0f       	add	r18, r18
    3610:	33 1f       	adc	r19, r19
    3612:	88 0f       	add	r24, r24
    3614:	99 1f       	adc	r25, r25
    3616:	28 0f       	add	r18, r24
    3618:	39 1f       	adc	r19, r25
    361a:	2e 0d       	add	r18, r14
    361c:	3f 1d       	adc	r19, r15
    361e:	02 0f       	add	r16, r18
    3620:	13 1f       	adc	r17, r19
			//		Pass:
			j = 1000;
			MCAL_UART_voidSendString((u8*)"Enter Your Password: ");
			do
			{
				MCAL_UART_voidReceiveData(&LOC_u8BufferB);
    3622:	ce 01       	movw	r24, r28
    3624:	03 96       	adiw	r24, 0x03	; 3
    3626:	0e 94 c8 06 	call	0xd90	; 0xd90 <MCAL_UART_voidReceiveData>
				MCAL_UART_voidTransmitData((LOC_u8BufferB));
    362a:	8b 81       	ldd	r24, Y+3	; 0x03
    362c:	0e 94 c1 06 	call	0xd82	; 0xd82 <MCAL_UART_voidTransmitData>
				LOC_u16Pass = LOC_u16Pass + ((LOC_u8BufferB - '0') * j);
    3630:	8b 81       	ldd	r24, Y+3	; 0x03
    3632:	a8 2e       	mov	r10, r24
    3634:	bb 24       	eor	r11, r11
    3636:	80 ed       	ldi	r24, 0xD0	; 208
    3638:	9f ef       	ldi	r25, 0xFF	; 255
    363a:	a8 0e       	add	r10, r24
    363c:	b9 1e       	adc	r11, r25
    363e:	a0 0e       	add	r10, r16
    3640:	b1 1e       	adc	r11, r17
				j /= 10;
			}while(j != 0);
			MCAL_UART_voidSendString(GLOB_u8NewLine);
    3642:	82 e1       	ldi	r24, 0x12	; 18
    3644:	97 e0       	ldi	r25, 0x07	; 7
    3646:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>


			k = 1000;
			MCAL_UART_voidSendString((u8*)"Confirm Password: ");
    364a:	8e ec       	ldi	r24, 0xCE	; 206
    364c:	93 e0       	ldi	r25, 0x03	; 3
    364e:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
			do
			{
				MCAL_UART_voidReceiveData(&LOC_u8BufferC);
    3652:	ce 01       	movw	r24, r28
    3654:	04 96       	adiw	r24, 0x04	; 4
    3656:	0e 94 c8 06 	call	0xd90	; 0xd90 <MCAL_UART_voidReceiveData>
				MCAL_UART_voidTransmitData((LOC_u8BufferC));
    365a:	8c 81       	ldd	r24, Y+4	; 0x04
    365c:	0e 94 c1 06 	call	0xd82	; 0xd82 <MCAL_UART_voidTransmitData>
				LOC_u16PassConfirm = LOC_u16PassConfirm + ((LOC_u8BufferC - '0') * k);
    3660:	8c 81       	ldd	r24, Y+4	; 0x04
    3662:	90 e0       	ldi	r25, 0x00	; 0
    3664:	c0 97       	sbiw	r24, 0x30	; 48
    3666:	86 9d       	mul	r24, r6
    3668:	80 01       	movw	r16, r0
    366a:	87 9d       	mul	r24, r7
    366c:	10 0d       	add	r17, r0
    366e:	96 9d       	mul	r25, r6
    3670:	10 0d       	add	r17, r0
    3672:	11 24       	eor	r1, r1

			k = 1000;
			MCAL_UART_voidSendString((u8*)"Confirm Password: ");
			do
			{
				MCAL_UART_voidReceiveData(&LOC_u8BufferC);
    3674:	ce 01       	movw	r24, r28
    3676:	04 96       	adiw	r24, 0x04	; 4
    3678:	0e 94 c8 06 	call	0xd90	; 0xd90 <MCAL_UART_voidReceiveData>
				MCAL_UART_voidTransmitData((LOC_u8BufferC));
    367c:	8c 81       	ldd	r24, Y+4	; 0x04
    367e:	0e 94 c1 06 	call	0xd82	; 0xd82 <MCAL_UART_voidTransmitData>
				LOC_u16PassConfirm = LOC_u16PassConfirm + ((LOC_u8BufferC - '0') * k);
    3682:	8c 81       	ldd	r24, Y+4	; 0x04
    3684:	90 e0       	ldi	r25, 0x00	; 0
    3686:	c0 97       	sbiw	r24, 0x30	; 48
    3688:	84 9d       	mul	r24, r4
    368a:	70 01       	movw	r14, r0
    368c:	85 9d       	mul	r24, r5
    368e:	f0 0c       	add	r15, r0
    3690:	94 9d       	mul	r25, r4
    3692:	f0 0c       	add	r15, r0
    3694:	11 24       	eor	r1, r1

			k = 1000;
			MCAL_UART_voidSendString((u8*)"Confirm Password: ");
			do
			{
				MCAL_UART_voidReceiveData(&LOC_u8BufferC);
    3696:	ce 01       	movw	r24, r28
    3698:	04 96       	adiw	r24, 0x04	; 4
    369a:	0e 94 c8 06 	call	0xd90	; 0xd90 <MCAL_UART_voidReceiveData>
				MCAL_UART_voidTransmitData((LOC_u8BufferC));
    369e:	8c 81       	ldd	r24, Y+4	; 0x04
    36a0:	0e 94 c1 06 	call	0xd82	; 0xd82 <MCAL_UART_voidTransmitData>
				LOC_u16PassConfirm = LOC_u16PassConfirm + ((LOC_u8BufferC - '0') * k);
    36a4:	8c 81       	ldd	r24, Y+4	; 0x04
    36a6:	90 e0       	ldi	r25, 0x00	; 0
    36a8:	c0 97       	sbiw	r24, 0x30	; 48
    36aa:	9c 01       	movw	r18, r24
    36ac:	22 0f       	add	r18, r18
    36ae:	33 1f       	adc	r19, r19
    36b0:	22 0f       	add	r18, r18
    36b2:	33 1f       	adc	r19, r19
    36b4:	22 0f       	add	r18, r18
    36b6:	33 1f       	adc	r19, r19
    36b8:	88 0f       	add	r24, r24
    36ba:	99 1f       	adc	r25, r25
    36bc:	28 0f       	add	r18, r24
    36be:	39 1f       	adc	r19, r25
    36c0:	2e 0d       	add	r18, r14
    36c2:	3f 1d       	adc	r19, r15
    36c4:	02 0f       	add	r16, r18
    36c6:	13 1f       	adc	r17, r19

			k = 1000;
			MCAL_UART_voidSendString((u8*)"Confirm Password: ");
			do
			{
				MCAL_UART_voidReceiveData(&LOC_u8BufferC);
    36c8:	ce 01       	movw	r24, r28
    36ca:	04 96       	adiw	r24, 0x04	; 4
    36cc:	0e 94 c8 06 	call	0xd90	; 0xd90 <MCAL_UART_voidReceiveData>
				MCAL_UART_voidTransmitData((LOC_u8BufferC));
    36d0:	8c 81       	ldd	r24, Y+4	; 0x04
    36d2:	0e 94 c1 06 	call	0xd82	; 0xd82 <MCAL_UART_voidTransmitData>
				LOC_u16PassConfirm = LOC_u16PassConfirm + ((LOC_u8BufferC - '0') * k);
    36d6:	8c 81       	ldd	r24, Y+4	; 0x04
    36d8:	90 e0       	ldi	r25, 0x00	; 0
    36da:	c0 97       	sbiw	r24, 0x30	; 48
    36dc:	08 0f       	add	r16, r24
    36de:	19 1f       	adc	r17, r25
				k /= 10;
			}while(k != 0);

			MCAL_UART_voidSendString(GLOB_u8NewLine);
    36e0:	82 e1       	ldi	r24, 0x12	; 18
    36e2:	97 e0       	ldi	r25, 0x07	; 7
    36e4:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
			if(LOC_u16PassConfirm == LOC_u16Pass)
    36e8:	a0 16       	cp	r10, r16
    36ea:	b1 06       	cpc	r11, r17
    36ec:	49 f0       	breq	.+18     	; 0x3700 <APP_RegisterNewUser_Page+0x2fe>
				MCAL_UART_voidSendString(GLOB_u8NewLine);
				LOC_u8BackFlag = 1;
			}
			else
			{
				MCAL_UART_voidSendString((u8*)"Passwords Doesn't Match!!!");
    36ee:	8e ef       	ldi	r24, 0xFE	; 254
    36f0:	93 e0       	ldi	r25, 0x03	; 3
    36f2:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
				MCAL_UART_voidSendString(GLOB_u8NewLine);
    36f6:	82 e1       	ldi	r24, 0x12	; 18
    36f8:	97 e0       	ldi	r25, 0x07	; 7
    36fa:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
    36fe:	a8 ce       	rjmp	.-688    	; 0x3450 <APP_RegisterNewUser_Page+0x4e>
			}while(k != 0);

			MCAL_UART_voidSendString(GLOB_u8NewLine);
			if(LOC_u16PassConfirm == LOC_u16Pass)
			{
				LOC_u8UserEnteryFlag = Add_User(LOC_u16ID,LOC_u16Pass);
    3700:	c6 01       	movw	r24, r12
    3702:	b5 01       	movw	r22, r10
    3704:	0e 94 c4 27 	call	0x4f88	; 0x4f88 <Add_User>
				MCAL_UART_voidSendString(((u8*)"User Registered Successfully"));
    3708:	81 ee       	ldi	r24, 0xE1	; 225
    370a:	93 e0       	ldi	r25, 0x03	; 3
    370c:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
				MCAL_UART_voidSendString(GLOB_u8NewLine);
    3710:	82 e1       	ldi	r24, 0x12	; 18
    3712:	97 e0       	ldi	r25, 0x07	; 7
    3714:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
    3718:	2e cf       	rjmp	.-420    	; 0x3576 <APP_RegisterNewUser_Page+0x174>

0000371a <APP_DoorControl_Page>:
	}
	while(LOC_u8BackFlag != 1);

}
void APP_DoorControl_Page(void)
{
    371a:	7f 92       	push	r7
    371c:	8f 92       	push	r8
    371e:	9f 92       	push	r9
    3720:	af 92       	push	r10
    3722:	bf 92       	push	r11
    3724:	cf 92       	push	r12
    3726:	df 92       	push	r13
    3728:	ef 92       	push	r14
    372a:	ff 92       	push	r15
    372c:	0f 93       	push	r16
    372e:	1f 93       	push	r17
    3730:	df 93       	push	r29
    3732:	cf 93       	push	r28
    3734:	cd b7       	in	r28, 0x3d	; 61
    3736:	de b7       	in	r29, 0x3e	; 62
    3738:	60 97       	sbiw	r28, 0x10	; 16
    373a:	0f b6       	in	r0, 0x3f	; 63
    373c:	f8 94       	cli
    373e:	de bf       	out	0x3e, r29	; 62
    3740:	0f be       	out	0x3f, r0	; 63
    3742:	cd bf       	out	0x3d, r28	; 61
    3744:	6e 01       	movw	r12, r28
    3746:	08 94       	sec
    3748:	c1 1c       	adc	r12, r1
    374a:	d1 1c       	adc	r13, r1
    374c:	8b e0       	ldi	r24, 0x0B	; 11
    374e:	a8 2e       	mov	r10, r24
    3750:	b1 2c       	mov	r11, r1
    3752:	ac 0e       	add	r10, r28
    3754:	bd 1e       	adc	r11, r29
    3756:	06 e0       	ldi	r16, 0x06	; 6
    3758:	80 2e       	mov	r8, r16
    375a:	91 2c       	mov	r9, r1
    375c:	8c 0e       	add	r8, r28
    375e:	9d 1e       	adc	r9, r29
    3760:	10 e9       	ldi	r17, 0x90	; 144
    3762:	e1 2e       	mov	r14, r17
    3764:	11 e0       	ldi	r17, 0x01	; 1
    3766:	f1 2e       	mov	r15, r17
		{
			MCAL_UART_voidSendString((u8*)"OPENNING!");
			MCAL_UART_voidSendString(GLOB_u8NewLine);
			_delay_ms(1000);
			HAL_Servo_voidServoOpenDoor();
			GLOB_u8Flag_Door = 1;
    3768:	77 24       	eor	r7, r7
    376a:	73 94       	inc	r7


	do
	{
//		u8 LOC_u8LoopCounter =0
		u8 LOC_u8OpenFlag[5] = "open" ,LOC_u8CloseFlag[6] = "close";
    376c:	d6 01       	movw	r26, r12
    376e:	ec e2       	ldi	r30, 0x2C	; 44
    3770:	f4 e0       	ldi	r31, 0x04	; 4
    3772:	85 e0       	ldi	r24, 0x05	; 5
    3774:	01 90       	ld	r0, Z+
    3776:	0d 92       	st	X+, r0
    3778:	81 50       	subi	r24, 0x01	; 1
    377a:	e1 f7       	brne	.-8      	; 0x3774 <APP_DoorControl_Page+0x5a>
    377c:	d5 01       	movw	r26, r10
    377e:	e1 e3       	ldi	r30, 0x31	; 49
    3780:	f4 e0       	ldi	r31, 0x04	; 4
    3782:	86 e0       	ldi	r24, 0x06	; 6
    3784:	01 90       	ld	r0, Z+
    3786:	0d 92       	st	X+, r0
    3788:	81 50       	subi	r24, 0x01	; 1
    378a:	e1 f7       	brne	.-8      	; 0x3784 <APP_DoorControl_Page+0x6a>
		u8 LOC_u8CheckOpen = 1,LOC_u8CheckClose = 1, LOC_u8BackFlag[5] = "back",LOC_u8CheckBack=1 ;
    378c:	d4 01       	movw	r26, r8
    378e:	e7 e3       	ldi	r30, 0x37	; 55
    3790:	f4 e0       	ldi	r31, 0x04	; 4
    3792:	85 e0       	ldi	r24, 0x05	; 5
    3794:	01 90       	ld	r0, Z+
    3796:	0d 92       	st	X+, r0
    3798:	81 50       	subi	r24, 0x01	; 1
    379a:	e1 f7       	brne	.-8      	; 0x3794 <APP_DoorControl_Page+0x7a>
		MCAL_UART_voidSendString((u8*)"Choose by Typing: ");
    379c:	89 e1       	ldi	r24, 0x19	; 25
    379e:	94 e0       	ldi	r25, 0x04	; 4
    37a0:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
		MCAL_UART_voidSendString(GLOB_u8NewLine);
    37a4:	82 e1       	ldi	r24, 0x12	; 18
    37a6:	97 e0       	ldi	r25, 0x07	; 7
    37a8:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
		MCAL_UART_voidSendString((u8*)"open");
    37ac:	8c e2       	ldi	r24, 0x2C	; 44
    37ae:	94 e0       	ldi	r25, 0x04	; 4
    37b0:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
		MCAL_UART_voidSendString(GLOB_u8NewLine);
    37b4:	82 e1       	ldi	r24, 0x12	; 18
    37b6:	97 e0       	ldi	r25, 0x07	; 7
    37b8:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
		MCAL_UART_voidSendString((u8*)"close");
    37bc:	81 e3       	ldi	r24, 0x31	; 49
    37be:	94 e0       	ldi	r25, 0x04	; 4
    37c0:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
		MCAL_UART_voidSendString(GLOB_u8NewLine);
    37c4:	82 e1       	ldi	r24, 0x12	; 18
    37c6:	97 e0       	ldi	r25, 0x07	; 7
    37c8:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
		MCAL_UART_voidSendString((u8*)"back");
    37cc:	87 e3       	ldi	r24, 0x37	; 55
    37ce:	94 e0       	ldi	r25, 0x04	; 4
    37d0:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
		MCAL_UART_voidSendString(GLOB_u8NewLine);
    37d4:	82 e1       	ldi	r24, 0x12	; 18
    37d6:	97 e0       	ldi	r25, 0x07	; 7
    37d8:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>


		MCAL_UART_voidReceiveString(GLOB_u8DoorCommandReceived);
    37dc:	81 e3       	ldi	r24, 0x31	; 49
    37de:	97 e0       	ldi	r25, 0x07	; 7
    37e0:	0e 94 ce 06 	call	0xd9c	; 0xd9c <MCAL_UART_voidReceiveString>
		MCAL_UART_voidSendString((u8*)"You Entered: ");
    37e4:	8c e3       	ldi	r24, 0x3C	; 60
    37e6:	94 e0       	ldi	r25, 0x04	; 4
    37e8:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
		MCAL_UART_voidSendString(GLOB_u8DoorCommandReceived);
    37ec:	81 e3       	ldi	r24, 0x31	; 49
    37ee:	97 e0       	ldi	r25, 0x07	; 7
    37f0:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
			MCAL_UART_voidReceiveData(&GLOB_u8DoorCommandReceived[LOC_u8LoopCounter]);
			MCAL_UART_voidTransmitData(GLOB_u8DoorCommandReceived[LOC_u8LoopCounter]);

		}
		 */
		MCAL_UART_voidSendString(GLOB_u8NewLine);
    37f4:	82 e1       	ldi	r24, 0x12	; 18
    37f6:	97 e0       	ldi	r25, 0x07	; 7
    37f8:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>

		LOC_u8CheckBack = (u8)strcmp(LOC_u8BackFlag,GLOB_u8DoorCommandReceived);
    37fc:	c4 01       	movw	r24, r8
    37fe:	61 e3       	ldi	r22, 0x31	; 49
    3800:	77 e0       	ldi	r23, 0x07	; 7
    3802:	0e 94 ff 2b 	call	0x57fe	; 0x57fe <strcmp>
    3806:	08 2f       	mov	r16, r24
		LOC_u8CheckOpen = (u8)strcmp(LOC_u8OpenFlag,GLOB_u8DoorCommandReceived);
    3808:	c6 01       	movw	r24, r12
    380a:	61 e3       	ldi	r22, 0x31	; 49
    380c:	77 e0       	ldi	r23, 0x07	; 7
    380e:	0e 94 ff 2b 	call	0x57fe	; 0x57fe <strcmp>
    3812:	18 2f       	mov	r17, r24
		LOC_u8CheckClose = (u8)strcmp(LOC_u8CloseFlag,GLOB_u8DoorCommandReceived);
    3814:	c5 01       	movw	r24, r10
    3816:	61 e3       	ldi	r22, 0x31	; 49
    3818:	77 e0       	ldi	r23, 0x07	; 7
    381a:	0e 94 ff 2b 	call	0x57fe	; 0x57fe <strcmp>

				LOC_u8Break = 0;
			}
		}
		 */
		if (LOC_u8CheckOpen == 0)
    381e:	11 23       	and	r17, r17
    3820:	09 f1       	breq	.+66     	; 0x3864 <APP_DoorControl_Page+0x14a>
			GLOB_u8Flag_Door = 1;
			//Open Door (Servo)

			LOC_u8Break = 0;
		}
		else if (LOC_u8CheckClose == 0)
    3822:	88 23       	and	r24, r24
    3824:	09 f4       	brne	.+2      	; 0x3828 <APP_DoorControl_Page+0x10e>
    3826:	3f c0       	rjmp	.+126    	; 0x38a6 <APP_DoorControl_Page+0x18c>
			//Close Door (Servo)
			GLOB_u8Flag_Door = 0;

			LOC_u8Break = 0;
		}
		else if (LOC_u8CheckBack == 0)
    3828:	00 23       	and	r16, r16
    382a:	a1 f5       	brne	.+104    	; 0x3894 <APP_DoorControl_Page+0x17a>
		{
			MCAL_UART_voidSendString((u8*)"BACKING!");
    382c:	8d e5       	ldi	r24, 0x5D	; 93
    382e:	94 e0       	ldi	r25, 0x04	; 4
    3830:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
			MCAL_UART_voidSendString(GLOB_u8NewLine);
    3834:	82 e1       	ldi	r24, 0x12	; 18
    3836:	97 e0       	ldi	r25, 0x07	; 7
    3838:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>

		}

	}
	while(LOC_u8Break != 1);
}
    383c:	60 96       	adiw	r28, 0x10	; 16
    383e:	0f b6       	in	r0, 0x3f	; 63
    3840:	f8 94       	cli
    3842:	de bf       	out	0x3e, r29	; 62
    3844:	0f be       	out	0x3f, r0	; 63
    3846:	cd bf       	out	0x3d, r28	; 61
    3848:	cf 91       	pop	r28
    384a:	df 91       	pop	r29
    384c:	1f 91       	pop	r17
    384e:	0f 91       	pop	r16
    3850:	ff 90       	pop	r15
    3852:	ef 90       	pop	r14
    3854:	df 90       	pop	r13
    3856:	cf 90       	pop	r12
    3858:	bf 90       	pop	r11
    385a:	af 90       	pop	r10
    385c:	9f 90       	pop	r9
    385e:	8f 90       	pop	r8
    3860:	7f 90       	pop	r7
    3862:	08 95       	ret
			}
		}
		 */
		if (LOC_u8CheckOpen == 0)
		{
			MCAL_UART_voidSendString((u8*)"OPENNING!");
    3864:	8a e4       	ldi	r24, 0x4A	; 74
    3866:	94 e0       	ldi	r25, 0x04	; 4
    3868:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
			MCAL_UART_voidSendString(GLOB_u8NewLine);
    386c:	82 e1       	ldi	r24, 0x12	; 18
    386e:	97 e0       	ldi	r25, 0x07	; 7
    3870:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
    3874:	20 e0       	ldi	r18, 0x00	; 0
    3876:	30 e0       	ldi	r19, 0x00	; 0
    3878:	c7 01       	movw	r24, r14
    387a:	01 97       	sbiw	r24, 0x01	; 1
    387c:	f1 f7       	brne	.-4      	; 0x387a <APP_DoorControl_Page+0x160>
    387e:	2f 5f       	subi	r18, 0xFF	; 255
    3880:	3f 4f       	sbci	r19, 0xFF	; 255
    3882:	87 e2       	ldi	r24, 0x27	; 39
    3884:	20 31       	cpi	r18, 0x10	; 16
    3886:	38 07       	cpc	r19, r24
    3888:	b9 f7       	brne	.-18     	; 0x3878 <APP_DoorControl_Page+0x15e>
			_delay_ms(1000);
			HAL_Servo_voidServoOpenDoor();
    388a:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <HAL_Servo_voidServoOpenDoor>
			GLOB_u8Flag_Door = 1;
    388e:	70 92 39 07 	sts	0x0739, r7
    3892:	6c cf       	rjmp	.-296    	; 0x376c <APP_DoorControl_Page+0x52>
			LOC_u8Break = 1;
		}
		else
		{
			//Invalid Option
			MCAL_UART_voidSendString((u8*)"Wrong Input!");
    3894:	86 e6       	ldi	r24, 0x66	; 102
    3896:	94 e0       	ldi	r25, 0x04	; 4
    3898:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
			MCAL_UART_voidSendString(GLOB_u8NewLine);
    389c:	82 e1       	ldi	r24, 0x12	; 18
    389e:	97 e0       	ldi	r25, 0x07	; 7
    38a0:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
    38a4:	63 cf       	rjmp	.-314    	; 0x376c <APP_DoorControl_Page+0x52>

			LOC_u8Break = 0;
		}
		else if (LOC_u8CheckClose == 0)
		{
			MCAL_UART_voidSendString((u8*)"CLOSING!");
    38a6:	84 e5       	ldi	r24, 0x54	; 84
    38a8:	94 e0       	ldi	r25, 0x04	; 4
    38aa:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
			MCAL_UART_voidSendString(GLOB_u8NewLine);
    38ae:	82 e1       	ldi	r24, 0x12	; 18
    38b0:	97 e0       	ldi	r25, 0x07	; 7
    38b2:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
    38b6:	20 e0       	ldi	r18, 0x00	; 0
    38b8:	30 e0       	ldi	r19, 0x00	; 0
    38ba:	c7 01       	movw	r24, r14
    38bc:	01 97       	sbiw	r24, 0x01	; 1
    38be:	f1 f7       	brne	.-4      	; 0x38bc <APP_DoorControl_Page+0x1a2>
    38c0:	2f 5f       	subi	r18, 0xFF	; 255
    38c2:	3f 4f       	sbci	r19, 0xFF	; 255
    38c4:	87 e2       	ldi	r24, 0x27	; 39
    38c6:	20 31       	cpi	r18, 0x10	; 16
    38c8:	38 07       	cpc	r19, r24
    38ca:	b9 f7       	brne	.-18     	; 0x38ba <APP_DoorControl_Page+0x1a0>
			_delay_ms(1000);
			HAL_Servo_voidServoCloseDoor();
    38cc:	0e 94 57 0e 	call	0x1cae	; 0x1cae <HAL_Servo_voidServoCloseDoor>
			//Close Door (Servo)
			GLOB_u8Flag_Door = 0;
    38d0:	10 92 39 07 	sts	0x0739, r1
    38d4:	4b cf       	rjmp	.-362    	; 0x376c <APP_DoorControl_Page+0x52>

000038d6 <APP_Register_Page>:
}



void APP_Register_Page(void)
{
    38d6:	2f 92       	push	r2
    38d8:	3f 92       	push	r3
    38da:	4f 92       	push	r4
    38dc:	5f 92       	push	r5
    38de:	6f 92       	push	r6
    38e0:	7f 92       	push	r7
    38e2:	8f 92       	push	r8
    38e4:	9f 92       	push	r9
    38e6:	af 92       	push	r10
    38e8:	bf 92       	push	r11
    38ea:	cf 92       	push	r12
    38ec:	df 92       	push	r13
    38ee:	ef 92       	push	r14
    38f0:	ff 92       	push	r15
    38f2:	0f 93       	push	r16
    38f4:	1f 93       	push	r17
    38f6:	df 93       	push	r29
    38f8:	cf 93       	push	r28
    38fa:	00 d0       	rcall	.+0      	; 0x38fc <APP_Register_Page+0x26>
    38fc:	00 d0       	rcall	.+0      	; 0x38fe <APP_Register_Page+0x28>
    38fe:	cd b7       	in	r28, 0x3d	; 61
    3900:	de b7       	in	r29, 0x3e	; 62
	u8 LOC_u8Input = 0 ,LOC_u8BackFlag = 0;
    3902:	19 82       	std	Y+1, r1	; 0x01

			i = 1000;
			MCAL_UART_voidSendString((u8*)"Enter Your Username: ");
			do
			{
				MCAL_UART_voidReceiveData(&LOC_u8BufferA);
    3904:	02 e0       	ldi	r16, 0x02	; 2
    3906:	40 2e       	mov	r4, r16
    3908:	51 2c       	mov	r5, r1
    390a:	4c 0e       	add	r4, r28
    390c:	5d 1e       	adc	r5, r29
				MCAL_UART_voidTransmitData((LOC_u8BufferA));
				LOC_u16ID = LOC_u16ID + ((LOC_u8BufferA - '0') * i);
    390e:	18 ee       	ldi	r17, 0xE8	; 232
    3910:	21 2e       	mov	r2, r17
    3912:	13 e0       	ldi	r17, 0x03	; 3
    3914:	31 2e       	mov	r3, r17
			//		Pass:
			j = 1000;
			MCAL_UART_voidSendString((u8*)"Enter Your Password: ");
			do
			{
				MCAL_UART_voidReceiveData(&LOC_u8BufferB);
    3916:	b3 e0       	ldi	r27, 0x03	; 3
    3918:	6b 2e       	mov	r6, r27
    391a:	71 2c       	mov	r7, r1
    391c:	6c 0e       	add	r6, r28
    391e:	7d 1e       	adc	r7, r29

			k = 1000;
			MCAL_UART_voidSendString((u8*)"Confirm Password: ");
			do
			{
				MCAL_UART_voidReceiveData(&LOC_u8BufferC);
    3920:	a4 e0       	ldi	r26, 0x04	; 4
    3922:	8a 2e       	mov	r8, r26
    3924:	91 2c       	mov	r9, r1
    3926:	8c 0e       	add	r8, r28
    3928:	9d 1e       	adc	r9, r29
	MCAL_UART_voidSendString(GLOB_u8RemoveAllUsers);
	 */

	do
	{
		u8 LOC_u8BufferA = 0,LOC_u8BufferB = 0,LOC_u8BufferC = 0, LOC_u8CheckID = 0,LOC_u8AdminEnteryFlag = 0;
    392a:	1a 82       	std	Y+2, r1	; 0x02
    392c:	1b 82       	std	Y+3, r1	; 0x03
    392e:	1c 82       	std	Y+4, r1	; 0x04
		u16 LOC_u16ID = 0,LOC_u16Pass = 0,LOC_u16PassConfirm = 0,i = 0,j = 0,k = 0;

		MCAL_UART_voidSendString((u8*)"1 --> New Admin");
    3930:	83 e7       	ldi	r24, 0x73	; 115
    3932:	94 e0       	ldi	r25, 0x04	; 4
    3934:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
		MCAL_UART_voidSendString(GLOB_u8NewLine);
    3938:	82 e1       	ldi	r24, 0x12	; 18
    393a:	97 e0       	ldi	r25, 0x07	; 7
    393c:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>

		MCAL_UART_voidSendString(BACK);
    3940:	8e e6       	ldi	r24, 0x6E	; 110
    3942:	91 e0       	ldi	r25, 0x01	; 1
    3944:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>

		MCAL_UART_voidReceiveData(&LOC_u8Input);
    3948:	ce 01       	movw	r24, r28
    394a:	01 96       	adiw	r24, 0x01	; 1
    394c:	0e 94 c8 06 	call	0xd90	; 0xd90 <MCAL_UART_voidReceiveData>

		switch(LOC_u8Input)
    3950:	89 81       	ldd	r24, Y+1	; 0x01
    3952:	80 33       	cpi	r24, 0x30	; 48
    3954:	09 f4       	brne	.+2      	; 0x3958 <APP_Register_Page+0x82>
    3956:	0c c1       	rjmp	.+536    	; 0x3b70 <APP_Register_Page+0x29a>
    3958:	81 33       	cpi	r24, 0x31	; 49
    395a:	39 f7       	brne	.-50     	; 0x392a <APP_Register_Page+0x54>
		case '1':



			i = 1000;
			MCAL_UART_voidSendString((u8*)"Enter Your Username: ");
    395c:	83 e8       	ldi	r24, 0x83	; 131
    395e:	94 e0       	ldi	r25, 0x04	; 4
    3960:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
			do
			{
				MCAL_UART_voidReceiveData(&LOC_u8BufferA);
    3964:	c2 01       	movw	r24, r4
    3966:	0e 94 c8 06 	call	0xd90	; 0xd90 <MCAL_UART_voidReceiveData>
				MCAL_UART_voidTransmitData((LOC_u8BufferA));
    396a:	8a 81       	ldd	r24, Y+2	; 0x02
    396c:	0e 94 c1 06 	call	0xd82	; 0xd82 <MCAL_UART_voidTransmitData>
				LOC_u16ID = LOC_u16ID + ((LOC_u8BufferA - '0') * i);
    3970:	8a 81       	ldd	r24, Y+2	; 0x02
    3972:	90 e0       	ldi	r25, 0x00	; 0
    3974:	c0 97       	sbiw	r24, 0x30	; 48
    3976:	82 9d       	mul	r24, r2
    3978:	80 01       	movw	r16, r0
    397a:	83 9d       	mul	r24, r3
    397c:	10 0d       	add	r17, r0
    397e:	92 9d       	mul	r25, r2
    3980:	10 0d       	add	r17, r0
    3982:	11 24       	eor	r1, r1

			i = 1000;
			MCAL_UART_voidSendString((u8*)"Enter Your Username: ");
			do
			{
				MCAL_UART_voidReceiveData(&LOC_u8BufferA);
    3984:	c2 01       	movw	r24, r4
    3986:	0e 94 c8 06 	call	0xd90	; 0xd90 <MCAL_UART_voidReceiveData>
				MCAL_UART_voidTransmitData((LOC_u8BufferA));
    398a:	8a 81       	ldd	r24, Y+2	; 0x02
    398c:	0e 94 c1 06 	call	0xd82	; 0xd82 <MCAL_UART_voidTransmitData>
				LOC_u16ID = LOC_u16ID + ((LOC_u8BufferA - '0') * i);
    3990:	8a 81       	ldd	r24, Y+2	; 0x02
    3992:	90 e0       	ldi	r25, 0x00	; 0
    3994:	c0 97       	sbiw	r24, 0x30	; 48
    3996:	24 e6       	ldi	r18, 0x64	; 100
    3998:	30 e0       	ldi	r19, 0x00	; 0
    399a:	82 9f       	mul	r24, r18
    399c:	70 01       	movw	r14, r0
    399e:	83 9f       	mul	r24, r19
    39a0:	f0 0c       	add	r15, r0
    39a2:	92 9f       	mul	r25, r18
    39a4:	f0 0c       	add	r15, r0
    39a6:	11 24       	eor	r1, r1

			i = 1000;
			MCAL_UART_voidSendString((u8*)"Enter Your Username: ");
			do
			{
				MCAL_UART_voidReceiveData(&LOC_u8BufferA);
    39a8:	c2 01       	movw	r24, r4
    39aa:	0e 94 c8 06 	call	0xd90	; 0xd90 <MCAL_UART_voidReceiveData>
				MCAL_UART_voidTransmitData((LOC_u8BufferA));
    39ae:	8a 81       	ldd	r24, Y+2	; 0x02
    39b0:	0e 94 c1 06 	call	0xd82	; 0xd82 <MCAL_UART_voidTransmitData>
				LOC_u16ID = LOC_u16ID + ((LOC_u8BufferA - '0') * i);
    39b4:	8a 81       	ldd	r24, Y+2	; 0x02
    39b6:	90 e0       	ldi	r25, 0x00	; 0
    39b8:	c0 97       	sbiw	r24, 0x30	; 48
    39ba:	9c 01       	movw	r18, r24
    39bc:	22 0f       	add	r18, r18
    39be:	33 1f       	adc	r19, r19
    39c0:	22 0f       	add	r18, r18
    39c2:	33 1f       	adc	r19, r19
    39c4:	22 0f       	add	r18, r18
    39c6:	33 1f       	adc	r19, r19
    39c8:	88 0f       	add	r24, r24
    39ca:	99 1f       	adc	r25, r25
    39cc:	28 0f       	add	r18, r24
    39ce:	39 1f       	adc	r19, r25
    39d0:	2e 0d       	add	r18, r14
    39d2:	3f 1d       	adc	r19, r15
    39d4:	02 0f       	add	r16, r18
    39d6:	13 1f       	adc	r17, r19

			i = 1000;
			MCAL_UART_voidSendString((u8*)"Enter Your Username: ");
			do
			{
				MCAL_UART_voidReceiveData(&LOC_u8BufferA);
    39d8:	c2 01       	movw	r24, r4
    39da:	0e 94 c8 06 	call	0xd90	; 0xd90 <MCAL_UART_voidReceiveData>
				MCAL_UART_voidTransmitData((LOC_u8BufferA));
    39de:	8a 81       	ldd	r24, Y+2	; 0x02
    39e0:	0e 94 c1 06 	call	0xd82	; 0xd82 <MCAL_UART_voidTransmitData>
				LOC_u16ID = LOC_u16ID + ((LOC_u8BufferA - '0') * i);
    39e4:	8a 81       	ldd	r24, Y+2	; 0x02
    39e6:	a8 2e       	mov	r10, r24
    39e8:	bb 24       	eor	r11, r11
    39ea:	80 ed       	ldi	r24, 0xD0	; 208
    39ec:	9f ef       	ldi	r25, 0xFF	; 255
    39ee:	a8 0e       	add	r10, r24
    39f0:	b9 1e       	adc	r11, r25
    39f2:	a0 0e       	add	r10, r16
    39f4:	b1 1e       	adc	r11, r17
				i /= 10;

			}while(i != 0);

			MCAL_UART_voidSendString(GLOB_u8NewLine);
    39f6:	82 e1       	ldi	r24, 0x12	; 18
    39f8:	97 e0       	ldi	r25, 0x07	; 7
    39fa:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>

			LOC_u8CheckID = Check_AdminID(LOC_u16ID);
    39fe:	c5 01       	movw	r24, r10
    3a00:	0e 94 52 22 	call	0x44a4	; 0x44a4 <Check_AdminID>
			if(LOC_u8CheckID != ADMIN_NOT_FOUND)
    3a04:	8b 3b       	cpi	r24, 0xBB	; 187
    3a06:	51 f0       	breq	.+20     	; 0x3a1c <APP_Register_Page+0x146>
			{
				MCAL_UART_voidSendString((u8*)"USERNAME ALREADY EXIST!!!");
    3a08:	8e e9       	ldi	r24, 0x9E	; 158
    3a0a:	93 e0       	ldi	r25, 0x03	; 3
    3a0c:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
				MCAL_UART_voidSendString(GLOB_u8NewLine);
    3a10:	82 e1       	ldi	r24, 0x12	; 18
    3a12:	97 e0       	ldi	r25, 0x07	; 7
    3a14:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
				APP_Register_Page();
    3a18:	0e 94 6b 1c 	call	0x38d6	; 0x38d6 <APP_Register_Page>
			}
			else {/*Do Nothing*/}

			//		Pass:
			j = 1000;
			MCAL_UART_voidSendString((u8*)"Enter Your Password: ");
    3a1c:	88 eb       	ldi	r24, 0xB8	; 184
    3a1e:	93 e0       	ldi	r25, 0x03	; 3
    3a20:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
			do
			{
				MCAL_UART_voidReceiveData(&LOC_u8BufferB);
    3a24:	c3 01       	movw	r24, r6
    3a26:	0e 94 c8 06 	call	0xd90	; 0xd90 <MCAL_UART_voidReceiveData>
				MCAL_UART_voidTransmitData((LOC_u8BufferB));
    3a2a:	8b 81       	ldd	r24, Y+3	; 0x03
    3a2c:	0e 94 c1 06 	call	0xd82	; 0xd82 <MCAL_UART_voidTransmitData>
				LOC_u16Pass = LOC_u16Pass + ((LOC_u8BufferB - '0') * j);
    3a30:	8b 81       	ldd	r24, Y+3	; 0x03
    3a32:	90 e0       	ldi	r25, 0x00	; 0
    3a34:	c0 97       	sbiw	r24, 0x30	; 48
    3a36:	82 9d       	mul	r24, r2
    3a38:	80 01       	movw	r16, r0
    3a3a:	83 9d       	mul	r24, r3
    3a3c:	10 0d       	add	r17, r0
    3a3e:	92 9d       	mul	r25, r2
    3a40:	10 0d       	add	r17, r0
    3a42:	11 24       	eor	r1, r1
			//		Pass:
			j = 1000;
			MCAL_UART_voidSendString((u8*)"Enter Your Password: ");
			do
			{
				MCAL_UART_voidReceiveData(&LOC_u8BufferB);
    3a44:	c3 01       	movw	r24, r6
    3a46:	0e 94 c8 06 	call	0xd90	; 0xd90 <MCAL_UART_voidReceiveData>
				MCAL_UART_voidTransmitData((LOC_u8BufferB));
    3a4a:	8b 81       	ldd	r24, Y+3	; 0x03
    3a4c:	0e 94 c1 06 	call	0xd82	; 0xd82 <MCAL_UART_voidTransmitData>
				LOC_u16Pass = LOC_u16Pass + ((LOC_u8BufferB - '0') * j);
    3a50:	8b 81       	ldd	r24, Y+3	; 0x03
    3a52:	90 e0       	ldi	r25, 0x00	; 0
    3a54:	c0 97       	sbiw	r24, 0x30	; 48
    3a56:	24 e6       	ldi	r18, 0x64	; 100
    3a58:	30 e0       	ldi	r19, 0x00	; 0
    3a5a:	82 9f       	mul	r24, r18
    3a5c:	70 01       	movw	r14, r0
    3a5e:	83 9f       	mul	r24, r19
    3a60:	f0 0c       	add	r15, r0
    3a62:	92 9f       	mul	r25, r18
    3a64:	f0 0c       	add	r15, r0
    3a66:	11 24       	eor	r1, r1
			//		Pass:
			j = 1000;
			MCAL_UART_voidSendString((u8*)"Enter Your Password: ");
			do
			{
				MCAL_UART_voidReceiveData(&LOC_u8BufferB);
    3a68:	c3 01       	movw	r24, r6
    3a6a:	0e 94 c8 06 	call	0xd90	; 0xd90 <MCAL_UART_voidReceiveData>
				MCAL_UART_voidTransmitData((LOC_u8BufferB));
    3a6e:	8b 81       	ldd	r24, Y+3	; 0x03
    3a70:	0e 94 c1 06 	call	0xd82	; 0xd82 <MCAL_UART_voidTransmitData>
				LOC_u16Pass = LOC_u16Pass + ((LOC_u8BufferB - '0') * j);
    3a74:	8b 81       	ldd	r24, Y+3	; 0x03
    3a76:	90 e0       	ldi	r25, 0x00	; 0
    3a78:	c0 97       	sbiw	r24, 0x30	; 48
    3a7a:	9c 01       	movw	r18, r24
    3a7c:	22 0f       	add	r18, r18
    3a7e:	33 1f       	adc	r19, r19
    3a80:	22 0f       	add	r18, r18
    3a82:	33 1f       	adc	r19, r19
    3a84:	22 0f       	add	r18, r18
    3a86:	33 1f       	adc	r19, r19
    3a88:	88 0f       	add	r24, r24
    3a8a:	99 1f       	adc	r25, r25
    3a8c:	28 0f       	add	r18, r24
    3a8e:	39 1f       	adc	r19, r25
    3a90:	2e 0d       	add	r18, r14
    3a92:	3f 1d       	adc	r19, r15
    3a94:	02 0f       	add	r16, r18
    3a96:	13 1f       	adc	r17, r19
			//		Pass:
			j = 1000;
			MCAL_UART_voidSendString((u8*)"Enter Your Password: ");
			do
			{
				MCAL_UART_voidReceiveData(&LOC_u8BufferB);
    3a98:	c3 01       	movw	r24, r6
    3a9a:	0e 94 c8 06 	call	0xd90	; 0xd90 <MCAL_UART_voidReceiveData>
				MCAL_UART_voidTransmitData((LOC_u8BufferB));
    3a9e:	8b 81       	ldd	r24, Y+3	; 0x03
    3aa0:	0e 94 c1 06 	call	0xd82	; 0xd82 <MCAL_UART_voidTransmitData>
				LOC_u16Pass = LOC_u16Pass + ((LOC_u8BufferB - '0') * j);
    3aa4:	8b 81       	ldd	r24, Y+3	; 0x03
    3aa6:	c8 2e       	mov	r12, r24
    3aa8:	dd 24       	eor	r13, r13
    3aaa:	80 ed       	ldi	r24, 0xD0	; 208
    3aac:	9f ef       	ldi	r25, 0xFF	; 255
    3aae:	c8 0e       	add	r12, r24
    3ab0:	d9 1e       	adc	r13, r25
    3ab2:	c0 0e       	add	r12, r16
    3ab4:	d1 1e       	adc	r13, r17
				j /= 10;
			}while(j != 0);
			MCAL_UART_voidSendString(GLOB_u8NewLine);
    3ab6:	82 e1       	ldi	r24, 0x12	; 18
    3ab8:	97 e0       	ldi	r25, 0x07	; 7
    3aba:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>


			k = 1000;
			MCAL_UART_voidSendString((u8*)"Confirm Password: ");
    3abe:	8e ec       	ldi	r24, 0xCE	; 206
    3ac0:	93 e0       	ldi	r25, 0x03	; 3
    3ac2:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
			do
			{
				MCAL_UART_voidReceiveData(&LOC_u8BufferC);
    3ac6:	c4 01       	movw	r24, r8
    3ac8:	0e 94 c8 06 	call	0xd90	; 0xd90 <MCAL_UART_voidReceiveData>
				MCAL_UART_voidTransmitData((LOC_u8BufferC));
    3acc:	8c 81       	ldd	r24, Y+4	; 0x04
    3ace:	0e 94 c1 06 	call	0xd82	; 0xd82 <MCAL_UART_voidTransmitData>
				LOC_u16PassConfirm = LOC_u16PassConfirm + ((LOC_u8BufferC - '0') * k);
    3ad2:	8c 81       	ldd	r24, Y+4	; 0x04
    3ad4:	90 e0       	ldi	r25, 0x00	; 0
    3ad6:	c0 97       	sbiw	r24, 0x30	; 48
    3ad8:	82 9d       	mul	r24, r2
    3ada:	80 01       	movw	r16, r0
    3adc:	83 9d       	mul	r24, r3
    3ade:	10 0d       	add	r17, r0
    3ae0:	92 9d       	mul	r25, r2
    3ae2:	10 0d       	add	r17, r0
    3ae4:	11 24       	eor	r1, r1

			k = 1000;
			MCAL_UART_voidSendString((u8*)"Confirm Password: ");
			do
			{
				MCAL_UART_voidReceiveData(&LOC_u8BufferC);
    3ae6:	c4 01       	movw	r24, r8
    3ae8:	0e 94 c8 06 	call	0xd90	; 0xd90 <MCAL_UART_voidReceiveData>
				MCAL_UART_voidTransmitData((LOC_u8BufferC));
    3aec:	8c 81       	ldd	r24, Y+4	; 0x04
    3aee:	0e 94 c1 06 	call	0xd82	; 0xd82 <MCAL_UART_voidTransmitData>
				LOC_u16PassConfirm = LOC_u16PassConfirm + ((LOC_u8BufferC - '0') * k);
    3af2:	8c 81       	ldd	r24, Y+4	; 0x04
    3af4:	90 e0       	ldi	r25, 0x00	; 0
    3af6:	c0 97       	sbiw	r24, 0x30	; 48
    3af8:	24 e6       	ldi	r18, 0x64	; 100
    3afa:	30 e0       	ldi	r19, 0x00	; 0
    3afc:	82 9f       	mul	r24, r18
    3afe:	70 01       	movw	r14, r0
    3b00:	83 9f       	mul	r24, r19
    3b02:	f0 0c       	add	r15, r0
    3b04:	92 9f       	mul	r25, r18
    3b06:	f0 0c       	add	r15, r0
    3b08:	11 24       	eor	r1, r1

			k = 1000;
			MCAL_UART_voidSendString((u8*)"Confirm Password: ");
			do
			{
				MCAL_UART_voidReceiveData(&LOC_u8BufferC);
    3b0a:	c4 01       	movw	r24, r8
    3b0c:	0e 94 c8 06 	call	0xd90	; 0xd90 <MCAL_UART_voidReceiveData>
				MCAL_UART_voidTransmitData((LOC_u8BufferC));
    3b10:	8c 81       	ldd	r24, Y+4	; 0x04
    3b12:	0e 94 c1 06 	call	0xd82	; 0xd82 <MCAL_UART_voidTransmitData>
				LOC_u16PassConfirm = LOC_u16PassConfirm + ((LOC_u8BufferC - '0') * k);
    3b16:	8c 81       	ldd	r24, Y+4	; 0x04
    3b18:	90 e0       	ldi	r25, 0x00	; 0
    3b1a:	c0 97       	sbiw	r24, 0x30	; 48
    3b1c:	9c 01       	movw	r18, r24
    3b1e:	22 0f       	add	r18, r18
    3b20:	33 1f       	adc	r19, r19
    3b22:	22 0f       	add	r18, r18
    3b24:	33 1f       	adc	r19, r19
    3b26:	22 0f       	add	r18, r18
    3b28:	33 1f       	adc	r19, r19
    3b2a:	88 0f       	add	r24, r24
    3b2c:	99 1f       	adc	r25, r25
    3b2e:	28 0f       	add	r18, r24
    3b30:	39 1f       	adc	r19, r25
    3b32:	2e 0d       	add	r18, r14
    3b34:	3f 1d       	adc	r19, r15
    3b36:	02 0f       	add	r16, r18
    3b38:	13 1f       	adc	r17, r19

			k = 1000;
			MCAL_UART_voidSendString((u8*)"Confirm Password: ");
			do
			{
				MCAL_UART_voidReceiveData(&LOC_u8BufferC);
    3b3a:	c4 01       	movw	r24, r8
    3b3c:	0e 94 c8 06 	call	0xd90	; 0xd90 <MCAL_UART_voidReceiveData>
				MCAL_UART_voidTransmitData((LOC_u8BufferC));
    3b40:	8c 81       	ldd	r24, Y+4	; 0x04
    3b42:	0e 94 c1 06 	call	0xd82	; 0xd82 <MCAL_UART_voidTransmitData>
				LOC_u16PassConfirm = LOC_u16PassConfirm + ((LOC_u8BufferC - '0') * k);
    3b46:	8c 81       	ldd	r24, Y+4	; 0x04
    3b48:	90 e0       	ldi	r25, 0x00	; 0
    3b4a:	c0 97       	sbiw	r24, 0x30	; 48
    3b4c:	08 0f       	add	r16, r24
    3b4e:	19 1f       	adc	r17, r25
				k /= 10;
			}while(k != 0);

			MCAL_UART_voidSendString(GLOB_u8NewLine);
    3b50:	82 e1       	ldi	r24, 0x12	; 18
    3b52:	97 e0       	ldi	r25, 0x07	; 7
    3b54:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
			if(LOC_u16PassConfirm == LOC_u16Pass)
    3b58:	c0 16       	cp	r12, r16
    3b5a:	d1 06       	cpc	r13, r17
    3b5c:	79 f1       	breq	.+94     	; 0x3bbc <APP_Register_Page+0x2e6>
				MCAL_UART_voidSendString(((u8*)"Admin Registered Successfully"));
				MCAL_UART_voidSendString(GLOB_u8NewLine);
			}
			else
			{
				MCAL_UART_voidSendString((u8*)"Passwords Doesn't Match!!!");
    3b5e:	8e ef       	ldi	r24, 0xFE	; 254
    3b60:	93 e0       	ldi	r25, 0x03	; 3
    3b62:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
				MCAL_UART_voidSendString(GLOB_u8NewLine);
    3b66:	82 e1       	ldi	r24, 0x12	; 18
    3b68:	97 e0       	ldi	r25, 0x07	; 7
    3b6a:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
    3b6e:	dd ce       	rjmp	.-582    	; 0x392a <APP_Register_Page+0x54>
			}

			break;

		case '0':
			MCAL_UART_voidTransmitData('0');
    3b70:	80 e3       	ldi	r24, 0x30	; 48
    3b72:	0e 94 c1 06 	call	0xd82	; 0xd82 <MCAL_UART_voidTransmitData>
			MCAL_UART_voidSendString(GLOB_u8NewLine);
    3b76:	82 e1       	ldi	r24, 0x12	; 18
    3b78:	97 e0       	ldi	r25, 0x07	; 7
    3b7a:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
			MCAL_UART_voidSendString((u8*)"Back");
    3b7e:	89 ee       	ldi	r24, 0xE9	; 233
    3b80:	91 e0       	ldi	r25, 0x01	; 1
    3b82:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
			MCAL_UART_voidSendString(GLOB_u8NewLine);
    3b86:	82 e1       	ldi	r24, 0x12	; 18
    3b88:	97 e0       	ldi	r25, 0x07	; 7
    3b8a:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>

		}
	}while(LOC_u8BackFlag != 1);


}
    3b8e:	0f 90       	pop	r0
    3b90:	0f 90       	pop	r0
    3b92:	0f 90       	pop	r0
    3b94:	0f 90       	pop	r0
    3b96:	cf 91       	pop	r28
    3b98:	df 91       	pop	r29
    3b9a:	1f 91       	pop	r17
    3b9c:	0f 91       	pop	r16
    3b9e:	ff 90       	pop	r15
    3ba0:	ef 90       	pop	r14
    3ba2:	df 90       	pop	r13
    3ba4:	cf 90       	pop	r12
    3ba6:	bf 90       	pop	r11
    3ba8:	af 90       	pop	r10
    3baa:	9f 90       	pop	r9
    3bac:	8f 90       	pop	r8
    3bae:	7f 90       	pop	r7
    3bb0:	6f 90       	pop	r6
    3bb2:	5f 90       	pop	r5
    3bb4:	4f 90       	pop	r4
    3bb6:	3f 90       	pop	r3
    3bb8:	2f 90       	pop	r2
    3bba:	08 95       	ret
			}while(k != 0);

			MCAL_UART_voidSendString(GLOB_u8NewLine);
			if(LOC_u16PassConfirm == LOC_u16Pass)
			{
				LOC_u8AdminEnteryFlag = Add_Admin(LOC_u16ID,LOC_u16Pass);
    3bbc:	c5 01       	movw	r24, r10
    3bbe:	b6 01       	movw	r22, r12
    3bc0:	0e 94 4d 25 	call	0x4a9a	; 0x4a9a <Add_Admin>
				MCAL_UART_voidSendString(((u8*)"Admin Registered Successfully"));
    3bc4:	89 e9       	ldi	r24, 0x99	; 153
    3bc6:	94 e0       	ldi	r25, 0x04	; 4
    3bc8:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
				MCAL_UART_voidSendString(GLOB_u8NewLine);
    3bcc:	82 e1       	ldi	r24, 0x12	; 18
    3bce:	97 e0       	ldi	r25, 0x07	; 7
    3bd0:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
    3bd4:	aa ce       	rjmp	.-684    	; 0x392a <APP_Register_Page+0x54>

00003bd6 <APP_Init>:
u8 volatile GLOB_u8Flag_Dimmer;

void APP_Init(void)
{
	//Communication Protocols Init:
	MCAL_TWI_voidMasterInit();
    3bd6:	0e 94 69 07 	call	0xed2	; 0xed2 <MCAL_TWI_voidMasterInit>
	MCAL_UART_voidInit();
    3bda:	0e 94 b9 06 	call	0xd72	; 0xd72 <MCAL_UART_voidInit>
	//Door Init;
	HAL_Servo_voidServoInit();
    3bde:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <HAL_Servo_voidServoInit>
	//LEDs Init:
	HAL_LED_u8LedInit(LED1_Port,LED1_Pin);
    3be2:	80 e0       	ldi	r24, 0x00	; 0
    3be4:	63 e0       	ldi	r22, 0x03	; 3
    3be6:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <HAL_LED_u8LedInit>
	HAL_LED_u8LedInit(LED2_Port,LED2_Pin);
    3bea:	80 e0       	ldi	r24, 0x00	; 0
    3bec:	64 e0       	ldi	r22, 0x04	; 4
    3bee:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <HAL_LED_u8LedInit>
	HAL_LED_u8LedInit(LED3_Port,LED3_Pin);
    3bf2:	80 e0       	ldi	r24, 0x00	; 0
    3bf4:	65 e0       	ldi	r22, 0x05	; 5
    3bf6:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <HAL_LED_u8LedInit>
	HAL_LED_u8LedInit(LED4_Port,LED4_Pin);
    3bfa:	80 e0       	ldi	r24, 0x00	; 0
    3bfc:	66 e0       	ldi	r22, 0x06	; 6
    3bfe:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <HAL_LED_u8LedInit>
	HAL_LED_u8LedInit(LED5_Port,LED5_Pin);
    3c02:	80 e0       	ldi	r24, 0x00	; 0
    3c04:	67 e0       	ldi	r22, 0x07	; 7
    3c06:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <HAL_LED_u8LedInit>
	//Breakdown Alarm Init:
	HAL_Buzzer_u8BuzzerInit(Buzzer_Port,Buzzer_Pin);
    3c0a:	81 e0       	ldi	r24, 0x01	; 1
    3c0c:	60 e0       	ldi	r22, 0x00	; 0
    3c0e:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <HAL_Buzzer_u8BuzzerInit>
	//Dimmer Init:
	HAL_MCP4018_POT_voidWriteStep(0);
    3c12:	80 e0       	ldi	r24, 0x00	; 0
    3c14:	0e 94 6c 0e 	call	0x1cd8	; 0x1cd8 <HAL_MCP4018_POT_voidWriteStep>
	//AC Init:
	APP_LM35WithDCmotor_Void_LM35WithDCmotorinit();
    3c18:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <APP_LM35WithDCmotor_Void_LM35WithDCmotorinit>
	MCAL_TIMER_Timer0_Init(NORMAL,CLK_PRE1024,NORMAL_OC0);
    3c1c:	80 e0       	ldi	r24, 0x00	; 0
    3c1e:	65 e0       	ldi	r22, 0x05	; 5
    3c20:	40 e0       	ldi	r20, 0x00	; 0
    3c22:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <MCAL_TIMER_Timer0_Init>
	MCAL_TIMER_voidTimer0_OVFSetCallBack(APP_AC_Check);
    3c26:	88 e1       	ldi	r24, 0x18	; 24
    3c28:	91 e1       	ldi	r25, 0x11	; 17
    3c2a:	0e 94 99 08 	call	0x1132	; 0x1132 <MCAL_TIMER_voidTimer0_OVFSetCallBack>
	/*
	MCAL_TIMER_Timer0_InterruptOVF_Enable();
	MCAL_Interrupt_GIE_Enable();
	 */

}
    3c2e:	08 95       	ret

00003c30 <APP_UserManagement_Page>:
	}while(LOC_u8LogoutFlag != 1);

}

void APP_UserManagement_Page(void)
{
    3c30:	cf 92       	push	r12
    3c32:	df 92       	push	r13
    3c34:	ef 92       	push	r14
    3c36:	ff 92       	push	r15
    3c38:	0f 93       	push	r16
    3c3a:	1f 93       	push	r17
    3c3c:	df 93       	push	r29
    3c3e:	cf 93       	push	r28
    3c40:	00 d0       	rcall	.+0      	; 0x3c42 <APP_UserManagement_Page+0x12>
    3c42:	cd b7       	in	r28, 0x3d	; 61
    3c44:	de b7       	in	r29, 0x3e	; 62
	u8 LOC_u8Option = 0 ,LOC_u8BackFlag = 0 ;
    3c46:	19 82       	std	Y+1, r1	; 0x01
    3c48:	7e 01       	movw	r14, r28
    3c4a:	08 94       	sec
    3c4c:	e1 1c       	adc	r14, r1
    3c4e:	f1 1c       	adc	r15, r1
	u8 LOC_u8Option = 0;
	MCAL_UART_voidSendString((u8*)"1.Confirm ");
	MCAL_UART_voidSendString(GLOB_u8NewLine);
	MCAL_UART_voidSendString((u8*)"0.Cancel ");
	MCAL_UART_voidSendString(GLOB_u8NewLine);
	MCAL_UART_voidReceiveData(&LOC_u8Option);
    3c50:	82 e0       	ldi	r24, 0x02	; 2
    3c52:	c8 2e       	mov	r12, r24
    3c54:	d1 2c       	mov	r13, r1
    3c56:	cc 0e       	add	r12, r28
    3c58:	dd 1e       	adc	r13, r29
    3c5a:	00 e9       	ldi	r16, 0x90	; 144
    3c5c:	11 e0       	ldi	r17, 0x01	; 1
	u8 LOC_u8Option = 0 ,LOC_u8BackFlag = 0 ;
	do
	{


		MCAL_UART_voidSendString((u8*)"1 --> New User\r\n");
    3c5e:	82 e7       	ldi	r24, 0x72	; 114
    3c60:	93 e0       	ldi	r25, 0x03	; 3
    3c62:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
		MCAL_UART_voidSendString((u8*)"2 --> Remove User\r\n");
    3c66:	87 eb       	ldi	r24, 0xB7	; 183
    3c68:	94 e0       	ldi	r25, 0x04	; 4
    3c6a:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
		MCAL_UART_voidSendString((u8*)"3 --> Remove All Users\r\n");
    3c6e:	8b ec       	ldi	r24, 0xCB	; 203
    3c70:	94 e0       	ldi	r25, 0x04	; 4
    3c72:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
		MCAL_UART_voidSendString(BACK);
    3c76:	8e e6       	ldi	r24, 0x6E	; 110
    3c78:	91 e0       	ldi	r25, 0x01	; 1
    3c7a:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>

		MCAL_UART_voidReceiveData(&LOC_u8Option);
    3c7e:	c7 01       	movw	r24, r14
    3c80:	0e 94 c8 06 	call	0xd90	; 0xd90 <MCAL_UART_voidReceiveData>

		switch(LOC_u8Option)
    3c84:	89 81       	ldd	r24, Y+1	; 0x01
    3c86:	81 33       	cpi	r24, 0x31	; 49
    3c88:	09 f4       	brne	.+2      	; 0x3c8c <APP_UserManagement_Page+0x5c>
    3c8a:	7c c0       	rjmp	.+248    	; 0x3d84 <APP_UserManagement_Page+0x154>
    3c8c:	82 33       	cpi	r24, 0x32	; 50
    3c8e:	e0 f4       	brcc	.+56     	; 0x3cc8 <APP_UserManagement_Page+0x98>
    3c90:	80 33       	cpi	r24, 0x30	; 48
    3c92:	29 f7       	brne	.-54     	; 0x3c5e <APP_UserManagement_Page+0x2e>
			MCAL_UART_voidSendString(GLOB_u8NewLine);
			//		Delete all users
			APP_DeleteAllUsers_Page();
			break;
		case '0':
			MCAL_UART_voidTransmitData('0');
    3c94:	80 e3       	ldi	r24, 0x30	; 48
    3c96:	0e 94 c1 06 	call	0xd82	; 0xd82 <MCAL_UART_voidTransmitData>
			MCAL_UART_voidSendString(GLOB_u8NewLine);
    3c9a:	82 e1       	ldi	r24, 0x12	; 18
    3c9c:	97 e0       	ldi	r25, 0x07	; 7
    3c9e:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
			MCAL_UART_voidSendString((u8*)"Back");
    3ca2:	89 ee       	ldi	r24, 0xE9	; 233
    3ca4:	91 e0       	ldi	r25, 0x01	; 1
    3ca6:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
			MCAL_UART_voidSendString(GLOB_u8NewLine);
    3caa:	82 e1       	ldi	r24, 0x12	; 18
    3cac:	97 e0       	ldi	r25, 0x07	; 7
    3cae:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
			break;
		}

	}
	while(LOC_u8BackFlag != 1);
}
    3cb2:	0f 90       	pop	r0
    3cb4:	0f 90       	pop	r0
    3cb6:	cf 91       	pop	r28
    3cb8:	df 91       	pop	r29
    3cba:	1f 91       	pop	r17
    3cbc:	0f 91       	pop	r16
    3cbe:	ff 90       	pop	r15
    3cc0:	ef 90       	pop	r14
    3cc2:	df 90       	pop	r13
    3cc4:	cf 90       	pop	r12
    3cc6:	08 95       	ret
		MCAL_UART_voidSendString((u8*)"3 --> Remove All Users\r\n");
		MCAL_UART_voidSendString(BACK);

		MCAL_UART_voidReceiveData(&LOC_u8Option);

		switch(LOC_u8Option)
    3cc8:	82 33       	cpi	r24, 0x32	; 50
    3cca:	09 f4       	brne	.+2      	; 0x3cce <APP_UserManagement_Page+0x9e>
    3ccc:	49 c0       	rjmp	.+146    	; 0x3d60 <APP_UserManagement_Page+0x130>
    3cce:	83 33       	cpi	r24, 0x33	; 51
    3cd0:	31 f6       	brne	.-116    	; 0x3c5e <APP_UserManagement_Page+0x2e>
			MCAL_UART_voidSendString((u8*)"Remove/Delete User");
			MCAL_UART_voidSendString(GLOB_u8NewLine);
			APP_RemoveUser_Page();	//Function to remove user with given ID
			break;
		case '3':
			MCAL_UART_voidTransmitData('3');
    3cd2:	83 e3       	ldi	r24, 0x33	; 51
    3cd4:	0e 94 c1 06 	call	0xd82	; 0xd82 <MCAL_UART_voidTransmitData>
			MCAL_UART_voidSendString(GLOB_u8NewLine);
    3cd8:	82 e1       	ldi	r24, 0x12	; 18
    3cda:	97 e0       	ldi	r25, 0x07	; 7
    3cdc:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
			MCAL_UART_voidSendString((u8*)"Remove/Delete ALL Users");
    3ce0:	84 e0       	ldi	r24, 0x04	; 4
    3ce2:	95 e0       	ldi	r25, 0x05	; 5
    3ce4:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
			MCAL_UART_voidSendString(GLOB_u8NewLine);
    3ce8:	82 e1       	ldi	r24, 0x12	; 18
    3cea:	97 e0       	ldi	r25, 0x07	; 7
    3cec:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>

}

void APP_DeleteAllUsers_Page(void)
{
	u8 LOC_u8Option = 0;
    3cf0:	1a 82       	std	Y+2, r1	; 0x02
	MCAL_UART_voidSendString((u8*)"1.Confirm ");
    3cf2:	8f e8       	ldi	r24, 0x8F	; 143
    3cf4:	92 e0       	ldi	r25, 0x02	; 2
    3cf6:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
	MCAL_UART_voidSendString(GLOB_u8NewLine);
    3cfa:	82 e1       	ldi	r24, 0x12	; 18
    3cfc:	97 e0       	ldi	r25, 0x07	; 7
    3cfe:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
	MCAL_UART_voidSendString((u8*)"0.Cancel ");
    3d02:	8a e9       	ldi	r24, 0x9A	; 154
    3d04:	92 e0       	ldi	r25, 0x02	; 2
    3d06:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
	MCAL_UART_voidSendString(GLOB_u8NewLine);
    3d0a:	82 e1       	ldi	r24, 0x12	; 18
    3d0c:	97 e0       	ldi	r25, 0x07	; 7
    3d0e:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
	MCAL_UART_voidReceiveData(&LOC_u8Option);
    3d12:	c6 01       	movw	r24, r12
    3d14:	0e 94 c8 06 	call	0xd90	; 0xd90 <MCAL_UART_voidReceiveData>

	switch(LOC_u8Option)
    3d18:	8a 81       	ldd	r24, Y+2	; 0x02
    3d1a:	80 33       	cpi	r24, 0x30	; 48
    3d1c:	09 f4       	brne	.+2      	; 0x3d20 <APP_UserManagement_Page+0xf0>
    3d1e:	44 c0       	rjmp	.+136    	; 0x3da8 <APP_UserManagement_Page+0x178>
    3d20:	81 33       	cpi	r24, 0x31	; 49
    3d22:	09 f0       	breq	.+2      	; 0x3d26 <APP_UserManagement_Page+0xf6>
    3d24:	9c cf       	rjmp	.-200    	; 0x3c5e <APP_UserManagement_Page+0x2e>
	{
	case '1':
		MCAL_UART_voidTransmitData('1');
    3d26:	81 e3       	ldi	r24, 0x31	; 49
    3d28:	0e 94 c1 06 	call	0xd82	; 0xd82 <MCAL_UART_voidTransmitData>
		MCAL_UART_voidSendString(GLOB_u8NewLine);
    3d2c:	82 e1       	ldi	r24, 0x12	; 18
    3d2e:	97 e0       	ldi	r25, 0x07	; 7
    3d30:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
		MCAL_UART_voidSendString((u8*)"Deleting ...");
    3d34:	84 ea       	ldi	r24, 0xA4	; 164
    3d36:	92 e0       	ldi	r25, 0x02	; 2
    3d38:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
		MCAL_UART_voidSendString(GLOB_u8NewLine);
    3d3c:	82 e1       	ldi	r24, 0x12	; 18
    3d3e:	97 e0       	ldi	r25, 0x07	; 7
    3d40:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
		APP_Registeration_voidDeleteAllUsers();
    3d44:	0e 94 24 23 	call	0x4648	; 0x4648 <APP_Registeration_voidDeleteAllUsers>
    3d48:	20 e0       	ldi	r18, 0x00	; 0
    3d4a:	30 e0       	ldi	r19, 0x00	; 0
    3d4c:	c8 01       	movw	r24, r16
    3d4e:	01 97       	sbiw	r24, 0x01	; 1
    3d50:	f1 f7       	brne	.-4      	; 0x3d4e <APP_UserManagement_Page+0x11e>
    3d52:	2f 5f       	subi	r18, 0xFF	; 255
    3d54:	3f 4f       	sbci	r19, 0xFF	; 255
    3d56:	87 e2       	ldi	r24, 0x27	; 39
    3d58:	20 31       	cpi	r18, 0x10	; 16
    3d5a:	38 07       	cpc	r19, r24
    3d5c:	b9 f7       	brne	.-18     	; 0x3d4c <APP_UserManagement_Page+0x11c>
    3d5e:	7f cf       	rjmp	.-258    	; 0x3c5e <APP_UserManagement_Page+0x2e>
			//		Registering user (Same as Admin but different functions)
			APP_RegisterNewUser_Page();

			break;
		case '2':
			MCAL_UART_voidTransmitData('2');
    3d60:	82 e3       	ldi	r24, 0x32	; 50
    3d62:	0e 94 c1 06 	call	0xd82	; 0xd82 <MCAL_UART_voidTransmitData>
			MCAL_UART_voidSendString(GLOB_u8NewLine);
    3d66:	82 e1       	ldi	r24, 0x12	; 18
    3d68:	97 e0       	ldi	r25, 0x07	; 7
    3d6a:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
			MCAL_UART_voidSendString((u8*)"Remove/Delete User");
    3d6e:	81 ef       	ldi	r24, 0xF1	; 241
    3d70:	94 e0       	ldi	r25, 0x04	; 4
    3d72:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
			MCAL_UART_voidSendString(GLOB_u8NewLine);
    3d76:	82 e1       	ldi	r24, 0x12	; 18
    3d78:	97 e0       	ldi	r25, 0x07	; 7
    3d7a:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
			APP_RemoveUser_Page();	//Function to remove user with given ID
    3d7e:	0e 94 cb 18 	call	0x3196	; 0x3196 <APP_RemoveUser_Page>
    3d82:	6d cf       	rjmp	.-294    	; 0x3c5e <APP_UserManagement_Page+0x2e>
		MCAL_UART_voidReceiveData(&LOC_u8Option);

		switch(LOC_u8Option)
		{
		case '1':
			MCAL_UART_voidTransmitData('1');
    3d84:	81 e3       	ldi	r24, 0x31	; 49
    3d86:	0e 94 c1 06 	call	0xd82	; 0xd82 <MCAL_UART_voidTransmitData>
			MCAL_UART_voidSendString(GLOB_u8NewLine);
    3d8a:	82 e1       	ldi	r24, 0x12	; 18
    3d8c:	97 e0       	ldi	r25, 0x07	; 7
    3d8e:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
			MCAL_UART_voidSendString((u8*)"Add New User");
    3d92:	84 ee       	ldi	r24, 0xE4	; 228
    3d94:	94 e0       	ldi	r25, 0x04	; 4
    3d96:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
			MCAL_UART_voidSendString(GLOB_u8NewLine);
    3d9a:	82 e1       	ldi	r24, 0x12	; 18
    3d9c:	97 e0       	ldi	r25, 0x07	; 7
    3d9e:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>

			//		Registering user (Same as Admin but different functions)
			APP_RegisterNewUser_Page();
    3da2:	0e 94 01 1a 	call	0x3402	; 0x3402 <APP_RegisterNewUser_Page>
    3da6:	5b cf       	rjmp	.-330    	; 0x3c5e <APP_UserManagement_Page+0x2e>
		APP_Registeration_voidDeleteAllUsers();
		_delay_ms(1000);

		break;
	case '0':
		MCAL_UART_voidTransmitData('0');
    3da8:	80 e3       	ldi	r24, 0x30	; 48
    3daa:	0e 94 c1 06 	call	0xd82	; 0xd82 <MCAL_UART_voidTransmitData>
		MCAL_UART_voidSendString(GLOB_u8NewLine);
    3dae:	82 e1       	ldi	r24, 0x12	; 18
    3db0:	97 e0       	ldi	r25, 0x07	; 7
    3db2:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
		MCAL_UART_voidSendString((u8*)"Cancel ...");
    3db6:	81 eb       	ldi	r24, 0xB1	; 177
    3db8:	92 e0       	ldi	r25, 0x02	; 2
    3dba:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
		MCAL_UART_voidSendString(GLOB_u8NewLine);
    3dbe:	82 e1       	ldi	r24, 0x12	; 18
    3dc0:	97 e0       	ldi	r25, 0x07	; 7
    3dc2:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
    3dc6:	20 e0       	ldi	r18, 0x00	; 0
    3dc8:	30 e0       	ldi	r19, 0x00	; 0
    3dca:	c8 01       	movw	r24, r16
    3dcc:	01 97       	sbiw	r24, 0x01	; 1
    3dce:	f1 f7       	brne	.-4      	; 0x3dcc <APP_UserManagement_Page+0x19c>
    3dd0:	2f 5f       	subi	r18, 0xFF	; 255
    3dd2:	3f 4f       	sbci	r19, 0xFF	; 255
    3dd4:	87 e2       	ldi	r24, 0x27	; 39
    3dd6:	20 31       	cpi	r18, 0x10	; 16
    3dd8:	38 07       	cpc	r19, r24
    3dda:	b9 f7       	brne	.-18     	; 0x3dca <APP_UserManagement_Page+0x19a>
    3ddc:	40 cf       	rjmp	.-384    	; 0x3c5e <APP_UserManagement_Page+0x2e>

00003dde <APP_Options_Page>:

}


void APP_Options_Page(void)
{
    3dde:	0f 93       	push	r16
    3de0:	1f 93       	push	r17
    3de2:	df 93       	push	r29
    3de4:	cf 93       	push	r28
    3de6:	0f 92       	push	r0
    3de8:	cd b7       	in	r28, 0x3d	; 61
    3dea:	de b7       	in	r29, 0x3e	; 62
	u8 LOC_u8Option = 0;
    3dec:	19 82       	std	Y+1, r1	; 0x01
    3dee:	8e 01       	movw	r16, r28
    3df0:	0f 5f       	subi	r16, 0xFF	; 255
    3df2:	1f 4f       	sbci	r17, 0xFF	; 255
	u8 LOC_u8LogoutFlag = 0;
	do
	{
		APP_LM35WithDCmotor_Void_LM35WithDCmotorOnOff();
    3df4:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <APP_LM35WithDCmotor_Void_LM35WithDCmotorOnOff>
		MCAL_UART_voidSendString((u8*)"1 --> User Management");
    3df8:	8c e1       	ldi	r24, 0x1C	; 28
    3dfa:	95 e0       	ldi	r25, 0x05	; 5
    3dfc:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
		MCAL_UART_voidSendString(GLOB_u8NewLine);
    3e00:	82 e1       	ldi	r24, 0x12	; 18
    3e02:	97 e0       	ldi	r25, 0x07	; 7
    3e04:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
		MCAL_UART_voidSendString((u8*)"2 --> Devices");
    3e08:	82 e3       	ldi	r24, 0x32	; 50
    3e0a:	95 e0       	ldi	r25, 0x05	; 5
    3e0c:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
		MCAL_UART_voidSendString(GLOB_u8NewLine);
    3e10:	82 e1       	ldi	r24, 0x12	; 18
    3e12:	97 e0       	ldi	r25, 0x07	; 7
    3e14:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
		MCAL_UART_voidSendString((u8*)"3 --> Door");
    3e18:	80 e4       	ldi	r24, 0x40	; 64
    3e1a:	95 e0       	ldi	r25, 0x05	; 5
    3e1c:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
		MCAL_UART_voidSendString(GLOB_u8NewLine);
    3e20:	82 e1       	ldi	r24, 0x12	; 18
    3e22:	97 e0       	ldi	r25, 0x07	; 7
    3e24:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
		MCAL_UART_voidSendString((u8*)"0 --> Logout");
    3e28:	8b e4       	ldi	r24, 0x4B	; 75
    3e2a:	95 e0       	ldi	r25, 0x05	; 5
    3e2c:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
		MCAL_UART_voidSendString(GLOB_u8NewLine);
    3e30:	82 e1       	ldi	r24, 0x12	; 18
    3e32:	97 e0       	ldi	r25, 0x07	; 7
    3e34:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>

		MCAL_UART_voidReceiveData(&LOC_u8Option);
    3e38:	c8 01       	movw	r24, r16
    3e3a:	0e 94 c8 06 	call	0xd90	; 0xd90 <MCAL_UART_voidReceiveData>
		switch(LOC_u8Option)
    3e3e:	89 81       	ldd	r24, Y+1	; 0x01
    3e40:	81 33       	cpi	r24, 0x31	; 49
    3e42:	09 f4       	brne	.+2      	; 0x3e46 <APP_Options_Page+0x68>
    3e44:	70 c0       	rjmp	.+224    	; 0x3f26 <APP_Options_Page+0x148>
    3e46:	82 33       	cpi	r24, 0x32	; 50
    3e48:	08 f0       	brcs	.+2      	; 0x3e4c <APP_Options_Page+0x6e>
    3e4a:	54 c0       	rjmp	.+168    	; 0x3ef4 <APP_Options_Page+0x116>
    3e4c:	80 33       	cpi	r24, 0x30	; 48
    3e4e:	91 f6       	brne	.-92     	; 0x3df4 <APP_Options_Page+0x16>
			MCAL_UART_voidTransmitData('3');
			MCAL_UART_voidSendString(GLOB_u8NewLine);
			APP_DoorControl_Page();
			break;
		case '0':
			MCAL_UART_voidTransmitData('0');
    3e50:	80 e3       	ldi	r24, 0x30	; 48
    3e52:	0e 94 c1 06 	call	0xd82	; 0xd82 <MCAL_UART_voidTransmitData>
			MCAL_UART_voidSendString(GLOB_u8NewLine);
    3e56:	82 e1       	ldi	r24, 0x12	; 18
    3e58:	97 e0       	ldi	r25, 0x07	; 7
    3e5a:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
			//		Logout code
			MCAL_UART_voidSendString((u8*)"Logging Out");
    3e5e:	88 e5       	ldi	r24, 0x58	; 88
    3e60:	95 e0       	ldi	r25, 0x05	; 5
    3e62:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
    3e66:	20 e0       	ldi	r18, 0x00	; 0
    3e68:	30 e0       	ldi	r19, 0x00	; 0
    3e6a:	40 e9       	ldi	r20, 0x90	; 144
    3e6c:	51 e0       	ldi	r21, 0x01	; 1
    3e6e:	ca 01       	movw	r24, r20
    3e70:	01 97       	sbiw	r24, 0x01	; 1
    3e72:	f1 f7       	brne	.-4      	; 0x3e70 <APP_Options_Page+0x92>
    3e74:	2f 5f       	subi	r18, 0xFF	; 255
    3e76:	3f 4f       	sbci	r19, 0xFF	; 255
    3e78:	83 e0       	ldi	r24, 0x03	; 3
    3e7a:	28 3e       	cpi	r18, 0xE8	; 232
    3e7c:	38 07       	cpc	r19, r24
    3e7e:	b9 f7       	brne	.-18     	; 0x3e6e <APP_Options_Page+0x90>
			_delay_ms(100);
			MCAL_UART_voidTransmitData('.');
    3e80:	8e e2       	ldi	r24, 0x2E	; 46
    3e82:	0e 94 c1 06 	call	0xd82	; 0xd82 <MCAL_UART_voidTransmitData>
    3e86:	20 e0       	ldi	r18, 0x00	; 0
    3e88:	30 e0       	ldi	r19, 0x00	; 0
    3e8a:	40 e9       	ldi	r20, 0x90	; 144
    3e8c:	51 e0       	ldi	r21, 0x01	; 1
    3e8e:	ca 01       	movw	r24, r20
    3e90:	01 97       	sbiw	r24, 0x01	; 1
    3e92:	f1 f7       	brne	.-4      	; 0x3e90 <APP_Options_Page+0xb2>
    3e94:	2f 5f       	subi	r18, 0xFF	; 255
    3e96:	3f 4f       	sbci	r19, 0xFF	; 255
    3e98:	83 e0       	ldi	r24, 0x03	; 3
    3e9a:	28 3e       	cpi	r18, 0xE8	; 232
    3e9c:	38 07       	cpc	r19, r24
    3e9e:	b9 f7       	brne	.-18     	; 0x3e8e <APP_Options_Page+0xb0>
			_delay_ms(100);
			MCAL_UART_voidTransmitData('.');
    3ea0:	8e e2       	ldi	r24, 0x2E	; 46
    3ea2:	0e 94 c1 06 	call	0xd82	; 0xd82 <MCAL_UART_voidTransmitData>
    3ea6:	20 e0       	ldi	r18, 0x00	; 0
    3ea8:	30 e0       	ldi	r19, 0x00	; 0
    3eaa:	40 e9       	ldi	r20, 0x90	; 144
    3eac:	51 e0       	ldi	r21, 0x01	; 1
    3eae:	ca 01       	movw	r24, r20
    3eb0:	01 97       	sbiw	r24, 0x01	; 1
    3eb2:	f1 f7       	brne	.-4      	; 0x3eb0 <APP_Options_Page+0xd2>
    3eb4:	2f 5f       	subi	r18, 0xFF	; 255
    3eb6:	3f 4f       	sbci	r19, 0xFF	; 255
    3eb8:	83 e0       	ldi	r24, 0x03	; 3
    3eba:	28 3e       	cpi	r18, 0xE8	; 232
    3ebc:	38 07       	cpc	r19, r24
    3ebe:	b9 f7       	brne	.-18     	; 0x3eae <APP_Options_Page+0xd0>
			_delay_ms(100);
			MCAL_UART_voidTransmitData('.');
    3ec0:	8e e2       	ldi	r24, 0x2E	; 46
    3ec2:	0e 94 c1 06 	call	0xd82	; 0xd82 <MCAL_UART_voidTransmitData>
    3ec6:	20 e0       	ldi	r18, 0x00	; 0
    3ec8:	30 e0       	ldi	r19, 0x00	; 0
    3eca:	40 e9       	ldi	r20, 0x90	; 144
    3ecc:	51 e0       	ldi	r21, 0x01	; 1
    3ece:	ca 01       	movw	r24, r20
    3ed0:	01 97       	sbiw	r24, 0x01	; 1
    3ed2:	f1 f7       	brne	.-4      	; 0x3ed0 <APP_Options_Page+0xf2>
    3ed4:	2f 5f       	subi	r18, 0xFF	; 255
    3ed6:	3f 4f       	sbci	r19, 0xFF	; 255
    3ed8:	83 e0       	ldi	r24, 0x03	; 3
    3eda:	28 3e       	cpi	r18, 0xE8	; 232
    3edc:	38 07       	cpc	r19, r24
    3ede:	b9 f7       	brne	.-18     	; 0x3ece <APP_Options_Page+0xf0>
			_delay_ms(100);
			MCAL_UART_voidSendString(GLOB_u8NewLine);
    3ee0:	82 e1       	ldi	r24, 0x12	; 18
    3ee2:	97 e0       	ldi	r25, 0x07	; 7
    3ee4:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
			break;
		}

	}while(LOC_u8LogoutFlag != 1);

}
    3ee8:	0f 90       	pop	r0
    3eea:	cf 91       	pop	r28
    3eec:	df 91       	pop	r29
    3eee:	1f 91       	pop	r17
    3ef0:	0f 91       	pop	r16
    3ef2:	08 95       	ret
		MCAL_UART_voidSendString(GLOB_u8NewLine);
		MCAL_UART_voidSendString((u8*)"0 --> Logout");
		MCAL_UART_voidSendString(GLOB_u8NewLine);

		MCAL_UART_voidReceiveData(&LOC_u8Option);
		switch(LOC_u8Option)
    3ef4:	82 33       	cpi	r24, 0x32	; 50
    3ef6:	69 f0       	breq	.+26     	; 0x3f12 <APP_Options_Page+0x134>
    3ef8:	83 33       	cpi	r24, 0x33	; 51
    3efa:	09 f0       	breq	.+2      	; 0x3efe <APP_Options_Page+0x120>
    3efc:	7b cf       	rjmp	.-266    	; 0x3df4 <APP_Options_Page+0x16>
			MCAL_UART_voidSendString(GLOB_u8NewLine);
			APP_DeviceControl_Page();
			break;
		case '3':
			LOC_u8LogoutFlag = 0;
			MCAL_UART_voidTransmitData('3');
    3efe:	83 e3       	ldi	r24, 0x33	; 51
    3f00:	0e 94 c1 06 	call	0xd82	; 0xd82 <MCAL_UART_voidTransmitData>
			MCAL_UART_voidSendString(GLOB_u8NewLine);
    3f04:	82 e1       	ldi	r24, 0x12	; 18
    3f06:	97 e0       	ldi	r25, 0x07	; 7
    3f08:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
			APP_DoorControl_Page();
    3f0c:	0e 94 8d 1b 	call	0x371a	; 0x371a <APP_DoorControl_Page>
    3f10:	71 cf       	rjmp	.-286    	; 0x3df4 <APP_Options_Page+0x16>
			APP_UserManagement_Page();

			break;
		case '2':
			LOC_u8LogoutFlag = 0;
			MCAL_UART_voidTransmitData('2');
    3f12:	82 e3       	ldi	r24, 0x32	; 50
    3f14:	0e 94 c1 06 	call	0xd82	; 0xd82 <MCAL_UART_voidTransmitData>
			MCAL_UART_voidSendString(GLOB_u8NewLine);
    3f18:	82 e1       	ldi	r24, 0x12	; 18
    3f1a:	97 e0       	ldi	r25, 0x07	; 7
    3f1c:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
			APP_DeviceControl_Page();
    3f20:	0e 94 f1 17 	call	0x2fe2	; 0x2fe2 <APP_DeviceControl_Page>
    3f24:	67 cf       	rjmp	.-306    	; 0x3df4 <APP_Options_Page+0x16>
		switch(LOC_u8Option)
		{
		case '1':
			LOC_u8LogoutFlag = 0;

			MCAL_UART_voidTransmitData('1');
    3f26:	81 e3       	ldi	r24, 0x31	; 49
    3f28:	0e 94 c1 06 	call	0xd82	; 0xd82 <MCAL_UART_voidTransmitData>
			MCAL_UART_voidSendString(GLOB_u8NewLine);
    3f2c:	82 e1       	ldi	r24, 0x12	; 18
    3f2e:	97 e0       	ldi	r25, 0x07	; 7
    3f30:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
			APP_UserManagement_Page();
    3f34:	0e 94 18 1e 	call	0x3c30	; 0x3c30 <APP_UserManagement_Page>
    3f38:	5d cf       	rjmp	.-326    	; 0x3df4 <APP_Options_Page+0x16>

00003f3a <APP_Login_Page>:
	}

}

void APP_Login_Page(void)
{
    3f3a:	6f 92       	push	r6
    3f3c:	7f 92       	push	r7
    3f3e:	9f 92       	push	r9
    3f40:	af 92       	push	r10
    3f42:	bf 92       	push	r11
    3f44:	cf 92       	push	r12
    3f46:	df 92       	push	r13
    3f48:	ef 92       	push	r14
    3f4a:	ff 92       	push	r15
    3f4c:	0f 93       	push	r16
    3f4e:	1f 93       	push	r17
    3f50:	df 93       	push	r29
    3f52:	cf 93       	push	r28
    3f54:	0f 92       	push	r0
    3f56:	cd b7       	in	r28, 0x3d	; 61
    3f58:	de b7       	in	r29, 0x3e	; 62
	u8  LOC_u8Check_AdminID = 0 ,LOC_u8Check_AdminPassword = 0,LOC_u8Buffer = 0;
    3f5a:	19 82       	std	Y+1, r1	; 0x01
	static u8 LOC_u8LoginFailed = 3;

	//	Login:

	i = 1000;
	MCAL_UART_voidSendString((u8*)"Enter Your Username: ");
    3f5c:	83 e8       	ldi	r24, 0x83	; 131
    3f5e:	94 e0       	ldi	r25, 0x04	; 4
    3f60:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
    3f64:	08 ee       	ldi	r16, 0xE8	; 232
    3f66:	13 e0       	ldi	r17, 0x03	; 3
    3f68:	aa 24       	eor	r10, r10
    3f6a:	bb 24       	eor	r11, r11
    3f6c:	ee 24       	eor	r14, r14
    3f6e:	ff 24       	eor	r15, r15
    3f70:	3e 01       	movw	r6, r28
    3f72:	08 94       	sec
    3f74:	61 1c       	adc	r6, r1
    3f76:	71 1c       	adc	r7, r1
	do
	{
		MCAL_UART_voidReceiveData(&LOC_u8Buffer);
    3f78:	c3 01       	movw	r24, r6
    3f7a:	0e 94 c8 06 	call	0xd90	; 0xd90 <MCAL_UART_voidReceiveData>
		MCAL_UART_voidTransmitData((LOC_u8Buffer));
    3f7e:	89 81       	ldd	r24, Y+1	; 0x01
    3f80:	0e 94 c1 06 	call	0xd82	; 0xd82 <MCAL_UART_voidTransmitData>
		LOC_u16ID += ((LOC_u8Buffer-'0') * i);
    3f84:	89 81       	ldd	r24, Y+1	; 0x01
    3f86:	90 e0       	ldi	r25, 0x00	; 0
    3f88:	c0 97       	sbiw	r24, 0x30	; 48
    3f8a:	9c 01       	movw	r18, r24
    3f8c:	02 9f       	mul	r16, r18
    3f8e:	c0 01       	movw	r24, r0
    3f90:	03 9f       	mul	r16, r19
    3f92:	90 0d       	add	r25, r0
    3f94:	12 9f       	mul	r17, r18
    3f96:	90 0d       	add	r25, r0
    3f98:	11 24       	eor	r1, r1
    3f9a:	a8 0e       	add	r10, r24
    3f9c:	b9 1e       	adc	r11, r25
		i /= 10;
    3f9e:	c8 01       	movw	r24, r16
    3fa0:	6a e0       	ldi	r22, 0x0A	; 10
    3fa2:	70 e0       	ldi	r23, 0x00	; 0
    3fa4:	0e 94 92 2b 	call	0x5724	; 0x5724 <__udivmodhi4>
    3fa8:	8b 01       	movw	r16, r22
    3faa:	08 94       	sec
    3fac:	e1 1c       	adc	r14, r1
    3fae:	f1 1c       	adc	r15, r1

	}while(i != 0);
    3fb0:	34 e0       	ldi	r19, 0x04	; 4
    3fb2:	e3 16       	cp	r14, r19
    3fb4:	f1 04       	cpc	r15, r1
    3fb6:	01 f7       	brne	.-64     	; 0x3f78 <APP_Login_Page+0x3e>

	MCAL_UART_voidSendString(GLOB_u8NewLine);
    3fb8:	82 e1       	ldi	r24, 0x12	; 18
    3fba:	97 e0       	ldi	r25, 0x07	; 7
    3fbc:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
	LOC_u8Check_AdminID = Check_AdminID(LOC_u16ID);
    3fc0:	c5 01       	movw	r24, r10
    3fc2:	0e 94 52 22 	call	0x44a4	; 0x44a4 <Check_AdminID>
    3fc6:	98 2e       	mov	r9, r24

	//	Pass:
	j = 1000;
	MCAL_UART_voidSendString((u8*)"Enter Your Password: ");
    3fc8:	88 eb       	ldi	r24, 0xB8	; 184
    3fca:	93 e0       	ldi	r25, 0x03	; 3
    3fcc:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
    3fd0:	08 ee       	ldi	r16, 0xE8	; 232
    3fd2:	13 e0       	ldi	r17, 0x03	; 3
    3fd4:	cc 24       	eor	r12, r12
    3fd6:	dd 24       	eor	r13, r13
    3fd8:	ee 24       	eor	r14, r14
    3fda:	ff 24       	eor	r15, r15
	do
	{
		MCAL_UART_voidReceiveData(&LOC_u8Buffer);
    3fdc:	c3 01       	movw	r24, r6
    3fde:	0e 94 c8 06 	call	0xd90	; 0xd90 <MCAL_UART_voidReceiveData>
		MCAL_UART_voidTransmitData((LOC_u8Buffer));
    3fe2:	89 81       	ldd	r24, Y+1	; 0x01
    3fe4:	0e 94 c1 06 	call	0xd82	; 0xd82 <MCAL_UART_voidTransmitData>
		LOC_u16Pass += ((LOC_u8Buffer-'0') * j);
    3fe8:	89 81       	ldd	r24, Y+1	; 0x01
    3fea:	90 e0       	ldi	r25, 0x00	; 0
    3fec:	c0 97       	sbiw	r24, 0x30	; 48
    3fee:	9c 01       	movw	r18, r24
    3ff0:	02 9f       	mul	r16, r18
    3ff2:	c0 01       	movw	r24, r0
    3ff4:	03 9f       	mul	r16, r19
    3ff6:	90 0d       	add	r25, r0
    3ff8:	12 9f       	mul	r17, r18
    3ffa:	90 0d       	add	r25, r0
    3ffc:	11 24       	eor	r1, r1
    3ffe:	c8 0e       	add	r12, r24
    4000:	d9 1e       	adc	r13, r25
		j /= 10;
    4002:	c8 01       	movw	r24, r16
    4004:	6a e0       	ldi	r22, 0x0A	; 10
    4006:	70 e0       	ldi	r23, 0x00	; 0
    4008:	0e 94 92 2b 	call	0x5724	; 0x5724 <__udivmodhi4>
    400c:	8b 01       	movw	r16, r22
    400e:	08 94       	sec
    4010:	e1 1c       	adc	r14, r1
    4012:	f1 1c       	adc	r15, r1
	}while(j != 0);
    4014:	34 e0       	ldi	r19, 0x04	; 4
    4016:	e3 16       	cp	r14, r19
    4018:	f1 04       	cpc	r15, r1
    401a:	01 f7       	brne	.-64     	; 0x3fdc <APP_Login_Page+0xa2>

	MCAL_UART_voidSendString(GLOB_u8NewLine);
    401c:	82 e1       	ldi	r24, 0x12	; 18
    401e:	97 e0       	ldi	r25, 0x07	; 7
    4020:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
	LOC_u8Check_AdminPassword = Check_AdminPassword(LOC_u16ID,LOC_u16Pass);
    4024:	c5 01       	movw	r24, r10
    4026:	b6 01       	movw	r22, r12
    4028:	0e 94 db 26 	call	0x4db6	; 0x4db6 <Check_AdminPassword>

	if(LOC_u8Check_AdminID == ADMIN_NOT_FOUND )
    402c:	9b eb       	ldi	r25, 0xBB	; 187
    402e:	99 16       	cp	r9, r25
    4030:	f9 f0       	breq	.+62     	; 0x4070 <APP_Login_Page+0x136>

			APP_Login_Page();
			//goto Login;
		}
	}
	else if (LOC_u8Check_AdminPassword == PASSWORD_NOT_MATCHED)
    4032:	88 35       	cpi	r24, 0x58	; 88
    4034:	09 f4       	brne	.+2      	; 0x4038 <APP_Login_Page+0xfe>
    4036:	4e c0       	rjmp	.+156    	; 0x40d4 <APP_Login_Page+0x19a>
			APP_Login_Page();
		}
	}
	else
	{
		LOC_u8LoginFailed = 3;
    4038:	83 e0       	ldi	r24, 0x03	; 3
    403a:	80 93 17 07 	sts	0x0717, r24
		MCAL_UART_voidSendString((u8*)"Welcome to Lobby!\r\n");
    403e:	87 ec       	ldi	r24, 0xC7	; 199
    4040:	95 e0       	ldi	r25, 0x05	; 5
    4042:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
		MCAL_UART_voidSendString(GLOB_u8NewLine);
    4046:	82 e1       	ldi	r24, 0x12	; 18
    4048:	97 e0       	ldi	r25, 0x07	; 7
    404a:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
		APP_Options_Page();
    404e:	0e 94 ef 1e 	call	0x3dde	; 0x3dde <APP_Options_Page>
	}




}
    4052:	0f 90       	pop	r0
    4054:	cf 91       	pop	r28
    4056:	df 91       	pop	r29
    4058:	1f 91       	pop	r17
    405a:	0f 91       	pop	r16
    405c:	ff 90       	pop	r15
    405e:	ef 90       	pop	r14
    4060:	df 90       	pop	r13
    4062:	cf 90       	pop	r12
    4064:	bf 90       	pop	r11
    4066:	af 90       	pop	r10
    4068:	9f 90       	pop	r9
    406a:	7f 90       	pop	r7
    406c:	6f 90       	pop	r6
    406e:	08 95       	ret
	MCAL_UART_voidSendString(GLOB_u8NewLine);
	LOC_u8Check_AdminPassword = Check_AdminPassword(LOC_u16ID,LOC_u16Pass);

	if(LOC_u8Check_AdminID == ADMIN_NOT_FOUND )
	{
		MCAL_UART_voidSendString((u8*)"USERNAME NOT FOUND!!!");
    4070:	84 e6       	ldi	r24, 0x64	; 100
    4072:	95 e0       	ldi	r25, 0x05	; 5
    4074:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
		MCAL_UART_voidSendString(GLOB_u8NewLine);
    4078:	82 e1       	ldi	r24, 0x12	; 18
    407a:	97 e0       	ldi	r25, 0x07	; 7
    407c:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
		LOC_u8LoginFailed--;
    4080:	80 91 17 07 	lds	r24, 0x0717
    4084:	81 50       	subi	r24, 0x01	; 1
    4086:	80 93 17 07 	sts	0x0717, r24

		if (LOC_u8LoginFailed == 0)
    408a:	88 23       	and	r24, r24
    408c:	09 f0       	breq	.+2      	; 0x4090 <APP_Login_Page+0x156>
    408e:	66 c0       	rjmp	.+204    	; 0x415c <APP_Login_Page+0x222>
		{
			MCAL_UART_voidSendString((u8*)"You have Reached Maximum Tries!!!");
    4090:	8a e7       	ldi	r24, 0x7A	; 122
    4092:	95 e0       	ldi	r25, 0x05	; 5
    4094:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
			MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_HIGH);
    4098:	81 e0       	ldi	r24, 0x01	; 1
    409a:	62 e0       	ldi	r22, 0x02	; 2
    409c:	41 e0       	ldi	r20, 0x01	; 1
    409e:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <MCAL_DIO_u8SetPinValue>
			while(GET_BIT(PINB,PIN4));
    40a2:	b4 99       	sbic	0x16, 4	; 22
    40a4:	fe cf       	rjmp	.-4      	; 0x40a2 <APP_Login_Page+0x168>
			G_u8_Receive = MCAL_SPI_SLAVE_u8_SpiSlave_Transceive('B');
    40a6:	82 e4       	ldi	r24, 0x42	; 66
    40a8:	0e 94 a4 0b 	call	0x1748	; 0x1748 <MCAL_SPI_SLAVE_u8_SpiSlave_Transceive>
    40ac:	80 93 38 07 	sts	0x0738, r24
			while(GET_BIT(PINB,PIN4));
    40b0:	b4 99       	sbic	0x16, 4	; 22
    40b2:	fe cf       	rjmp	.-4      	; 0x40b0 <APP_Login_Page+0x176>
			G_u8_Receive = MCAL_SPI_SLAVE_u8_SpiSlave_Transceive('N');
    40b4:	8e e4       	ldi	r24, 0x4E	; 78
    40b6:	0e 94 a4 0b 	call	0x1748	; 0x1748 <MCAL_SPI_SLAVE_u8_SpiSlave_Transceive>
    40ba:	80 93 38 07 	sts	0x0738, r24
			MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_LOW);
    40be:	81 e0       	ldi	r24, 0x01	; 1
    40c0:	62 e0       	ldi	r22, 0x02	; 2
    40c2:	40 e0       	ldi	r20, 0x00	; 0
    40c4:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <MCAL_DIO_u8SetPinValue>
			while(1)
			{
				HAL_Buzzer_u8BuzzerMode(Buzzer_Port,Buzzer_Pin,Buzzer_ON);
    40c8:	81 e0       	ldi	r24, 0x01	; 1
    40ca:	60 e0       	ldi	r22, 0x00	; 0
    40cc:	41 e0       	ldi	r20, 0x01	; 1
    40ce:	0e 94 77 0f 	call	0x1eee	; 0x1eee <HAL_Buzzer_u8BuzzerMode>
    40d2:	fa cf       	rjmp	.-12     	; 0x40c8 <APP_Login_Page+0x18e>
			//goto Login;
		}
	}
	else if (LOC_u8Check_AdminPassword == PASSWORD_NOT_MATCHED)
	{
		MCAL_UART_voidSendString((u8*)"WRONG PASSWORD!!!");
    40d4:	89 ea       	ldi	r24, 0xA9	; 169
    40d6:	95 e0       	ldi	r25, 0x05	; 5
    40d8:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
		MCAL_UART_voidSendString(GLOB_u8NewLine);
    40dc:	82 e1       	ldi	r24, 0x12	; 18
    40de:	97 e0       	ldi	r25, 0x07	; 7
    40e0:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
		LOC_u8LoginFailed--;
    40e4:	80 91 17 07 	lds	r24, 0x0717
    40e8:	81 50       	subi	r24, 0x01	; 1
    40ea:	80 93 17 07 	sts	0x0717, r24
		if (LOC_u8LoginFailed == 0)
    40ee:	88 23       	and	r24, r24
    40f0:	09 f0       	breq	.+2      	; 0x40f4 <APP_Login_Page+0x1ba>
    40f2:	44 c0       	rjmp	.+136    	; 0x417c <APP_Login_Page+0x242>
		{
			MCAL_UART_voidSendString((u8*)"You have Reached Maximum Tries!!!");
    40f4:	8a e7       	ldi	r24, 0x7A	; 122
    40f6:	95 e0       	ldi	r25, 0x05	; 5
    40f8:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
			MCAL_UART_voidSendString(GLOB_u8NewLine);
    40fc:	82 e1       	ldi	r24, 0x12	; 18
    40fe:	97 e0       	ldi	r25, 0x07	; 7
    4100:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
			MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_HIGH);
    4104:	81 e0       	ldi	r24, 0x01	; 1
    4106:	62 e0       	ldi	r22, 0x02	; 2
    4108:	41 e0       	ldi	r20, 0x01	; 1
    410a:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <MCAL_DIO_u8SetPinValue>
			while(GET_BIT(PINB,PIN4));
    410e:	b4 99       	sbic	0x16, 4	; 22
    4110:	fe cf       	rjmp	.-4      	; 0x410e <APP_Login_Page+0x1d4>
			G_u8_Receive = MCAL_SPI_SLAVE_u8_SpiSlave_Transceive('B');
    4112:	82 e4       	ldi	r24, 0x42	; 66
    4114:	0e 94 a4 0b 	call	0x1748	; 0x1748 <MCAL_SPI_SLAVE_u8_SpiSlave_Transceive>
    4118:	80 93 38 07 	sts	0x0738, r24
			while(GET_BIT(PINB,PIN4));
    411c:	b4 99       	sbic	0x16, 4	; 22
    411e:	fe cf       	rjmp	.-4      	; 0x411c <APP_Login_Page+0x1e2>
			G_u8_Receive = MCAL_SPI_SLAVE_u8_SpiSlave_Transceive('N');
    4120:	8e e4       	ldi	r24, 0x4E	; 78
    4122:	0e 94 a4 0b 	call	0x1748	; 0x1748 <MCAL_SPI_SLAVE_u8_SpiSlave_Transceive>
    4126:	80 93 38 07 	sts	0x0738, r24
			MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_LOW);
    412a:	81 e0       	ldi	r24, 0x01	; 1
    412c:	62 e0       	ldi	r22, 0x02	; 2
    412e:	40 e0       	ldi	r20, 0x00	; 0
    4130:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <MCAL_DIO_u8SetPinValue>
			while(1)
			{
				HAL_Buzzer_u8BuzzerMode(Buzzer_Port,Buzzer_Pin,Buzzer_ON);
    4134:	81 e0       	ldi	r24, 0x01	; 1
    4136:	60 e0       	ldi	r22, 0x00	; 0
    4138:	41 e0       	ldi	r20, 0x01	; 1
    413a:	0e 94 77 0f 	call	0x1eee	; 0x1eee <HAL_Buzzer_u8BuzzerMode>
				MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_HIGH);
    413e:	81 e0       	ldi	r24, 0x01	; 1
    4140:	62 e0       	ldi	r22, 0x02	; 2
    4142:	41 e0       	ldi	r20, 0x01	; 1
    4144:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <MCAL_DIO_u8SetPinValue>
				while(GET_BIT(PINB,PIN4));
    4148:	b4 99       	sbic	0x16, 4	; 22
    414a:	fe cf       	rjmp	.-4      	; 0x4148 <APP_Login_Page+0x20e>
				G_u8_Receive = MCAL_SPI_SLAVE_u8_SpiSlave_Transceive('B');
    414c:	82 e4       	ldi	r24, 0x42	; 66
    414e:	0e 94 a4 0b 	call	0x1748	; 0x1748 <MCAL_SPI_SLAVE_u8_SpiSlave_Transceive>
    4152:	80 93 38 07 	sts	0x0738, r24
				while(GET_BIT(PINB,PIN4));
    4156:	b4 99       	sbic	0x16, 4	; 22
    4158:	fe cf       	rjmp	.-4      	; 0x4156 <APP_Login_Page+0x21c>
    415a:	e2 cf       	rjmp	.-60     	; 0x4120 <APP_Login_Page+0x1e6>
			}
		}
		else
		{

			MCAL_UART_voidSendString((u8*)"Tries Left: ");
    415c:	8c e9       	ldi	r24, 0x9C	; 156
    415e:	95 e0       	ldi	r25, 0x05	; 5

		}
		else
		{
			MCAL_UART_voidSendString((u8*)"Tries Left:");
			MCAL_UART_voidSendString(GLOB_u8NewLine);
    4160:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
			MCAL_UART_voidTransmitData((LOC_u8LoginFailed+'0'));
    4164:	80 91 17 07 	lds	r24, 0x0717
    4168:	80 5d       	subi	r24, 0xD0	; 208
    416a:	0e 94 c1 06 	call	0xd82	; 0xd82 <MCAL_UART_voidTransmitData>
			MCAL_UART_voidSendString(GLOB_u8NewLine);
    416e:	82 e1       	ldi	r24, 0x12	; 18
    4170:	97 e0       	ldi	r25, 0x07	; 7
    4172:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
			//			goto Pass;
			APP_Login_Page();
    4176:	0e 94 9d 1f 	call	0x3f3a	; 0x3f3a <APP_Login_Page>
    417a:	6b cf       	rjmp	.-298    	; 0x4052 <APP_Login_Page+0x118>
			}

		}
		else
		{
			MCAL_UART_voidSendString((u8*)"Tries Left:");
    417c:	8b eb       	ldi	r24, 0xBB	; 187
    417e:	95 e0       	ldi	r25, 0x05	; 5
    4180:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
			MCAL_UART_voidSendString(GLOB_u8NewLine);
    4184:	82 e1       	ldi	r24, 0x12	; 18
    4186:	97 e0       	ldi	r25, 0x07	; 7
    4188:	eb cf       	rjmp	.-42     	; 0x4160 <APP_Login_Page+0x226>

0000418a <APP_Home_Page>:

}


void APP_Home_Page(void)
{
    418a:	0f 93       	push	r16
    418c:	1f 93       	push	r17
    418e:	df 93       	push	r29
    4190:	cf 93       	push	r28
    4192:	0f 92       	push	r0
    4194:	cd b7       	in	r28, 0x3d	; 61
    4196:	de b7       	in	r29, 0x3e	; 62
	u8 LOC_u8FirstDataReceived = 0 ;
    4198:	19 82       	std	Y+1, r1	; 0x01
    419a:	8e 01       	movw	r16, r28
    419c:	0f 5f       	subi	r16, 0xFF	; 255
    419e:	1f 4f       	sbci	r17, 0xFF	; 255

	while(1)
	{
		//		APP_LM35WithDCmotor_Void_LM35WithDCmotorOnOff();
		MCAL_UART_voidSendString((u8*)"Welcome to Lobby!\r\n");
    41a0:	87 ec       	ldi	r24, 0xC7	; 199
    41a2:	95 e0       	ldi	r25, 0x05	; 5
    41a4:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>

		MCAL_UART_voidSendString((u8*)"1 --> LOGIN");
    41a8:	8b ed       	ldi	r24, 0xDB	; 219
    41aa:	95 e0       	ldi	r25, 0x05	; 5
    41ac:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
		MCAL_UART_voidSendString(GLOB_u8NewLine);
    41b0:	82 e1       	ldi	r24, 0x12	; 18
    41b2:	97 e0       	ldi	r25, 0x07	; 7
    41b4:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
		MCAL_UART_voidSendString((u8*)"2 --> Register");
    41b8:	87 ee       	ldi	r24, 0xE7	; 231
    41ba:	95 e0       	ldi	r25, 0x05	; 5
    41bc:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
		MCAL_UART_voidSendString(GLOB_u8NewLine);
    41c0:	82 e1       	ldi	r24, 0x12	; 18
    41c2:	97 e0       	ldi	r25, 0x07	; 7
    41c4:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
		MCAL_UART_voidSendString((u8*)"3 --> Devices State");
    41c8:	86 ef       	ldi	r24, 0xF6	; 246
    41ca:	95 e0       	ldi	r25, 0x05	; 5
    41cc:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
		MCAL_UART_voidSendString(GLOB_u8NewLine);
    41d0:	82 e1       	ldi	r24, 0x12	; 18
    41d2:	97 e0       	ldi	r25, 0x07	; 7
    41d4:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>


		MCAL_UART_voidReceiveData(&LOC_u8FirstDataReceived);
    41d8:	c8 01       	movw	r24, r16
    41da:	0e 94 c8 06 	call	0xd90	; 0xd90 <MCAL_UART_voidReceiveData>
		switch(LOC_u8FirstDataReceived)
    41de:	89 81       	ldd	r24, Y+1	; 0x01
    41e0:	82 33       	cpi	r24, 0x32	; 50
    41e2:	c1 f0       	breq	.+48     	; 0x4214 <APP_Home_Page+0x8a>
    41e4:	83 33       	cpi	r24, 0x33	; 51
    41e6:	61 f0       	breq	.+24     	; 0x4200 <APP_Home_Page+0x76>
    41e8:	81 33       	cpi	r24, 0x31	; 49
    41ea:	d1 f6       	brne	.-76     	; 0x41a0 <APP_Home_Page+0x16>
		{
		case '1':

			//			APP_LM35WithDCmotor_Void_LM35WithDCmotorOnOff();
			MCAL_UART_voidTransmitData('1');
    41ec:	81 e3       	ldi	r24, 0x31	; 49
    41ee:	0e 94 c1 06 	call	0xd82	; 0xd82 <MCAL_UART_voidTransmitData>
			MCAL_UART_voidSendString(GLOB_u8NewLine);
    41f2:	82 e1       	ldi	r24, 0x12	; 18
    41f4:	97 e0       	ldi	r25, 0x07	; 7
    41f6:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
			APP_Login_Page();
    41fa:	0e 94 9d 1f 	call	0x3f3a	; 0x3f3a <APP_Login_Page>
    41fe:	d0 cf       	rjmp	.-96     	; 0x41a0 <APP_Home_Page+0x16>
			APP_Register_Page();
			break;
		case '3':

			//			APP_LM35WithDCmotor_Void_LM35WithDCmotorOnOff();
			MCAL_UART_voidTransmitData('3');
    4200:	83 e3       	ldi	r24, 0x33	; 51
    4202:	0e 94 c1 06 	call	0xd82	; 0xd82 <MCAL_UART_voidTransmitData>
			MCAL_UART_voidSendString(GLOB_u8NewLine);
    4206:	82 e1       	ldi	r24, 0x12	; 18
    4208:	97 e0       	ldi	r25, 0x07	; 7
    420a:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
			APP_Devices_Status();
    420e:	0e 94 1d 11 	call	0x223a	; 0x223a <APP_Devices_Status>
    4212:	c6 cf       	rjmp	.-116    	; 0x41a0 <APP_Home_Page+0x16>
			APP_Login_Page();
			break;
		case '2':

			//			APP_LM35WithDCmotor_Void_LM35WithDCmotorOnOff();
			MCAL_UART_voidTransmitData('2');
    4214:	82 e3       	ldi	r24, 0x32	; 50
    4216:	0e 94 c1 06 	call	0xd82	; 0xd82 <MCAL_UART_voidTransmitData>
			MCAL_UART_voidSendString(GLOB_u8NewLine);
    421a:	82 e1       	ldi	r24, 0x12	; 18
    421c:	97 e0       	ldi	r25, 0x07	; 7
    421e:	0e 94 56 07 	call	0xeac	; 0xeac <MCAL_UART_voidSendString>
			APP_Register_Page();
    4222:	0e 94 6b 1c 	call	0x38d6	; 0x38d6 <APP_Register_Page>
    4226:	bc cf       	rjmp	.-136    	; 0x41a0 <APP_Home_Page+0x16>

00004228 <APP_Registeration_voidGetNumberOfUsers>:

}


void APP_Registeration_voidGetNumberOfUsers(u8* LOC_Pu8UsersNumber)
{
    4228:	af 92       	push	r10
    422a:	bf 92       	push	r11
    422c:	cf 92       	push	r12
    422e:	df 92       	push	r13
    4230:	ff 92       	push	r15
    4232:	0f 93       	push	r16
    4234:	1f 93       	push	r17
    4236:	df 93       	push	r29
    4238:	cf 93       	push	r28
    423a:	0f 92       	push	r0
    423c:	cd b7       	in	r28, 0x3d	; 61
    423e:	de b7       	in	r29, 0x3e	; 62
    4240:	5c 01       	movw	r10, r24
	u16 LOC_u16LocationVariable = USER_LOCATION_TOP;
	u8 LOC_u8UserNumber = 0,LOC_u8NumberCheck = 0;
    4242:	19 82       	std	Y+1, r1	; 0x01
    4244:	00 e6       	ldi	r16, 0x60	; 96
    4246:	10 e0       	ldi	r17, 0x00	; 0
    4248:	ff 24       	eor	r15, r15
    424a:	6e 01       	movw	r12, r28
    424c:	08 94       	sec
    424e:	c1 1c       	adc	r12, r1
    4250:	d1 1c       	adc	r13, r1
	for(;LOC_u16LocationVariable <= USER_LOCATION_BOT;LOC_u16LocationVariable += STEP)
	{
		HAL_EEPROM_voidReadData(LOC_u16LocationVariable,&LOC_u8NumberCheck);
    4252:	c8 01       	movw	r24, r16
    4254:	b6 01       	movw	r22, r12
    4256:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <HAL_EEPROM_voidReadData>
		if(LOC_u8NumberCheck != 255)
    425a:	89 81       	ldd	r24, Y+1	; 0x01
    425c:	8f 3f       	cpi	r24, 0xFF	; 255
    425e:	09 f0       	breq	.+2      	; 0x4262 <APP_Registeration_voidGetNumberOfUsers+0x3a>
		{
			LOC_u8UserNumber++;
    4260:	f3 94       	inc	r15

void APP_Registeration_voidGetNumberOfUsers(u8* LOC_Pu8UsersNumber)
{
	u16 LOC_u16LocationVariable = USER_LOCATION_TOP;
	u8 LOC_u8UserNumber = 0,LOC_u8NumberCheck = 0;
	for(;LOC_u16LocationVariable <= USER_LOCATION_BOT;LOC_u16LocationVariable += STEP)
    4262:	08 5f       	subi	r16, 0xF8	; 248
    4264:	1f 4f       	sbci	r17, 0xFF	; 255
    4266:	81 e0       	ldi	r24, 0x01	; 1
    4268:	00 32       	cpi	r16, 0x20	; 32
    426a:	18 07       	cpc	r17, r24
    426c:	91 f7       	brne	.-28     	; 0x4252 <APP_Registeration_voidGetNumberOfUsers+0x2a>
		else
		{
			/*Do nothing*/
		}
	}
	*LOC_Pu8UsersNumber = LOC_u8UserNumber;
    426e:	f5 01       	movw	r30, r10
    4270:	f0 82       	st	Z, r15

}
    4272:	0f 90       	pop	r0
    4274:	cf 91       	pop	r28
    4276:	df 91       	pop	r29
    4278:	1f 91       	pop	r17
    427a:	0f 91       	pop	r16
    427c:	ff 90       	pop	r15
    427e:	df 90       	pop	r13
    4280:	cf 90       	pop	r12
    4282:	bf 90       	pop	r11
    4284:	af 90       	pop	r10
    4286:	08 95       	ret

00004288 <Check_UserID>:
		return USER_NOT_FOUND;
}


u8 Check_UserID(u16 LOC_u16UserID)
{
    4288:	6f 92       	push	r6
    428a:	7f 92       	push	r7
    428c:	8f 92       	push	r8
    428e:	9f 92       	push	r9
    4290:	af 92       	push	r10
    4292:	bf 92       	push	r11
    4294:	cf 92       	push	r12
    4296:	df 92       	push	r13
    4298:	ff 92       	push	r15
    429a:	0f 93       	push	r16
    429c:	1f 93       	push	r17
    429e:	df 93       	push	r29
    42a0:	cf 93       	push	r28
    42a2:	cd b7       	in	r28, 0x3d	; 61
    42a4:	de b7       	in	r29, 0x3e	; 62
    42a6:	28 97       	sbiw	r28, 0x08	; 8
    42a8:	0f b6       	in	r0, 0x3f	; 63
    42aa:	f8 94       	cli
    42ac:	de bf       	out	0x3e, r29	; 62
    42ae:	0f be       	out	0x3f, r0	; 63
    42b0:	cd bf       	out	0x3d, r28	; 61
    42b2:	9c 01       	movw	r18, r24
	u8 i=3,LOC_u8UserNumberFlag = 0, LOC_u8IDMatchedFlag = 0 ,LOC_u8UserID_Read[MAX_DIGITS] , LOC_u8UserIDArray[MAX_DIGITS], LOC_u8DigitCounter = 0;

	u16 LOC_u16UserLocationVariable = USER_LOCATION_TOP,LOC_u16UserLocationVariableDigits ;


	while (LOC_u16UserID != 0)
    42b4:	00 97       	sbiw	r24, 0x00	; 0
    42b6:	b9 f0       	breq	.+46     	; 0x42e6 <Check_UserID+0x5e>
    42b8:	43 e0       	ldi	r20, 0x03	; 3
    42ba:	8e 01       	movw	r16, r28
    42bc:	0b 5f       	subi	r16, 0xFB	; 251
    42be:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		LOC_u8UserIDArray[i] = (LOC_u16UserID % 10);
    42c0:	f8 01       	movw	r30, r16
    42c2:	e4 0f       	add	r30, r20
    42c4:	f1 1d       	adc	r31, r1
    42c6:	c9 01       	movw	r24, r18
    42c8:	6a e0       	ldi	r22, 0x0A	; 10
    42ca:	70 e0       	ldi	r23, 0x00	; 0
    42cc:	0e 94 92 2b 	call	0x5724	; 0x5724 <__udivmodhi4>
    42d0:	80 83       	st	Z, r24
		LOC_u16UserID = (LOC_u16UserID / 10);
    42d2:	c9 01       	movw	r24, r18
    42d4:	6a e0       	ldi	r22, 0x0A	; 10
    42d6:	70 e0       	ldi	r23, 0x00	; 0
    42d8:	0e 94 92 2b 	call	0x5724	; 0x5724 <__udivmodhi4>
    42dc:	9b 01       	movw	r18, r22
		i--;
    42de:	41 50       	subi	r20, 0x01	; 1
	u8 i=3,LOC_u8UserNumberFlag = 0, LOC_u8IDMatchedFlag = 0 ,LOC_u8UserID_Read[MAX_DIGITS] , LOC_u8UserIDArray[MAX_DIGITS], LOC_u8DigitCounter = 0;

	u16 LOC_u16UserLocationVariable = USER_LOCATION_TOP,LOC_u16UserLocationVariableDigits ;


	while (LOC_u16UserID != 0)
    42e0:	61 15       	cp	r22, r1
    42e2:	71 05       	cpc	r23, r1
    42e4:	69 f7       	brne	.-38     	; 0x42c0 <Check_UserID+0x38>
    42e6:	ff 24       	eor	r15, r15
    42e8:	00 e6       	ldi	r16, 0x60	; 96
    42ea:	10 e0       	ldi	r17, 0x00	; 0
    42ec:	6e 01       	movw	r12, r28
    42ee:	08 94       	sec
    42f0:	c1 1c       	adc	r12, r1
    42f2:	d1 1c       	adc	r13, r1
		LOC_u8UserNumberFlag++;
		LOC_u16UserLocationVariableDigits = LOC_u16UserLocationVariable;
		for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DIGITS;LOC_u8DigitCounter++)
		{

			HAL_EEPROM_voidReadData(LOC_u16UserLocationVariableDigits,&LOC_u8UserID_Read[LOC_u8DigitCounter]);
    42f4:	32 e0       	ldi	r19, 0x02	; 2
    42f6:	a3 2e       	mov	r10, r19
    42f8:	b1 2c       	mov	r11, r1
    42fa:	ac 0e       	add	r10, r28
    42fc:	bd 1e       	adc	r11, r29
    42fe:	23 e0       	ldi	r18, 0x03	; 3
    4300:	82 2e       	mov	r8, r18
    4302:	91 2c       	mov	r9, r1
    4304:	8c 0e       	add	r8, r28
    4306:	9d 1e       	adc	r9, r29
    4308:	94 e0       	ldi	r25, 0x04	; 4
    430a:	69 2e       	mov	r6, r25
    430c:	71 2c       	mov	r7, r1
    430e:	6c 0e       	add	r6, r28
    4310:	7d 1e       	adc	r7, r29
	}


	for(;LOC_u16UserLocationVariable <= USER_LOCATION_BOT;LOC_u16UserLocationVariable += STEP)
	{
		LOC_u8UserNumberFlag++;
    4312:	f3 94       	inc	r15
		LOC_u16UserLocationVariableDigits = LOC_u16UserLocationVariable;
		for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DIGITS;LOC_u8DigitCounter++)
		{

			HAL_EEPROM_voidReadData(LOC_u16UserLocationVariableDigits,&LOC_u8UserID_Read[LOC_u8DigitCounter]);
    4314:	c8 01       	movw	r24, r16
    4316:	b6 01       	movw	r22, r12
    4318:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <HAL_EEPROM_voidReadData>
			if (LOC_u8UserID_Read[LOC_u8DigitCounter] == LOC_u8UserIDArray[LOC_u8DigitCounter])
    431c:	99 81       	ldd	r25, Y+1	; 0x01
    431e:	8d 81       	ldd	r24, Y+5	; 0x05
    4320:	98 17       	cp	r25, r24
    4322:	81 f5       	brne	.+96     	; 0x4384 <Check_UserID+0xfc>
		LOC_u8UserNumberFlag++;
		LOC_u16UserLocationVariableDigits = LOC_u16UserLocationVariable;
		for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DIGITS;LOC_u8DigitCounter++)
		{

			HAL_EEPROM_voidReadData(LOC_u16UserLocationVariableDigits,&LOC_u8UserID_Read[LOC_u8DigitCounter]);
    4324:	c8 01       	movw	r24, r16
    4326:	01 96       	adiw	r24, 0x01	; 1
    4328:	b5 01       	movw	r22, r10
    432a:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <HAL_EEPROM_voidReadData>
			if (LOC_u8UserID_Read[LOC_u8DigitCounter] == LOC_u8UserIDArray[LOC_u8DigitCounter])
    432e:	9a 81       	ldd	r25, Y+2	; 0x02
    4330:	8e 81       	ldd	r24, Y+6	; 0x06
    4332:	98 17       	cp	r25, r24
    4334:	39 f5       	brne	.+78     	; 0x4384 <Check_UserID+0xfc>
		LOC_u8UserNumberFlag++;
		LOC_u16UserLocationVariableDigits = LOC_u16UserLocationVariable;
		for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DIGITS;LOC_u8DigitCounter++)
		{

			HAL_EEPROM_voidReadData(LOC_u16UserLocationVariableDigits,&LOC_u8UserID_Read[LOC_u8DigitCounter]);
    4336:	c8 01       	movw	r24, r16
    4338:	02 96       	adiw	r24, 0x02	; 2
    433a:	b4 01       	movw	r22, r8
    433c:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <HAL_EEPROM_voidReadData>
			if (LOC_u8UserID_Read[LOC_u8DigitCounter] == LOC_u8UserIDArray[LOC_u8DigitCounter])
    4340:	9b 81       	ldd	r25, Y+3	; 0x03
    4342:	8f 81       	ldd	r24, Y+7	; 0x07
    4344:	98 17       	cp	r25, r24
    4346:	f1 f4       	brne	.+60     	; 0x4384 <Check_UserID+0xfc>
		LOC_u8UserNumberFlag++;
		LOC_u16UserLocationVariableDigits = LOC_u16UserLocationVariable;
		for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DIGITS;LOC_u8DigitCounter++)
		{

			HAL_EEPROM_voidReadData(LOC_u16UserLocationVariableDigits,&LOC_u8UserID_Read[LOC_u8DigitCounter]);
    4348:	c8 01       	movw	r24, r16
    434a:	03 96       	adiw	r24, 0x03	; 3
    434c:	b3 01       	movw	r22, r6
    434e:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <HAL_EEPROM_voidReadData>
			if (LOC_u8UserID_Read[LOC_u8DigitCounter] == LOC_u8UserIDArray[LOC_u8DigitCounter])
    4352:	9c 81       	ldd	r25, Y+4	; 0x04
    4354:	88 85       	ldd	r24, Y+8	; 0x08
    4356:	98 17       	cp	r25, r24
    4358:	a9 f4       	brne	.+42     	; 0x4384 <Check_UserID+0xfc>
			//Remain in the loop.
		}
	}

	return USER_NOT_FOUND;
}
    435a:	8f 2d       	mov	r24, r15
    435c:	28 96       	adiw	r28, 0x08	; 8
    435e:	0f b6       	in	r0, 0x3f	; 63
    4360:	f8 94       	cli
    4362:	de bf       	out	0x3e, r29	; 62
    4364:	0f be       	out	0x3f, r0	; 63
    4366:	cd bf       	out	0x3d, r28	; 61
    4368:	cf 91       	pop	r28
    436a:	df 91       	pop	r29
    436c:	1f 91       	pop	r17
    436e:	0f 91       	pop	r16
    4370:	ff 90       	pop	r15
    4372:	df 90       	pop	r13
    4374:	cf 90       	pop	r12
    4376:	bf 90       	pop	r11
    4378:	af 90       	pop	r10
    437a:	9f 90       	pop	r9
    437c:	8f 90       	pop	r8
    437e:	7f 90       	pop	r7
    4380:	6f 90       	pop	r6
    4382:	08 95       	ret
		LOC_u16UserID = (LOC_u16UserID / 10);
		i--;
	}


	for(;LOC_u16UserLocationVariable <= USER_LOCATION_BOT;LOC_u16UserLocationVariable += STEP)
    4384:	08 5f       	subi	r16, 0xF8	; 248
    4386:	1f 4f       	sbci	r17, 0xFF	; 255
    4388:	88 e1       	ldi	r24, 0x18	; 24
    438a:	f8 16       	cp	r15, r24
    438c:	11 f6       	brne	.-124    	; 0x4312 <Check_UserID+0x8a>
    438e:	8b eb       	ldi	r24, 0xBB	; 187
    4390:	f8 2e       	mov	r15, r24
    4392:	e3 cf       	rjmp	.-58     	; 0x435a <Check_UserID+0xd2>

00004394 <APP_Registeration_voidGetNumberOfAdmins>:

}


void APP_Registeration_voidGetNumberOfAdmins(u8* LOC_Pu8AdminsNumber)
{
    4394:	cf 92       	push	r12
    4396:	df 92       	push	r13
    4398:	ef 92       	push	r14
    439a:	ff 92       	push	r15
    439c:	1f 93       	push	r17
    439e:	df 93       	push	r29
    43a0:	cf 93       	push	r28
    43a2:	0f 92       	push	r0
    43a4:	cd b7       	in	r28, 0x3d	; 61
    43a6:	de b7       	in	r29, 0x3e	; 62
    43a8:	6c 01       	movw	r12, r24
	u16 LOC_u16LocationVariable = ADMIN_LOCATION_TOP;
	u8 LOC_u8AdminNumber = 0,LOC_u8NumberCheck = 0;
    43aa:	19 82       	std	Y+1, r1	; 0x01
	for(;LOC_u16LocationVariable <= ADMIN_LOCATION_BOT;LOC_u16LocationVariable += STEP)
	{
		HAL_EEPROM_voidReadData(LOC_u16LocationVariable,&LOC_u8NumberCheck);
    43ac:	80 e0       	ldi	r24, 0x00	; 0
    43ae:	90 e0       	ldi	r25, 0x00	; 0
    43b0:	7e 01       	movw	r14, r28
    43b2:	08 94       	sec
    43b4:	e1 1c       	adc	r14, r1
    43b6:	f1 1c       	adc	r15, r1
    43b8:	b7 01       	movw	r22, r14
    43ba:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <HAL_EEPROM_voidReadData>
    43be:	10 e0       	ldi	r17, 0x00	; 0
    43c0:	89 81       	ldd	r24, Y+1	; 0x01
    43c2:	8f 3f       	cpi	r24, 0xFF	; 255
    43c4:	09 f0       	breq	.+2      	; 0x43c8 <APP_Registeration_voidGetNumberOfAdmins+0x34>
    43c6:	11 e0       	ldi	r17, 0x01	; 1
    43c8:	88 e0       	ldi	r24, 0x08	; 8
    43ca:	90 e0       	ldi	r25, 0x00	; 0
    43cc:	b7 01       	movw	r22, r14
    43ce:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <HAL_EEPROM_voidReadData>
		if(LOC_u8NumberCheck != 255)
    43d2:	89 81       	ldd	r24, Y+1	; 0x01
    43d4:	8f 3f       	cpi	r24, 0xFF	; 255
    43d6:	09 f0       	breq	.+2      	; 0x43da <APP_Registeration_voidGetNumberOfAdmins+0x46>
		{
			LOC_u8AdminNumber++;
    43d8:	1f 5f       	subi	r17, 0xFF	; 255
{
	u16 LOC_u16LocationVariable = ADMIN_LOCATION_TOP;
	u8 LOC_u8AdminNumber = 0,LOC_u8NumberCheck = 0;
	for(;LOC_u16LocationVariable <= ADMIN_LOCATION_BOT;LOC_u16LocationVariable += STEP)
	{
		HAL_EEPROM_voidReadData(LOC_u16LocationVariable,&LOC_u8NumberCheck);
    43da:	80 e1       	ldi	r24, 0x10	; 16
    43dc:	90 e0       	ldi	r25, 0x00	; 0
    43de:	b7 01       	movw	r22, r14
    43e0:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <HAL_EEPROM_voidReadData>
		if(LOC_u8NumberCheck != 255)
    43e4:	89 81       	ldd	r24, Y+1	; 0x01
    43e6:	8f 3f       	cpi	r24, 0xFF	; 255
    43e8:	09 f0       	breq	.+2      	; 0x43ec <APP_Registeration_voidGetNumberOfAdmins+0x58>
		{
			LOC_u8AdminNumber++;
    43ea:	1f 5f       	subi	r17, 0xFF	; 255
{
	u16 LOC_u16LocationVariable = ADMIN_LOCATION_TOP;
	u8 LOC_u8AdminNumber = 0,LOC_u8NumberCheck = 0;
	for(;LOC_u16LocationVariable <= ADMIN_LOCATION_BOT;LOC_u16LocationVariable += STEP)
	{
		HAL_EEPROM_voidReadData(LOC_u16LocationVariable,&LOC_u8NumberCheck);
    43ec:	88 e1       	ldi	r24, 0x18	; 24
    43ee:	90 e0       	ldi	r25, 0x00	; 0
    43f0:	b7 01       	movw	r22, r14
    43f2:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <HAL_EEPROM_voidReadData>
		if(LOC_u8NumberCheck != 255)
    43f6:	89 81       	ldd	r24, Y+1	; 0x01
    43f8:	8f 3f       	cpi	r24, 0xFF	; 255
    43fa:	09 f0       	breq	.+2      	; 0x43fe <APP_Registeration_voidGetNumberOfAdmins+0x6a>
		{
			LOC_u8AdminNumber++;
    43fc:	1f 5f       	subi	r17, 0xFF	; 255
{
	u16 LOC_u16LocationVariable = ADMIN_LOCATION_TOP;
	u8 LOC_u8AdminNumber = 0,LOC_u8NumberCheck = 0;
	for(;LOC_u16LocationVariable <= ADMIN_LOCATION_BOT;LOC_u16LocationVariable += STEP)
	{
		HAL_EEPROM_voidReadData(LOC_u16LocationVariable,&LOC_u8NumberCheck);
    43fe:	80 e2       	ldi	r24, 0x20	; 32
    4400:	90 e0       	ldi	r25, 0x00	; 0
    4402:	b7 01       	movw	r22, r14
    4404:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <HAL_EEPROM_voidReadData>
		if(LOC_u8NumberCheck != 255)
    4408:	89 81       	ldd	r24, Y+1	; 0x01
    440a:	8f 3f       	cpi	r24, 0xFF	; 255
    440c:	09 f0       	breq	.+2      	; 0x4410 <APP_Registeration_voidGetNumberOfAdmins+0x7c>
		{
			LOC_u8AdminNumber++;
    440e:	1f 5f       	subi	r17, 0xFF	; 255
{
	u16 LOC_u16LocationVariable = ADMIN_LOCATION_TOP;
	u8 LOC_u8AdminNumber = 0,LOC_u8NumberCheck = 0;
	for(;LOC_u16LocationVariable <= ADMIN_LOCATION_BOT;LOC_u16LocationVariable += STEP)
	{
		HAL_EEPROM_voidReadData(LOC_u16LocationVariable,&LOC_u8NumberCheck);
    4410:	88 e2       	ldi	r24, 0x28	; 40
    4412:	90 e0       	ldi	r25, 0x00	; 0
    4414:	b7 01       	movw	r22, r14
    4416:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <HAL_EEPROM_voidReadData>
		if(LOC_u8NumberCheck != 255)
    441a:	89 81       	ldd	r24, Y+1	; 0x01
    441c:	8f 3f       	cpi	r24, 0xFF	; 255
    441e:	09 f0       	breq	.+2      	; 0x4422 <APP_Registeration_voidGetNumberOfAdmins+0x8e>
		{
			LOC_u8AdminNumber++;
    4420:	1f 5f       	subi	r17, 0xFF	; 255
{
	u16 LOC_u16LocationVariable = ADMIN_LOCATION_TOP;
	u8 LOC_u8AdminNumber = 0,LOC_u8NumberCheck = 0;
	for(;LOC_u16LocationVariable <= ADMIN_LOCATION_BOT;LOC_u16LocationVariable += STEP)
	{
		HAL_EEPROM_voidReadData(LOC_u16LocationVariable,&LOC_u8NumberCheck);
    4422:	80 e3       	ldi	r24, 0x30	; 48
    4424:	90 e0       	ldi	r25, 0x00	; 0
    4426:	b7 01       	movw	r22, r14
    4428:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <HAL_EEPROM_voidReadData>
		if(LOC_u8NumberCheck != 255)
    442c:	89 81       	ldd	r24, Y+1	; 0x01
    442e:	8f 3f       	cpi	r24, 0xFF	; 255
    4430:	09 f0       	breq	.+2      	; 0x4434 <APP_Registeration_voidGetNumberOfAdmins+0xa0>
		{
			LOC_u8AdminNumber++;
    4432:	1f 5f       	subi	r17, 0xFF	; 255
{
	u16 LOC_u16LocationVariable = ADMIN_LOCATION_TOP;
	u8 LOC_u8AdminNumber = 0,LOC_u8NumberCheck = 0;
	for(;LOC_u16LocationVariable <= ADMIN_LOCATION_BOT;LOC_u16LocationVariable += STEP)
	{
		HAL_EEPROM_voidReadData(LOC_u16LocationVariable,&LOC_u8NumberCheck);
    4434:	88 e3       	ldi	r24, 0x38	; 56
    4436:	90 e0       	ldi	r25, 0x00	; 0
    4438:	b7 01       	movw	r22, r14
    443a:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <HAL_EEPROM_voidReadData>
		if(LOC_u8NumberCheck != 255)
    443e:	89 81       	ldd	r24, Y+1	; 0x01
    4440:	8f 3f       	cpi	r24, 0xFF	; 255
    4442:	09 f0       	breq	.+2      	; 0x4446 <APP_Registeration_voidGetNumberOfAdmins+0xb2>
		{
			LOC_u8AdminNumber++;
    4444:	1f 5f       	subi	r17, 0xFF	; 255
{
	u16 LOC_u16LocationVariable = ADMIN_LOCATION_TOP;
	u8 LOC_u8AdminNumber = 0,LOC_u8NumberCheck = 0;
	for(;LOC_u16LocationVariable <= ADMIN_LOCATION_BOT;LOC_u16LocationVariable += STEP)
	{
		HAL_EEPROM_voidReadData(LOC_u16LocationVariable,&LOC_u8NumberCheck);
    4446:	80 e4       	ldi	r24, 0x40	; 64
    4448:	90 e0       	ldi	r25, 0x00	; 0
    444a:	b7 01       	movw	r22, r14
    444c:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <HAL_EEPROM_voidReadData>
		if(LOC_u8NumberCheck != 255)
    4450:	89 81       	ldd	r24, Y+1	; 0x01
    4452:	8f 3f       	cpi	r24, 0xFF	; 255
    4454:	09 f0       	breq	.+2      	; 0x4458 <APP_Registeration_voidGetNumberOfAdmins+0xc4>
		{
			LOC_u8AdminNumber++;
    4456:	1f 5f       	subi	r17, 0xFF	; 255
{
	u16 LOC_u16LocationVariable = ADMIN_LOCATION_TOP;
	u8 LOC_u8AdminNumber = 0,LOC_u8NumberCheck = 0;
	for(;LOC_u16LocationVariable <= ADMIN_LOCATION_BOT;LOC_u16LocationVariable += STEP)
	{
		HAL_EEPROM_voidReadData(LOC_u16LocationVariable,&LOC_u8NumberCheck);
    4458:	88 e4       	ldi	r24, 0x48	; 72
    445a:	90 e0       	ldi	r25, 0x00	; 0
    445c:	b7 01       	movw	r22, r14
    445e:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <HAL_EEPROM_voidReadData>
		if(LOC_u8NumberCheck != 255)
    4462:	89 81       	ldd	r24, Y+1	; 0x01
    4464:	8f 3f       	cpi	r24, 0xFF	; 255
    4466:	09 f0       	breq	.+2      	; 0x446a <APP_Registeration_voidGetNumberOfAdmins+0xd6>
		{
			LOC_u8AdminNumber++;
    4468:	1f 5f       	subi	r17, 0xFF	; 255
{
	u16 LOC_u16LocationVariable = ADMIN_LOCATION_TOP;
	u8 LOC_u8AdminNumber = 0,LOC_u8NumberCheck = 0;
	for(;LOC_u16LocationVariable <= ADMIN_LOCATION_BOT;LOC_u16LocationVariable += STEP)
	{
		HAL_EEPROM_voidReadData(LOC_u16LocationVariable,&LOC_u8NumberCheck);
    446a:	80 e5       	ldi	r24, 0x50	; 80
    446c:	90 e0       	ldi	r25, 0x00	; 0
    446e:	b7 01       	movw	r22, r14
    4470:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <HAL_EEPROM_voidReadData>
		if(LOC_u8NumberCheck != 255)
    4474:	89 81       	ldd	r24, Y+1	; 0x01
    4476:	8f 3f       	cpi	r24, 0xFF	; 255
    4478:	09 f0       	breq	.+2      	; 0x447c <APP_Registeration_voidGetNumberOfAdmins+0xe8>
		{
			LOC_u8AdminNumber++;
    447a:	1f 5f       	subi	r17, 0xFF	; 255
{
	u16 LOC_u16LocationVariable = ADMIN_LOCATION_TOP;
	u8 LOC_u8AdminNumber = 0,LOC_u8NumberCheck = 0;
	for(;LOC_u16LocationVariable <= ADMIN_LOCATION_BOT;LOC_u16LocationVariable += STEP)
	{
		HAL_EEPROM_voidReadData(LOC_u16LocationVariable,&LOC_u8NumberCheck);
    447c:	88 e5       	ldi	r24, 0x58	; 88
    447e:	90 e0       	ldi	r25, 0x00	; 0
    4480:	b7 01       	movw	r22, r14
    4482:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <HAL_EEPROM_voidReadData>
		if(LOC_u8NumberCheck != 255)
    4486:	89 81       	ldd	r24, Y+1	; 0x01
    4488:	8f 3f       	cpi	r24, 0xFF	; 255
    448a:	09 f0       	breq	.+2      	; 0x448e <APP_Registeration_voidGetNumberOfAdmins+0xfa>
		{
			LOC_u8AdminNumber++;
    448c:	1f 5f       	subi	r17, 0xFF	; 255
		else
		{
			/*Do nothing*/
		}
	}
	*LOC_Pu8AdminsNumber = LOC_u8AdminNumber;
    448e:	f6 01       	movw	r30, r12
    4490:	10 83       	st	Z, r17

}
    4492:	0f 90       	pop	r0
    4494:	cf 91       	pop	r28
    4496:	df 91       	pop	r29
    4498:	1f 91       	pop	r17
    449a:	ff 90       	pop	r15
    449c:	ef 90       	pop	r14
    449e:	df 90       	pop	r13
    44a0:	cf 90       	pop	r12
    44a2:	08 95       	ret

000044a4 <Check_AdminID>:
}



u8 Check_AdminID(u16 LOC_u16AdminID)
{
    44a4:	6f 92       	push	r6
    44a6:	7f 92       	push	r7
    44a8:	8f 92       	push	r8
    44aa:	9f 92       	push	r9
    44ac:	af 92       	push	r10
    44ae:	bf 92       	push	r11
    44b0:	cf 92       	push	r12
    44b2:	df 92       	push	r13
    44b4:	ff 92       	push	r15
    44b6:	0f 93       	push	r16
    44b8:	1f 93       	push	r17
    44ba:	df 93       	push	r29
    44bc:	cf 93       	push	r28
    44be:	cd b7       	in	r28, 0x3d	; 61
    44c0:	de b7       	in	r29, 0x3e	; 62
    44c2:	28 97       	sbiw	r28, 0x08	; 8
    44c4:	0f b6       	in	r0, 0x3f	; 63
    44c6:	f8 94       	cli
    44c8:	de bf       	out	0x3e, r29	; 62
    44ca:	0f be       	out	0x3f, r0	; 63
    44cc:	cd bf       	out	0x3d, r28	; 61
    44ce:	9c 01       	movw	r18, r24
	u8 i=3,LOC_u8AdminNumberFlag = 0, LOC_u8IDMatchedFlag = 0 ,LOC_u8AdminID_Read[MAX_DIGITS] , LOC_u8AdminIDArray[MAX_DIGITS], LOC_u8DigitCounter = 0;

	u16 LOC_u16AdminLocationVariable = ADMIN_LOCATION_TOP,LOC_u16AdminLocationVariableDigits ;


	while (LOC_u16AdminID != 0)
    44d0:	00 97       	sbiw	r24, 0x00	; 0
    44d2:	b9 f0       	breq	.+46     	; 0x4502 <Check_AdminID+0x5e>
    44d4:	43 e0       	ldi	r20, 0x03	; 3
    44d6:	8e 01       	movw	r16, r28
    44d8:	0b 5f       	subi	r16, 0xFB	; 251
    44da:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		LOC_u8AdminIDArray[i] = (LOC_u16AdminID % 10);
    44dc:	f8 01       	movw	r30, r16
    44de:	e4 0f       	add	r30, r20
    44e0:	f1 1d       	adc	r31, r1
    44e2:	c9 01       	movw	r24, r18
    44e4:	6a e0       	ldi	r22, 0x0A	; 10
    44e6:	70 e0       	ldi	r23, 0x00	; 0
    44e8:	0e 94 92 2b 	call	0x5724	; 0x5724 <__udivmodhi4>
    44ec:	80 83       	st	Z, r24
		LOC_u16AdminID = (LOC_u16AdminID / 10);
    44ee:	c9 01       	movw	r24, r18
    44f0:	6a e0       	ldi	r22, 0x0A	; 10
    44f2:	70 e0       	ldi	r23, 0x00	; 0
    44f4:	0e 94 92 2b 	call	0x5724	; 0x5724 <__udivmodhi4>
    44f8:	9b 01       	movw	r18, r22
		i--;
    44fa:	41 50       	subi	r20, 0x01	; 1
	u8 i=3,LOC_u8AdminNumberFlag = 0, LOC_u8IDMatchedFlag = 0 ,LOC_u8AdminID_Read[MAX_DIGITS] , LOC_u8AdminIDArray[MAX_DIGITS], LOC_u8DigitCounter = 0;

	u16 LOC_u16AdminLocationVariable = ADMIN_LOCATION_TOP,LOC_u16AdminLocationVariableDigits ;


	while (LOC_u16AdminID != 0)
    44fc:	61 15       	cp	r22, r1
    44fe:	71 05       	cpc	r23, r1
    4500:	69 f7       	brne	.-38     	; 0x44dc <Check_AdminID+0x38>
    4502:	ff 24       	eor	r15, r15
    4504:	00 e0       	ldi	r16, 0x00	; 0
    4506:	10 e0       	ldi	r17, 0x00	; 0
    4508:	6e 01       	movw	r12, r28
    450a:	08 94       	sec
    450c:	c1 1c       	adc	r12, r1
    450e:	d1 1c       	adc	r13, r1
		LOC_u8AdminNumberFlag++;
		LOC_u16AdminLocationVariableDigits = LOC_u16AdminLocationVariable;
		for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DIGITS;LOC_u8DigitCounter++)
		{

			HAL_EEPROM_voidReadData(LOC_u16AdminLocationVariableDigits,&LOC_u8AdminID_Read[LOC_u8DigitCounter]);
    4510:	72 e0       	ldi	r23, 0x02	; 2
    4512:	a7 2e       	mov	r10, r23
    4514:	b1 2c       	mov	r11, r1
    4516:	ac 0e       	add	r10, r28
    4518:	bd 1e       	adc	r11, r29
    451a:	63 e0       	ldi	r22, 0x03	; 3
    451c:	86 2e       	mov	r8, r22
    451e:	91 2c       	mov	r9, r1
    4520:	8c 0e       	add	r8, r28
    4522:	9d 1e       	adc	r9, r29
    4524:	54 e0       	ldi	r21, 0x04	; 4
    4526:	65 2e       	mov	r6, r21
    4528:	71 2c       	mov	r7, r1
    452a:	6c 0e       	add	r6, r28
    452c:	7d 1e       	adc	r7, r29
	}


	for(;LOC_u16AdminLocationVariable <= ADMIN_LOCATION_BOT;LOC_u16AdminLocationVariable += STEP)
	{
		LOC_u8AdminNumberFlag++;
    452e:	f3 94       	inc	r15
		LOC_u16AdminLocationVariableDigits = LOC_u16AdminLocationVariable;
		for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DIGITS;LOC_u8DigitCounter++)
		{

			HAL_EEPROM_voidReadData(LOC_u16AdminLocationVariableDigits,&LOC_u8AdminID_Read[LOC_u8DigitCounter]);
    4530:	c8 01       	movw	r24, r16
    4532:	b6 01       	movw	r22, r12
    4534:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <HAL_EEPROM_voidReadData>
			if (LOC_u8AdminID_Read[LOC_u8DigitCounter] == LOC_u8AdminIDArray[LOC_u8DigitCounter])
    4538:	99 81       	ldd	r25, Y+1	; 0x01
    453a:	8d 81       	ldd	r24, Y+5	; 0x05
    453c:	98 17       	cp	r25, r24
    453e:	81 f5       	brne	.+96     	; 0x45a0 <Check_AdminID+0xfc>
		LOC_u8AdminNumberFlag++;
		LOC_u16AdminLocationVariableDigits = LOC_u16AdminLocationVariable;
		for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DIGITS;LOC_u8DigitCounter++)
		{

			HAL_EEPROM_voidReadData(LOC_u16AdminLocationVariableDigits,&LOC_u8AdminID_Read[LOC_u8DigitCounter]);
    4540:	c8 01       	movw	r24, r16
    4542:	01 96       	adiw	r24, 0x01	; 1
    4544:	b5 01       	movw	r22, r10
    4546:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <HAL_EEPROM_voidReadData>
			if (LOC_u8AdminID_Read[LOC_u8DigitCounter] == LOC_u8AdminIDArray[LOC_u8DigitCounter])
    454a:	9a 81       	ldd	r25, Y+2	; 0x02
    454c:	8e 81       	ldd	r24, Y+6	; 0x06
    454e:	98 17       	cp	r25, r24
    4550:	39 f5       	brne	.+78     	; 0x45a0 <Check_AdminID+0xfc>
		LOC_u8AdminNumberFlag++;
		LOC_u16AdminLocationVariableDigits = LOC_u16AdminLocationVariable;
		for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DIGITS;LOC_u8DigitCounter++)
		{

			HAL_EEPROM_voidReadData(LOC_u16AdminLocationVariableDigits,&LOC_u8AdminID_Read[LOC_u8DigitCounter]);
    4552:	c8 01       	movw	r24, r16
    4554:	02 96       	adiw	r24, 0x02	; 2
    4556:	b4 01       	movw	r22, r8
    4558:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <HAL_EEPROM_voidReadData>
			if (LOC_u8AdminID_Read[LOC_u8DigitCounter] == LOC_u8AdminIDArray[LOC_u8DigitCounter])
    455c:	9b 81       	ldd	r25, Y+3	; 0x03
    455e:	8f 81       	ldd	r24, Y+7	; 0x07
    4560:	98 17       	cp	r25, r24
    4562:	f1 f4       	brne	.+60     	; 0x45a0 <Check_AdminID+0xfc>
		LOC_u8AdminNumberFlag++;
		LOC_u16AdminLocationVariableDigits = LOC_u16AdminLocationVariable;
		for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DIGITS;LOC_u8DigitCounter++)
		{

			HAL_EEPROM_voidReadData(LOC_u16AdminLocationVariableDigits,&LOC_u8AdminID_Read[LOC_u8DigitCounter]);
    4564:	c8 01       	movw	r24, r16
    4566:	03 96       	adiw	r24, 0x03	; 3
    4568:	b3 01       	movw	r22, r6
    456a:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <HAL_EEPROM_voidReadData>
			if (LOC_u8AdminID_Read[LOC_u8DigitCounter] == LOC_u8AdminIDArray[LOC_u8DigitCounter])
    456e:	9c 81       	ldd	r25, Y+4	; 0x04
    4570:	88 85       	ldd	r24, Y+8	; 0x08
    4572:	98 17       	cp	r25, r24
    4574:	a9 f4       	brne	.+42     	; 0x45a0 <Check_AdminID+0xfc>
			//Remain in the loop.
		}
	}

	return ADMIN_NOT_FOUND;
}
    4576:	8f 2d       	mov	r24, r15
    4578:	28 96       	adiw	r28, 0x08	; 8
    457a:	0f b6       	in	r0, 0x3f	; 63
    457c:	f8 94       	cli
    457e:	de bf       	out	0x3e, r29	; 62
    4580:	0f be       	out	0x3f, r0	; 63
    4582:	cd bf       	out	0x3d, r28	; 61
    4584:	cf 91       	pop	r28
    4586:	df 91       	pop	r29
    4588:	1f 91       	pop	r17
    458a:	0f 91       	pop	r16
    458c:	ff 90       	pop	r15
    458e:	df 90       	pop	r13
    4590:	cf 90       	pop	r12
    4592:	bf 90       	pop	r11
    4594:	af 90       	pop	r10
    4596:	9f 90       	pop	r9
    4598:	8f 90       	pop	r8
    459a:	7f 90       	pop	r7
    459c:	6f 90       	pop	r6
    459e:	08 95       	ret
		LOC_u16AdminID = (LOC_u16AdminID / 10);
		i--;
	}


	for(;LOC_u16AdminLocationVariable <= ADMIN_LOCATION_BOT;LOC_u16AdminLocationVariable += STEP)
    45a0:	08 5f       	subi	r16, 0xF8	; 248
    45a2:	1f 4f       	sbci	r17, 0xFF	; 255
    45a4:	8c e0       	ldi	r24, 0x0C	; 12
    45a6:	f8 16       	cp	r15, r24
    45a8:	11 f6       	brne	.-124    	; 0x452e <Check_AdminID+0x8a>
    45aa:	4b eb       	ldi	r20, 0xBB	; 187
    45ac:	f4 2e       	mov	r15, r20
    45ae:	e3 cf       	rjmp	.-58     	; 0x4576 <Check_AdminID+0xd2>

000045b0 <APP_Registeration_voidResetMemory>:
		}
	}
}

void APP_Registeration_voidResetMemory(void)
{
    45b0:	ef 92       	push	r14
    45b2:	ff 92       	push	r15
    45b4:	0f 93       	push	r16
    45b6:	1f 93       	push	r17
    45b8:	cf 93       	push	r28
    45ba:	df 93       	push	r29
    45bc:	80 e0       	ldi	r24, 0x00	; 0
    45be:	90 e0       	ldi	r25, 0x00	; 0
    45c0:	c0 e0       	ldi	r28, 0x00	; 0
    45c2:	d0 e0       	ldi	r29, 0x00	; 0
	for(;LOC_u16LocationVariable <= MEMORY_BOT;LOC_u16LocationVariable += STEP)
	{
		LOC_u16LocationVariableDigits = LOC_u16LocationVariable;
		for(LOC_u8UserDetails =0;LOC_u8UserDetails<MAX_DETAILS;LOC_u8UserDetails++)
		{
			HAL_EEPROM_voidWriteData(LOC_u16LocationVariableDigits++,CLEAR_DATA);
    45c4:	8c 01       	movw	r16, r24
    45c6:	0f 5f       	subi	r16, 0xFF	; 255
    45c8:	1f 4f       	sbci	r17, 0xFF	; 255
    45ca:	6f ef       	ldi	r22, 0xFF	; 255
    45cc:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <HAL_EEPROM_voidWriteData>
    45d0:	78 01       	movw	r14, r16
    45d2:	08 94       	sec
    45d4:	e1 1c       	adc	r14, r1
    45d6:	f1 1c       	adc	r15, r1
    45d8:	c8 01       	movw	r24, r16
    45da:	6f ef       	ldi	r22, 0xFF	; 255
    45dc:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <HAL_EEPROM_voidWriteData>
    45e0:	87 01       	movw	r16, r14
    45e2:	0f 5f       	subi	r16, 0xFF	; 255
    45e4:	1f 4f       	sbci	r17, 0xFF	; 255
    45e6:	c7 01       	movw	r24, r14
    45e8:	6f ef       	ldi	r22, 0xFF	; 255
    45ea:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <HAL_EEPROM_voidWriteData>
    45ee:	78 01       	movw	r14, r16
    45f0:	08 94       	sec
    45f2:	e1 1c       	adc	r14, r1
    45f4:	f1 1c       	adc	r15, r1
    45f6:	c8 01       	movw	r24, r16
    45f8:	6f ef       	ldi	r22, 0xFF	; 255
    45fa:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <HAL_EEPROM_voidWriteData>
    45fe:	87 01       	movw	r16, r14
    4600:	0f 5f       	subi	r16, 0xFF	; 255
    4602:	1f 4f       	sbci	r17, 0xFF	; 255
    4604:	c7 01       	movw	r24, r14
    4606:	6f ef       	ldi	r22, 0xFF	; 255
    4608:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <HAL_EEPROM_voidWriteData>
    460c:	78 01       	movw	r14, r16
    460e:	08 94       	sec
    4610:	e1 1c       	adc	r14, r1
    4612:	f1 1c       	adc	r15, r1
    4614:	c8 01       	movw	r24, r16
    4616:	6f ef       	ldi	r22, 0xFF	; 255
    4618:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <HAL_EEPROM_voidWriteData>
    461c:	c7 01       	movw	r24, r14
    461e:	6f ef       	ldi	r22, 0xFF	; 255
    4620:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <HAL_EEPROM_voidWriteData>
    4624:	c7 01       	movw	r24, r14
    4626:	01 96       	adiw	r24, 0x01	; 1
    4628:	6f ef       	ldi	r22, 0xFF	; 255
    462a:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <HAL_EEPROM_voidWriteData>

void APP_Registeration_voidResetMemory(void)
{
	u16 LOC_u16LocationVariable = MEMORY_TOP,LOC_u16LocationVariableDigits;
	u8 LOC_u8UserDetails;
	for(;LOC_u16LocationVariable <= MEMORY_BOT;LOC_u16LocationVariable += STEP)
    462e:	28 96       	adiw	r28, 0x08	; 8
    4630:	ce 01       	movw	r24, r28
    4632:	24 e0       	ldi	r18, 0x04	; 4
    4634:	c0 30       	cpi	r28, 0x00	; 0
    4636:	d2 07       	cpc	r29, r18
    4638:	29 f6       	brne	.-118    	; 0x45c4 <APP_Registeration_voidResetMemory+0x14>
		for(LOC_u8UserDetails =0;LOC_u8UserDetails<MAX_DETAILS;LOC_u8UserDetails++)
		{
			HAL_EEPROM_voidWriteData(LOC_u16LocationVariableDigits++,CLEAR_DATA);
		}
	}
}
    463a:	df 91       	pop	r29
    463c:	cf 91       	pop	r28
    463e:	1f 91       	pop	r17
    4640:	0f 91       	pop	r16
    4642:	ff 90       	pop	r15
    4644:	ef 90       	pop	r14
    4646:	08 95       	ret

00004648 <APP_Registeration_voidDeleteAllUsers>:
	*LOC_Pu8AdminsNumber = LOC_u8AdminNumber;

}

void APP_Registeration_voidDeleteAllUsers(void)
{
    4648:	ef 92       	push	r14
    464a:	ff 92       	push	r15
    464c:	0f 93       	push	r16
    464e:	1f 93       	push	r17
    4650:	cf 93       	push	r28
    4652:	df 93       	push	r29
    4654:	80 e6       	ldi	r24, 0x60	; 96
    4656:	90 e0       	ldi	r25, 0x00	; 0
    4658:	c0 e6       	ldi	r28, 0x60	; 96
    465a:	d0 e0       	ldi	r29, 0x00	; 0
	for(;LOC_u16UserLocationVariable <= USER_LOCATION_BOT;LOC_u16UserLocationVariable += STEP)
	{
		LOC_u16UserLocationVariableDigits = LOC_u16UserLocationVariable;
		for(LOC_u8UserDetails =0;LOC_u8UserDetails<MAX_DETAILS;LOC_u8UserDetails++)
		{
			HAL_EEPROM_voidWriteData(LOC_u16UserLocationVariableDigits++,CLEAR_DATA);
    465c:	8c 01       	movw	r16, r24
    465e:	0f 5f       	subi	r16, 0xFF	; 255
    4660:	1f 4f       	sbci	r17, 0xFF	; 255
    4662:	6f ef       	ldi	r22, 0xFF	; 255
    4664:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <HAL_EEPROM_voidWriteData>
    4668:	78 01       	movw	r14, r16
    466a:	08 94       	sec
    466c:	e1 1c       	adc	r14, r1
    466e:	f1 1c       	adc	r15, r1
    4670:	c8 01       	movw	r24, r16
    4672:	6f ef       	ldi	r22, 0xFF	; 255
    4674:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <HAL_EEPROM_voidWriteData>
    4678:	87 01       	movw	r16, r14
    467a:	0f 5f       	subi	r16, 0xFF	; 255
    467c:	1f 4f       	sbci	r17, 0xFF	; 255
    467e:	c7 01       	movw	r24, r14
    4680:	6f ef       	ldi	r22, 0xFF	; 255
    4682:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <HAL_EEPROM_voidWriteData>
    4686:	78 01       	movw	r14, r16
    4688:	08 94       	sec
    468a:	e1 1c       	adc	r14, r1
    468c:	f1 1c       	adc	r15, r1
    468e:	c8 01       	movw	r24, r16
    4690:	6f ef       	ldi	r22, 0xFF	; 255
    4692:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <HAL_EEPROM_voidWriteData>
    4696:	87 01       	movw	r16, r14
    4698:	0f 5f       	subi	r16, 0xFF	; 255
    469a:	1f 4f       	sbci	r17, 0xFF	; 255
    469c:	c7 01       	movw	r24, r14
    469e:	6f ef       	ldi	r22, 0xFF	; 255
    46a0:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <HAL_EEPROM_voidWriteData>
    46a4:	78 01       	movw	r14, r16
    46a6:	08 94       	sec
    46a8:	e1 1c       	adc	r14, r1
    46aa:	f1 1c       	adc	r15, r1
    46ac:	c8 01       	movw	r24, r16
    46ae:	6f ef       	ldi	r22, 0xFF	; 255
    46b0:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <HAL_EEPROM_voidWriteData>
    46b4:	c7 01       	movw	r24, r14
    46b6:	6f ef       	ldi	r22, 0xFF	; 255
    46b8:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <HAL_EEPROM_voidWriteData>
    46bc:	c7 01       	movw	r24, r14
    46be:	01 96       	adiw	r24, 0x01	; 1
    46c0:	6f ef       	ldi	r22, 0xFF	; 255
    46c2:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <HAL_EEPROM_voidWriteData>

void APP_Registeration_voidDeleteAllUsers(void)
{
	u16 LOC_u16UserLocationVariable = USER_LOCATION_TOP,LOC_u16UserLocationVariableDigits;
	u8 LOC_u8UserDetails;
	for(;LOC_u16UserLocationVariable <= USER_LOCATION_BOT;LOC_u16UserLocationVariable += STEP)
    46c6:	28 96       	adiw	r28, 0x08	; 8
    46c8:	ce 01       	movw	r24, r28
    46ca:	21 e0       	ldi	r18, 0x01	; 1
    46cc:	c0 32       	cpi	r28, 0x20	; 32
    46ce:	d2 07       	cpc	r29, r18
    46d0:	29 f6       	brne	.-118    	; 0x465c <APP_Registeration_voidDeleteAllUsers+0x14>
		for(LOC_u8UserDetails =0;LOC_u8UserDetails<MAX_DETAILS;LOC_u8UserDetails++)
		{
			HAL_EEPROM_voidWriteData(LOC_u16UserLocationVariableDigits++,CLEAR_DATA);
		}
	}
}
    46d2:	df 91       	pop	r29
    46d4:	cf 91       	pop	r28
    46d6:	1f 91       	pop	r17
    46d8:	0f 91       	pop	r16
    46da:	ff 90       	pop	r15
    46dc:	ef 90       	pop	r14
    46de:	08 95       	ret

000046e0 <Remove_Admin>:
		return FULL;
	}
}

u8 Remove_Admin(u16 LOC_u16AdminID)
{
    46e0:	4f 92       	push	r4
    46e2:	5f 92       	push	r5
    46e4:	6f 92       	push	r6
    46e6:	7f 92       	push	r7
    46e8:	8f 92       	push	r8
    46ea:	9f 92       	push	r9
    46ec:	af 92       	push	r10
    46ee:	bf 92       	push	r11
    46f0:	cf 92       	push	r12
    46f2:	df 92       	push	r13
    46f4:	ef 92       	push	r14
    46f6:	ff 92       	push	r15
    46f8:	0f 93       	push	r16
    46fa:	1f 93       	push	r17
    46fc:	df 93       	push	r29
    46fe:	cf 93       	push	r28
    4700:	cd b7       	in	r28, 0x3d	; 61
    4702:	de b7       	in	r29, 0x3e	; 62
    4704:	61 97       	sbiw	r28, 0x11	; 17
    4706:	0f b6       	in	r0, 0x3f	; 63
    4708:	f8 94       	cli
    470a:	de bf       	out	0x3e, r29	; 62
    470c:	0f be       	out	0x3f, r0	; 63
    470e:	cd bf       	out	0x3d, r28	; 61
    4710:	9c 01       	movw	r18, r24
	u8 i=3,LOC_u8AdminNumberFlag = 0, LOC_u8IDMatchedFlag = 0 ,LOC_u8AdminID_Read[MAX_DIGITS] , LOC_u8AdminIDArray[MAX_DIGITS], LOC_u8DigitCounter = 0;

	u16 LOC_u16AdminLocationVariable = ADMIN_LOCATION_TOP,LOC_u16AdminLocationVariableDigits ;


	while (LOC_u16AdminID != 0)
    4712:	00 97       	sbiw	r24, 0x00	; 0
    4714:	b9 f0       	breq	.+46     	; 0x4744 <Remove_Admin+0x64>
    4716:	43 e0       	ldi	r20, 0x03	; 3
    4718:	8e 01       	movw	r16, r28
    471a:	0a 5f       	subi	r16, 0xFA	; 250
    471c:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		LOC_u8AdminIDArray[i] = (LOC_u16AdminID % 10);
    471e:	f8 01       	movw	r30, r16
    4720:	e4 0f       	add	r30, r20
    4722:	f1 1d       	adc	r31, r1
    4724:	c9 01       	movw	r24, r18
    4726:	6a e0       	ldi	r22, 0x0A	; 10
    4728:	70 e0       	ldi	r23, 0x00	; 0
    472a:	0e 94 92 2b 	call	0x5724	; 0x5724 <__udivmodhi4>
    472e:	80 83       	st	Z, r24
		LOC_u16AdminID = (LOC_u16AdminID / 10);
    4730:	c9 01       	movw	r24, r18
    4732:	6a e0       	ldi	r22, 0x0A	; 10
    4734:	70 e0       	ldi	r23, 0x00	; 0
    4736:	0e 94 92 2b 	call	0x5724	; 0x5724 <__udivmodhi4>
    473a:	9b 01       	movw	r18, r22
		i--;
    473c:	41 50       	subi	r20, 0x01	; 1
	u8 i=3,LOC_u8AdminNumberFlag = 0, LOC_u8IDMatchedFlag = 0 ,LOC_u8AdminID_Read[MAX_DIGITS] , LOC_u8AdminIDArray[MAX_DIGITS], LOC_u8DigitCounter = 0;

	u16 LOC_u16AdminLocationVariable = ADMIN_LOCATION_TOP,LOC_u16AdminLocationVariableDigits ;


	while (LOC_u16AdminID != 0)
    473e:	61 15       	cp	r22, r1
    4740:	71 05       	cpc	r23, r1
    4742:	69 f7       	brne	.-38     	; 0x471e <Remove_Admin+0x3e>
	}
}

u8 Remove_Admin(u16 LOC_u16AdminID)
{
	u8 LOC_u8DigitCounter,LOC_u8AdminIDArray[MAX_DIGITS],LOC_u8ConfirmClearFlag = 0 ,LOC_u8AdminCheck = 0,LOC_u8GetLastAdmin, LOC_u8AdminDetails_Read[MAX_DETAILS] ,LOC_u8TransferArray[MAX_DETAILS] = {0} ;
    4744:	3a e0       	ldi	r19, 0x0A	; 10
    4746:	43 2e       	mov	r4, r19
    4748:	51 2c       	mov	r5, r1
    474a:	4c 0e       	add	r4, r28
    474c:	5d 1e       	adc	r5, r29
    474e:	88 e0       	ldi	r24, 0x08	; 8
    4750:	f2 01       	movw	r30, r4
    4752:	11 92       	st	Z+, r1
    4754:	8a 95       	dec	r24
    4756:	e9 f7       	brne	.-6      	; 0x4752 <Remove_Admin+0x72>
    4758:	ee 24       	eor	r14, r14
    475a:	00 e0       	ldi	r16, 0x00	; 0
    475c:	10 e0       	ldi	r17, 0x00	; 0
    475e:	22 e0       	ldi	r18, 0x02	; 2
    4760:	a2 2e       	mov	r10, r18
    4762:	b1 2c       	mov	r11, r1
    4764:	ac 0e       	add	r10, r28
    4766:	bd 1e       	adc	r11, r29
		LOC_u8AdminNumberFlag++;
		LOC_u16AdminLocationVariableDigits = LOC_u16AdminLocationVariable;
		for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DIGITS;LOC_u8DigitCounter++)
		{

			HAL_EEPROM_voidReadData(LOC_u16AdminLocationVariableDigits,&LOC_u8AdminID_Read[LOC_u8DigitCounter]);
    4768:	93 e0       	ldi	r25, 0x03	; 3
    476a:	89 2e       	mov	r8, r25
    476c:	91 2c       	mov	r9, r1
    476e:	8c 0e       	add	r8, r28
    4770:	9d 1e       	adc	r9, r29
    4772:	82 e0       	ldi	r24, 0x02	; 2
    4774:	c8 2e       	mov	r12, r24
    4776:	d1 2c       	mov	r13, r1
    4778:	ca 0c       	add	r12, r10
    477a:	db 1c       	adc	r13, r11
    477c:	b5 e0       	ldi	r27, 0x05	; 5
    477e:	6b 2e       	mov	r6, r27
    4780:	71 2c       	mov	r7, r1
    4782:	6c 0e       	add	r6, r28
    4784:	7d 1e       	adc	r7, r29
	}


	for(;LOC_u16AdminLocationVariable <= ADMIN_LOCATION_BOT;LOC_u16AdminLocationVariable += STEP)
	{
		LOC_u8AdminNumberFlag++;
    4786:	e3 94       	inc	r14
		LOC_u16AdminLocationVariableDigits = LOC_u16AdminLocationVariable;
		for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DIGITS;LOC_u8DigitCounter++)
		{

			HAL_EEPROM_voidReadData(LOC_u16AdminLocationVariableDigits,&LOC_u8AdminID_Read[LOC_u8DigitCounter]);
    4788:	c8 01       	movw	r24, r16
    478a:	b5 01       	movw	r22, r10
    478c:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <HAL_EEPROM_voidReadData>
			if (LOC_u8AdminID_Read[LOC_u8DigitCounter] == LOC_u8AdminIDArray[LOC_u8DigitCounter])
    4790:	9a 81       	ldd	r25, Y+2	; 0x02
    4792:	8e 81       	ldd	r24, Y+6	; 0x06
    4794:	98 17       	cp	r25, r24
    4796:	09 f0       	breq	.+2      	; 0x479a <Remove_Admin+0xba>
    4798:	38 c1       	rjmp	.+624    	; 0x4a0a <Remove_Admin+0x32a>
		LOC_u8AdminNumberFlag++;
		LOC_u16AdminLocationVariableDigits = LOC_u16AdminLocationVariable;
		for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DIGITS;LOC_u8DigitCounter++)
		{

			HAL_EEPROM_voidReadData(LOC_u16AdminLocationVariableDigits,&LOC_u8AdminID_Read[LOC_u8DigitCounter]);
    479a:	c8 01       	movw	r24, r16
    479c:	01 96       	adiw	r24, 0x01	; 1
    479e:	b4 01       	movw	r22, r8
    47a0:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <HAL_EEPROM_voidReadData>
			if (LOC_u8AdminID_Read[LOC_u8DigitCounter] == LOC_u8AdminIDArray[LOC_u8DigitCounter])
    47a4:	9b 81       	ldd	r25, Y+3	; 0x03
    47a6:	8f 81       	ldd	r24, Y+7	; 0x07
    47a8:	98 17       	cp	r25, r24
    47aa:	09 f0       	breq	.+2      	; 0x47ae <Remove_Admin+0xce>
    47ac:	2e c1       	rjmp	.+604    	; 0x4a0a <Remove_Admin+0x32a>
		LOC_u8AdminNumberFlag++;
		LOC_u16AdminLocationVariableDigits = LOC_u16AdminLocationVariable;
		for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DIGITS;LOC_u8DigitCounter++)
		{

			HAL_EEPROM_voidReadData(LOC_u16AdminLocationVariableDigits,&LOC_u8AdminID_Read[LOC_u8DigitCounter]);
    47ae:	c8 01       	movw	r24, r16
    47b0:	02 96       	adiw	r24, 0x02	; 2
    47b2:	b6 01       	movw	r22, r12
    47b4:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <HAL_EEPROM_voidReadData>
			if (LOC_u8AdminID_Read[LOC_u8DigitCounter] == LOC_u8AdminIDArray[LOC_u8DigitCounter])
    47b8:	9c 81       	ldd	r25, Y+4	; 0x04
    47ba:	88 85       	ldd	r24, Y+8	; 0x08
    47bc:	98 17       	cp	r25, r24
    47be:	09 f0       	breq	.+2      	; 0x47c2 <Remove_Admin+0xe2>
    47c0:	24 c1       	rjmp	.+584    	; 0x4a0a <Remove_Admin+0x32a>
		LOC_u8AdminNumberFlag++;
		LOC_u16AdminLocationVariableDigits = LOC_u16AdminLocationVariable;
		for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DIGITS;LOC_u8DigitCounter++)
		{

			HAL_EEPROM_voidReadData(LOC_u16AdminLocationVariableDigits,&LOC_u8AdminID_Read[LOC_u8DigitCounter]);
    47c2:	c8 01       	movw	r24, r16
    47c4:	03 96       	adiw	r24, 0x03	; 3
    47c6:	b3 01       	movw	r22, r6
    47c8:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <HAL_EEPROM_voidReadData>
			if (LOC_u8AdminID_Read[LOC_u8DigitCounter] == LOC_u8AdminIDArray[LOC_u8DigitCounter])
    47cc:	9d 81       	ldd	r25, Y+5	; 0x05
    47ce:	89 85       	ldd	r24, Y+9	; 0x09
    47d0:	98 17       	cp	r25, r24
    47d2:	09 f0       	breq	.+2      	; 0x47d6 <Remove_Admin+0xf6>
    47d4:	1a c1       	rjmp	.+564    	; 0x4a0a <Remove_Admin+0x32a>


void APP_Registeration_voidGetNumberOfAdmins(u8* LOC_Pu8AdminsNumber)
{
	u16 LOC_u16LocationVariable = ADMIN_LOCATION_TOP;
	u8 LOC_u8AdminNumber = 0,LOC_u8NumberCheck = 0;
    47d6:	19 82       	std	Y+1, r1	; 0x01
	for(;LOC_u16LocationVariable <= ADMIN_LOCATION_BOT;LOC_u16LocationVariable += STEP)
	{
		HAL_EEPROM_voidReadData(LOC_u16LocationVariable,&LOC_u8NumberCheck);
    47d8:	80 e0       	ldi	r24, 0x00	; 0
    47da:	90 e0       	ldi	r25, 0x00	; 0
    47dc:	8e 01       	movw	r16, r28
    47de:	0f 5f       	subi	r16, 0xFF	; 255
    47e0:	1f 4f       	sbci	r17, 0xFF	; 255
    47e2:	b8 01       	movw	r22, r16
    47e4:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <HAL_EEPROM_voidReadData>
    47e8:	ff 24       	eor	r15, r15
    47ea:	89 81       	ldd	r24, Y+1	; 0x01
    47ec:	8f 3f       	cpi	r24, 0xFF	; 255
    47ee:	11 f0       	breq	.+4      	; 0x47f4 <Remove_Admin+0x114>
    47f0:	ff 24       	eor	r15, r15
    47f2:	f3 94       	inc	r15
    47f4:	88 e0       	ldi	r24, 0x08	; 8
    47f6:	90 e0       	ldi	r25, 0x00	; 0
    47f8:	b8 01       	movw	r22, r16
    47fa:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <HAL_EEPROM_voidReadData>
		if(LOC_u8NumberCheck != 255)
    47fe:	89 81       	ldd	r24, Y+1	; 0x01
    4800:	8f 3f       	cpi	r24, 0xFF	; 255
    4802:	09 f0       	breq	.+2      	; 0x4806 <Remove_Admin+0x126>
		{
			LOC_u8AdminNumber++;
    4804:	f3 94       	inc	r15
{
	u16 LOC_u16LocationVariable = ADMIN_LOCATION_TOP;
	u8 LOC_u8AdminNumber = 0,LOC_u8NumberCheck = 0;
	for(;LOC_u16LocationVariable <= ADMIN_LOCATION_BOT;LOC_u16LocationVariable += STEP)
	{
		HAL_EEPROM_voidReadData(LOC_u16LocationVariable,&LOC_u8NumberCheck);
    4806:	80 e1       	ldi	r24, 0x10	; 16
    4808:	90 e0       	ldi	r25, 0x00	; 0
    480a:	b8 01       	movw	r22, r16
    480c:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <HAL_EEPROM_voidReadData>
		if(LOC_u8NumberCheck != 255)
    4810:	89 81       	ldd	r24, Y+1	; 0x01
    4812:	8f 3f       	cpi	r24, 0xFF	; 255
    4814:	09 f0       	breq	.+2      	; 0x4818 <Remove_Admin+0x138>
		{
			LOC_u8AdminNumber++;
    4816:	f3 94       	inc	r15
{
	u16 LOC_u16LocationVariable = ADMIN_LOCATION_TOP;
	u8 LOC_u8AdminNumber = 0,LOC_u8NumberCheck = 0;
	for(;LOC_u16LocationVariable <= ADMIN_LOCATION_BOT;LOC_u16LocationVariable += STEP)
	{
		HAL_EEPROM_voidReadData(LOC_u16LocationVariable,&LOC_u8NumberCheck);
    4818:	88 e1       	ldi	r24, 0x18	; 24
    481a:	90 e0       	ldi	r25, 0x00	; 0
    481c:	b8 01       	movw	r22, r16
    481e:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <HAL_EEPROM_voidReadData>
		if(LOC_u8NumberCheck != 255)
    4822:	89 81       	ldd	r24, Y+1	; 0x01
    4824:	8f 3f       	cpi	r24, 0xFF	; 255
    4826:	09 f0       	breq	.+2      	; 0x482a <Remove_Admin+0x14a>
		{
			LOC_u8AdminNumber++;
    4828:	f3 94       	inc	r15
{
	u16 LOC_u16LocationVariable = ADMIN_LOCATION_TOP;
	u8 LOC_u8AdminNumber = 0,LOC_u8NumberCheck = 0;
	for(;LOC_u16LocationVariable <= ADMIN_LOCATION_BOT;LOC_u16LocationVariable += STEP)
	{
		HAL_EEPROM_voidReadData(LOC_u16LocationVariable,&LOC_u8NumberCheck);
    482a:	80 e2       	ldi	r24, 0x20	; 32
    482c:	90 e0       	ldi	r25, 0x00	; 0
    482e:	b8 01       	movw	r22, r16
    4830:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <HAL_EEPROM_voidReadData>
		if(LOC_u8NumberCheck != 255)
    4834:	89 81       	ldd	r24, Y+1	; 0x01
    4836:	8f 3f       	cpi	r24, 0xFF	; 255
    4838:	09 f0       	breq	.+2      	; 0x483c <Remove_Admin+0x15c>
		{
			LOC_u8AdminNumber++;
    483a:	f3 94       	inc	r15
{
	u16 LOC_u16LocationVariable = ADMIN_LOCATION_TOP;
	u8 LOC_u8AdminNumber = 0,LOC_u8NumberCheck = 0;
	for(;LOC_u16LocationVariable <= ADMIN_LOCATION_BOT;LOC_u16LocationVariable += STEP)
	{
		HAL_EEPROM_voidReadData(LOC_u16LocationVariable,&LOC_u8NumberCheck);
    483c:	88 e2       	ldi	r24, 0x28	; 40
    483e:	90 e0       	ldi	r25, 0x00	; 0
    4840:	b8 01       	movw	r22, r16
    4842:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <HAL_EEPROM_voidReadData>
		if(LOC_u8NumberCheck != 255)
    4846:	89 81       	ldd	r24, Y+1	; 0x01
    4848:	8f 3f       	cpi	r24, 0xFF	; 255
    484a:	09 f0       	breq	.+2      	; 0x484e <Remove_Admin+0x16e>
		{
			LOC_u8AdminNumber++;
    484c:	f3 94       	inc	r15
{
	u16 LOC_u16LocationVariable = ADMIN_LOCATION_TOP;
	u8 LOC_u8AdminNumber = 0,LOC_u8NumberCheck = 0;
	for(;LOC_u16LocationVariable <= ADMIN_LOCATION_BOT;LOC_u16LocationVariable += STEP)
	{
		HAL_EEPROM_voidReadData(LOC_u16LocationVariable,&LOC_u8NumberCheck);
    484e:	80 e3       	ldi	r24, 0x30	; 48
    4850:	90 e0       	ldi	r25, 0x00	; 0
    4852:	b8 01       	movw	r22, r16
    4854:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <HAL_EEPROM_voidReadData>
		if(LOC_u8NumberCheck != 255)
    4858:	89 81       	ldd	r24, Y+1	; 0x01
    485a:	8f 3f       	cpi	r24, 0xFF	; 255
    485c:	09 f0       	breq	.+2      	; 0x4860 <Remove_Admin+0x180>
		{
			LOC_u8AdminNumber++;
    485e:	f3 94       	inc	r15
{
	u16 LOC_u16LocationVariable = ADMIN_LOCATION_TOP;
	u8 LOC_u8AdminNumber = 0,LOC_u8NumberCheck = 0;
	for(;LOC_u16LocationVariable <= ADMIN_LOCATION_BOT;LOC_u16LocationVariable += STEP)
	{
		HAL_EEPROM_voidReadData(LOC_u16LocationVariable,&LOC_u8NumberCheck);
    4860:	88 e3       	ldi	r24, 0x38	; 56
    4862:	90 e0       	ldi	r25, 0x00	; 0
    4864:	b8 01       	movw	r22, r16
    4866:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <HAL_EEPROM_voidReadData>
		if(LOC_u8NumberCheck != 255)
    486a:	89 81       	ldd	r24, Y+1	; 0x01
    486c:	8f 3f       	cpi	r24, 0xFF	; 255
    486e:	09 f0       	breq	.+2      	; 0x4872 <Remove_Admin+0x192>
		{
			LOC_u8AdminNumber++;
    4870:	f3 94       	inc	r15
{
	u16 LOC_u16LocationVariable = ADMIN_LOCATION_TOP;
	u8 LOC_u8AdminNumber = 0,LOC_u8NumberCheck = 0;
	for(;LOC_u16LocationVariable <= ADMIN_LOCATION_BOT;LOC_u16LocationVariable += STEP)
	{
		HAL_EEPROM_voidReadData(LOC_u16LocationVariable,&LOC_u8NumberCheck);
    4872:	80 e4       	ldi	r24, 0x40	; 64
    4874:	90 e0       	ldi	r25, 0x00	; 0
    4876:	b8 01       	movw	r22, r16
    4878:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <HAL_EEPROM_voidReadData>
		if(LOC_u8NumberCheck != 255)
    487c:	89 81       	ldd	r24, Y+1	; 0x01
    487e:	8f 3f       	cpi	r24, 0xFF	; 255
    4880:	09 f0       	breq	.+2      	; 0x4884 <Remove_Admin+0x1a4>
		{
			LOC_u8AdminNumber++;
    4882:	f3 94       	inc	r15
{
	u16 LOC_u16LocationVariable = ADMIN_LOCATION_TOP;
	u8 LOC_u8AdminNumber = 0,LOC_u8NumberCheck = 0;
	for(;LOC_u16LocationVariable <= ADMIN_LOCATION_BOT;LOC_u16LocationVariable += STEP)
	{
		HAL_EEPROM_voidReadData(LOC_u16LocationVariable,&LOC_u8NumberCheck);
    4884:	88 e4       	ldi	r24, 0x48	; 72
    4886:	90 e0       	ldi	r25, 0x00	; 0
    4888:	b8 01       	movw	r22, r16
    488a:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <HAL_EEPROM_voidReadData>
		if(LOC_u8NumberCheck != 255)
    488e:	89 81       	ldd	r24, Y+1	; 0x01
    4890:	8f 3f       	cpi	r24, 0xFF	; 255
    4892:	09 f0       	breq	.+2      	; 0x4896 <Remove_Admin+0x1b6>
		{
			LOC_u8AdminNumber++;
    4894:	f3 94       	inc	r15
{
	u16 LOC_u16LocationVariable = ADMIN_LOCATION_TOP;
	u8 LOC_u8AdminNumber = 0,LOC_u8NumberCheck = 0;
	for(;LOC_u16LocationVariable <= ADMIN_LOCATION_BOT;LOC_u16LocationVariable += STEP)
	{
		HAL_EEPROM_voidReadData(LOC_u16LocationVariable,&LOC_u8NumberCheck);
    4896:	80 e5       	ldi	r24, 0x50	; 80
    4898:	90 e0       	ldi	r25, 0x00	; 0
    489a:	b8 01       	movw	r22, r16
    489c:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <HAL_EEPROM_voidReadData>
		if(LOC_u8NumberCheck != 255)
    48a0:	89 81       	ldd	r24, Y+1	; 0x01
    48a2:	8f 3f       	cpi	r24, 0xFF	; 255
    48a4:	09 f0       	breq	.+2      	; 0x48a8 <Remove_Admin+0x1c8>
		{
			LOC_u8AdminNumber++;
    48a6:	f3 94       	inc	r15
{
	u16 LOC_u16LocationVariable = ADMIN_LOCATION_TOP;
	u8 LOC_u8AdminNumber = 0,LOC_u8NumberCheck = 0;
	for(;LOC_u16LocationVariable <= ADMIN_LOCATION_BOT;LOC_u16LocationVariable += STEP)
	{
		HAL_EEPROM_voidReadData(LOC_u16LocationVariable,&LOC_u8NumberCheck);
    48a8:	88 e5       	ldi	r24, 0x58	; 88
    48aa:	90 e0       	ldi	r25, 0x00	; 0
    48ac:	b8 01       	movw	r22, r16
    48ae:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <HAL_EEPROM_voidReadData>
		if(LOC_u8NumberCheck != 255)
    48b2:	89 81       	ldd	r24, Y+1	; 0x01
    48b4:	8f 3f       	cpi	r24, 0xFF	; 255
    48b6:	09 f0       	breq	.+2      	; 0x48ba <Remove_Admin+0x1da>
		{
			LOC_u8AdminNumber++;
    48b8:	f3 94       	inc	r15



	LOC_u16LastAdminStartLocation = (ADMIN_LOCATION_TOP - STEP);

	if ((LOC_u8AdminCheck <= ADMINS_MAX_AMOUNT) && (LOC_u8AdminCheck >= USERS_MIN_AMOUNT))
    48ba:	8e 2d       	mov	r24, r14
    48bc:	81 50       	subi	r24, 0x01	; 1
    48be:	8c 30       	cpi	r24, 0x0C	; 12
    48c0:	08 f0       	brcs	.+2      	; 0x48c4 <Remove_Admin+0x1e4>
    48c2:	d3 c0       	rjmp	.+422    	; 0x4a6a <Remove_Admin+0x38a>
	{
		LOC_u16LastLocation = (LOC_u16LastAdminStartLocation ) + ( STEP * LOC_u8GetLastAdmin);
    48c4:	cf 2c       	mov	r12, r15
    48c6:	dd 24       	eor	r13, r13
    48c8:	cc 0c       	add	r12, r12
    48ca:	dd 1c       	adc	r13, r13
    48cc:	cc 0c       	add	r12, r12
    48ce:	dd 1c       	adc	r13, r13
    48d0:	cc 0c       	add	r12, r12
    48d2:	dd 1c       	adc	r13, r13
    48d4:	86 01       	movw	r16, r12
    48d6:	08 50       	subi	r16, 0x08	; 8
    48d8:	10 40       	sbci	r17, 0x00	; 0

		if (LOC_u8AdminCheck == LOC_u8GetLastAdmin)
    48da:	ef 14       	cp	r14, r15
    48dc:	09 f4       	brne	.+2      	; 0x48e0 <Remove_Admin+0x200>
    48de:	9e c0       	rjmp	.+316    	; 0x4a1c <Remove_Admin+0x33c>
		{

			for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DETAILS;LOC_u8DigitCounter++)
			{

				HAL_EEPROM_voidReadData(LOC_u16LastLocation,&LOC_u8TransferArray[LOC_u8DigitCounter]);
    48e0:	c8 01       	movw	r24, r16
    48e2:	b2 01       	movw	r22, r4
    48e4:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <HAL_EEPROM_voidReadData>
				HAL_EEPROM_voidWriteData(LOC_u16LastLocation,CLEAR_DATA);
    48e8:	c8 01       	movw	r24, r16
    48ea:	6f ef       	ldi	r22, 0xFF	; 255
    48ec:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <HAL_EEPROM_voidWriteData>
				LOC_u8ConfirmClearFlag++;
				LOC_u16LastLocation++;
    48f0:	86 01       	movw	r16, r12
    48f2:	07 50       	subi	r16, 0x07	; 7
    48f4:	10 40       	sbci	r17, 0x00	; 0
		{

			for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DETAILS;LOC_u8DigitCounter++)
			{

				HAL_EEPROM_voidReadData(LOC_u16LastLocation,&LOC_u8TransferArray[LOC_u8DigitCounter]);
    48f6:	c8 01       	movw	r24, r16
    48f8:	be 01       	movw	r22, r28
    48fa:	65 5f       	subi	r22, 0xF5	; 245
    48fc:	7f 4f       	sbci	r23, 0xFF	; 255
    48fe:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <HAL_EEPROM_voidReadData>
				HAL_EEPROM_voidWriteData(LOC_u16LastLocation,CLEAR_DATA);
    4902:	c8 01       	movw	r24, r16
    4904:	6f ef       	ldi	r22, 0xFF	; 255
    4906:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <HAL_EEPROM_voidWriteData>
				LOC_u8ConfirmClearFlag++;
				LOC_u16LastLocation++;
    490a:	86 01       	movw	r16, r12
    490c:	06 50       	subi	r16, 0x06	; 6
    490e:	10 40       	sbci	r17, 0x00	; 0
		{

			for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DETAILS;LOC_u8DigitCounter++)
			{

				HAL_EEPROM_voidReadData(LOC_u16LastLocation,&LOC_u8TransferArray[LOC_u8DigitCounter]);
    4910:	c8 01       	movw	r24, r16
    4912:	be 01       	movw	r22, r28
    4914:	64 5f       	subi	r22, 0xF4	; 244
    4916:	7f 4f       	sbci	r23, 0xFF	; 255
    4918:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <HAL_EEPROM_voidReadData>
				HAL_EEPROM_voidWriteData(LOC_u16LastLocation,CLEAR_DATA);
    491c:	c8 01       	movw	r24, r16
    491e:	6f ef       	ldi	r22, 0xFF	; 255
    4920:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <HAL_EEPROM_voidWriteData>
				LOC_u8ConfirmClearFlag++;
				LOC_u16LastLocation++;
    4924:	86 01       	movw	r16, r12
    4926:	05 50       	subi	r16, 0x05	; 5
    4928:	10 40       	sbci	r17, 0x00	; 0
		{

			for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DETAILS;LOC_u8DigitCounter++)
			{

				HAL_EEPROM_voidReadData(LOC_u16LastLocation,&LOC_u8TransferArray[LOC_u8DigitCounter]);
    492a:	c8 01       	movw	r24, r16
    492c:	be 01       	movw	r22, r28
    492e:	63 5f       	subi	r22, 0xF3	; 243
    4930:	7f 4f       	sbci	r23, 0xFF	; 255
    4932:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <HAL_EEPROM_voidReadData>
				HAL_EEPROM_voidWriteData(LOC_u16LastLocation,CLEAR_DATA);
    4936:	c8 01       	movw	r24, r16
    4938:	6f ef       	ldi	r22, 0xFF	; 255
    493a:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <HAL_EEPROM_voidWriteData>
				LOC_u8ConfirmClearFlag++;
				LOC_u16LastLocation++;
    493e:	86 01       	movw	r16, r12
    4940:	04 50       	subi	r16, 0x04	; 4
    4942:	10 40       	sbci	r17, 0x00	; 0
		{

			for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DETAILS;LOC_u8DigitCounter++)
			{

				HAL_EEPROM_voidReadData(LOC_u16LastLocation,&LOC_u8TransferArray[LOC_u8DigitCounter]);
    4944:	c8 01       	movw	r24, r16
    4946:	be 01       	movw	r22, r28
    4948:	62 5f       	subi	r22, 0xF2	; 242
    494a:	7f 4f       	sbci	r23, 0xFF	; 255
    494c:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <HAL_EEPROM_voidReadData>
				HAL_EEPROM_voidWriteData(LOC_u16LastLocation,CLEAR_DATA);
    4950:	c8 01       	movw	r24, r16
    4952:	6f ef       	ldi	r22, 0xFF	; 255
    4954:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <HAL_EEPROM_voidWriteData>
				LOC_u8ConfirmClearFlag++;
				LOC_u16LastLocation++;
    4958:	86 01       	movw	r16, r12
    495a:	03 50       	subi	r16, 0x03	; 3
    495c:	10 40       	sbci	r17, 0x00	; 0
		{

			for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DETAILS;LOC_u8DigitCounter++)
			{

				HAL_EEPROM_voidReadData(LOC_u16LastLocation,&LOC_u8TransferArray[LOC_u8DigitCounter]);
    495e:	c8 01       	movw	r24, r16
    4960:	be 01       	movw	r22, r28
    4962:	61 5f       	subi	r22, 0xF1	; 241
    4964:	7f 4f       	sbci	r23, 0xFF	; 255
    4966:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <HAL_EEPROM_voidReadData>
				HAL_EEPROM_voidWriteData(LOC_u16LastLocation,CLEAR_DATA);
    496a:	c8 01       	movw	r24, r16
    496c:	6f ef       	ldi	r22, 0xFF	; 255
    496e:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <HAL_EEPROM_voidWriteData>
				LOC_u8ConfirmClearFlag++;
				LOC_u16LastLocation++;
    4972:	86 01       	movw	r16, r12
    4974:	02 50       	subi	r16, 0x02	; 2
    4976:	10 40       	sbci	r17, 0x00	; 0
		{

			for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DETAILS;LOC_u8DigitCounter++)
			{

				HAL_EEPROM_voidReadData(LOC_u16LastLocation,&LOC_u8TransferArray[LOC_u8DigitCounter]);
    4978:	c8 01       	movw	r24, r16
    497a:	be 01       	movw	r22, r28
    497c:	60 5f       	subi	r22, 0xF0	; 240
    497e:	7f 4f       	sbci	r23, 0xFF	; 255
    4980:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <HAL_EEPROM_voidReadData>
				HAL_EEPROM_voidWriteData(LOC_u16LastLocation,CLEAR_DATA);
    4984:	c8 01       	movw	r24, r16
    4986:	6f ef       	ldi	r22, 0xFF	; 255
    4988:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <HAL_EEPROM_voidWriteData>
				LOC_u8ConfirmClearFlag++;
				LOC_u16LastLocation++;
    498c:	86 01       	movw	r16, r12
    498e:	01 50       	subi	r16, 0x01	; 1
    4990:	10 40       	sbci	r17, 0x00	; 0
		{

			for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DETAILS;LOC_u8DigitCounter++)
			{

				HAL_EEPROM_voidReadData(LOC_u16LastLocation,&LOC_u8TransferArray[LOC_u8DigitCounter]);
    4992:	c8 01       	movw	r24, r16
    4994:	be 01       	movw	r22, r28
    4996:	6f 5e       	subi	r22, 0xEF	; 239
    4998:	7f 4f       	sbci	r23, 0xFF	; 255
    499a:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <HAL_EEPROM_voidReadData>
				HAL_EEPROM_voidWriteData(LOC_u16LastLocation,CLEAR_DATA);
    499e:	c8 01       	movw	r24, r16
    49a0:	6f ef       	ldi	r22, 0xFF	; 255
    49a2:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <HAL_EEPROM_voidWriteData>
				LOC_u8ConfirmClearFlag++;
				LOC_u16LastLocation++;
			}

			LOC_u16RemovedAdminLocation = (LOC_u16LastAdminStartLocation ) + ( STEP * LOC_u8AdminCheck);
    49a6:	0e 2d       	mov	r16, r14
    49a8:	10 e0       	ldi	r17, 0x00	; 0
    49aa:	00 0f       	add	r16, r16
    49ac:	11 1f       	adc	r17, r17
    49ae:	00 0f       	add	r16, r16
    49b0:	11 1f       	adc	r17, r17
    49b2:	00 0f       	add	r16, r16
    49b4:	11 1f       	adc	r17, r17

			for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DETAILS;LOC_u8DigitCounter++)
			{

				//			HAL_EEPROM_voidReadData(LOC_u16LastLocation,&LOC_u8TransferArray[LOC_u8DigitCounter]);
				HAL_EEPROM_voidWriteData(LOC_u16RemovedAdminLocation,LOC_u8TransferArray[LOC_u8DigitCounter]);
    49b6:	c8 01       	movw	r24, r16
    49b8:	08 97       	sbiw	r24, 0x08	; 8
    49ba:	6a 85       	ldd	r22, Y+10	; 0x0a
    49bc:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <HAL_EEPROM_voidWriteData>
    49c0:	c8 01       	movw	r24, r16
    49c2:	07 97       	sbiw	r24, 0x07	; 7
    49c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    49c6:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <HAL_EEPROM_voidWriteData>
    49ca:	c8 01       	movw	r24, r16
    49cc:	06 97       	sbiw	r24, 0x06	; 6
    49ce:	6c 85       	ldd	r22, Y+12	; 0x0c
    49d0:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <HAL_EEPROM_voidWriteData>
    49d4:	c8 01       	movw	r24, r16
    49d6:	05 97       	sbiw	r24, 0x05	; 5
    49d8:	6d 85       	ldd	r22, Y+13	; 0x0d
    49da:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <HAL_EEPROM_voidWriteData>
    49de:	c8 01       	movw	r24, r16
    49e0:	04 97       	sbiw	r24, 0x04	; 4
    49e2:	6e 85       	ldd	r22, Y+14	; 0x0e
    49e4:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <HAL_EEPROM_voidWriteData>
    49e8:	c8 01       	movw	r24, r16
    49ea:	03 97       	sbiw	r24, 0x03	; 3
    49ec:	6f 85       	ldd	r22, Y+15	; 0x0f
    49ee:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <HAL_EEPROM_voidWriteData>
    49f2:	c8 01       	movw	r24, r16
    49f4:	02 97       	sbiw	r24, 0x02	; 2
    49f6:	68 89       	ldd	r22, Y+16	; 0x10
    49f8:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <HAL_EEPROM_voidWriteData>
    49fc:	c8 01       	movw	r24, r16
    49fe:	01 97       	sbiw	r24, 0x01	; 1
    4a00:	69 89       	ldd	r22, Y+17	; 0x11
    4a02:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <HAL_EEPROM_voidWriteData>
    4a06:	82 e0       	ldi	r24, 0x02	; 2
    4a08:	31 c0       	rjmp	.+98     	; 0x4a6c <Remove_Admin+0x38c>
		LOC_u16AdminID = (LOC_u16AdminID / 10);
		i--;
	}


	for(;LOC_u16AdminLocationVariable <= ADMIN_LOCATION_BOT;LOC_u16AdminLocationVariable += STEP)
    4a0a:	08 5f       	subi	r16, 0xF8	; 248
    4a0c:	1f 4f       	sbci	r17, 0xFF	; 255
    4a0e:	fc e0       	ldi	r31, 0x0C	; 12
    4a10:	ef 16       	cp	r14, r31
    4a12:	09 f0       	breq	.+2      	; 0x4a16 <Remove_Admin+0x336>
    4a14:	b8 ce       	rjmp	.-656    	; 0x4786 <Remove_Admin+0xa6>
    4a16:	ab eb       	ldi	r26, 0xBB	; 187
    4a18:	ea 2e       	mov	r14, r26
    4a1a:	dd ce       	rjmp	.-582    	; 0x47d6 <Remove_Admin+0xf6>
		{
			for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DETAILS;LOC_u8DigitCounter++)
			{

//				HAL_EEPROM_voidReadData(LOC_u16LastLocation,&LOC_u8TransferArray[LOC_u8DigitCounter]);
				HAL_EEPROM_voidWriteData(LOC_u16LastLocation,CLEAR_DATA);
    4a1c:	c8 01       	movw	r24, r16
    4a1e:	6f ef       	ldi	r22, 0xFF	; 255
    4a20:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <HAL_EEPROM_voidWriteData>
    4a24:	c6 01       	movw	r24, r12
    4a26:	07 97       	sbiw	r24, 0x07	; 7
    4a28:	6f ef       	ldi	r22, 0xFF	; 255
    4a2a:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <HAL_EEPROM_voidWriteData>
    4a2e:	c6 01       	movw	r24, r12
    4a30:	06 97       	sbiw	r24, 0x06	; 6
    4a32:	6f ef       	ldi	r22, 0xFF	; 255
    4a34:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <HAL_EEPROM_voidWriteData>
    4a38:	c6 01       	movw	r24, r12
    4a3a:	05 97       	sbiw	r24, 0x05	; 5
    4a3c:	6f ef       	ldi	r22, 0xFF	; 255
    4a3e:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <HAL_EEPROM_voidWriteData>
    4a42:	c6 01       	movw	r24, r12
    4a44:	04 97       	sbiw	r24, 0x04	; 4
    4a46:	6f ef       	ldi	r22, 0xFF	; 255
    4a48:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <HAL_EEPROM_voidWriteData>
    4a4c:	c6 01       	movw	r24, r12
    4a4e:	03 97       	sbiw	r24, 0x03	; 3
    4a50:	6f ef       	ldi	r22, 0xFF	; 255
    4a52:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <HAL_EEPROM_voidWriteData>
    4a56:	c6 01       	movw	r24, r12
    4a58:	02 97       	sbiw	r24, 0x02	; 2
    4a5a:	6f ef       	ldi	r22, 0xFF	; 255
    4a5c:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <HAL_EEPROM_voidWriteData>
    4a60:	c6 01       	movw	r24, r12
    4a62:	01 97       	sbiw	r24, 0x01	; 1
    4a64:	6f ef       	ldi	r22, 0xFF	; 255
    4a66:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <HAL_EEPROM_voidWriteData>
    4a6a:	8b eb       	ldi	r24, 0xBB	; 187
		//Do Nothing. (Meaning that no user found with that ID or Database is empty)
	}


		return ADMIN_NOT_FOUND;
}
    4a6c:	61 96       	adiw	r28, 0x11	; 17
    4a6e:	0f b6       	in	r0, 0x3f	; 63
    4a70:	f8 94       	cli
    4a72:	de bf       	out	0x3e, r29	; 62
    4a74:	0f be       	out	0x3f, r0	; 63
    4a76:	cd bf       	out	0x3d, r28	; 61
    4a78:	cf 91       	pop	r28
    4a7a:	df 91       	pop	r29
    4a7c:	1f 91       	pop	r17
    4a7e:	0f 91       	pop	r16
    4a80:	ff 90       	pop	r15
    4a82:	ef 90       	pop	r14
    4a84:	df 90       	pop	r13
    4a86:	cf 90       	pop	r12
    4a88:	bf 90       	pop	r11
    4a8a:	af 90       	pop	r10
    4a8c:	9f 90       	pop	r9
    4a8e:	8f 90       	pop	r8
    4a90:	7f 90       	pop	r7
    4a92:	6f 90       	pop	r6
    4a94:	5f 90       	pop	r5
    4a96:	4f 90       	pop	r4
    4a98:	08 95       	ret

00004a9a <Add_Admin>:
//static u16 LOC_u16UserLocation = 0;

/*************************	Admin Section	****************************/

u8 Add_Admin(u16 LOC_u16AdminID,u16 LOC_u16AdminPassword)
{
    4a9a:	2f 92       	push	r2
    4a9c:	3f 92       	push	r3
    4a9e:	4f 92       	push	r4
    4aa0:	5f 92       	push	r5
    4aa2:	6f 92       	push	r6
    4aa4:	7f 92       	push	r7
    4aa6:	8f 92       	push	r8
    4aa8:	9f 92       	push	r9
    4aaa:	af 92       	push	r10
    4aac:	bf 92       	push	r11
    4aae:	cf 92       	push	r12
    4ab0:	df 92       	push	r13
    4ab2:	ef 92       	push	r14
    4ab4:	ff 92       	push	r15
    4ab6:	0f 93       	push	r16
    4ab8:	1f 93       	push	r17
    4aba:	df 93       	push	r29
    4abc:	cf 93       	push	r28
    4abe:	cd b7       	in	r28, 0x3d	; 61
    4ac0:	de b7       	in	r29, 0x3e	; 62
    4ac2:	29 97       	sbiw	r28, 0x09	; 9
    4ac4:	0f b6       	in	r0, 0x3f	; 63
    4ac6:	f8 94       	cli
    4ac8:	de bf       	out	0x3e, r29	; 62
    4aca:	0f be       	out	0x3f, r0	; 63
    4acc:	cd bf       	out	0x3d, r28	; 61
    4ace:	4c 01       	movw	r8, r24
    4ad0:	1b 01       	movw	r2, r22
	u8 i=3,LOC_u8AdminNumberFlag = 0, LOC_u8IDMatchedFlag = 0 ,LOC_u8AdminID_Read[MAX_DIGITS] , LOC_u8AdminIDArray[MAX_DIGITS], LOC_u8DigitCounter = 0;

	u16 LOC_u16AdminLocationVariable = ADMIN_LOCATION_TOP,LOC_u16AdminLocationVariableDigits ;


	while (LOC_u16AdminID != 0)
    4ad2:	00 97       	sbiw	r24, 0x00	; 0
    4ad4:	c1 f0       	breq	.+48     	; 0x4b06 <Add_Admin+0x6c>
    4ad6:	9c 01       	movw	r18, r24
    4ad8:	43 e0       	ldi	r20, 0x03	; 3
    4ada:	8e 01       	movw	r16, r28
    4adc:	0a 5f       	subi	r16, 0xFA	; 250
    4ade:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		LOC_u8AdminIDArray[i] = (LOC_u16AdminID % 10);
    4ae0:	f8 01       	movw	r30, r16
    4ae2:	e4 0f       	add	r30, r20
    4ae4:	f1 1d       	adc	r31, r1
    4ae6:	c9 01       	movw	r24, r18
    4ae8:	6a e0       	ldi	r22, 0x0A	; 10
    4aea:	70 e0       	ldi	r23, 0x00	; 0
    4aec:	0e 94 92 2b 	call	0x5724	; 0x5724 <__udivmodhi4>
    4af0:	80 83       	st	Z, r24
		LOC_u16AdminID = (LOC_u16AdminID / 10);
    4af2:	c9 01       	movw	r24, r18
    4af4:	6a e0       	ldi	r22, 0x0A	; 10
    4af6:	70 e0       	ldi	r23, 0x00	; 0
    4af8:	0e 94 92 2b 	call	0x5724	; 0x5724 <__udivmodhi4>
    4afc:	9b 01       	movw	r18, r22
		i--;
    4afe:	41 50       	subi	r20, 0x01	; 1
	u8 i=3,LOC_u8AdminNumberFlag = 0, LOC_u8IDMatchedFlag = 0 ,LOC_u8AdminID_Read[MAX_DIGITS] , LOC_u8AdminIDArray[MAX_DIGITS], LOC_u8DigitCounter = 0;

	u16 LOC_u16AdminLocationVariable = ADMIN_LOCATION_TOP,LOC_u16AdminLocationVariableDigits ;


	while (LOC_u16AdminID != 0)
    4b00:	61 15       	cp	r22, r1
    4b02:	71 05       	cpc	r23, r1
    4b04:	69 f7       	brne	.-38     	; 0x4ae0 <Add_Admin+0x46>
    4b06:	cc 24       	eor	r12, r12
    4b08:	00 e0       	ldi	r16, 0x00	; 0
    4b0a:	10 e0       	ldi	r17, 0x00	; 0
    4b0c:	a2 e0       	ldi	r26, 0x02	; 2
    4b0e:	4a 2e       	mov	r4, r26
    4b10:	51 2c       	mov	r5, r1
    4b12:	4c 0e       	add	r4, r28
    4b14:	5d 1e       	adc	r5, r29
		LOC_u8AdminNumberFlag++;
		LOC_u16AdminLocationVariableDigits = LOC_u16AdminLocationVariable;
		for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DIGITS;LOC_u8DigitCounter++)
		{

			HAL_EEPROM_voidReadData(LOC_u16AdminLocationVariableDigits,&LOC_u8AdminID_Read[LOC_u8DigitCounter]);
    4b16:	f3 e0       	ldi	r31, 0x03	; 3
    4b18:	af 2e       	mov	r10, r31
    4b1a:	b1 2c       	mov	r11, r1
    4b1c:	ac 0e       	add	r10, r28
    4b1e:	bd 1e       	adc	r11, r29
    4b20:	e2 e0       	ldi	r30, 0x02	; 2
    4b22:	ee 2e       	mov	r14, r30
    4b24:	f1 2c       	mov	r15, r1
    4b26:	e4 0c       	add	r14, r4
    4b28:	f5 1c       	adc	r15, r5
    4b2a:	75 e0       	ldi	r23, 0x05	; 5
    4b2c:	67 2e       	mov	r6, r23
    4b2e:	71 2c       	mov	r7, r1
    4b30:	6c 0e       	add	r6, r28
    4b32:	7d 1e       	adc	r7, r29
	}


	for(;LOC_u16AdminLocationVariable <= ADMIN_LOCATION_BOT;LOC_u16AdminLocationVariable += STEP)
	{
		LOC_u8AdminNumberFlag++;
    4b34:	c3 94       	inc	r12
		LOC_u16AdminLocationVariableDigits = LOC_u16AdminLocationVariable;
		for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DIGITS;LOC_u8DigitCounter++)
		{

			HAL_EEPROM_voidReadData(LOC_u16AdminLocationVariableDigits,&LOC_u8AdminID_Read[LOC_u8DigitCounter]);
    4b36:	c8 01       	movw	r24, r16
    4b38:	b2 01       	movw	r22, r4
    4b3a:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <HAL_EEPROM_voidReadData>
			if (LOC_u8AdminID_Read[LOC_u8DigitCounter] == LOC_u8AdminIDArray[LOC_u8DigitCounter])
    4b3e:	9a 81       	ldd	r25, Y+2	; 0x02
    4b40:	8e 81       	ldd	r24, Y+6	; 0x06
    4b42:	98 17       	cp	r25, r24
    4b44:	09 f0       	breq	.+2      	; 0x4b48 <Add_Admin+0xae>
    4b46:	bc c0       	rjmp	.+376    	; 0x4cc0 <Add_Admin+0x226>
		LOC_u8AdminNumberFlag++;
		LOC_u16AdminLocationVariableDigits = LOC_u16AdminLocationVariable;
		for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DIGITS;LOC_u8DigitCounter++)
		{

			HAL_EEPROM_voidReadData(LOC_u16AdminLocationVariableDigits,&LOC_u8AdminID_Read[LOC_u8DigitCounter]);
    4b48:	c8 01       	movw	r24, r16
    4b4a:	01 96       	adiw	r24, 0x01	; 1
    4b4c:	b5 01       	movw	r22, r10
    4b4e:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <HAL_EEPROM_voidReadData>
			if (LOC_u8AdminID_Read[LOC_u8DigitCounter] == LOC_u8AdminIDArray[LOC_u8DigitCounter])
    4b52:	9b 81       	ldd	r25, Y+3	; 0x03
    4b54:	8f 81       	ldd	r24, Y+7	; 0x07
    4b56:	98 17       	cp	r25, r24
    4b58:	09 f0       	breq	.+2      	; 0x4b5c <Add_Admin+0xc2>
    4b5a:	b2 c0       	rjmp	.+356    	; 0x4cc0 <Add_Admin+0x226>
		LOC_u8AdminNumberFlag++;
		LOC_u16AdminLocationVariableDigits = LOC_u16AdminLocationVariable;
		for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DIGITS;LOC_u8DigitCounter++)
		{

			HAL_EEPROM_voidReadData(LOC_u16AdminLocationVariableDigits,&LOC_u8AdminID_Read[LOC_u8DigitCounter]);
    4b5c:	c8 01       	movw	r24, r16
    4b5e:	02 96       	adiw	r24, 0x02	; 2
    4b60:	b7 01       	movw	r22, r14
    4b62:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <HAL_EEPROM_voidReadData>
			if (LOC_u8AdminID_Read[LOC_u8DigitCounter] == LOC_u8AdminIDArray[LOC_u8DigitCounter])
    4b66:	9c 81       	ldd	r25, Y+4	; 0x04
    4b68:	88 85       	ldd	r24, Y+8	; 0x08
    4b6a:	98 17       	cp	r25, r24
    4b6c:	09 f0       	breq	.+2      	; 0x4b70 <Add_Admin+0xd6>
    4b6e:	a8 c0       	rjmp	.+336    	; 0x4cc0 <Add_Admin+0x226>
		LOC_u8AdminNumberFlag++;
		LOC_u16AdminLocationVariableDigits = LOC_u16AdminLocationVariable;
		for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DIGITS;LOC_u8DigitCounter++)
		{

			HAL_EEPROM_voidReadData(LOC_u16AdminLocationVariableDigits,&LOC_u8AdminID_Read[LOC_u8DigitCounter]);
    4b70:	c8 01       	movw	r24, r16
    4b72:	03 96       	adiw	r24, 0x03	; 3
    4b74:	b3 01       	movw	r22, r6
    4b76:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <HAL_EEPROM_voidReadData>
			if (LOC_u8AdminID_Read[LOC_u8DigitCounter] == LOC_u8AdminIDArray[LOC_u8DigitCounter])
    4b7a:	9d 81       	ldd	r25, Y+5	; 0x05
    4b7c:	89 85       	ldd	r24, Y+9	; 0x09
    4b7e:	98 17       	cp	r25, r24
    4b80:	09 f0       	breq	.+2      	; 0x4b84 <Add_Admin+0xea>
    4b82:	9e c0       	rjmp	.+316    	; 0x4cc0 <Add_Admin+0x226>


void APP_Registeration_voidGetNumberOfAdmins(u8* LOC_Pu8AdminsNumber)
{
	u16 LOC_u16LocationVariable = ADMIN_LOCATION_TOP;
	u8 LOC_u8AdminNumber = 0,LOC_u8NumberCheck = 0;
    4b84:	19 82       	std	Y+1, r1	; 0x01
	for(;LOC_u16LocationVariable <= ADMIN_LOCATION_BOT;LOC_u16LocationVariable += STEP)
	{
		HAL_EEPROM_voidReadData(LOC_u16LocationVariable,&LOC_u8NumberCheck);
    4b86:	80 e0       	ldi	r24, 0x00	; 0
    4b88:	90 e0       	ldi	r25, 0x00	; 0
    4b8a:	8e 01       	movw	r16, r28
    4b8c:	0f 5f       	subi	r16, 0xFF	; 255
    4b8e:	1f 4f       	sbci	r17, 0xFF	; 255
    4b90:	b8 01       	movw	r22, r16
    4b92:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <HAL_EEPROM_voidReadData>
    4b96:	bb 24       	eor	r11, r11
    4b98:	89 81       	ldd	r24, Y+1	; 0x01
    4b9a:	8f 3f       	cpi	r24, 0xFF	; 255
    4b9c:	11 f0       	breq	.+4      	; 0x4ba2 <Add_Admin+0x108>
    4b9e:	bb 24       	eor	r11, r11
    4ba0:	b3 94       	inc	r11
    4ba2:	88 e0       	ldi	r24, 0x08	; 8
    4ba4:	90 e0       	ldi	r25, 0x00	; 0
    4ba6:	b8 01       	movw	r22, r16
    4ba8:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <HAL_EEPROM_voidReadData>
		if(LOC_u8NumberCheck != 255)
    4bac:	89 81       	ldd	r24, Y+1	; 0x01
    4bae:	8f 3f       	cpi	r24, 0xFF	; 255
    4bb0:	09 f0       	breq	.+2      	; 0x4bb4 <Add_Admin+0x11a>
		{
			LOC_u8AdminNumber++;
    4bb2:	b3 94       	inc	r11
{
	u16 LOC_u16LocationVariable = ADMIN_LOCATION_TOP;
	u8 LOC_u8AdminNumber = 0,LOC_u8NumberCheck = 0;
	for(;LOC_u16LocationVariable <= ADMIN_LOCATION_BOT;LOC_u16LocationVariable += STEP)
	{
		HAL_EEPROM_voidReadData(LOC_u16LocationVariable,&LOC_u8NumberCheck);
    4bb4:	80 e1       	ldi	r24, 0x10	; 16
    4bb6:	90 e0       	ldi	r25, 0x00	; 0
    4bb8:	b8 01       	movw	r22, r16
    4bba:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <HAL_EEPROM_voidReadData>
		if(LOC_u8NumberCheck != 255)
    4bbe:	89 81       	ldd	r24, Y+1	; 0x01
    4bc0:	8f 3f       	cpi	r24, 0xFF	; 255
    4bc2:	09 f0       	breq	.+2      	; 0x4bc6 <Add_Admin+0x12c>
		{
			LOC_u8AdminNumber++;
    4bc4:	b3 94       	inc	r11
{
	u16 LOC_u16LocationVariable = ADMIN_LOCATION_TOP;
	u8 LOC_u8AdminNumber = 0,LOC_u8NumberCheck = 0;
	for(;LOC_u16LocationVariable <= ADMIN_LOCATION_BOT;LOC_u16LocationVariable += STEP)
	{
		HAL_EEPROM_voidReadData(LOC_u16LocationVariable,&LOC_u8NumberCheck);
    4bc6:	88 e1       	ldi	r24, 0x18	; 24
    4bc8:	90 e0       	ldi	r25, 0x00	; 0
    4bca:	b8 01       	movw	r22, r16
    4bcc:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <HAL_EEPROM_voidReadData>
		if(LOC_u8NumberCheck != 255)
    4bd0:	89 81       	ldd	r24, Y+1	; 0x01
    4bd2:	8f 3f       	cpi	r24, 0xFF	; 255
    4bd4:	09 f0       	breq	.+2      	; 0x4bd8 <Add_Admin+0x13e>
		{
			LOC_u8AdminNumber++;
    4bd6:	b3 94       	inc	r11
{
	u16 LOC_u16LocationVariable = ADMIN_LOCATION_TOP;
	u8 LOC_u8AdminNumber = 0,LOC_u8NumberCheck = 0;
	for(;LOC_u16LocationVariable <= ADMIN_LOCATION_BOT;LOC_u16LocationVariable += STEP)
	{
		HAL_EEPROM_voidReadData(LOC_u16LocationVariable,&LOC_u8NumberCheck);
    4bd8:	80 e2       	ldi	r24, 0x20	; 32
    4bda:	90 e0       	ldi	r25, 0x00	; 0
    4bdc:	b8 01       	movw	r22, r16
    4bde:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <HAL_EEPROM_voidReadData>
		if(LOC_u8NumberCheck != 255)
    4be2:	89 81       	ldd	r24, Y+1	; 0x01
    4be4:	8f 3f       	cpi	r24, 0xFF	; 255
    4be6:	09 f0       	breq	.+2      	; 0x4bea <Add_Admin+0x150>
		{
			LOC_u8AdminNumber++;
    4be8:	b3 94       	inc	r11
{
	u16 LOC_u16LocationVariable = ADMIN_LOCATION_TOP;
	u8 LOC_u8AdminNumber = 0,LOC_u8NumberCheck = 0;
	for(;LOC_u16LocationVariable <= ADMIN_LOCATION_BOT;LOC_u16LocationVariable += STEP)
	{
		HAL_EEPROM_voidReadData(LOC_u16LocationVariable,&LOC_u8NumberCheck);
    4bea:	88 e2       	ldi	r24, 0x28	; 40
    4bec:	90 e0       	ldi	r25, 0x00	; 0
    4bee:	b8 01       	movw	r22, r16
    4bf0:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <HAL_EEPROM_voidReadData>
		if(LOC_u8NumberCheck != 255)
    4bf4:	89 81       	ldd	r24, Y+1	; 0x01
    4bf6:	8f 3f       	cpi	r24, 0xFF	; 255
    4bf8:	09 f0       	breq	.+2      	; 0x4bfc <Add_Admin+0x162>
		{
			LOC_u8AdminNumber++;
    4bfa:	b3 94       	inc	r11
{
	u16 LOC_u16LocationVariable = ADMIN_LOCATION_TOP;
	u8 LOC_u8AdminNumber = 0,LOC_u8NumberCheck = 0;
	for(;LOC_u16LocationVariable <= ADMIN_LOCATION_BOT;LOC_u16LocationVariable += STEP)
	{
		HAL_EEPROM_voidReadData(LOC_u16LocationVariable,&LOC_u8NumberCheck);
    4bfc:	80 e3       	ldi	r24, 0x30	; 48
    4bfe:	90 e0       	ldi	r25, 0x00	; 0
    4c00:	b8 01       	movw	r22, r16
    4c02:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <HAL_EEPROM_voidReadData>
		if(LOC_u8NumberCheck != 255)
    4c06:	89 81       	ldd	r24, Y+1	; 0x01
    4c08:	8f 3f       	cpi	r24, 0xFF	; 255
    4c0a:	09 f0       	breq	.+2      	; 0x4c0e <Add_Admin+0x174>
		{
			LOC_u8AdminNumber++;
    4c0c:	b3 94       	inc	r11
{
	u16 LOC_u16LocationVariable = ADMIN_LOCATION_TOP;
	u8 LOC_u8AdminNumber = 0,LOC_u8NumberCheck = 0;
	for(;LOC_u16LocationVariable <= ADMIN_LOCATION_BOT;LOC_u16LocationVariable += STEP)
	{
		HAL_EEPROM_voidReadData(LOC_u16LocationVariable,&LOC_u8NumberCheck);
    4c0e:	88 e3       	ldi	r24, 0x38	; 56
    4c10:	90 e0       	ldi	r25, 0x00	; 0
    4c12:	b8 01       	movw	r22, r16
    4c14:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <HAL_EEPROM_voidReadData>
		if(LOC_u8NumberCheck != 255)
    4c18:	89 81       	ldd	r24, Y+1	; 0x01
    4c1a:	8f 3f       	cpi	r24, 0xFF	; 255
    4c1c:	09 f0       	breq	.+2      	; 0x4c20 <Add_Admin+0x186>
		{
			LOC_u8AdminNumber++;
    4c1e:	b3 94       	inc	r11
{
	u16 LOC_u16LocationVariable = ADMIN_LOCATION_TOP;
	u8 LOC_u8AdminNumber = 0,LOC_u8NumberCheck = 0;
	for(;LOC_u16LocationVariable <= ADMIN_LOCATION_BOT;LOC_u16LocationVariable += STEP)
	{
		HAL_EEPROM_voidReadData(LOC_u16LocationVariable,&LOC_u8NumberCheck);
    4c20:	80 e4       	ldi	r24, 0x40	; 64
    4c22:	90 e0       	ldi	r25, 0x00	; 0
    4c24:	b8 01       	movw	r22, r16
    4c26:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <HAL_EEPROM_voidReadData>
		if(LOC_u8NumberCheck != 255)
    4c2a:	89 81       	ldd	r24, Y+1	; 0x01
    4c2c:	8f 3f       	cpi	r24, 0xFF	; 255
    4c2e:	09 f0       	breq	.+2      	; 0x4c32 <Add_Admin+0x198>
		{
			LOC_u8AdminNumber++;
    4c30:	b3 94       	inc	r11
{
	u16 LOC_u16LocationVariable = ADMIN_LOCATION_TOP;
	u8 LOC_u8AdminNumber = 0,LOC_u8NumberCheck = 0;
	for(;LOC_u16LocationVariable <= ADMIN_LOCATION_BOT;LOC_u16LocationVariable += STEP)
	{
		HAL_EEPROM_voidReadData(LOC_u16LocationVariable,&LOC_u8NumberCheck);
    4c32:	88 e4       	ldi	r24, 0x48	; 72
    4c34:	90 e0       	ldi	r25, 0x00	; 0
    4c36:	b8 01       	movw	r22, r16
    4c38:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <HAL_EEPROM_voidReadData>
		if(LOC_u8NumberCheck != 255)
    4c3c:	89 81       	ldd	r24, Y+1	; 0x01
    4c3e:	8f 3f       	cpi	r24, 0xFF	; 255
    4c40:	09 f0       	breq	.+2      	; 0x4c44 <Add_Admin+0x1aa>
		{
			LOC_u8AdminNumber++;
    4c42:	b3 94       	inc	r11
{
	u16 LOC_u16LocationVariable = ADMIN_LOCATION_TOP;
	u8 LOC_u8AdminNumber = 0,LOC_u8NumberCheck = 0;
	for(;LOC_u16LocationVariable <= ADMIN_LOCATION_BOT;LOC_u16LocationVariable += STEP)
	{
		HAL_EEPROM_voidReadData(LOC_u16LocationVariable,&LOC_u8NumberCheck);
    4c44:	80 e5       	ldi	r24, 0x50	; 80
    4c46:	90 e0       	ldi	r25, 0x00	; 0
    4c48:	b8 01       	movw	r22, r16
    4c4a:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <HAL_EEPROM_voidReadData>
		if(LOC_u8NumberCheck != 255)
    4c4e:	89 81       	ldd	r24, Y+1	; 0x01
    4c50:	8f 3f       	cpi	r24, 0xFF	; 255
    4c52:	09 f0       	breq	.+2      	; 0x4c56 <Add_Admin+0x1bc>
		{
			LOC_u8AdminNumber++;
    4c54:	b3 94       	inc	r11
{
	u16 LOC_u16LocationVariable = ADMIN_LOCATION_TOP;
	u8 LOC_u8AdminNumber = 0,LOC_u8NumberCheck = 0;
	for(;LOC_u16LocationVariable <= ADMIN_LOCATION_BOT;LOC_u16LocationVariable += STEP)
	{
		HAL_EEPROM_voidReadData(LOC_u16LocationVariable,&LOC_u8NumberCheck);
    4c56:	88 e5       	ldi	r24, 0x58	; 88
    4c58:	90 e0       	ldi	r25, 0x00	; 0
    4c5a:	b8 01       	movw	r22, r16
    4c5c:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <HAL_EEPROM_voidReadData>
		if(LOC_u8NumberCheck != 255)
    4c60:	89 81       	ldd	r24, Y+1	; 0x01
    4c62:	8f 3f       	cpi	r24, 0xFF	; 255
    4c64:	21 f0       	breq	.+8      	; 0x4c6e <Add_Admin+0x1d4>
		{
			LOC_u8AdminNumber++;
    4c66:	b3 94       	inc	r11
	u16 LOC_u16LastLocation;

	LOC_u8CheckAdminIDExistance = Check_AdminID(LOC_u16AdminID);
	APP_Registeration_voidGetNumberOfAdmins(&LOC_u8GetAdminsCount);

	if ((LOC_u8GetAdminsCount < ADMINS_MAX_AMOUNT) && (LOC_u8GetAdminsCount >= ADMIN_DATABASE_EMPTY))
    4c68:	8c e0       	ldi	r24, 0x0C	; 12
    4c6a:	b8 16       	cp	r11, r24
    4c6c:	91 f1       	breq	.+100    	; 0x4cd2 <Add_Admin+0x238>
	{
		if((LOC_u16AdminID <= 9999 && LOC_u16AdminID >= 1000) && (LOC_u16AdminPassword <= 9999 && LOC_u16AdminPassword >= 1000))
    4c6e:	c4 01       	movw	r24, r8
    4c70:	88 5e       	subi	r24, 0xE8	; 232
    4c72:	93 40       	sbci	r25, 0x03	; 3
    4c74:	88 52       	subi	r24, 0x28	; 40
    4c76:	93 42       	sbci	r25, 0x23	; 35
    4c78:	70 f5       	brcc	.+92     	; 0x4cd6 <Add_Admin+0x23c>
    4c7a:	c1 01       	movw	r24, r2
    4c7c:	88 5e       	subi	r24, 0xE8	; 232
    4c7e:	93 40       	sbci	r25, 0x03	; 3
    4c80:	88 52       	subi	r24, 0x28	; 40
    4c82:	93 42       	sbci	r25, 0x23	; 35
    4c84:	40 f5       	brcc	.+80     	; 0x4cd6 <Add_Admin+0x23c>
		{
			if (LOC_u8CheckAdminIDExistance == ADMIN_NOT_FOUND)
    4c86:	8b eb       	ldi	r24, 0xBB	; 187
    4c88:	c8 16       	cp	r12, r24
    4c8a:	39 f1       	breq	.+78     	; 0x4cda <Add_Admin+0x240>
    4c8c:	8c ec       	ldi	r24, 0xCC	; 204
	}
	else
	{
		return FULL;
	}
}
    4c8e:	29 96       	adiw	r28, 0x09	; 9
    4c90:	0f b6       	in	r0, 0x3f	; 63
    4c92:	f8 94       	cli
    4c94:	de bf       	out	0x3e, r29	; 62
    4c96:	0f be       	out	0x3f, r0	; 63
    4c98:	cd bf       	out	0x3d, r28	; 61
    4c9a:	cf 91       	pop	r28
    4c9c:	df 91       	pop	r29
    4c9e:	1f 91       	pop	r17
    4ca0:	0f 91       	pop	r16
    4ca2:	ff 90       	pop	r15
    4ca4:	ef 90       	pop	r14
    4ca6:	df 90       	pop	r13
    4ca8:	cf 90       	pop	r12
    4caa:	bf 90       	pop	r11
    4cac:	af 90       	pop	r10
    4cae:	9f 90       	pop	r9
    4cb0:	8f 90       	pop	r8
    4cb2:	7f 90       	pop	r7
    4cb4:	6f 90       	pop	r6
    4cb6:	5f 90       	pop	r5
    4cb8:	4f 90       	pop	r4
    4cba:	3f 90       	pop	r3
    4cbc:	2f 90       	pop	r2
    4cbe:	08 95       	ret
		LOC_u16AdminID = (LOC_u16AdminID / 10);
		i--;
	}


	for(;LOC_u16AdminLocationVariable <= ADMIN_LOCATION_BOT;LOC_u16AdminLocationVariable += STEP)
    4cc0:	08 5f       	subi	r16, 0xF8	; 248
    4cc2:	1f 4f       	sbci	r17, 0xFF	; 255
    4cc4:	2c e0       	ldi	r18, 0x0C	; 12
    4cc6:	c2 16       	cp	r12, r18
    4cc8:	09 f0       	breq	.+2      	; 0x4ccc <Add_Admin+0x232>
    4cca:	34 cf       	rjmp	.-408    	; 0x4b34 <Add_Admin+0x9a>
    4ccc:	6b eb       	ldi	r22, 0xBB	; 187
    4cce:	c6 2e       	mov	r12, r22
    4cd0:	59 cf       	rjmp	.-334    	; 0x4b84 <Add_Admin+0xea>
	u16 LOC_u16LastLocation;

	LOC_u8CheckAdminIDExistance = Check_AdminID(LOC_u16AdminID);
	APP_Registeration_voidGetNumberOfAdmins(&LOC_u8GetAdminsCount);

	if ((LOC_u8GetAdminsCount < ADMINS_MAX_AMOUNT) && (LOC_u8GetAdminsCount >= ADMIN_DATABASE_EMPTY))
    4cd2:	8e ed       	ldi	r24, 0xDE	; 222
    4cd4:	dc cf       	rjmp	.-72     	; 0x4c8e <Add_Admin+0x1f4>
					HAL_EEPROM_voidWriteData(LOC_u16LastLocation++,Pass[j]);
				}

				//			GLOB_u8UserCount++;
				//LOC_u8GetUsersCount++;
				return ++LOC_u8GetAdminsCount;		//returning number of Admins add till now.
    4cd6:	8f ef       	ldi	r24, 0xFF	; 255
    4cd8:	da cf       	rjmp	.-76     	; 0x4c8e <Add_Admin+0x1f4>
			{

				u8 i=3,j=3, Admin[MAX_DIGITS] , Pass[MAX_DIGITS];
				//			static u16 LOC_u16CurrentLocation;

				while (LOC_u16AdminID != 0)
    4cda:	81 14       	cp	r8, r1
    4cdc:	91 04       	cpc	r9, r1
    4cde:	b9 f0       	breq	.+46     	; 0x4d0e <Add_Admin+0x274>
    4ce0:	43 e0       	ldi	r20, 0x03	; 3
    4ce2:	8e 01       	movw	r16, r28
    4ce4:	0a 5f       	subi	r16, 0xFA	; 250
    4ce6:	1f 4f       	sbci	r17, 0xFF	; 255
				{
					Admin[i] = (LOC_u16AdminID % 10);
    4ce8:	f8 01       	movw	r30, r16
    4cea:	e4 0f       	add	r30, r20
    4cec:	f1 1d       	adc	r31, r1
    4cee:	c4 01       	movw	r24, r8
    4cf0:	6a e0       	ldi	r22, 0x0A	; 10
    4cf2:	70 e0       	ldi	r23, 0x00	; 0
    4cf4:	0e 94 92 2b 	call	0x5724	; 0x5724 <__udivmodhi4>
    4cf8:	80 83       	st	Z, r24
					LOC_u16AdminID = (LOC_u16AdminID / 10);
    4cfa:	c4 01       	movw	r24, r8
    4cfc:	6a e0       	ldi	r22, 0x0A	; 10
    4cfe:	70 e0       	ldi	r23, 0x00	; 0
    4d00:	0e 94 92 2b 	call	0x5724	; 0x5724 <__udivmodhi4>
    4d04:	4b 01       	movw	r8, r22
					i--;
    4d06:	41 50       	subi	r20, 0x01	; 1
			{

				u8 i=3,j=3, Admin[MAX_DIGITS] , Pass[MAX_DIGITS];
				//			static u16 LOC_u16CurrentLocation;

				while (LOC_u16AdminID != 0)
    4d08:	61 15       	cp	r22, r1
    4d0a:	71 05       	cpc	r23, r1
    4d0c:	69 f7       	brne	.-38     	; 0x4ce8 <Add_Admin+0x24e>
				{
					Admin[i] = (LOC_u16AdminID % 10);
					LOC_u16AdminID = (LOC_u16AdminID / 10);
					i--;
				}
				while (LOC_u16AdminPassword != 0)
    4d0e:	21 14       	cp	r2, r1
    4d10:	31 04       	cpc	r3, r1
    4d12:	a1 f0       	breq	.+40     	; 0x4d3c <Add_Admin+0x2a2>
    4d14:	43 e0       	ldi	r20, 0x03	; 3
				{
					Pass[j] = (LOC_u16AdminPassword % 10);
    4d16:	f2 01       	movw	r30, r4
    4d18:	e4 0f       	add	r30, r20
    4d1a:	f1 1d       	adc	r31, r1
    4d1c:	c1 01       	movw	r24, r2
    4d1e:	6a e0       	ldi	r22, 0x0A	; 10
    4d20:	70 e0       	ldi	r23, 0x00	; 0
    4d22:	0e 94 92 2b 	call	0x5724	; 0x5724 <__udivmodhi4>
    4d26:	80 83       	st	Z, r24
					LOC_u16AdminPassword = (LOC_u16AdminPassword / 10);
    4d28:	c1 01       	movw	r24, r2
    4d2a:	6a e0       	ldi	r22, 0x0A	; 10
    4d2c:	70 e0       	ldi	r23, 0x00	; 0
    4d2e:	0e 94 92 2b 	call	0x5724	; 0x5724 <__udivmodhi4>
    4d32:	1b 01       	movw	r2, r22
					j--;
    4d34:	41 50       	subi	r20, 0x01	; 1
				{
					Admin[i] = (LOC_u16AdminID % 10);
					LOC_u16AdminID = (LOC_u16AdminID / 10);
					i--;
				}
				while (LOC_u16AdminPassword != 0)
    4d36:	61 15       	cp	r22, r1
    4d38:	71 05       	cpc	r23, r1
    4d3a:	69 f7       	brne	.-38     	; 0x4d16 <Add_Admin+0x27c>


				//			LOC_u16UserLocation = (USER_LOCATION_TOP) + (LOC_u16CurrentLocation*8) ;

//				LOC_u16LastUserStartLocation = (USER_LOCATION_TOP - STEP);
				LOC_u16LastLocation = (ADMIN_LOCATION_TOP) + ( STEP * LOC_u8GetAdminsCount);
    4d3c:	0b 2d       	mov	r16, r11
    4d3e:	10 e0       	ldi	r17, 0x00	; 0
    4d40:	00 0f       	add	r16, r16
    4d42:	11 1f       	adc	r17, r17
    4d44:	00 0f       	add	r16, r16
    4d46:	11 1f       	adc	r17, r17
    4d48:	00 0f       	add	r16, r16
    4d4a:	11 1f       	adc	r17, r17

				for(i=0;i<4;i++)
				{
					//			HAL_EEPROM_voidWriteData(GLOB_u8Location++,User[i]);
					HAL_EEPROM_voidWriteData(LOC_u16LastLocation++,Admin[i]);
    4d4c:	78 01       	movw	r14, r16
    4d4e:	08 94       	sec
    4d50:	e1 1c       	adc	r14, r1
    4d52:	f1 1c       	adc	r15, r1
    4d54:	c8 01       	movw	r24, r16
    4d56:	6e 81       	ldd	r22, Y+6	; 0x06
    4d58:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <HAL_EEPROM_voidWriteData>
    4d5c:	67 01       	movw	r12, r14
    4d5e:	08 94       	sec
    4d60:	c1 1c       	adc	r12, r1
    4d62:	d1 1c       	adc	r13, r1
    4d64:	c7 01       	movw	r24, r14
    4d66:	6f 81       	ldd	r22, Y+7	; 0x07
    4d68:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <HAL_EEPROM_voidWriteData>
    4d6c:	c6 01       	movw	r24, r12
    4d6e:	68 85       	ldd	r22, Y+8	; 0x08
    4d70:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <HAL_EEPROM_voidWriteData>
    4d74:	c6 01       	movw	r24, r12
    4d76:	01 96       	adiw	r24, 0x01	; 1
    4d78:	69 85       	ldd	r22, Y+9	; 0x09
    4d7a:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <HAL_EEPROM_voidWriteData>
				}
				for(j=0;j<4;j++)
				{
					//			HAL_EEPROM_voidWriteData(GLOB_u8Location++,Pass[j]);
					HAL_EEPROM_voidWriteData(LOC_u16LastLocation++,Pass[j]);
    4d7e:	c8 01       	movw	r24, r16
    4d80:	04 96       	adiw	r24, 0x04	; 4
    4d82:	6a 81       	ldd	r22, Y+2	; 0x02
    4d84:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <HAL_EEPROM_voidWriteData>
    4d88:	46 e0       	ldi	r20, 0x06	; 6
    4d8a:	e4 2e       	mov	r14, r20
    4d8c:	f1 2c       	mov	r15, r1
    4d8e:	e0 0e       	add	r14, r16
    4d90:	f1 1e       	adc	r15, r17
    4d92:	0b 5f       	subi	r16, 0xFB	; 251
    4d94:	1f 4f       	sbci	r17, 0xFF	; 255
    4d96:	c8 01       	movw	r24, r16
    4d98:	6b 81       	ldd	r22, Y+3	; 0x03
    4d9a:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <HAL_EEPROM_voidWriteData>
    4d9e:	c7 01       	movw	r24, r14
    4da0:	6c 81       	ldd	r22, Y+4	; 0x04
    4da2:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <HAL_EEPROM_voidWriteData>
    4da6:	c8 01       	movw	r24, r16
    4da8:	02 96       	adiw	r24, 0x02	; 2
    4daa:	6d 81       	ldd	r22, Y+5	; 0x05
    4dac:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <HAL_EEPROM_voidWriteData>
				}

				//			GLOB_u8UserCount++;
				//LOC_u8GetUsersCount++;
				return ++LOC_u8GetAdminsCount;		//returning number of Admins add till now.
    4db0:	8b 2d       	mov	r24, r11
    4db2:	8f 5f       	subi	r24, 0xFF	; 255
    4db4:	6c cf       	rjmp	.-296    	; 0x4c8e <Add_Admin+0x1f4>

00004db6 <Check_AdminPassword>:
	return ADMIN_NOT_FOUND;
}


u8 Check_AdminPassword(u16 LOC_u16AdminID,u16 LOC_u16AdminPassword)
{
    4db6:	4f 92       	push	r4
    4db8:	5f 92       	push	r5
    4dba:	6f 92       	push	r6
    4dbc:	7f 92       	push	r7
    4dbe:	8f 92       	push	r8
    4dc0:	9f 92       	push	r9
    4dc2:	af 92       	push	r10
    4dc4:	bf 92       	push	r11
    4dc6:	df 92       	push	r13
    4dc8:	ef 92       	push	r14
    4dca:	ff 92       	push	r15
    4dcc:	0f 93       	push	r16
    4dce:	1f 93       	push	r17
    4dd0:	df 93       	push	r29
    4dd2:	cf 93       	push	r28
    4dd4:	cd b7       	in	r28, 0x3d	; 61
    4dd6:	de b7       	in	r29, 0x3e	; 62
    4dd8:	60 97       	sbiw	r28, 0x10	; 16
    4dda:	0f b6       	in	r0, 0x3f	; 63
    4ddc:	f8 94       	cli
    4dde:	de bf       	out	0x3e, r29	; 62
    4de0:	0f be       	out	0x3f, r0	; 63
    4de2:	cd bf       	out	0x3d, r28	; 61
    4de4:	9c 01       	movw	r18, r24
    4de6:	7b 01       	movw	r14, r22
	u8 i=3,LOC_u8AdminNumberFlag = 0, LOC_u8IDMatchedFlag = 0 ,LOC_u8AdminID_Read[MAX_DIGITS] , LOC_u8AdminIDArray[MAX_DIGITS], LOC_u8DigitCounter = 0;

	u16 LOC_u16AdminLocationVariable = ADMIN_LOCATION_TOP,LOC_u16AdminLocationVariableDigits ;


	while (LOC_u16AdminID != 0)
    4de8:	00 97       	sbiw	r24, 0x00	; 0
    4dea:	b9 f0       	breq	.+46     	; 0x4e1a <Check_AdminPassword+0x64>
    4dec:	43 e0       	ldi	r20, 0x03	; 3
    4dee:	8e 01       	movw	r16, r28
    4df0:	03 5f       	subi	r16, 0xF3	; 243
    4df2:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		LOC_u8AdminIDArray[i] = (LOC_u16AdminID % 10);
    4df4:	f8 01       	movw	r30, r16
    4df6:	e4 0f       	add	r30, r20
    4df8:	f1 1d       	adc	r31, r1
    4dfa:	c9 01       	movw	r24, r18
    4dfc:	6a e0       	ldi	r22, 0x0A	; 10
    4dfe:	70 e0       	ldi	r23, 0x00	; 0
    4e00:	0e 94 92 2b 	call	0x5724	; 0x5724 <__udivmodhi4>
    4e04:	80 83       	st	Z, r24
		LOC_u16AdminID = (LOC_u16AdminID / 10);
    4e06:	c9 01       	movw	r24, r18
    4e08:	6a e0       	ldi	r22, 0x0A	; 10
    4e0a:	70 e0       	ldi	r23, 0x00	; 0
    4e0c:	0e 94 92 2b 	call	0x5724	; 0x5724 <__udivmodhi4>
    4e10:	9b 01       	movw	r18, r22
		i--;
    4e12:	41 50       	subi	r20, 0x01	; 1
	u8 i=3,LOC_u8AdminNumberFlag = 0, LOC_u8IDMatchedFlag = 0 ,LOC_u8AdminID_Read[MAX_DIGITS] , LOC_u8AdminIDArray[MAX_DIGITS], LOC_u8DigitCounter = 0;

	u16 LOC_u16AdminLocationVariable = ADMIN_LOCATION_TOP,LOC_u16AdminLocationVariableDigits ;


	while (LOC_u16AdminID != 0)
    4e14:	61 15       	cp	r22, r1
    4e16:	71 05       	cpc	r23, r1
    4e18:	69 f7       	brne	.-38     	; 0x4df4 <Check_AdminPassword+0x3e>
    4e1a:	dd 24       	eor	r13, r13
    4e1c:	00 e0       	ldi	r16, 0x00	; 0
    4e1e:	10 e0       	ldi	r17, 0x00	; 0
    4e20:	39 e0       	ldi	r19, 0x09	; 9
    4e22:	a3 2e       	mov	r10, r19
    4e24:	b1 2c       	mov	r11, r1
    4e26:	ac 0e       	add	r10, r28
    4e28:	bd 1e       	adc	r11, r29
		LOC_u8AdminNumberFlag++;
		LOC_u16AdminLocationVariableDigits = LOC_u16AdminLocationVariable;
		for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DIGITS;LOC_u8DigitCounter++)
		{

			HAL_EEPROM_voidReadData(LOC_u16AdminLocationVariableDigits,&LOC_u8AdminID_Read[LOC_u8DigitCounter]);
    4e2a:	2a e0       	ldi	r18, 0x0A	; 10
    4e2c:	82 2e       	mov	r8, r18
    4e2e:	91 2c       	mov	r9, r1
    4e30:	8c 0e       	add	r8, r28
    4e32:	9d 1e       	adc	r9, r29
    4e34:	9b e0       	ldi	r25, 0x0B	; 11
    4e36:	69 2e       	mov	r6, r25
    4e38:	71 2c       	mov	r7, r1
    4e3a:	6c 0e       	add	r6, r28
    4e3c:	7d 1e       	adc	r7, r29
    4e3e:	8c e0       	ldi	r24, 0x0C	; 12
    4e40:	48 2e       	mov	r4, r24
    4e42:	51 2c       	mov	r5, r1
    4e44:	4c 0e       	add	r4, r28
    4e46:	5d 1e       	adc	r5, r29
	}


	for(;LOC_u16AdminLocationVariable <= ADMIN_LOCATION_BOT;LOC_u16AdminLocationVariable += STEP)
	{
		LOC_u8AdminNumberFlag++;
    4e48:	d3 94       	inc	r13
		LOC_u16AdminLocationVariableDigits = LOC_u16AdminLocationVariable;
		for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DIGITS;LOC_u8DigitCounter++)
		{

			HAL_EEPROM_voidReadData(LOC_u16AdminLocationVariableDigits,&LOC_u8AdminID_Read[LOC_u8DigitCounter]);
    4e4a:	c8 01       	movw	r24, r16
    4e4c:	b5 01       	movw	r22, r10
    4e4e:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <HAL_EEPROM_voidReadData>
			if (LOC_u8AdminID_Read[LOC_u8DigitCounter] == LOC_u8AdminIDArray[LOC_u8DigitCounter])
    4e52:	99 85       	ldd	r25, Y+9	; 0x09
    4e54:	8d 85       	ldd	r24, Y+13	; 0x0d
    4e56:	98 17       	cp	r25, r24
    4e58:	09 f0       	breq	.+2      	; 0x4e5c <Check_AdminPassword+0xa6>
    4e5a:	89 c0       	rjmp	.+274    	; 0x4f6e <Check_AdminPassword+0x1b8>
		LOC_u8AdminNumberFlag++;
		LOC_u16AdminLocationVariableDigits = LOC_u16AdminLocationVariable;
		for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DIGITS;LOC_u8DigitCounter++)
		{

			HAL_EEPROM_voidReadData(LOC_u16AdminLocationVariableDigits,&LOC_u8AdminID_Read[LOC_u8DigitCounter]);
    4e5c:	c8 01       	movw	r24, r16
    4e5e:	01 96       	adiw	r24, 0x01	; 1
    4e60:	b4 01       	movw	r22, r8
    4e62:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <HAL_EEPROM_voidReadData>
			if (LOC_u8AdminID_Read[LOC_u8DigitCounter] == LOC_u8AdminIDArray[LOC_u8DigitCounter])
    4e66:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e68:	8e 85       	ldd	r24, Y+14	; 0x0e
    4e6a:	98 17       	cp	r25, r24
    4e6c:	09 f0       	breq	.+2      	; 0x4e70 <Check_AdminPassword+0xba>
    4e6e:	7f c0       	rjmp	.+254    	; 0x4f6e <Check_AdminPassword+0x1b8>
		LOC_u8AdminNumberFlag++;
		LOC_u16AdminLocationVariableDigits = LOC_u16AdminLocationVariable;
		for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DIGITS;LOC_u8DigitCounter++)
		{

			HAL_EEPROM_voidReadData(LOC_u16AdminLocationVariableDigits,&LOC_u8AdminID_Read[LOC_u8DigitCounter]);
    4e70:	c8 01       	movw	r24, r16
    4e72:	02 96       	adiw	r24, 0x02	; 2
    4e74:	b3 01       	movw	r22, r6
    4e76:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <HAL_EEPROM_voidReadData>
			if (LOC_u8AdminID_Read[LOC_u8DigitCounter] == LOC_u8AdminIDArray[LOC_u8DigitCounter])
    4e7a:	9b 85       	ldd	r25, Y+11	; 0x0b
    4e7c:	8f 85       	ldd	r24, Y+15	; 0x0f
    4e7e:	98 17       	cp	r25, r24
    4e80:	09 f0       	breq	.+2      	; 0x4e84 <Check_AdminPassword+0xce>
    4e82:	75 c0       	rjmp	.+234    	; 0x4f6e <Check_AdminPassword+0x1b8>
		LOC_u8AdminNumberFlag++;
		LOC_u16AdminLocationVariableDigits = LOC_u16AdminLocationVariable;
		for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DIGITS;LOC_u8DigitCounter++)
		{

			HAL_EEPROM_voidReadData(LOC_u16AdminLocationVariableDigits,&LOC_u8AdminID_Read[LOC_u8DigitCounter]);
    4e84:	c8 01       	movw	r24, r16
    4e86:	03 96       	adiw	r24, 0x03	; 3
    4e88:	b2 01       	movw	r22, r4
    4e8a:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <HAL_EEPROM_voidReadData>
			if (LOC_u8AdminID_Read[LOC_u8DigitCounter] == LOC_u8AdminIDArray[LOC_u8DigitCounter])
    4e8e:	9c 85       	ldd	r25, Y+12	; 0x0c
    4e90:	88 89       	ldd	r24, Y+16	; 0x10
    4e92:	98 17       	cp	r25, r24
    4e94:	09 f0       	breq	.+2      	; 0x4e98 <Check_AdminPassword+0xe2>
    4e96:	6b c0       	rjmp	.+214    	; 0x4f6e <Check_AdminPassword+0x1b8>
	u8 i=3,LOC_u8AdminCheck = 0,LOC_u8PassMatchedFlag = 0,LOC_u8DigitCounter,LOC_u8AdminPasswordArray[MAX_DIGITS], LOC_u8AdminPass_Read[MAX_DIGITS];
	u16 LOC_u16AdminStartLocation = (ADMIN_LOCATION_TOP-MAX_DIGITS),LOC_u16PassLocationVariableDigits;
	LOC_u8AdminCheck = Check_AdminID(LOC_u16AdminID);

	//Save password in an array to save time when checking.
	while (LOC_u16AdminPassword != 0)
    4e98:	e1 14       	cp	r14, r1
    4e9a:	f1 04       	cpc	r15, r1
    4e9c:	b9 f0       	breq	.+46     	; 0x4ecc <Check_AdminPassword+0x116>
    4e9e:	43 e0       	ldi	r20, 0x03	; 3
    4ea0:	8e 01       	movw	r16, r28
    4ea2:	0f 5f       	subi	r16, 0xFF	; 255
    4ea4:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		LOC_u8AdminPasswordArray[i] = (LOC_u16AdminPassword % 10);
    4ea6:	f8 01       	movw	r30, r16
    4ea8:	e4 0f       	add	r30, r20
    4eaa:	f1 1d       	adc	r31, r1
    4eac:	c7 01       	movw	r24, r14
    4eae:	6a e0       	ldi	r22, 0x0A	; 10
    4eb0:	70 e0       	ldi	r23, 0x00	; 0
    4eb2:	0e 94 92 2b 	call	0x5724	; 0x5724 <__udivmodhi4>
    4eb6:	80 83       	st	Z, r24
		LOC_u16AdminPassword = (LOC_u16AdminPassword / 10);
    4eb8:	c7 01       	movw	r24, r14
    4eba:	6a e0       	ldi	r22, 0x0A	; 10
    4ebc:	70 e0       	ldi	r23, 0x00	; 0
    4ebe:	0e 94 92 2b 	call	0x5724	; 0x5724 <__udivmodhi4>
    4ec2:	7b 01       	movw	r14, r22
		i--;
    4ec4:	41 50       	subi	r20, 0x01	; 1
	u8 i=3,LOC_u8AdminCheck = 0,LOC_u8PassMatchedFlag = 0,LOC_u8DigitCounter,LOC_u8AdminPasswordArray[MAX_DIGITS], LOC_u8AdminPass_Read[MAX_DIGITS];
	u16 LOC_u16AdminStartLocation = (ADMIN_LOCATION_TOP-MAX_DIGITS),LOC_u16PassLocationVariableDigits;
	LOC_u8AdminCheck = Check_AdminID(LOC_u16AdminID);

	//Save password in an array to save time when checking.
	while (LOC_u16AdminPassword != 0)
    4ec6:	61 15       	cp	r22, r1
    4ec8:	71 05       	cpc	r23, r1
    4eca:	69 f7       	brne	.-38     	; 0x4ea6 <Check_AdminPassword+0xf0>
		LOC_u16AdminPassword = (LOC_u16AdminPassword / 10);
		i--;
	}


	if ((LOC_u8AdminCheck <= ADMINS_MAX_AMOUNT) && (LOC_u8AdminCheck >= ADMINS_MIN_AMOUNT))
    4ecc:	8d 2d       	mov	r24, r13
    4ece:	81 50       	subi	r24, 0x01	; 1
    4ed0:	8c 30       	cpi	r24, 0x0C	; 12
    4ed2:	08 f0       	brcs	.+2      	; 0x4ed6 <Check_AdminPassword+0x120>
    4ed4:	55 c0       	rjmp	.+170    	; 0x4f80 <Check_AdminPassword+0x1ca>
	{
		LOC_u16PassLocationVariableDigits = (LOC_u16AdminStartLocation ) + (2 * MAX_DIGITS * LOC_u8AdminCheck);
    4ed6:	0d 2d       	mov	r16, r13
    4ed8:	10 e0       	ldi	r17, 0x00	; 0
    4eda:	00 0f       	add	r16, r16
    4edc:	11 1f       	adc	r17, r17
    4ede:	00 0f       	add	r16, r16
    4ee0:	11 1f       	adc	r17, r17
    4ee2:	00 0f       	add	r16, r16
    4ee4:	11 1f       	adc	r17, r17
			for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DIGITS;LOC_u8DigitCounter++)
			{

				HAL_EEPROM_voidReadData(LOC_u16PassLocationVariableDigits,&LOC_u8AdminPass_Read[LOC_u8DigitCounter]);
    4ee6:	c8 01       	movw	r24, r16
    4ee8:	04 97       	sbiw	r24, 0x04	; 4
    4eea:	be 01       	movw	r22, r28
    4eec:	6b 5f       	subi	r22, 0xFB	; 251
    4eee:	7f 4f       	sbci	r23, 0xFF	; 255
    4ef0:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <HAL_EEPROM_voidReadData>
				if (LOC_u8AdminPass_Read[LOC_u8DigitCounter] == LOC_u8AdminPasswordArray[LOC_u8DigitCounter])
    4ef4:	9d 81       	ldd	r25, Y+5	; 0x05
    4ef6:	89 81       	ldd	r24, Y+1	; 0x01
    4ef8:	98 17       	cp	r25, r24
    4efa:	09 f0       	breq	.+2      	; 0x4efe <Check_AdminPassword+0x148>
    4efc:	43 c0       	rjmp	.+134    	; 0x4f84 <Check_AdminPassword+0x1ce>
	{
		LOC_u16PassLocationVariableDigits = (LOC_u16AdminStartLocation ) + (2 * MAX_DIGITS * LOC_u8AdminCheck);
			for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DIGITS;LOC_u8DigitCounter++)
			{

				HAL_EEPROM_voidReadData(LOC_u16PassLocationVariableDigits,&LOC_u8AdminPass_Read[LOC_u8DigitCounter]);
    4efe:	c8 01       	movw	r24, r16
    4f00:	03 97       	sbiw	r24, 0x03	; 3
    4f02:	be 01       	movw	r22, r28
    4f04:	6a 5f       	subi	r22, 0xFA	; 250
    4f06:	7f 4f       	sbci	r23, 0xFF	; 255
    4f08:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <HAL_EEPROM_voidReadData>
				if (LOC_u8AdminPass_Read[LOC_u8DigitCounter] == LOC_u8AdminPasswordArray[LOC_u8DigitCounter])
    4f0c:	9e 81       	ldd	r25, Y+6	; 0x06
    4f0e:	8a 81       	ldd	r24, Y+2	; 0x02
    4f10:	98 17       	cp	r25, r24
    4f12:	c1 f5       	brne	.+112    	; 0x4f84 <Check_AdminPassword+0x1ce>
	{
		LOC_u16PassLocationVariableDigits = (LOC_u16AdminStartLocation ) + (2 * MAX_DIGITS * LOC_u8AdminCheck);
			for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DIGITS;LOC_u8DigitCounter++)
			{

				HAL_EEPROM_voidReadData(LOC_u16PassLocationVariableDigits,&LOC_u8AdminPass_Read[LOC_u8DigitCounter]);
    4f14:	c8 01       	movw	r24, r16
    4f16:	02 97       	sbiw	r24, 0x02	; 2
    4f18:	be 01       	movw	r22, r28
    4f1a:	69 5f       	subi	r22, 0xF9	; 249
    4f1c:	7f 4f       	sbci	r23, 0xFF	; 255
    4f1e:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <HAL_EEPROM_voidReadData>
				if (LOC_u8AdminPass_Read[LOC_u8DigitCounter] == LOC_u8AdminPasswordArray[LOC_u8DigitCounter])
    4f22:	9f 81       	ldd	r25, Y+7	; 0x07
    4f24:	8b 81       	ldd	r24, Y+3	; 0x03
    4f26:	98 17       	cp	r25, r24
    4f28:	69 f5       	brne	.+90     	; 0x4f84 <Check_AdminPassword+0x1ce>
	{
		LOC_u16PassLocationVariableDigits = (LOC_u16AdminStartLocation ) + (2 * MAX_DIGITS * LOC_u8AdminCheck);
			for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DIGITS;LOC_u8DigitCounter++)
			{

				HAL_EEPROM_voidReadData(LOC_u16PassLocationVariableDigits,&LOC_u8AdminPass_Read[LOC_u8DigitCounter]);
    4f2a:	c8 01       	movw	r24, r16
    4f2c:	01 97       	sbiw	r24, 0x01	; 1
    4f2e:	be 01       	movw	r22, r28
    4f30:	68 5f       	subi	r22, 0xF8	; 248
    4f32:	7f 4f       	sbci	r23, 0xFF	; 255
    4f34:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <HAL_EEPROM_voidReadData>
				if (LOC_u8AdminPass_Read[LOC_u8DigitCounter] == LOC_u8AdminPasswordArray[LOC_u8DigitCounter])
    4f38:	98 85       	ldd	r25, Y+8	; 0x08
    4f3a:	8c 81       	ldd	r24, Y+4	; 0x04
    4f3c:	98 17       	cp	r25, r24
    4f3e:	11 f5       	brne	.+68     	; 0x4f84 <Check_AdminPassword+0x1ce>
    4f40:	8d e4       	ldi	r24, 0x4D	; 77
	{
		return ADMIN_NOT_FOUND;
	}


}
    4f42:	60 96       	adiw	r28, 0x10	; 16
    4f44:	0f b6       	in	r0, 0x3f	; 63
    4f46:	f8 94       	cli
    4f48:	de bf       	out	0x3e, r29	; 62
    4f4a:	0f be       	out	0x3f, r0	; 63
    4f4c:	cd bf       	out	0x3d, r28	; 61
    4f4e:	cf 91       	pop	r28
    4f50:	df 91       	pop	r29
    4f52:	1f 91       	pop	r17
    4f54:	0f 91       	pop	r16
    4f56:	ff 90       	pop	r15
    4f58:	ef 90       	pop	r14
    4f5a:	df 90       	pop	r13
    4f5c:	bf 90       	pop	r11
    4f5e:	af 90       	pop	r10
    4f60:	9f 90       	pop	r9
    4f62:	8f 90       	pop	r8
    4f64:	7f 90       	pop	r7
    4f66:	6f 90       	pop	r6
    4f68:	5f 90       	pop	r5
    4f6a:	4f 90       	pop	r4
    4f6c:	08 95       	ret
		LOC_u16AdminID = (LOC_u16AdminID / 10);
		i--;
	}


	for(;LOC_u16AdminLocationVariable <= ADMIN_LOCATION_BOT;LOC_u16AdminLocationVariable += STEP)
    4f6e:	08 5f       	subi	r16, 0xF8	; 248
    4f70:	1f 4f       	sbci	r17, 0xFF	; 255
    4f72:	8c e0       	ldi	r24, 0x0C	; 12
    4f74:	d8 16       	cp	r13, r24
    4f76:	09 f0       	breq	.+2      	; 0x4f7a <Check_AdminPassword+0x1c4>
    4f78:	67 cf       	rjmp	.-306    	; 0x4e48 <Check_AdminPassword+0x92>
    4f7a:	1b eb       	ldi	r17, 0xBB	; 187
    4f7c:	d1 2e       	mov	r13, r17
    4f7e:	8c cf       	rjmp	.-232    	; 0x4e98 <Check_AdminPassword+0xe2>
		LOC_u16AdminPassword = (LOC_u16AdminPassword / 10);
		i--;
	}


	if ((LOC_u8AdminCheck <= ADMINS_MAX_AMOUNT) && (LOC_u8AdminCheck >= ADMINS_MIN_AMOUNT))
    4f80:	8b eb       	ldi	r24, 0xBB	; 187
    4f82:	df cf       	rjmp	.-66     	; 0x4f42 <Check_AdminPassword+0x18c>
		LOC_u16PassLocationVariableDigits = (LOC_u16AdminStartLocation ) + (2 * MAX_DIGITS * LOC_u8AdminCheck);
			for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DIGITS;LOC_u8DigitCounter++)
			{

				HAL_EEPROM_voidReadData(LOC_u16PassLocationVariableDigits,&LOC_u8AdminPass_Read[LOC_u8DigitCounter]);
				if (LOC_u8AdminPass_Read[LOC_u8DigitCounter] == LOC_u8AdminPasswordArray[LOC_u8DigitCounter])
    4f84:	88 e5       	ldi	r24, 0x58	; 88
    4f86:	dd cf       	rjmp	.-70     	; 0x4f42 <Check_AdminPassword+0x18c>

00004f88 <Add_User>:
}


/*************************	User Section	****************************/
u8 Add_User(u16 LOC_u16UserID,u16 LOC_u16UserPassword)
{
    4f88:	2f 92       	push	r2
    4f8a:	3f 92       	push	r3
    4f8c:	4f 92       	push	r4
    4f8e:	5f 92       	push	r5
    4f90:	6f 92       	push	r6
    4f92:	7f 92       	push	r7
    4f94:	8f 92       	push	r8
    4f96:	9f 92       	push	r9
    4f98:	af 92       	push	r10
    4f9a:	bf 92       	push	r11
    4f9c:	cf 92       	push	r12
    4f9e:	df 92       	push	r13
    4fa0:	ef 92       	push	r14
    4fa2:	ff 92       	push	r15
    4fa4:	0f 93       	push	r16
    4fa6:	1f 93       	push	r17
    4fa8:	df 93       	push	r29
    4faa:	cf 93       	push	r28
    4fac:	cd b7       	in	r28, 0x3d	; 61
    4fae:	de b7       	in	r29, 0x3e	; 62
    4fb0:	29 97       	sbiw	r28, 0x09	; 9
    4fb2:	0f b6       	in	r0, 0x3f	; 63
    4fb4:	f8 94       	cli
    4fb6:	de bf       	out	0x3e, r29	; 62
    4fb8:	0f be       	out	0x3f, r0	; 63
    4fba:	cd bf       	out	0x3d, r28	; 61
    4fbc:	4c 01       	movw	r8, r24
    4fbe:	1b 01       	movw	r2, r22
	u8 i=3,LOC_u8UserNumberFlag = 0, LOC_u8IDMatchedFlag = 0 ,LOC_u8UserID_Read[MAX_DIGITS] , LOC_u8UserIDArray[MAX_DIGITS], LOC_u8DigitCounter = 0;

	u16 LOC_u16UserLocationVariable = USER_LOCATION_TOP,LOC_u16UserLocationVariableDigits ;


	while (LOC_u16UserID != 0)
    4fc0:	00 97       	sbiw	r24, 0x00	; 0
    4fc2:	c1 f0       	breq	.+48     	; 0x4ff4 <Add_User+0x6c>
    4fc4:	9c 01       	movw	r18, r24
    4fc6:	43 e0       	ldi	r20, 0x03	; 3
    4fc8:	8e 01       	movw	r16, r28
    4fca:	0a 5f       	subi	r16, 0xFA	; 250
    4fcc:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		LOC_u8UserIDArray[i] = (LOC_u16UserID % 10);
    4fce:	f8 01       	movw	r30, r16
    4fd0:	e4 0f       	add	r30, r20
    4fd2:	f1 1d       	adc	r31, r1
    4fd4:	c9 01       	movw	r24, r18
    4fd6:	6a e0       	ldi	r22, 0x0A	; 10
    4fd8:	70 e0       	ldi	r23, 0x00	; 0
    4fda:	0e 94 92 2b 	call	0x5724	; 0x5724 <__udivmodhi4>
    4fde:	80 83       	st	Z, r24
		LOC_u16UserID = (LOC_u16UserID / 10);
    4fe0:	c9 01       	movw	r24, r18
    4fe2:	6a e0       	ldi	r22, 0x0A	; 10
    4fe4:	70 e0       	ldi	r23, 0x00	; 0
    4fe6:	0e 94 92 2b 	call	0x5724	; 0x5724 <__udivmodhi4>
    4fea:	9b 01       	movw	r18, r22
		i--;
    4fec:	41 50       	subi	r20, 0x01	; 1
	u8 i=3,LOC_u8UserNumberFlag = 0, LOC_u8IDMatchedFlag = 0 ,LOC_u8UserID_Read[MAX_DIGITS] , LOC_u8UserIDArray[MAX_DIGITS], LOC_u8DigitCounter = 0;

	u16 LOC_u16UserLocationVariable = USER_LOCATION_TOP,LOC_u16UserLocationVariableDigits ;


	while (LOC_u16UserID != 0)
    4fee:	61 15       	cp	r22, r1
    4ff0:	71 05       	cpc	r23, r1
    4ff2:	69 f7       	brne	.-38     	; 0x4fce <Add_User+0x46>
    4ff4:	cc 24       	eor	r12, r12
    4ff6:	00 e6       	ldi	r16, 0x60	; 96
    4ff8:	10 e0       	ldi	r17, 0x00	; 0
    4ffa:	a2 e0       	ldi	r26, 0x02	; 2
    4ffc:	4a 2e       	mov	r4, r26
    4ffe:	51 2c       	mov	r5, r1
    5000:	4c 0e       	add	r4, r28
    5002:	5d 1e       	adc	r5, r29
		LOC_u8UserNumberFlag++;
		LOC_u16UserLocationVariableDigits = LOC_u16UserLocationVariable;
		for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DIGITS;LOC_u8DigitCounter++)
		{

			HAL_EEPROM_voidReadData(LOC_u16UserLocationVariableDigits,&LOC_u8UserID_Read[LOC_u8DigitCounter]);
    5004:	f3 e0       	ldi	r31, 0x03	; 3
    5006:	af 2e       	mov	r10, r31
    5008:	b1 2c       	mov	r11, r1
    500a:	ac 0e       	add	r10, r28
    500c:	bd 1e       	adc	r11, r29
    500e:	e2 e0       	ldi	r30, 0x02	; 2
    5010:	ee 2e       	mov	r14, r30
    5012:	f1 2c       	mov	r15, r1
    5014:	e4 0c       	add	r14, r4
    5016:	f5 1c       	adc	r15, r5
    5018:	75 e0       	ldi	r23, 0x05	; 5
    501a:	67 2e       	mov	r6, r23
    501c:	71 2c       	mov	r7, r1
    501e:	6c 0e       	add	r6, r28
    5020:	7d 1e       	adc	r7, r29
	}


	for(;LOC_u16UserLocationVariable <= USER_LOCATION_BOT;LOC_u16UserLocationVariable += STEP)
	{
		LOC_u8UserNumberFlag++;
    5022:	c3 94       	inc	r12
		LOC_u16UserLocationVariableDigits = LOC_u16UserLocationVariable;
		for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DIGITS;LOC_u8DigitCounter++)
		{

			HAL_EEPROM_voidReadData(LOC_u16UserLocationVariableDigits,&LOC_u8UserID_Read[LOC_u8DigitCounter]);
    5024:	c8 01       	movw	r24, r16
    5026:	b2 01       	movw	r22, r4
    5028:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <HAL_EEPROM_voidReadData>
			if (LOC_u8UserID_Read[LOC_u8DigitCounter] == LOC_u8UserIDArray[LOC_u8DigitCounter])
    502c:	9a 81       	ldd	r25, Y+2	; 0x02
    502e:	8e 81       	ldd	r24, Y+6	; 0x06
    5030:	98 17       	cp	r25, r24
    5032:	09 f0       	breq	.+2      	; 0x5036 <Add_User+0xae>
    5034:	60 c0       	rjmp	.+192    	; 0x50f6 <Add_User+0x16e>
		LOC_u8UserNumberFlag++;
		LOC_u16UserLocationVariableDigits = LOC_u16UserLocationVariable;
		for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DIGITS;LOC_u8DigitCounter++)
		{

			HAL_EEPROM_voidReadData(LOC_u16UserLocationVariableDigits,&LOC_u8UserID_Read[LOC_u8DigitCounter]);
    5036:	c8 01       	movw	r24, r16
    5038:	01 96       	adiw	r24, 0x01	; 1
    503a:	b5 01       	movw	r22, r10
    503c:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <HAL_EEPROM_voidReadData>
			if (LOC_u8UserID_Read[LOC_u8DigitCounter] == LOC_u8UserIDArray[LOC_u8DigitCounter])
    5040:	9b 81       	ldd	r25, Y+3	; 0x03
    5042:	8f 81       	ldd	r24, Y+7	; 0x07
    5044:	98 17       	cp	r25, r24
    5046:	09 f0       	breq	.+2      	; 0x504a <Add_User+0xc2>
    5048:	56 c0       	rjmp	.+172    	; 0x50f6 <Add_User+0x16e>
		LOC_u8UserNumberFlag++;
		LOC_u16UserLocationVariableDigits = LOC_u16UserLocationVariable;
		for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DIGITS;LOC_u8DigitCounter++)
		{

			HAL_EEPROM_voidReadData(LOC_u16UserLocationVariableDigits,&LOC_u8UserID_Read[LOC_u8DigitCounter]);
    504a:	c8 01       	movw	r24, r16
    504c:	02 96       	adiw	r24, 0x02	; 2
    504e:	b7 01       	movw	r22, r14
    5050:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <HAL_EEPROM_voidReadData>
			if (LOC_u8UserID_Read[LOC_u8DigitCounter] == LOC_u8UserIDArray[LOC_u8DigitCounter])
    5054:	9c 81       	ldd	r25, Y+4	; 0x04
    5056:	88 85       	ldd	r24, Y+8	; 0x08
    5058:	98 17       	cp	r25, r24
    505a:	09 f0       	breq	.+2      	; 0x505e <Add_User+0xd6>
    505c:	4c c0       	rjmp	.+152    	; 0x50f6 <Add_User+0x16e>
		LOC_u8UserNumberFlag++;
		LOC_u16UserLocationVariableDigits = LOC_u16UserLocationVariable;
		for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DIGITS;LOC_u8DigitCounter++)
		{

			HAL_EEPROM_voidReadData(LOC_u16UserLocationVariableDigits,&LOC_u8UserID_Read[LOC_u8DigitCounter]);
    505e:	c8 01       	movw	r24, r16
    5060:	03 96       	adiw	r24, 0x03	; 3
    5062:	b3 01       	movw	r22, r6
    5064:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <HAL_EEPROM_voidReadData>
			if (LOC_u8UserID_Read[LOC_u8DigitCounter] == LOC_u8UserIDArray[LOC_u8DigitCounter])
    5068:	9d 81       	ldd	r25, Y+5	; 0x05
    506a:	89 85       	ldd	r24, Y+9	; 0x09
    506c:	98 17       	cp	r25, r24
    506e:	09 f0       	breq	.+2      	; 0x5072 <Add_User+0xea>
    5070:	42 c0       	rjmp	.+132    	; 0x50f6 <Add_User+0x16e>


void APP_Registeration_voidGetNumberOfUsers(u8* LOC_Pu8UsersNumber)
{
	u16 LOC_u16LocationVariable = USER_LOCATION_TOP;
	u8 LOC_u8UserNumber = 0,LOC_u8NumberCheck = 0;
    5072:	19 82       	std	Y+1, r1	; 0x01
    5074:	00 e6       	ldi	r16, 0x60	; 96
    5076:	10 e0       	ldi	r17, 0x00	; 0
    5078:	bb 24       	eor	r11, r11
    507a:	7e 01       	movw	r14, r28
    507c:	08 94       	sec
    507e:	e1 1c       	adc	r14, r1
    5080:	f1 1c       	adc	r15, r1
	for(;LOC_u16LocationVariable <= USER_LOCATION_BOT;LOC_u16LocationVariable += STEP)
	{
		HAL_EEPROM_voidReadData(LOC_u16LocationVariable,&LOC_u8NumberCheck);
    5082:	c8 01       	movw	r24, r16
    5084:	b7 01       	movw	r22, r14
    5086:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <HAL_EEPROM_voidReadData>
		if(LOC_u8NumberCheck != 255)
    508a:	89 81       	ldd	r24, Y+1	; 0x01
    508c:	8f 3f       	cpi	r24, 0xFF	; 255
    508e:	09 f0       	breq	.+2      	; 0x5092 <Add_User+0x10a>
		{
			LOC_u8UserNumber++;
    5090:	b3 94       	inc	r11

void APP_Registeration_voidGetNumberOfUsers(u8* LOC_Pu8UsersNumber)
{
	u16 LOC_u16LocationVariable = USER_LOCATION_TOP;
	u8 LOC_u8UserNumber = 0,LOC_u8NumberCheck = 0;
	for(;LOC_u16LocationVariable <= USER_LOCATION_BOT;LOC_u16LocationVariable += STEP)
    5092:	08 5f       	subi	r16, 0xF8	; 248
    5094:	1f 4f       	sbci	r17, 0xFF	; 255
    5096:	81 e0       	ldi	r24, 0x01	; 1
    5098:	00 32       	cpi	r16, 0x20	; 32
    509a:	18 07       	cpc	r17, r24
    509c:	91 f7       	brne	.-28     	; 0x5082 <Add_User+0xfa>
	u16 LOC_u16LastLocation;

	LOC_u8CheckUserIDExistance = Check_UserID(LOC_u16UserID);
	APP_Registeration_voidGetNumberOfUsers(&LOC_u8GetUsersCount);

	if ((LOC_u8GetUsersCount < USERS_MAX_AMOUNT) && (LOC_u8GetUsersCount >= USER_DATABASE_EMPTY))
    509e:	27 e1       	ldi	r18, 0x17	; 23
    50a0:	2b 15       	cp	r18, r11
    50a2:	a0 f1       	brcs	.+104    	; 0x510c <Add_User+0x184>
	{
		if((LOC_u16UserID <= 9999 && LOC_u16UserID >= 1000) && (LOC_u16UserPassword <= 9999 && LOC_u16UserPassword >= 1000))
    50a4:	c4 01       	movw	r24, r8
    50a6:	88 5e       	subi	r24, 0xE8	; 232
    50a8:	93 40       	sbci	r25, 0x03	; 3
    50aa:	88 52       	subi	r24, 0x28	; 40
    50ac:	93 42       	sbci	r25, 0x23	; 35
    50ae:	60 f5       	brcc	.+88     	; 0x5108 <Add_User+0x180>
    50b0:	c1 01       	movw	r24, r2
    50b2:	88 5e       	subi	r24, 0xE8	; 232
    50b4:	93 40       	sbci	r25, 0x03	; 3
    50b6:	88 52       	subi	r24, 0x28	; 40
    50b8:	93 42       	sbci	r25, 0x23	; 35
    50ba:	30 f5       	brcc	.+76     	; 0x5108 <Add_User+0x180>
		{
			if (LOC_u8CheckUserIDExistance == USER_NOT_FOUND)
    50bc:	8b eb       	ldi	r24, 0xBB	; 187
    50be:	c8 16       	cp	r12, r24
    50c0:	39 f1       	breq	.+78     	; 0x5110 <Add_User+0x188>
    50c2:	8c ec       	ldi	r24, 0xCC	; 204
	}
	else
	{
		return FULL;
	}
}
    50c4:	29 96       	adiw	r28, 0x09	; 9
    50c6:	0f b6       	in	r0, 0x3f	; 63
    50c8:	f8 94       	cli
    50ca:	de bf       	out	0x3e, r29	; 62
    50cc:	0f be       	out	0x3f, r0	; 63
    50ce:	cd bf       	out	0x3d, r28	; 61
    50d0:	cf 91       	pop	r28
    50d2:	df 91       	pop	r29
    50d4:	1f 91       	pop	r17
    50d6:	0f 91       	pop	r16
    50d8:	ff 90       	pop	r15
    50da:	ef 90       	pop	r14
    50dc:	df 90       	pop	r13
    50de:	cf 90       	pop	r12
    50e0:	bf 90       	pop	r11
    50e2:	af 90       	pop	r10
    50e4:	9f 90       	pop	r9
    50e6:	8f 90       	pop	r8
    50e8:	7f 90       	pop	r7
    50ea:	6f 90       	pop	r6
    50ec:	5f 90       	pop	r5
    50ee:	4f 90       	pop	r4
    50f0:	3f 90       	pop	r3
    50f2:	2f 90       	pop	r2
    50f4:	08 95       	ret
		LOC_u16UserID = (LOC_u16UserID / 10);
		i--;
	}


	for(;LOC_u16UserLocationVariable <= USER_LOCATION_BOT;LOC_u16UserLocationVariable += STEP)
    50f6:	08 5f       	subi	r16, 0xF8	; 248
    50f8:	1f 4f       	sbci	r17, 0xFF	; 255
    50fa:	28 e1       	ldi	r18, 0x18	; 24
    50fc:	c2 16       	cp	r12, r18
    50fe:	09 f0       	breq	.+2      	; 0x5102 <Add_User+0x17a>
    5100:	90 cf       	rjmp	.-224    	; 0x5022 <Add_User+0x9a>
    5102:	6b eb       	ldi	r22, 0xBB	; 187
    5104:	c6 2e       	mov	r12, r22
    5106:	b5 cf       	rjmp	.-150    	; 0x5072 <Add_User+0xea>
					HAL_EEPROM_voidWriteData(LOC_u16LastLocation++,Pass[j]);
				}

				//			GLOB_u8UserCount++;
				//LOC_u8GetUsersCount++;
				return ++LOC_u8GetUsersCount;		//returning number of users add till now.
    5108:	8f ef       	ldi	r24, 0xFF	; 255
    510a:	dc cf       	rjmp	.-72     	; 0x50c4 <Add_User+0x13c>
	u16 LOC_u16LastLocation;

	LOC_u8CheckUserIDExistance = Check_UserID(LOC_u16UserID);
	APP_Registeration_voidGetNumberOfUsers(&LOC_u8GetUsersCount);

	if ((LOC_u8GetUsersCount < USERS_MAX_AMOUNT) && (LOC_u8GetUsersCount >= USER_DATABASE_EMPTY))
    510c:	8e ed       	ldi	r24, 0xDE	; 222
    510e:	da cf       	rjmp	.-76     	; 0x50c4 <Add_User+0x13c>
			{

				u8 i=3,j=3, User[MAX_DIGITS] , Pass[MAX_DIGITS];
				//			static u16 LOC_u16CurrentLocation;

				while (LOC_u16UserID != 0)
    5110:	81 14       	cp	r8, r1
    5112:	91 04       	cpc	r9, r1
    5114:	b9 f0       	breq	.+46     	; 0x5144 <Add_User+0x1bc>
    5116:	43 e0       	ldi	r20, 0x03	; 3
    5118:	8e 01       	movw	r16, r28
    511a:	0a 5f       	subi	r16, 0xFA	; 250
    511c:	1f 4f       	sbci	r17, 0xFF	; 255
				{
					User[i] = (LOC_u16UserID % 10);
    511e:	f8 01       	movw	r30, r16
    5120:	e4 0f       	add	r30, r20
    5122:	f1 1d       	adc	r31, r1
    5124:	c4 01       	movw	r24, r8
    5126:	6a e0       	ldi	r22, 0x0A	; 10
    5128:	70 e0       	ldi	r23, 0x00	; 0
    512a:	0e 94 92 2b 	call	0x5724	; 0x5724 <__udivmodhi4>
    512e:	80 83       	st	Z, r24
					LOC_u16UserID = (LOC_u16UserID / 10);
    5130:	c4 01       	movw	r24, r8
    5132:	6a e0       	ldi	r22, 0x0A	; 10
    5134:	70 e0       	ldi	r23, 0x00	; 0
    5136:	0e 94 92 2b 	call	0x5724	; 0x5724 <__udivmodhi4>
    513a:	4b 01       	movw	r8, r22
					i--;
    513c:	41 50       	subi	r20, 0x01	; 1
			{

				u8 i=3,j=3, User[MAX_DIGITS] , Pass[MAX_DIGITS];
				//			static u16 LOC_u16CurrentLocation;

				while (LOC_u16UserID != 0)
    513e:	61 15       	cp	r22, r1
    5140:	71 05       	cpc	r23, r1
    5142:	69 f7       	brne	.-38     	; 0x511e <Add_User+0x196>
				{
					User[i] = (LOC_u16UserID % 10);
					LOC_u16UserID = (LOC_u16UserID / 10);
					i--;
				}
				while (LOC_u16UserPassword != 0)
    5144:	21 14       	cp	r2, r1
    5146:	31 04       	cpc	r3, r1
    5148:	a1 f0       	breq	.+40     	; 0x5172 <Add_User+0x1ea>
    514a:	43 e0       	ldi	r20, 0x03	; 3
				{
					Pass[j] = (LOC_u16UserPassword % 10);
    514c:	f2 01       	movw	r30, r4
    514e:	e4 0f       	add	r30, r20
    5150:	f1 1d       	adc	r31, r1
    5152:	c1 01       	movw	r24, r2
    5154:	6a e0       	ldi	r22, 0x0A	; 10
    5156:	70 e0       	ldi	r23, 0x00	; 0
    5158:	0e 94 92 2b 	call	0x5724	; 0x5724 <__udivmodhi4>
    515c:	80 83       	st	Z, r24
					LOC_u16UserPassword = (LOC_u16UserPassword / 10);
    515e:	c1 01       	movw	r24, r2
    5160:	6a e0       	ldi	r22, 0x0A	; 10
    5162:	70 e0       	ldi	r23, 0x00	; 0
    5164:	0e 94 92 2b 	call	0x5724	; 0x5724 <__udivmodhi4>
    5168:	1b 01       	movw	r2, r22
					j--;
    516a:	41 50       	subi	r20, 0x01	; 1
				{
					User[i] = (LOC_u16UserID % 10);
					LOC_u16UserID = (LOC_u16UserID / 10);
					i--;
				}
				while (LOC_u16UserPassword != 0)
    516c:	61 15       	cp	r22, r1
    516e:	71 05       	cpc	r23, r1
    5170:	69 f7       	brne	.-38     	; 0x514c <Add_User+0x1c4>


				//			LOC_u16UserLocation = (USER_LOCATION_TOP) + (LOC_u16CurrentLocation*8) ;

//				LOC_u16LastUserStartLocation = (USER_LOCATION_TOP - STEP);
				LOC_u16LastLocation = (USER_LOCATION_TOP) + ( STEP * LOC_u8GetUsersCount);
    5172:	0b 2d       	mov	r16, r11
    5174:	10 e0       	ldi	r17, 0x00	; 0
    5176:	04 5f       	subi	r16, 0xF4	; 244
    5178:	1f 4f       	sbci	r17, 0xFF	; 255
    517a:	00 0f       	add	r16, r16
    517c:	11 1f       	adc	r17, r17
    517e:	00 0f       	add	r16, r16
    5180:	11 1f       	adc	r17, r17
    5182:	00 0f       	add	r16, r16
    5184:	11 1f       	adc	r17, r17

				for(i=0;i<4;i++)
				{
					//			HAL_EEPROM_voidWriteData(GLOB_u8Location++,User[i]);
					HAL_EEPROM_voidWriteData(LOC_u16LastLocation++,User[i]);
    5186:	78 01       	movw	r14, r16
    5188:	08 94       	sec
    518a:	e1 1c       	adc	r14, r1
    518c:	f1 1c       	adc	r15, r1
    518e:	c8 01       	movw	r24, r16
    5190:	6e 81       	ldd	r22, Y+6	; 0x06
    5192:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <HAL_EEPROM_voidWriteData>
    5196:	67 01       	movw	r12, r14
    5198:	08 94       	sec
    519a:	c1 1c       	adc	r12, r1
    519c:	d1 1c       	adc	r13, r1
    519e:	c7 01       	movw	r24, r14
    51a0:	6f 81       	ldd	r22, Y+7	; 0x07
    51a2:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <HAL_EEPROM_voidWriteData>
    51a6:	c6 01       	movw	r24, r12
    51a8:	68 85       	ldd	r22, Y+8	; 0x08
    51aa:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <HAL_EEPROM_voidWriteData>
    51ae:	c6 01       	movw	r24, r12
    51b0:	01 96       	adiw	r24, 0x01	; 1
    51b2:	69 85       	ldd	r22, Y+9	; 0x09
    51b4:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <HAL_EEPROM_voidWriteData>
				}
				for(j=0;j<4;j++)
				{
					//			HAL_EEPROM_voidWriteData(GLOB_u8Location++,Pass[j]);
					HAL_EEPROM_voidWriteData(LOC_u16LastLocation++,Pass[j]);
    51b8:	c8 01       	movw	r24, r16
    51ba:	04 96       	adiw	r24, 0x04	; 4
    51bc:	6a 81       	ldd	r22, Y+2	; 0x02
    51be:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <HAL_EEPROM_voidWriteData>
    51c2:	46 e0       	ldi	r20, 0x06	; 6
    51c4:	e4 2e       	mov	r14, r20
    51c6:	f1 2c       	mov	r15, r1
    51c8:	e0 0e       	add	r14, r16
    51ca:	f1 1e       	adc	r15, r17
    51cc:	0b 5f       	subi	r16, 0xFB	; 251
    51ce:	1f 4f       	sbci	r17, 0xFF	; 255
    51d0:	c8 01       	movw	r24, r16
    51d2:	6b 81       	ldd	r22, Y+3	; 0x03
    51d4:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <HAL_EEPROM_voidWriteData>
    51d8:	c7 01       	movw	r24, r14
    51da:	6c 81       	ldd	r22, Y+4	; 0x04
    51dc:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <HAL_EEPROM_voidWriteData>
    51e0:	c8 01       	movw	r24, r16
    51e2:	02 96       	adiw	r24, 0x02	; 2
    51e4:	6d 81       	ldd	r22, Y+5	; 0x05
    51e6:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <HAL_EEPROM_voidWriteData>
				}

				//			GLOB_u8UserCount++;
				//LOC_u8GetUsersCount++;
				return ++LOC_u8GetUsersCount;		//returning number of users add till now.
    51ea:	8b 2d       	mov	r24, r11
    51ec:	8f 5f       	subi	r24, 0xFF	; 255
    51ee:	6a cf       	rjmp	.-300    	; 0x50c4 <Add_User+0x13c>

000051f0 <Check_UserPassword>:

	return USER_NOT_FOUND;
}

u8 Check_UserPassword(u16 LOC_u16UserID,u16 LOC_u16UserPassword)
{
    51f0:	4f 92       	push	r4
    51f2:	5f 92       	push	r5
    51f4:	6f 92       	push	r6
    51f6:	7f 92       	push	r7
    51f8:	8f 92       	push	r8
    51fa:	9f 92       	push	r9
    51fc:	af 92       	push	r10
    51fe:	bf 92       	push	r11
    5200:	df 92       	push	r13
    5202:	ef 92       	push	r14
    5204:	ff 92       	push	r15
    5206:	0f 93       	push	r16
    5208:	1f 93       	push	r17
    520a:	df 93       	push	r29
    520c:	cf 93       	push	r28
    520e:	cd b7       	in	r28, 0x3d	; 61
    5210:	de b7       	in	r29, 0x3e	; 62
    5212:	60 97       	sbiw	r28, 0x10	; 16
    5214:	0f b6       	in	r0, 0x3f	; 63
    5216:	f8 94       	cli
    5218:	de bf       	out	0x3e, r29	; 62
    521a:	0f be       	out	0x3f, r0	; 63
    521c:	cd bf       	out	0x3d, r28	; 61
    521e:	9c 01       	movw	r18, r24
    5220:	7b 01       	movw	r14, r22
	u8 i=3,LOC_u8UserNumberFlag = 0, LOC_u8IDMatchedFlag = 0 ,LOC_u8UserID_Read[MAX_DIGITS] , LOC_u8UserIDArray[MAX_DIGITS], LOC_u8DigitCounter = 0;

	u16 LOC_u16UserLocationVariable = USER_LOCATION_TOP,LOC_u16UserLocationVariableDigits ;


	while (LOC_u16UserID != 0)
    5222:	00 97       	sbiw	r24, 0x00	; 0
    5224:	b9 f0       	breq	.+46     	; 0x5254 <Check_UserPassword+0x64>
    5226:	43 e0       	ldi	r20, 0x03	; 3
    5228:	8e 01       	movw	r16, r28
    522a:	03 5f       	subi	r16, 0xF3	; 243
    522c:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		LOC_u8UserIDArray[i] = (LOC_u16UserID % 10);
    522e:	f8 01       	movw	r30, r16
    5230:	e4 0f       	add	r30, r20
    5232:	f1 1d       	adc	r31, r1
    5234:	c9 01       	movw	r24, r18
    5236:	6a e0       	ldi	r22, 0x0A	; 10
    5238:	70 e0       	ldi	r23, 0x00	; 0
    523a:	0e 94 92 2b 	call	0x5724	; 0x5724 <__udivmodhi4>
    523e:	80 83       	st	Z, r24
		LOC_u16UserID = (LOC_u16UserID / 10);
    5240:	c9 01       	movw	r24, r18
    5242:	6a e0       	ldi	r22, 0x0A	; 10
    5244:	70 e0       	ldi	r23, 0x00	; 0
    5246:	0e 94 92 2b 	call	0x5724	; 0x5724 <__udivmodhi4>
    524a:	9b 01       	movw	r18, r22
		i--;
    524c:	41 50       	subi	r20, 0x01	; 1
	u8 i=3,LOC_u8UserNumberFlag = 0, LOC_u8IDMatchedFlag = 0 ,LOC_u8UserID_Read[MAX_DIGITS] , LOC_u8UserIDArray[MAX_DIGITS], LOC_u8DigitCounter = 0;

	u16 LOC_u16UserLocationVariable = USER_LOCATION_TOP,LOC_u16UserLocationVariableDigits ;


	while (LOC_u16UserID != 0)
    524e:	61 15       	cp	r22, r1
    5250:	71 05       	cpc	r23, r1
    5252:	69 f7       	brne	.-38     	; 0x522e <Check_UserPassword+0x3e>
    5254:	dd 24       	eor	r13, r13
    5256:	00 e6       	ldi	r16, 0x60	; 96
    5258:	10 e0       	ldi	r17, 0x00	; 0
    525a:	39 e0       	ldi	r19, 0x09	; 9
    525c:	a3 2e       	mov	r10, r19
    525e:	b1 2c       	mov	r11, r1
    5260:	ac 0e       	add	r10, r28
    5262:	bd 1e       	adc	r11, r29
		LOC_u8UserNumberFlag++;
		LOC_u16UserLocationVariableDigits = LOC_u16UserLocationVariable;
		for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DIGITS;LOC_u8DigitCounter++)
		{

			HAL_EEPROM_voidReadData(LOC_u16UserLocationVariableDigits,&LOC_u8UserID_Read[LOC_u8DigitCounter]);
    5264:	2a e0       	ldi	r18, 0x0A	; 10
    5266:	82 2e       	mov	r8, r18
    5268:	91 2c       	mov	r9, r1
    526a:	8c 0e       	add	r8, r28
    526c:	9d 1e       	adc	r9, r29
    526e:	9b e0       	ldi	r25, 0x0B	; 11
    5270:	69 2e       	mov	r6, r25
    5272:	71 2c       	mov	r7, r1
    5274:	6c 0e       	add	r6, r28
    5276:	7d 1e       	adc	r7, r29
    5278:	8c e0       	ldi	r24, 0x0C	; 12
    527a:	48 2e       	mov	r4, r24
    527c:	51 2c       	mov	r5, r1
    527e:	4c 0e       	add	r4, r28
    5280:	5d 1e       	adc	r5, r29
	}


	for(;LOC_u16UserLocationVariable <= USER_LOCATION_BOT;LOC_u16UserLocationVariable += STEP)
	{
		LOC_u8UserNumberFlag++;
    5282:	d3 94       	inc	r13
		LOC_u16UserLocationVariableDigits = LOC_u16UserLocationVariable;
		for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DIGITS;LOC_u8DigitCounter++)
		{

			HAL_EEPROM_voidReadData(LOC_u16UserLocationVariableDigits,&LOC_u8UserID_Read[LOC_u8DigitCounter]);
    5284:	c8 01       	movw	r24, r16
    5286:	b5 01       	movw	r22, r10
    5288:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <HAL_EEPROM_voidReadData>
			if (LOC_u8UserID_Read[LOC_u8DigitCounter] == LOC_u8UserIDArray[LOC_u8DigitCounter])
    528c:	99 85       	ldd	r25, Y+9	; 0x09
    528e:	8d 85       	ldd	r24, Y+13	; 0x0d
    5290:	98 17       	cp	r25, r24
    5292:	09 f0       	breq	.+2      	; 0x5296 <Check_UserPassword+0xa6>
    5294:	8c c0       	rjmp	.+280    	; 0x53ae <Check_UserPassword+0x1be>
		LOC_u8UserNumberFlag++;
		LOC_u16UserLocationVariableDigits = LOC_u16UserLocationVariable;
		for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DIGITS;LOC_u8DigitCounter++)
		{

			HAL_EEPROM_voidReadData(LOC_u16UserLocationVariableDigits,&LOC_u8UserID_Read[LOC_u8DigitCounter]);
    5296:	c8 01       	movw	r24, r16
    5298:	01 96       	adiw	r24, 0x01	; 1
    529a:	b4 01       	movw	r22, r8
    529c:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <HAL_EEPROM_voidReadData>
			if (LOC_u8UserID_Read[LOC_u8DigitCounter] == LOC_u8UserIDArray[LOC_u8DigitCounter])
    52a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    52a2:	8e 85       	ldd	r24, Y+14	; 0x0e
    52a4:	98 17       	cp	r25, r24
    52a6:	09 f0       	breq	.+2      	; 0x52aa <Check_UserPassword+0xba>
    52a8:	82 c0       	rjmp	.+260    	; 0x53ae <Check_UserPassword+0x1be>
		LOC_u8UserNumberFlag++;
		LOC_u16UserLocationVariableDigits = LOC_u16UserLocationVariable;
		for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DIGITS;LOC_u8DigitCounter++)
		{

			HAL_EEPROM_voidReadData(LOC_u16UserLocationVariableDigits,&LOC_u8UserID_Read[LOC_u8DigitCounter]);
    52aa:	c8 01       	movw	r24, r16
    52ac:	02 96       	adiw	r24, 0x02	; 2
    52ae:	b3 01       	movw	r22, r6
    52b0:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <HAL_EEPROM_voidReadData>
			if (LOC_u8UserID_Read[LOC_u8DigitCounter] == LOC_u8UserIDArray[LOC_u8DigitCounter])
    52b4:	9b 85       	ldd	r25, Y+11	; 0x0b
    52b6:	8f 85       	ldd	r24, Y+15	; 0x0f
    52b8:	98 17       	cp	r25, r24
    52ba:	09 f0       	breq	.+2      	; 0x52be <Check_UserPassword+0xce>
    52bc:	78 c0       	rjmp	.+240    	; 0x53ae <Check_UserPassword+0x1be>
		LOC_u8UserNumberFlag++;
		LOC_u16UserLocationVariableDigits = LOC_u16UserLocationVariable;
		for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DIGITS;LOC_u8DigitCounter++)
		{

			HAL_EEPROM_voidReadData(LOC_u16UserLocationVariableDigits,&LOC_u8UserID_Read[LOC_u8DigitCounter]);
    52be:	c8 01       	movw	r24, r16
    52c0:	03 96       	adiw	r24, 0x03	; 3
    52c2:	b2 01       	movw	r22, r4
    52c4:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <HAL_EEPROM_voidReadData>
			if (LOC_u8UserID_Read[LOC_u8DigitCounter] == LOC_u8UserIDArray[LOC_u8DigitCounter])
    52c8:	9c 85       	ldd	r25, Y+12	; 0x0c
    52ca:	88 89       	ldd	r24, Y+16	; 0x10
    52cc:	98 17       	cp	r25, r24
    52ce:	09 f0       	breq	.+2      	; 0x52d2 <Check_UserPassword+0xe2>
    52d0:	6e c0       	rjmp	.+220    	; 0x53ae <Check_UserPassword+0x1be>
	u8 i=3,LOC_u8UserCheck = 0,LOC_u8PassMatchedFlag = 0,LOC_u8DigitCounter,LOC_u8UserPasswordArray[MAX_DIGITS], LOC_u8UserPass_Read[MAX_DIGITS];
	u16 LOC_u16UserStartLocation = (USER_LOCATION_TOP-MAX_DIGITS),LOC_u16PassLocationVariableDigits;
	LOC_u8UserCheck = Check_UserID(LOC_u16UserID);

	//Save password in an array to save time when checking.
	while (LOC_u16UserPassword != 0)
    52d2:	e1 14       	cp	r14, r1
    52d4:	f1 04       	cpc	r15, r1
    52d6:	b9 f0       	breq	.+46     	; 0x5306 <Check_UserPassword+0x116>
    52d8:	43 e0       	ldi	r20, 0x03	; 3
    52da:	8e 01       	movw	r16, r28
    52dc:	0f 5f       	subi	r16, 0xFF	; 255
    52de:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		LOC_u8UserPasswordArray[i] = (LOC_u16UserPassword % 10);
    52e0:	f8 01       	movw	r30, r16
    52e2:	e4 0f       	add	r30, r20
    52e4:	f1 1d       	adc	r31, r1
    52e6:	c7 01       	movw	r24, r14
    52e8:	6a e0       	ldi	r22, 0x0A	; 10
    52ea:	70 e0       	ldi	r23, 0x00	; 0
    52ec:	0e 94 92 2b 	call	0x5724	; 0x5724 <__udivmodhi4>
    52f0:	80 83       	st	Z, r24
		LOC_u16UserPassword = (LOC_u16UserPassword / 10);
    52f2:	c7 01       	movw	r24, r14
    52f4:	6a e0       	ldi	r22, 0x0A	; 10
    52f6:	70 e0       	ldi	r23, 0x00	; 0
    52f8:	0e 94 92 2b 	call	0x5724	; 0x5724 <__udivmodhi4>
    52fc:	7b 01       	movw	r14, r22
		i--;
    52fe:	41 50       	subi	r20, 0x01	; 1
	u8 i=3,LOC_u8UserCheck = 0,LOC_u8PassMatchedFlag = 0,LOC_u8DigitCounter,LOC_u8UserPasswordArray[MAX_DIGITS], LOC_u8UserPass_Read[MAX_DIGITS];
	u16 LOC_u16UserStartLocation = (USER_LOCATION_TOP-MAX_DIGITS),LOC_u16PassLocationVariableDigits;
	LOC_u8UserCheck = Check_UserID(LOC_u16UserID);

	//Save password in an array to save time when checking.
	while (LOC_u16UserPassword != 0)
    5300:	61 15       	cp	r22, r1
    5302:	71 05       	cpc	r23, r1
    5304:	69 f7       	brne	.-38     	; 0x52e0 <Check_UserPassword+0xf0>
		LOC_u16UserPassword = (LOC_u16UserPassword / 10);
		i--;
	}


	if ((LOC_u8UserCheck <= USERS_MAX_AMOUNT) && (LOC_u8UserCheck >= USERS_MIN_AMOUNT))
    5306:	8d 2d       	mov	r24, r13
    5308:	81 50       	subi	r24, 0x01	; 1
    530a:	88 31       	cpi	r24, 0x18	; 24
    530c:	08 f0       	brcs	.+2      	; 0x5310 <Check_UserPassword+0x120>
    530e:	58 c0       	rjmp	.+176    	; 0x53c0 <Check_UserPassword+0x1d0>
	{
		LOC_u16PassLocationVariableDigits = (LOC_u16UserStartLocation ) + (2 * MAX_DIGITS * LOC_u8UserCheck);
    5310:	0d 2d       	mov	r16, r13
    5312:	10 e0       	ldi	r17, 0x00	; 0
    5314:	00 0f       	add	r16, r16
    5316:	11 1f       	adc	r17, r17
    5318:	00 0f       	add	r16, r16
    531a:	11 1f       	adc	r17, r17
    531c:	00 0f       	add	r16, r16
    531e:	11 1f       	adc	r17, r17
    5320:	04 5a       	subi	r16, 0xA4	; 164
    5322:	1f 4f       	sbci	r17, 0xFF	; 255
			for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DIGITS;LOC_u8DigitCounter++)
			{

				HAL_EEPROM_voidReadData(LOC_u16PassLocationVariableDigits,&LOC_u8UserPass_Read[LOC_u8DigitCounter]);
    5324:	c8 01       	movw	r24, r16
    5326:	be 01       	movw	r22, r28
    5328:	6b 5f       	subi	r22, 0xFB	; 251
    532a:	7f 4f       	sbci	r23, 0xFF	; 255
    532c:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <HAL_EEPROM_voidReadData>
				if (LOC_u8UserPass_Read[LOC_u8DigitCounter] == LOC_u8UserPasswordArray[LOC_u8DigitCounter])
    5330:	9d 81       	ldd	r25, Y+5	; 0x05
    5332:	89 81       	ldd	r24, Y+1	; 0x01
    5334:	98 17       	cp	r25, r24
    5336:	09 f0       	breq	.+2      	; 0x533a <Check_UserPassword+0x14a>
    5338:	45 c0       	rjmp	.+138    	; 0x53c4 <Check_UserPassword+0x1d4>
				{
					LOC_u8PassMatchedFlag++;
					LOC_u16PassLocationVariableDigits++;
    533a:	0f 5f       	subi	r16, 0xFF	; 255
    533c:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		LOC_u16PassLocationVariableDigits = (LOC_u16UserStartLocation ) + (2 * MAX_DIGITS * LOC_u8UserCheck);
			for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DIGITS;LOC_u8DigitCounter++)
			{

				HAL_EEPROM_voidReadData(LOC_u16PassLocationVariableDigits,&LOC_u8UserPass_Read[LOC_u8DigitCounter]);
    533e:	c8 01       	movw	r24, r16
    5340:	be 01       	movw	r22, r28
    5342:	6a 5f       	subi	r22, 0xFA	; 250
    5344:	7f 4f       	sbci	r23, 0xFF	; 255
    5346:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <HAL_EEPROM_voidReadData>
				if (LOC_u8UserPass_Read[LOC_u8DigitCounter] == LOC_u8UserPasswordArray[LOC_u8DigitCounter])
    534a:	9e 81       	ldd	r25, Y+6	; 0x06
    534c:	8a 81       	ldd	r24, Y+2	; 0x02
    534e:	98 17       	cp	r25, r24
    5350:	c9 f5       	brne	.+114    	; 0x53c4 <Check_UserPassword+0x1d4>
				{
					LOC_u8PassMatchedFlag++;
					LOC_u16PassLocationVariableDigits++;
    5352:	0f 5f       	subi	r16, 0xFF	; 255
    5354:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		LOC_u16PassLocationVariableDigits = (LOC_u16UserStartLocation ) + (2 * MAX_DIGITS * LOC_u8UserCheck);
			for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DIGITS;LOC_u8DigitCounter++)
			{

				HAL_EEPROM_voidReadData(LOC_u16PassLocationVariableDigits,&LOC_u8UserPass_Read[LOC_u8DigitCounter]);
    5356:	c8 01       	movw	r24, r16
    5358:	be 01       	movw	r22, r28
    535a:	69 5f       	subi	r22, 0xF9	; 249
    535c:	7f 4f       	sbci	r23, 0xFF	; 255
    535e:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <HAL_EEPROM_voidReadData>
				if (LOC_u8UserPass_Read[LOC_u8DigitCounter] == LOC_u8UserPasswordArray[LOC_u8DigitCounter])
    5362:	9f 81       	ldd	r25, Y+7	; 0x07
    5364:	8b 81       	ldd	r24, Y+3	; 0x03
    5366:	98 17       	cp	r25, r24
    5368:	69 f5       	brne	.+90     	; 0x53c4 <Check_UserPassword+0x1d4>
	{
		LOC_u16PassLocationVariableDigits = (LOC_u16UserStartLocation ) + (2 * MAX_DIGITS * LOC_u8UserCheck);
			for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DIGITS;LOC_u8DigitCounter++)
			{

				HAL_EEPROM_voidReadData(LOC_u16PassLocationVariableDigits,&LOC_u8UserPass_Read[LOC_u8DigitCounter]);
    536a:	c8 01       	movw	r24, r16
    536c:	01 96       	adiw	r24, 0x01	; 1
    536e:	be 01       	movw	r22, r28
    5370:	68 5f       	subi	r22, 0xF8	; 248
    5372:	7f 4f       	sbci	r23, 0xFF	; 255
    5374:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <HAL_EEPROM_voidReadData>
				if (LOC_u8UserPass_Read[LOC_u8DigitCounter] == LOC_u8UserPasswordArray[LOC_u8DigitCounter])
    5378:	98 85       	ldd	r25, Y+8	; 0x08
    537a:	8c 81       	ldd	r24, Y+4	; 0x04
    537c:	98 17       	cp	r25, r24
    537e:	11 f5       	brne	.+68     	; 0x53c4 <Check_UserPassword+0x1d4>
    5380:	8d e4       	ldi	r24, 0x4D	; 77
	{
		return USER_NOT_FOUND;
	}


}
    5382:	60 96       	adiw	r28, 0x10	; 16
    5384:	0f b6       	in	r0, 0x3f	; 63
    5386:	f8 94       	cli
    5388:	de bf       	out	0x3e, r29	; 62
    538a:	0f be       	out	0x3f, r0	; 63
    538c:	cd bf       	out	0x3d, r28	; 61
    538e:	cf 91       	pop	r28
    5390:	df 91       	pop	r29
    5392:	1f 91       	pop	r17
    5394:	0f 91       	pop	r16
    5396:	ff 90       	pop	r15
    5398:	ef 90       	pop	r14
    539a:	df 90       	pop	r13
    539c:	bf 90       	pop	r11
    539e:	af 90       	pop	r10
    53a0:	9f 90       	pop	r9
    53a2:	8f 90       	pop	r8
    53a4:	7f 90       	pop	r7
    53a6:	6f 90       	pop	r6
    53a8:	5f 90       	pop	r5
    53aa:	4f 90       	pop	r4
    53ac:	08 95       	ret
		LOC_u16UserID = (LOC_u16UserID / 10);
		i--;
	}


	for(;LOC_u16UserLocationVariable <= USER_LOCATION_BOT;LOC_u16UserLocationVariable += STEP)
    53ae:	08 5f       	subi	r16, 0xF8	; 248
    53b0:	1f 4f       	sbci	r17, 0xFF	; 255
    53b2:	88 e1       	ldi	r24, 0x18	; 24
    53b4:	d8 16       	cp	r13, r24
    53b6:	09 f0       	breq	.+2      	; 0x53ba <Check_UserPassword+0x1ca>
    53b8:	64 cf       	rjmp	.-312    	; 0x5282 <Check_UserPassword+0x92>
    53ba:	1b eb       	ldi	r17, 0xBB	; 187
    53bc:	d1 2e       	mov	r13, r17
    53be:	89 cf       	rjmp	.-238    	; 0x52d2 <Check_UserPassword+0xe2>
		LOC_u16UserPassword = (LOC_u16UserPassword / 10);
		i--;
	}


	if ((LOC_u8UserCheck <= USERS_MAX_AMOUNT) && (LOC_u8UserCheck >= USERS_MIN_AMOUNT))
    53c0:	8b eb       	ldi	r24, 0xBB	; 187
    53c2:	df cf       	rjmp	.-66     	; 0x5382 <Check_UserPassword+0x192>
		LOC_u16PassLocationVariableDigits = (LOC_u16UserStartLocation ) + (2 * MAX_DIGITS * LOC_u8UserCheck);
			for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DIGITS;LOC_u8DigitCounter++)
			{

				HAL_EEPROM_voidReadData(LOC_u16PassLocationVariableDigits,&LOC_u8UserPass_Read[LOC_u8DigitCounter]);
				if (LOC_u8UserPass_Read[LOC_u8DigitCounter] == LOC_u8UserPasswordArray[LOC_u8DigitCounter])
    53c4:	88 e5       	ldi	r24, 0x58	; 88
    53c6:	dd cf       	rjmp	.-70     	; 0x5382 <Check_UserPassword+0x192>

000053c8 <Remove_User>:
	}
}


u8 Remove_User(u16 LOC_u16UserID)
{
    53c8:	4f 92       	push	r4
    53ca:	5f 92       	push	r5
    53cc:	6f 92       	push	r6
    53ce:	7f 92       	push	r7
    53d0:	8f 92       	push	r8
    53d2:	9f 92       	push	r9
    53d4:	af 92       	push	r10
    53d6:	bf 92       	push	r11
    53d8:	cf 92       	push	r12
    53da:	df 92       	push	r13
    53dc:	ef 92       	push	r14
    53de:	ff 92       	push	r15
    53e0:	0f 93       	push	r16
    53e2:	1f 93       	push	r17
    53e4:	df 93       	push	r29
    53e6:	cf 93       	push	r28
    53e8:	cd b7       	in	r28, 0x3d	; 61
    53ea:	de b7       	in	r29, 0x3e	; 62
    53ec:	61 97       	sbiw	r28, 0x11	; 17
    53ee:	0f b6       	in	r0, 0x3f	; 63
    53f0:	f8 94       	cli
    53f2:	de bf       	out	0x3e, r29	; 62
    53f4:	0f be       	out	0x3f, r0	; 63
    53f6:	cd bf       	out	0x3d, r28	; 61
    53f8:	9c 01       	movw	r18, r24
	u8 i=3,LOC_u8UserNumberFlag = 0, LOC_u8IDMatchedFlag = 0 ,LOC_u8UserID_Read[MAX_DIGITS] , LOC_u8UserIDArray[MAX_DIGITS], LOC_u8DigitCounter = 0;

	u16 LOC_u16UserLocationVariable = USER_LOCATION_TOP,LOC_u16UserLocationVariableDigits ;


	while (LOC_u16UserID != 0)
    53fa:	00 97       	sbiw	r24, 0x00	; 0
    53fc:	b9 f0       	breq	.+46     	; 0x542c <Remove_User+0x64>
    53fe:	43 e0       	ldi	r20, 0x03	; 3
    5400:	8e 01       	movw	r16, r28
    5402:	0a 5f       	subi	r16, 0xFA	; 250
    5404:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		LOC_u8UserIDArray[i] = (LOC_u16UserID % 10);
    5406:	f8 01       	movw	r30, r16
    5408:	e4 0f       	add	r30, r20
    540a:	f1 1d       	adc	r31, r1
    540c:	c9 01       	movw	r24, r18
    540e:	6a e0       	ldi	r22, 0x0A	; 10
    5410:	70 e0       	ldi	r23, 0x00	; 0
    5412:	0e 94 92 2b 	call	0x5724	; 0x5724 <__udivmodhi4>
    5416:	80 83       	st	Z, r24
		LOC_u16UserID = (LOC_u16UserID / 10);
    5418:	c9 01       	movw	r24, r18
    541a:	6a e0       	ldi	r22, 0x0A	; 10
    541c:	70 e0       	ldi	r23, 0x00	; 0
    541e:	0e 94 92 2b 	call	0x5724	; 0x5724 <__udivmodhi4>
    5422:	9b 01       	movw	r18, r22
		i--;
    5424:	41 50       	subi	r20, 0x01	; 1
	u8 i=3,LOC_u8UserNumberFlag = 0, LOC_u8IDMatchedFlag = 0 ,LOC_u8UserID_Read[MAX_DIGITS] , LOC_u8UserIDArray[MAX_DIGITS], LOC_u8DigitCounter = 0;

	u16 LOC_u16UserLocationVariable = USER_LOCATION_TOP,LOC_u16UserLocationVariableDigits ;


	while (LOC_u16UserID != 0)
    5426:	61 15       	cp	r22, r1
    5428:	71 05       	cpc	r23, r1
    542a:	69 f7       	brne	.-38     	; 0x5406 <Remove_User+0x3e>
}


u8 Remove_User(u16 LOC_u16UserID)
{
	u8 LOC_u8DigitCounter,LOC_u8UserIDArray[MAX_DIGITS],LOC_u8ConfirmClearFlag = 0 ,LOC_u8UserCheck = 0,LOC_u8GetLastUser, LOC_u8UserDetails_Read[MAX_DETAILS] ,LOC_u8TransferArray[MAX_DETAILS] = {0} ;
    542c:	ba e0       	ldi	r27, 0x0A	; 10
    542e:	4b 2e       	mov	r4, r27
    5430:	51 2c       	mov	r5, r1
    5432:	4c 0e       	add	r4, r28
    5434:	5d 1e       	adc	r5, r29
    5436:	88 e0       	ldi	r24, 0x08	; 8
    5438:	f2 01       	movw	r30, r4
    543a:	11 92       	st	Z+, r1
    543c:	8a 95       	dec	r24
    543e:	e9 f7       	brne	.-6      	; 0x543a <Remove_User+0x72>
    5440:	ee 24       	eor	r14, r14
    5442:	00 e6       	ldi	r16, 0x60	; 96
    5444:	10 e0       	ldi	r17, 0x00	; 0
    5446:	a2 e0       	ldi	r26, 0x02	; 2
    5448:	aa 2e       	mov	r10, r26
    544a:	b1 2c       	mov	r11, r1
    544c:	ac 0e       	add	r10, r28
    544e:	bd 1e       	adc	r11, r29
		LOC_u8UserNumberFlag++;
		LOC_u16UserLocationVariableDigits = LOC_u16UserLocationVariable;
		for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DIGITS;LOC_u8DigitCounter++)
		{

			HAL_EEPROM_voidReadData(LOC_u16UserLocationVariableDigits,&LOC_u8UserID_Read[LOC_u8DigitCounter]);
    5450:	f3 e0       	ldi	r31, 0x03	; 3
    5452:	8f 2e       	mov	r8, r31
    5454:	91 2c       	mov	r9, r1
    5456:	8c 0e       	add	r8, r28
    5458:	9d 1e       	adc	r9, r29
    545a:	e2 e0       	ldi	r30, 0x02	; 2
    545c:	ce 2e       	mov	r12, r30
    545e:	d1 2c       	mov	r13, r1
    5460:	ca 0c       	add	r12, r10
    5462:	db 1c       	adc	r13, r11
    5464:	75 e0       	ldi	r23, 0x05	; 5
    5466:	67 2e       	mov	r6, r23
    5468:	71 2c       	mov	r7, r1
    546a:	6c 0e       	add	r6, r28
    546c:	7d 1e       	adc	r7, r29
	}


	for(;LOC_u16UserLocationVariable <= USER_LOCATION_BOT;LOC_u16UserLocationVariable += STEP)
	{
		LOC_u8UserNumberFlag++;
    546e:	e3 94       	inc	r14
		LOC_u16UserLocationVariableDigits = LOC_u16UserLocationVariable;
		for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DIGITS;LOC_u8DigitCounter++)
		{

			HAL_EEPROM_voidReadData(LOC_u16UserLocationVariableDigits,&LOC_u8UserID_Read[LOC_u8DigitCounter]);
    5470:	c8 01       	movw	r24, r16
    5472:	b5 01       	movw	r22, r10
    5474:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <HAL_EEPROM_voidReadData>
			if (LOC_u8UserID_Read[LOC_u8DigitCounter] == LOC_u8UserIDArray[LOC_u8DigitCounter])
    5478:	9a 81       	ldd	r25, Y+2	; 0x02
    547a:	8e 81       	ldd	r24, Y+6	; 0x06
    547c:	98 17       	cp	r25, r24
    547e:	09 f0       	breq	.+2      	; 0x5482 <Remove_User+0xba>
    5480:	f1 c0       	rjmp	.+482    	; 0x5664 <Remove_User+0x29c>
		LOC_u8UserNumberFlag++;
		LOC_u16UserLocationVariableDigits = LOC_u16UserLocationVariable;
		for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DIGITS;LOC_u8DigitCounter++)
		{

			HAL_EEPROM_voidReadData(LOC_u16UserLocationVariableDigits,&LOC_u8UserID_Read[LOC_u8DigitCounter]);
    5482:	c8 01       	movw	r24, r16
    5484:	01 96       	adiw	r24, 0x01	; 1
    5486:	b4 01       	movw	r22, r8
    5488:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <HAL_EEPROM_voidReadData>
			if (LOC_u8UserID_Read[LOC_u8DigitCounter] == LOC_u8UserIDArray[LOC_u8DigitCounter])
    548c:	9b 81       	ldd	r25, Y+3	; 0x03
    548e:	8f 81       	ldd	r24, Y+7	; 0x07
    5490:	98 17       	cp	r25, r24
    5492:	09 f0       	breq	.+2      	; 0x5496 <Remove_User+0xce>
    5494:	e7 c0       	rjmp	.+462    	; 0x5664 <Remove_User+0x29c>
		LOC_u8UserNumberFlag++;
		LOC_u16UserLocationVariableDigits = LOC_u16UserLocationVariable;
		for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DIGITS;LOC_u8DigitCounter++)
		{

			HAL_EEPROM_voidReadData(LOC_u16UserLocationVariableDigits,&LOC_u8UserID_Read[LOC_u8DigitCounter]);
    5496:	c8 01       	movw	r24, r16
    5498:	02 96       	adiw	r24, 0x02	; 2
    549a:	b6 01       	movw	r22, r12
    549c:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <HAL_EEPROM_voidReadData>
			if (LOC_u8UserID_Read[LOC_u8DigitCounter] == LOC_u8UserIDArray[LOC_u8DigitCounter])
    54a0:	9c 81       	ldd	r25, Y+4	; 0x04
    54a2:	88 85       	ldd	r24, Y+8	; 0x08
    54a4:	98 17       	cp	r25, r24
    54a6:	09 f0       	breq	.+2      	; 0x54aa <Remove_User+0xe2>
    54a8:	dd c0       	rjmp	.+442    	; 0x5664 <Remove_User+0x29c>
		LOC_u8UserNumberFlag++;
		LOC_u16UserLocationVariableDigits = LOC_u16UserLocationVariable;
		for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DIGITS;LOC_u8DigitCounter++)
		{

			HAL_EEPROM_voidReadData(LOC_u16UserLocationVariableDigits,&LOC_u8UserID_Read[LOC_u8DigitCounter]);
    54aa:	c8 01       	movw	r24, r16
    54ac:	03 96       	adiw	r24, 0x03	; 3
    54ae:	b3 01       	movw	r22, r6
    54b0:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <HAL_EEPROM_voidReadData>
			if (LOC_u8UserID_Read[LOC_u8DigitCounter] == LOC_u8UserIDArray[LOC_u8DigitCounter])
    54b4:	9d 81       	ldd	r25, Y+5	; 0x05
    54b6:	89 85       	ldd	r24, Y+9	; 0x09
    54b8:	98 17       	cp	r25, r24
    54ba:	09 f0       	breq	.+2      	; 0x54be <Remove_User+0xf6>
    54bc:	d3 c0       	rjmp	.+422    	; 0x5664 <Remove_User+0x29c>


void APP_Registeration_voidGetNumberOfUsers(u8* LOC_Pu8UsersNumber)
{
	u16 LOC_u16LocationVariable = USER_LOCATION_TOP;
	u8 LOC_u8UserNumber = 0,LOC_u8NumberCheck = 0;
    54be:	19 82       	std	Y+1, r1	; 0x01
    54c0:	00 e6       	ldi	r16, 0x60	; 96
    54c2:	10 e0       	ldi	r17, 0x00	; 0
    54c4:	ff 24       	eor	r15, r15
    54c6:	6e 01       	movw	r12, r28
    54c8:	08 94       	sec
    54ca:	c1 1c       	adc	r12, r1
    54cc:	d1 1c       	adc	r13, r1
	for(;LOC_u16LocationVariable <= USER_LOCATION_BOT;LOC_u16LocationVariable += STEP)
	{
		HAL_EEPROM_voidReadData(LOC_u16LocationVariable,&LOC_u8NumberCheck);
    54ce:	c8 01       	movw	r24, r16
    54d0:	b6 01       	movw	r22, r12
    54d2:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <HAL_EEPROM_voidReadData>
		if(LOC_u8NumberCheck != 255)
    54d6:	89 81       	ldd	r24, Y+1	; 0x01
    54d8:	8f 3f       	cpi	r24, 0xFF	; 255
    54da:	09 f0       	breq	.+2      	; 0x54de <Remove_User+0x116>
		{
			LOC_u8UserNumber++;
    54dc:	f3 94       	inc	r15

void APP_Registeration_voidGetNumberOfUsers(u8* LOC_Pu8UsersNumber)
{
	u16 LOC_u16LocationVariable = USER_LOCATION_TOP;
	u8 LOC_u8UserNumber = 0,LOC_u8NumberCheck = 0;
	for(;LOC_u16LocationVariable <= USER_LOCATION_BOT;LOC_u16LocationVariable += STEP)
    54de:	08 5f       	subi	r16, 0xF8	; 248
    54e0:	1f 4f       	sbci	r17, 0xFF	; 255
    54e2:	81 e0       	ldi	r24, 0x01	; 1
    54e4:	00 32       	cpi	r16, 0x20	; 32
    54e6:	18 07       	cpc	r17, r24
    54e8:	91 f7       	brne	.-28     	; 0x54ce <Remove_User+0x106>



	LOC_u16LastUserStartLocation = (USER_LOCATION_TOP - STEP);

	if ((LOC_u8UserCheck <= USERS_MAX_AMOUNT) && (LOC_u8UserCheck >= USERS_MIN_AMOUNT))
    54ea:	8e 2d       	mov	r24, r14
    54ec:	81 50       	subi	r24, 0x01	; 1
    54ee:	88 31       	cpi	r24, 0x18	; 24
    54f0:	08 f0       	brcs	.+2      	; 0x54f4 <Remove_User+0x12c>
    54f2:	c1 c0       	rjmp	.+386    	; 0x5676 <Remove_User+0x2ae>
	{
		LOC_u16LastLocation = (LOC_u16LastUserStartLocation ) + ( STEP * LOC_u8GetLastUser);
    54f4:	0f 2d       	mov	r16, r15
    54f6:	10 e0       	ldi	r17, 0x00	; 0
    54f8:	00 0f       	add	r16, r16
    54fa:	11 1f       	adc	r17, r17
    54fc:	00 0f       	add	r16, r16
    54fe:	11 1f       	adc	r17, r17
    5500:	00 0f       	add	r16, r16
    5502:	11 1f       	adc	r17, r17
    5504:	08 5a       	subi	r16, 0xA8	; 168
    5506:	1f 4f       	sbci	r17, 0xFF	; 255

		if (LOC_u8UserCheck == LOC_u8GetLastUser)
    5508:	ef 14       	cp	r14, r15
    550a:	09 f4       	brne	.+2      	; 0x550e <Remove_User+0x146>
    550c:	b6 c0       	rjmp	.+364    	; 0x567a <Remove_User+0x2b2>
		{

			for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DETAILS;LOC_u8DigitCounter++)
			{

				HAL_EEPROM_voidReadData(LOC_u16LastLocation,&LOC_u8TransferArray[LOC_u8DigitCounter]);
    550e:	c8 01       	movw	r24, r16
    5510:	b2 01       	movw	r22, r4
    5512:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <HAL_EEPROM_voidReadData>
				HAL_EEPROM_voidWriteData(LOC_u16LastLocation,CLEAR_DATA);
    5516:	c8 01       	movw	r24, r16
    5518:	6f ef       	ldi	r22, 0xFF	; 255
    551a:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <HAL_EEPROM_voidWriteData>
				LOC_u8ConfirmClearFlag++;
				LOC_u16LastLocation++;
    551e:	0f 5f       	subi	r16, 0xFF	; 255
    5520:	1f 4f       	sbci	r17, 0xFF	; 255
		{

			for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DETAILS;LOC_u8DigitCounter++)
			{

				HAL_EEPROM_voidReadData(LOC_u16LastLocation,&LOC_u8TransferArray[LOC_u8DigitCounter]);
    5522:	c8 01       	movw	r24, r16
    5524:	be 01       	movw	r22, r28
    5526:	65 5f       	subi	r22, 0xF5	; 245
    5528:	7f 4f       	sbci	r23, 0xFF	; 255
    552a:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <HAL_EEPROM_voidReadData>
				HAL_EEPROM_voidWriteData(LOC_u16LastLocation,CLEAR_DATA);
    552e:	c8 01       	movw	r24, r16
    5530:	6f ef       	ldi	r22, 0xFF	; 255
    5532:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <HAL_EEPROM_voidWriteData>
				LOC_u8ConfirmClearFlag++;
				LOC_u16LastLocation++;
    5536:	0f 5f       	subi	r16, 0xFF	; 255
    5538:	1f 4f       	sbci	r17, 0xFF	; 255
		{

			for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DETAILS;LOC_u8DigitCounter++)
			{

				HAL_EEPROM_voidReadData(LOC_u16LastLocation,&LOC_u8TransferArray[LOC_u8DigitCounter]);
    553a:	c8 01       	movw	r24, r16
    553c:	be 01       	movw	r22, r28
    553e:	64 5f       	subi	r22, 0xF4	; 244
    5540:	7f 4f       	sbci	r23, 0xFF	; 255
    5542:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <HAL_EEPROM_voidReadData>
				HAL_EEPROM_voidWriteData(LOC_u16LastLocation,CLEAR_DATA);
    5546:	c8 01       	movw	r24, r16
    5548:	6f ef       	ldi	r22, 0xFF	; 255
    554a:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <HAL_EEPROM_voidWriteData>
				LOC_u8ConfirmClearFlag++;
				LOC_u16LastLocation++;
    554e:	0f 5f       	subi	r16, 0xFF	; 255
    5550:	1f 4f       	sbci	r17, 0xFF	; 255
		{

			for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DETAILS;LOC_u8DigitCounter++)
			{

				HAL_EEPROM_voidReadData(LOC_u16LastLocation,&LOC_u8TransferArray[LOC_u8DigitCounter]);
    5552:	c8 01       	movw	r24, r16
    5554:	be 01       	movw	r22, r28
    5556:	63 5f       	subi	r22, 0xF3	; 243
    5558:	7f 4f       	sbci	r23, 0xFF	; 255
    555a:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <HAL_EEPROM_voidReadData>
				HAL_EEPROM_voidWriteData(LOC_u16LastLocation,CLEAR_DATA);
    555e:	c8 01       	movw	r24, r16
    5560:	6f ef       	ldi	r22, 0xFF	; 255
    5562:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <HAL_EEPROM_voidWriteData>
				LOC_u8ConfirmClearFlag++;
				LOC_u16LastLocation++;
    5566:	0f 5f       	subi	r16, 0xFF	; 255
    5568:	1f 4f       	sbci	r17, 0xFF	; 255
		{

			for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DETAILS;LOC_u8DigitCounter++)
			{

				HAL_EEPROM_voidReadData(LOC_u16LastLocation,&LOC_u8TransferArray[LOC_u8DigitCounter]);
    556a:	c8 01       	movw	r24, r16
    556c:	be 01       	movw	r22, r28
    556e:	62 5f       	subi	r22, 0xF2	; 242
    5570:	7f 4f       	sbci	r23, 0xFF	; 255
    5572:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <HAL_EEPROM_voidReadData>
				HAL_EEPROM_voidWriteData(LOC_u16LastLocation,CLEAR_DATA);
    5576:	c8 01       	movw	r24, r16
    5578:	6f ef       	ldi	r22, 0xFF	; 255
    557a:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <HAL_EEPROM_voidWriteData>
				LOC_u8ConfirmClearFlag++;
				LOC_u16LastLocation++;
    557e:	0f 5f       	subi	r16, 0xFF	; 255
    5580:	1f 4f       	sbci	r17, 0xFF	; 255
		{

			for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DETAILS;LOC_u8DigitCounter++)
			{

				HAL_EEPROM_voidReadData(LOC_u16LastLocation,&LOC_u8TransferArray[LOC_u8DigitCounter]);
    5582:	c8 01       	movw	r24, r16
    5584:	be 01       	movw	r22, r28
    5586:	61 5f       	subi	r22, 0xF1	; 241
    5588:	7f 4f       	sbci	r23, 0xFF	; 255
    558a:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <HAL_EEPROM_voidReadData>
				HAL_EEPROM_voidWriteData(LOC_u16LastLocation,CLEAR_DATA);
    558e:	c8 01       	movw	r24, r16
    5590:	6f ef       	ldi	r22, 0xFF	; 255
    5592:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <HAL_EEPROM_voidWriteData>
				LOC_u8ConfirmClearFlag++;
				LOC_u16LastLocation++;
    5596:	0f 5f       	subi	r16, 0xFF	; 255
    5598:	1f 4f       	sbci	r17, 0xFF	; 255
		{

			for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DETAILS;LOC_u8DigitCounter++)
			{

				HAL_EEPROM_voidReadData(LOC_u16LastLocation,&LOC_u8TransferArray[LOC_u8DigitCounter]);
    559a:	c8 01       	movw	r24, r16
    559c:	be 01       	movw	r22, r28
    559e:	60 5f       	subi	r22, 0xF0	; 240
    55a0:	7f 4f       	sbci	r23, 0xFF	; 255
    55a2:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <HAL_EEPROM_voidReadData>
				HAL_EEPROM_voidWriteData(LOC_u16LastLocation,CLEAR_DATA);
    55a6:	c8 01       	movw	r24, r16
    55a8:	6f ef       	ldi	r22, 0xFF	; 255
    55aa:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <HAL_EEPROM_voidWriteData>
				LOC_u8ConfirmClearFlag++;
				LOC_u16LastLocation++;
    55ae:	0f 5f       	subi	r16, 0xFF	; 255
    55b0:	1f 4f       	sbci	r17, 0xFF	; 255
		{

			for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DETAILS;LOC_u8DigitCounter++)
			{

				HAL_EEPROM_voidReadData(LOC_u16LastLocation,&LOC_u8TransferArray[LOC_u8DigitCounter]);
    55b2:	c8 01       	movw	r24, r16
    55b4:	be 01       	movw	r22, r28
    55b6:	6f 5e       	subi	r22, 0xEF	; 239
    55b8:	7f 4f       	sbci	r23, 0xFF	; 255
    55ba:	0e 94 c4 0e 	call	0x1d88	; 0x1d88 <HAL_EEPROM_voidReadData>
				HAL_EEPROM_voidWriteData(LOC_u16LastLocation,CLEAR_DATA);
    55be:	c8 01       	movw	r24, r16
    55c0:	6f ef       	ldi	r22, 0xFF	; 255
    55c2:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <HAL_EEPROM_voidWriteData>
				LOC_u8ConfirmClearFlag++;
				LOC_u16LastLocation++;
			}

			LOC_u16RemovedUserLocation = (LOC_u16LastUserStartLocation ) + ( STEP * LOC_u8UserCheck);
    55c6:	0e 2d       	mov	r16, r14
    55c8:	10 e0       	ldi	r17, 0x00	; 0
    55ca:	00 0f       	add	r16, r16
    55cc:	11 1f       	adc	r17, r17
    55ce:	00 0f       	add	r16, r16
    55d0:	11 1f       	adc	r17, r17
    55d2:	00 0f       	add	r16, r16
    55d4:	11 1f       	adc	r17, r17
    55d6:	08 5a       	subi	r16, 0xA8	; 168
    55d8:	1f 4f       	sbci	r17, 0xFF	; 255

			for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DETAILS;LOC_u8DigitCounter++)
			{

				//			HAL_EEPROM_voidReadData(LOC_u16LastLocation,&LOC_u8TransferArray[LOC_u8DigitCounter]);
				HAL_EEPROM_voidWriteData(LOC_u16RemovedUserLocation,LOC_u8TransferArray[LOC_u8DigitCounter]);
    55da:	c8 01       	movw	r24, r16
    55dc:	6a 85       	ldd	r22, Y+10	; 0x0a
    55de:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <HAL_EEPROM_voidWriteData>
				//			LOC_u8ConfirmClearFlag++;
				LOC_u16RemovedUserLocation++;
    55e2:	0f 5f       	subi	r16, 0xFF	; 255
    55e4:	1f 4f       	sbci	r17, 0xFF	; 255

			for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DETAILS;LOC_u8DigitCounter++)
			{

				//			HAL_EEPROM_voidReadData(LOC_u16LastLocation,&LOC_u8TransferArray[LOC_u8DigitCounter]);
				HAL_EEPROM_voidWriteData(LOC_u16RemovedUserLocation,LOC_u8TransferArray[LOC_u8DigitCounter]);
    55e6:	c8 01       	movw	r24, r16
    55e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    55ea:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <HAL_EEPROM_voidWriteData>
				//			LOC_u8ConfirmClearFlag++;
				LOC_u16RemovedUserLocation++;
    55ee:	0f 5f       	subi	r16, 0xFF	; 255
    55f0:	1f 4f       	sbci	r17, 0xFF	; 255

			for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DETAILS;LOC_u8DigitCounter++)
			{

				//			HAL_EEPROM_voidReadData(LOC_u16LastLocation,&LOC_u8TransferArray[LOC_u8DigitCounter]);
				HAL_EEPROM_voidWriteData(LOC_u16RemovedUserLocation,LOC_u8TransferArray[LOC_u8DigitCounter]);
    55f2:	c8 01       	movw	r24, r16
    55f4:	6c 85       	ldd	r22, Y+12	; 0x0c
    55f6:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <HAL_EEPROM_voidWriteData>
				//			LOC_u8ConfirmClearFlag++;
				LOC_u16RemovedUserLocation++;
    55fa:	0f 5f       	subi	r16, 0xFF	; 255
    55fc:	1f 4f       	sbci	r17, 0xFF	; 255

			for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DETAILS;LOC_u8DigitCounter++)
			{

				//			HAL_EEPROM_voidReadData(LOC_u16LastLocation,&LOC_u8TransferArray[LOC_u8DigitCounter]);
				HAL_EEPROM_voidWriteData(LOC_u16RemovedUserLocation,LOC_u8TransferArray[LOC_u8DigitCounter]);
    55fe:	c8 01       	movw	r24, r16
    5600:	6d 85       	ldd	r22, Y+13	; 0x0d
    5602:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <HAL_EEPROM_voidWriteData>
				//			LOC_u8ConfirmClearFlag++;
				LOC_u16RemovedUserLocation++;
    5606:	0f 5f       	subi	r16, 0xFF	; 255
    5608:	1f 4f       	sbci	r17, 0xFF	; 255

			for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DETAILS;LOC_u8DigitCounter++)
			{

				//			HAL_EEPROM_voidReadData(LOC_u16LastLocation,&LOC_u8TransferArray[LOC_u8DigitCounter]);
				HAL_EEPROM_voidWriteData(LOC_u16RemovedUserLocation,LOC_u8TransferArray[LOC_u8DigitCounter]);
    560a:	c8 01       	movw	r24, r16
    560c:	6e 85       	ldd	r22, Y+14	; 0x0e
    560e:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <HAL_EEPROM_voidWriteData>
				//			LOC_u8ConfirmClearFlag++;
				LOC_u16RemovedUserLocation++;
    5612:	0f 5f       	subi	r16, 0xFF	; 255
    5614:	1f 4f       	sbci	r17, 0xFF	; 255

			for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DETAILS;LOC_u8DigitCounter++)
			{

				//			HAL_EEPROM_voidReadData(LOC_u16LastLocation,&LOC_u8TransferArray[LOC_u8DigitCounter]);
				HAL_EEPROM_voidWriteData(LOC_u16RemovedUserLocation,LOC_u8TransferArray[LOC_u8DigitCounter]);
    5616:	c8 01       	movw	r24, r16
    5618:	6f 85       	ldd	r22, Y+15	; 0x0f
    561a:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <HAL_EEPROM_voidWriteData>
				//			LOC_u8ConfirmClearFlag++;
				LOC_u16RemovedUserLocation++;
    561e:	0f 5f       	subi	r16, 0xFF	; 255
    5620:	1f 4f       	sbci	r17, 0xFF	; 255

			for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DETAILS;LOC_u8DigitCounter++)
			{

				//			HAL_EEPROM_voidReadData(LOC_u16LastLocation,&LOC_u8TransferArray[LOC_u8DigitCounter]);
				HAL_EEPROM_voidWriteData(LOC_u16RemovedUserLocation,LOC_u8TransferArray[LOC_u8DigitCounter]);
    5622:	c8 01       	movw	r24, r16
    5624:	68 89       	ldd	r22, Y+16	; 0x10
    5626:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <HAL_EEPROM_voidWriteData>
    562a:	c8 01       	movw	r24, r16
    562c:	01 96       	adiw	r24, 0x01	; 1
    562e:	69 89       	ldd	r22, Y+17	; 0x11
    5630:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <HAL_EEPROM_voidWriteData>
    5634:	82 e0       	ldi	r24, 0x02	; 2
		//Do Nothing. (Meaning that no user found with that ID or Database is empty)
	}


		return USER_NOT_FOUND;
}
    5636:	61 96       	adiw	r28, 0x11	; 17
    5638:	0f b6       	in	r0, 0x3f	; 63
    563a:	f8 94       	cli
    563c:	de bf       	out	0x3e, r29	; 62
    563e:	0f be       	out	0x3f, r0	; 63
    5640:	cd bf       	out	0x3d, r28	; 61
    5642:	cf 91       	pop	r28
    5644:	df 91       	pop	r29
    5646:	1f 91       	pop	r17
    5648:	0f 91       	pop	r16
    564a:	ff 90       	pop	r15
    564c:	ef 90       	pop	r14
    564e:	df 90       	pop	r13
    5650:	cf 90       	pop	r12
    5652:	bf 90       	pop	r11
    5654:	af 90       	pop	r10
    5656:	9f 90       	pop	r9
    5658:	8f 90       	pop	r8
    565a:	7f 90       	pop	r7
    565c:	6f 90       	pop	r6
    565e:	5f 90       	pop	r5
    5660:	4f 90       	pop	r4
    5662:	08 95       	ret
		LOC_u16UserID = (LOC_u16UserID / 10);
		i--;
	}


	for(;LOC_u16UserLocationVariable <= USER_LOCATION_BOT;LOC_u16UserLocationVariable += STEP)
    5664:	08 5f       	subi	r16, 0xF8	; 248
    5666:	1f 4f       	sbci	r17, 0xFF	; 255
    5668:	f8 e1       	ldi	r31, 0x18	; 24
    566a:	ef 16       	cp	r14, r31
    566c:	09 f0       	breq	.+2      	; 0x5670 <Remove_User+0x2a8>
    566e:	ff ce       	rjmp	.-514    	; 0x546e <Remove_User+0xa6>
    5670:	6b eb       	ldi	r22, 0xBB	; 187
    5672:	e6 2e       	mov	r14, r22
    5674:	24 cf       	rjmp	.-440    	; 0x54be <Remove_User+0xf6>



	LOC_u16LastUserStartLocation = (USER_LOCATION_TOP - STEP);

	if ((LOC_u8UserCheck <= USERS_MAX_AMOUNT) && (LOC_u8UserCheck >= USERS_MIN_AMOUNT))
    5676:	8b eb       	ldi	r24, 0xBB	; 187
    5678:	de cf       	rjmp	.-68     	; 0x5636 <Remove_User+0x26e>
		{
			for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DETAILS;LOC_u8DigitCounter++)
			{

//				HAL_EEPROM_voidReadData(LOC_u16LastLocation,&LOC_u8TransferArray[LOC_u8DigitCounter]);
				HAL_EEPROM_voidWriteData(LOC_u16LastLocation,CLEAR_DATA);
    567a:	c8 01       	movw	r24, r16
    567c:	6f ef       	ldi	r22, 0xFF	; 255
    567e:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <HAL_EEPROM_voidWriteData>
				LOC_u8ConfirmClearFlag++;
				LOC_u16LastLocation++;
    5682:	0f 5f       	subi	r16, 0xFF	; 255
    5684:	1f 4f       	sbci	r17, 0xFF	; 255
		{
			for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DETAILS;LOC_u8DigitCounter++)
			{

//				HAL_EEPROM_voidReadData(LOC_u16LastLocation,&LOC_u8TransferArray[LOC_u8DigitCounter]);
				HAL_EEPROM_voidWriteData(LOC_u16LastLocation,CLEAR_DATA);
    5686:	c8 01       	movw	r24, r16
    5688:	6f ef       	ldi	r22, 0xFF	; 255
    568a:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <HAL_EEPROM_voidWriteData>
				LOC_u8ConfirmClearFlag++;
				LOC_u16LastLocation++;
    568e:	0f 5f       	subi	r16, 0xFF	; 255
    5690:	1f 4f       	sbci	r17, 0xFF	; 255
		{
			for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DETAILS;LOC_u8DigitCounter++)
			{

//				HAL_EEPROM_voidReadData(LOC_u16LastLocation,&LOC_u8TransferArray[LOC_u8DigitCounter]);
				HAL_EEPROM_voidWriteData(LOC_u16LastLocation,CLEAR_DATA);
    5692:	c8 01       	movw	r24, r16
    5694:	6f ef       	ldi	r22, 0xFF	; 255
    5696:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <HAL_EEPROM_voidWriteData>
				LOC_u8ConfirmClearFlag++;
				LOC_u16LastLocation++;
    569a:	0f 5f       	subi	r16, 0xFF	; 255
    569c:	1f 4f       	sbci	r17, 0xFF	; 255
		{
			for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DETAILS;LOC_u8DigitCounter++)
			{

//				HAL_EEPROM_voidReadData(LOC_u16LastLocation,&LOC_u8TransferArray[LOC_u8DigitCounter]);
				HAL_EEPROM_voidWriteData(LOC_u16LastLocation,CLEAR_DATA);
    569e:	c8 01       	movw	r24, r16
    56a0:	6f ef       	ldi	r22, 0xFF	; 255
    56a2:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <HAL_EEPROM_voidWriteData>
				LOC_u8ConfirmClearFlag++;
				LOC_u16LastLocation++;
    56a6:	0f 5f       	subi	r16, 0xFF	; 255
    56a8:	1f 4f       	sbci	r17, 0xFF	; 255
		{
			for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DETAILS;LOC_u8DigitCounter++)
			{

//				HAL_EEPROM_voidReadData(LOC_u16LastLocation,&LOC_u8TransferArray[LOC_u8DigitCounter]);
				HAL_EEPROM_voidWriteData(LOC_u16LastLocation,CLEAR_DATA);
    56aa:	c8 01       	movw	r24, r16
    56ac:	6f ef       	ldi	r22, 0xFF	; 255
    56ae:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <HAL_EEPROM_voidWriteData>
				LOC_u8ConfirmClearFlag++;
				LOC_u16LastLocation++;
    56b2:	0f 5f       	subi	r16, 0xFF	; 255
    56b4:	1f 4f       	sbci	r17, 0xFF	; 255
		{
			for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DETAILS;LOC_u8DigitCounter++)
			{

//				HAL_EEPROM_voidReadData(LOC_u16LastLocation,&LOC_u8TransferArray[LOC_u8DigitCounter]);
				HAL_EEPROM_voidWriteData(LOC_u16LastLocation,CLEAR_DATA);
    56b6:	c8 01       	movw	r24, r16
    56b8:	6f ef       	ldi	r22, 0xFF	; 255
    56ba:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <HAL_EEPROM_voidWriteData>
				LOC_u8ConfirmClearFlag++;
				LOC_u16LastLocation++;
    56be:	0f 5f       	subi	r16, 0xFF	; 255
    56c0:	1f 4f       	sbci	r17, 0xFF	; 255
		{
			for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DETAILS;LOC_u8DigitCounter++)
			{

//				HAL_EEPROM_voidReadData(LOC_u16LastLocation,&LOC_u8TransferArray[LOC_u8DigitCounter]);
				HAL_EEPROM_voidWriteData(LOC_u16LastLocation,CLEAR_DATA);
    56c2:	c8 01       	movw	r24, r16
    56c4:	6f ef       	ldi	r22, 0xFF	; 255
    56c6:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <HAL_EEPROM_voidWriteData>
    56ca:	c8 01       	movw	r24, r16
    56cc:	01 96       	adiw	r24, 0x01	; 1
    56ce:	6f ef       	ldi	r22, 0xFF	; 255
    56d0:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <HAL_EEPROM_voidWriteData>
    56d4:	82 e0       	ldi	r24, 0x02	; 2
    56d6:	af cf       	rjmp	.-162    	; 0x5636 <Remove_User+0x26e>

000056d8 <main>:



void main (void)
{
	APP_Init();
    56d8:	0e 94 eb 1d 	call	0x3bd6	; 0x3bd6 <APP_Init>
	APP_STATE_void_AppStateInit();
    56dc:	0e 94 03 11 	call	0x2206	; 0x2206 <APP_STATE_void_AppStateInit>
	while(1)
	{
		APP_Home_Page();
    56e0:	0e 94 c5 20 	call	0x418a	; 0x418a <APP_Home_Page>
    56e4:	fd cf       	rjmp	.-6      	; 0x56e0 <main+0x8>

000056e6 <__mulsi3>:
    56e6:	62 9f       	mul	r22, r18
    56e8:	d0 01       	movw	r26, r0
    56ea:	73 9f       	mul	r23, r19
    56ec:	f0 01       	movw	r30, r0
    56ee:	82 9f       	mul	r24, r18
    56f0:	e0 0d       	add	r30, r0
    56f2:	f1 1d       	adc	r31, r1
    56f4:	64 9f       	mul	r22, r20
    56f6:	e0 0d       	add	r30, r0
    56f8:	f1 1d       	adc	r31, r1
    56fa:	92 9f       	mul	r25, r18
    56fc:	f0 0d       	add	r31, r0
    56fe:	83 9f       	mul	r24, r19
    5700:	f0 0d       	add	r31, r0
    5702:	74 9f       	mul	r23, r20
    5704:	f0 0d       	add	r31, r0
    5706:	65 9f       	mul	r22, r21
    5708:	f0 0d       	add	r31, r0
    570a:	99 27       	eor	r25, r25
    570c:	72 9f       	mul	r23, r18
    570e:	b0 0d       	add	r27, r0
    5710:	e1 1d       	adc	r30, r1
    5712:	f9 1f       	adc	r31, r25
    5714:	63 9f       	mul	r22, r19
    5716:	b0 0d       	add	r27, r0
    5718:	e1 1d       	adc	r30, r1
    571a:	f9 1f       	adc	r31, r25
    571c:	bd 01       	movw	r22, r26
    571e:	cf 01       	movw	r24, r30
    5720:	11 24       	eor	r1, r1
    5722:	08 95       	ret

00005724 <__udivmodhi4>:
    5724:	aa 1b       	sub	r26, r26
    5726:	bb 1b       	sub	r27, r27
    5728:	51 e1       	ldi	r21, 0x11	; 17
    572a:	07 c0       	rjmp	.+14     	; 0x573a <__udivmodhi4_ep>

0000572c <__udivmodhi4_loop>:
    572c:	aa 1f       	adc	r26, r26
    572e:	bb 1f       	adc	r27, r27
    5730:	a6 17       	cp	r26, r22
    5732:	b7 07       	cpc	r27, r23
    5734:	10 f0       	brcs	.+4      	; 0x573a <__udivmodhi4_ep>
    5736:	a6 1b       	sub	r26, r22
    5738:	b7 0b       	sbc	r27, r23

0000573a <__udivmodhi4_ep>:
    573a:	88 1f       	adc	r24, r24
    573c:	99 1f       	adc	r25, r25
    573e:	5a 95       	dec	r21
    5740:	a9 f7       	brne	.-22     	; 0x572c <__udivmodhi4_loop>
    5742:	80 95       	com	r24
    5744:	90 95       	com	r25
    5746:	bc 01       	movw	r22, r24
    5748:	cd 01       	movw	r24, r26
    574a:	08 95       	ret

0000574c <__udivmodsi4>:
    574c:	a1 e2       	ldi	r26, 0x21	; 33
    574e:	1a 2e       	mov	r1, r26
    5750:	aa 1b       	sub	r26, r26
    5752:	bb 1b       	sub	r27, r27
    5754:	fd 01       	movw	r30, r26
    5756:	0d c0       	rjmp	.+26     	; 0x5772 <__udivmodsi4_ep>

00005758 <__udivmodsi4_loop>:
    5758:	aa 1f       	adc	r26, r26
    575a:	bb 1f       	adc	r27, r27
    575c:	ee 1f       	adc	r30, r30
    575e:	ff 1f       	adc	r31, r31
    5760:	a2 17       	cp	r26, r18
    5762:	b3 07       	cpc	r27, r19
    5764:	e4 07       	cpc	r30, r20
    5766:	f5 07       	cpc	r31, r21
    5768:	20 f0       	brcs	.+8      	; 0x5772 <__udivmodsi4_ep>
    576a:	a2 1b       	sub	r26, r18
    576c:	b3 0b       	sbc	r27, r19
    576e:	e4 0b       	sbc	r30, r20
    5770:	f5 0b       	sbc	r31, r21

00005772 <__udivmodsi4_ep>:
    5772:	66 1f       	adc	r22, r22
    5774:	77 1f       	adc	r23, r23
    5776:	88 1f       	adc	r24, r24
    5778:	99 1f       	adc	r25, r25
    577a:	1a 94       	dec	r1
    577c:	69 f7       	brne	.-38     	; 0x5758 <__udivmodsi4_loop>
    577e:	60 95       	com	r22
    5780:	70 95       	com	r23
    5782:	80 95       	com	r24
    5784:	90 95       	com	r25
    5786:	9b 01       	movw	r18, r22
    5788:	ac 01       	movw	r20, r24
    578a:	bd 01       	movw	r22, r26
    578c:	cf 01       	movw	r24, r30
    578e:	08 95       	ret

00005790 <__prologue_saves__>:
    5790:	2f 92       	push	r2
    5792:	3f 92       	push	r3
    5794:	4f 92       	push	r4
    5796:	5f 92       	push	r5
    5798:	6f 92       	push	r6
    579a:	7f 92       	push	r7
    579c:	8f 92       	push	r8
    579e:	9f 92       	push	r9
    57a0:	af 92       	push	r10
    57a2:	bf 92       	push	r11
    57a4:	cf 92       	push	r12
    57a6:	df 92       	push	r13
    57a8:	ef 92       	push	r14
    57aa:	ff 92       	push	r15
    57ac:	0f 93       	push	r16
    57ae:	1f 93       	push	r17
    57b0:	cf 93       	push	r28
    57b2:	df 93       	push	r29
    57b4:	cd b7       	in	r28, 0x3d	; 61
    57b6:	de b7       	in	r29, 0x3e	; 62
    57b8:	ca 1b       	sub	r28, r26
    57ba:	db 0b       	sbc	r29, r27
    57bc:	0f b6       	in	r0, 0x3f	; 63
    57be:	f8 94       	cli
    57c0:	de bf       	out	0x3e, r29	; 62
    57c2:	0f be       	out	0x3f, r0	; 63
    57c4:	cd bf       	out	0x3d, r28	; 61
    57c6:	09 94       	ijmp

000057c8 <__epilogue_restores__>:
    57c8:	2a 88       	ldd	r2, Y+18	; 0x12
    57ca:	39 88       	ldd	r3, Y+17	; 0x11
    57cc:	48 88       	ldd	r4, Y+16	; 0x10
    57ce:	5f 84       	ldd	r5, Y+15	; 0x0f
    57d0:	6e 84       	ldd	r6, Y+14	; 0x0e
    57d2:	7d 84       	ldd	r7, Y+13	; 0x0d
    57d4:	8c 84       	ldd	r8, Y+12	; 0x0c
    57d6:	9b 84       	ldd	r9, Y+11	; 0x0b
    57d8:	aa 84       	ldd	r10, Y+10	; 0x0a
    57da:	b9 84       	ldd	r11, Y+9	; 0x09
    57dc:	c8 84       	ldd	r12, Y+8	; 0x08
    57de:	df 80       	ldd	r13, Y+7	; 0x07
    57e0:	ee 80       	ldd	r14, Y+6	; 0x06
    57e2:	fd 80       	ldd	r15, Y+5	; 0x05
    57e4:	0c 81       	ldd	r16, Y+4	; 0x04
    57e6:	1b 81       	ldd	r17, Y+3	; 0x03
    57e8:	aa 81       	ldd	r26, Y+2	; 0x02
    57ea:	b9 81       	ldd	r27, Y+1	; 0x01
    57ec:	ce 0f       	add	r28, r30
    57ee:	d1 1d       	adc	r29, r1
    57f0:	0f b6       	in	r0, 0x3f	; 63
    57f2:	f8 94       	cli
    57f4:	de bf       	out	0x3e, r29	; 62
    57f6:	0f be       	out	0x3f, r0	; 63
    57f8:	cd bf       	out	0x3d, r28	; 61
    57fa:	ed 01       	movw	r28, r26
    57fc:	08 95       	ret

000057fe <strcmp>:
    57fe:	fb 01       	movw	r30, r22
    5800:	dc 01       	movw	r26, r24
    5802:	8d 91       	ld	r24, X+
    5804:	01 90       	ld	r0, Z+
    5806:	80 19       	sub	r24, r0
    5808:	01 10       	cpse	r0, r1
    580a:	d9 f3       	breq	.-10     	; 0x5802 <strcmp+0x4>
    580c:	99 0b       	sbc	r25, r25
    580e:	08 95       	ret

00005810 <_exit>:
    5810:	f8 94       	cli

00005812 <__stop_program>:
    5812:	ff cf       	rjmp	.-2      	; 0x5812 <__stop_program>
