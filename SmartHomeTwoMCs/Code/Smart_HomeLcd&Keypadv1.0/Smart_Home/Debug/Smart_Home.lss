
Smart_Home.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000624e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000002e4  00800060  0000624e  000062e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000027  00800344  00800344  000065c6  2**0
                  ALLOC
  3 .stab         0000c8d0  00000000  00000000  000065c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000054e4  00000000  00000000  00012e98  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  0001837c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d4  00000000  00000000  000184fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000218c  00000000  00000000  000186d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000122c  00000000  00000000  0001a85c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001103  00000000  00000000  0001ba88  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  0001cb8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002ee  00000000  00000000  0001cd2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000932  00000000  00000000  0001d01a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0001d94c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 dd 0b 	jmp	0x17ba	; 0x17ba <__vector_1>
       8:	0c 94 06 0c 	jmp	0x180c	; 0x180c <__vector_2>
       c:	0c 94 2f 0c 	jmp	0x185e	; 0x185e <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 a7 0a 	jmp	0x154e	; 0x154e <__vector_6>
      1c:	0c 94 55 0a 	jmp	0x14aa	; 0x14aa <__vector_7>
      20:	0c 94 7e 0a 	jmp	0x14fc	; 0x14fc <__vector_8>
      24:	0c 94 2c 0a 	jmp	0x1458	; 0x1458 <__vector_9>
      28:	0c 94 05 09 	jmp	0x120a	; 0x120a <__vector_10>
      2c:	0c 94 dc 08 	jmp	0x11b8	; 0x11b8 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 2d 0e 	jmp	0x1c5a	; 0x1c5a <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	13 e0       	ldi	r17, 0x03	; 3
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e4       	ldi	r30, 0x4E	; 78
      68:	f2 e6       	ldi	r31, 0x62	; 98
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 34       	cpi	r26, 0x44	; 68
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	13 e0       	ldi	r17, 0x03	; 3
      78:	a4 e4       	ldi	r26, 0x44	; 68
      7a:	b3 e0       	ldi	r27, 0x03	; 3
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 36       	cpi	r26, 0x6B	; 107
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 54 30 	call	0x60a8	; 0x60a8 <main>
      8a:	0c 94 25 31 	jmp	0x624a	; 0x624a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 25 04 	call	0x84a	; 0x84a <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 25 04 	call	0x84a	; 0x84a <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ee 30 	jmp	0x61dc	; 0x61dc <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ab e0       	ldi	r26, 0x0B	; 11
     128:	b2 e0       	ldi	r27, 0x02	; 2
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 0a 31 	jmp	0x6214	; 0x6214 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 fa 30 	jmp	0x61f4	; 0x61f4 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 41 05 	call	0xa82	; 0xa82 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 16 31 	jmp	0x622c	; 0x622c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 fa 30 	jmp	0x61f4	; 0x61f4 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 41 05 	call	0xa82	; 0xa82 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 16 31 	jmp	0x622c	; 0x622c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ee 30 	jmp	0x61dc	; 0x61dc <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8b e0       	ldi	r24, 0x0B	; 11
     496:	92 e0       	ldi	r25, 0x02	; 2
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 41 05 	call	0xa82	; 0xa82 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 0a 31 	jmp	0x6214	; 0x6214 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 f6 30 	jmp	0x61ec	; 0x61ec <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6b e0       	ldi	r22, 0x0B	; 11
     69c:	72 e0       	ldi	r23, 0x02	; 2
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 41 05 	call	0xa82	; 0xa82 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 12 31 	jmp	0x6224	; 0x6224 <__epilogue_restores__+0x10>

0000078a <__nesf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 fa 30 	jmp	0x61f4	; 0x61f4 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__nesf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__nesf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 8e 06 	call	0xd1c	; 0xd1c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__nesf2+0x58>
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 16 31 	jmp	0x622c	; 0x622c <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 fa 30 	jmp	0x61f4	; 0x61f4 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 8e 06 	call	0xd1c	; 0xd1c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 16 31 	jmp	0x622c	; 0x622c <__epilogue_restores__+0x18>

0000084a <__fixsfsi>:
     84a:	ac e0       	ldi	r26, 0x0C	; 12
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 fe 30 	jmp	0x61fc	; 0x61fc <__prologue_saves__+0x20>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	ce 01       	movw	r24, r28
     860:	01 96       	adiw	r24, 0x01	; 1
     862:	be 01       	movw	r22, r28
     864:	6b 5f       	subi	r22, 0xFB	; 251
     866:	7f 4f       	sbci	r23, 0xFF	; 255
     868:	0e 94 16 06 	call	0xc2c	; 0xc2c <__unpack_f>
     86c:	8d 81       	ldd	r24, Y+5	; 0x05
     86e:	82 30       	cpi	r24, 0x02	; 2
     870:	61 f1       	breq	.+88     	; 0x8ca <__stack+0x6b>
     872:	82 30       	cpi	r24, 0x02	; 2
     874:	50 f1       	brcs	.+84     	; 0x8ca <__stack+0x6b>
     876:	84 30       	cpi	r24, 0x04	; 4
     878:	21 f4       	brne	.+8      	; 0x882 <__stack+0x23>
     87a:	8e 81       	ldd	r24, Y+6	; 0x06
     87c:	88 23       	and	r24, r24
     87e:	51 f1       	breq	.+84     	; 0x8d4 <__stack+0x75>
     880:	2e c0       	rjmp	.+92     	; 0x8de <__stack+0x7f>
     882:	2f 81       	ldd	r18, Y+7	; 0x07
     884:	38 85       	ldd	r19, Y+8	; 0x08
     886:	37 fd       	sbrc	r19, 7
     888:	20 c0       	rjmp	.+64     	; 0x8ca <__stack+0x6b>
     88a:	6e 81       	ldd	r22, Y+6	; 0x06
     88c:	2f 31       	cpi	r18, 0x1F	; 31
     88e:	31 05       	cpc	r19, r1
     890:	1c f0       	brlt	.+6      	; 0x898 <__stack+0x39>
     892:	66 23       	and	r22, r22
     894:	f9 f0       	breq	.+62     	; 0x8d4 <__stack+0x75>
     896:	23 c0       	rjmp	.+70     	; 0x8de <__stack+0x7f>
     898:	8e e1       	ldi	r24, 0x1E	; 30
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	82 1b       	sub	r24, r18
     89e:	93 0b       	sbc	r25, r19
     8a0:	29 85       	ldd	r18, Y+9	; 0x09
     8a2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8a4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8a6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8a8:	04 c0       	rjmp	.+8      	; 0x8b2 <__stack+0x53>
     8aa:	56 95       	lsr	r21
     8ac:	47 95       	ror	r20
     8ae:	37 95       	ror	r19
     8b0:	27 95       	ror	r18
     8b2:	8a 95       	dec	r24
     8b4:	d2 f7       	brpl	.-12     	; 0x8aa <__stack+0x4b>
     8b6:	66 23       	and	r22, r22
     8b8:	b1 f0       	breq	.+44     	; 0x8e6 <__stack+0x87>
     8ba:	50 95       	com	r21
     8bc:	40 95       	com	r20
     8be:	30 95       	com	r19
     8c0:	21 95       	neg	r18
     8c2:	3f 4f       	sbci	r19, 0xFF	; 255
     8c4:	4f 4f       	sbci	r20, 0xFF	; 255
     8c6:	5f 4f       	sbci	r21, 0xFF	; 255
     8c8:	0e c0       	rjmp	.+28     	; 0x8e6 <__stack+0x87>
     8ca:	20 e0       	ldi	r18, 0x00	; 0
     8cc:	30 e0       	ldi	r19, 0x00	; 0
     8ce:	40 e0       	ldi	r20, 0x00	; 0
     8d0:	50 e0       	ldi	r21, 0x00	; 0
     8d2:	09 c0       	rjmp	.+18     	; 0x8e6 <__stack+0x87>
     8d4:	2f ef       	ldi	r18, 0xFF	; 255
     8d6:	3f ef       	ldi	r19, 0xFF	; 255
     8d8:	4f ef       	ldi	r20, 0xFF	; 255
     8da:	5f e7       	ldi	r21, 0x7F	; 127
     8dc:	04 c0       	rjmp	.+8      	; 0x8e6 <__stack+0x87>
     8de:	20 e0       	ldi	r18, 0x00	; 0
     8e0:	30 e0       	ldi	r19, 0x00	; 0
     8e2:	40 e0       	ldi	r20, 0x00	; 0
     8e4:	50 e8       	ldi	r21, 0x80	; 128
     8e6:	b9 01       	movw	r22, r18
     8e8:	ca 01       	movw	r24, r20
     8ea:	2c 96       	adiw	r28, 0x0c	; 12
     8ec:	e2 e0       	ldi	r30, 0x02	; 2
     8ee:	0c 94 1a 31 	jmp	0x6234	; 0x6234 <__epilogue_restores__+0x20>

000008f2 <__floatunsisf>:
     8f2:	a8 e0       	ldi	r26, 0x08	; 8
     8f4:	b0 e0       	ldi	r27, 0x00	; 0
     8f6:	ef e7       	ldi	r30, 0x7F	; 127
     8f8:	f4 e0       	ldi	r31, 0x04	; 4
     8fa:	0c 94 f6 30 	jmp	0x61ec	; 0x61ec <__prologue_saves__+0x10>
     8fe:	7b 01       	movw	r14, r22
     900:	8c 01       	movw	r16, r24
     902:	61 15       	cp	r22, r1
     904:	71 05       	cpc	r23, r1
     906:	81 05       	cpc	r24, r1
     908:	91 05       	cpc	r25, r1
     90a:	19 f4       	brne	.+6      	; 0x912 <__floatunsisf+0x20>
     90c:	82 e0       	ldi	r24, 0x02	; 2
     90e:	89 83       	std	Y+1, r24	; 0x01
     910:	60 c0       	rjmp	.+192    	; 0x9d2 <__floatunsisf+0xe0>
     912:	83 e0       	ldi	r24, 0x03	; 3
     914:	89 83       	std	Y+1, r24	; 0x01
     916:	8e e1       	ldi	r24, 0x1E	; 30
     918:	c8 2e       	mov	r12, r24
     91a:	d1 2c       	mov	r13, r1
     91c:	dc 82       	std	Y+4, r13	; 0x04
     91e:	cb 82       	std	Y+3, r12	; 0x03
     920:	ed 82       	std	Y+5, r14	; 0x05
     922:	fe 82       	std	Y+6, r15	; 0x06
     924:	0f 83       	std	Y+7, r16	; 0x07
     926:	18 87       	std	Y+8, r17	; 0x08
     928:	c8 01       	movw	r24, r16
     92a:	b7 01       	movw	r22, r14
     92c:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <__clzsi2>
     930:	fc 01       	movw	r30, r24
     932:	31 97       	sbiw	r30, 0x01	; 1
     934:	f7 ff       	sbrs	r31, 7
     936:	3b c0       	rjmp	.+118    	; 0x9ae <__floatunsisf+0xbc>
     938:	22 27       	eor	r18, r18
     93a:	33 27       	eor	r19, r19
     93c:	2e 1b       	sub	r18, r30
     93e:	3f 0b       	sbc	r19, r31
     940:	57 01       	movw	r10, r14
     942:	68 01       	movw	r12, r16
     944:	02 2e       	mov	r0, r18
     946:	04 c0       	rjmp	.+8      	; 0x950 <__floatunsisf+0x5e>
     948:	d6 94       	lsr	r13
     94a:	c7 94       	ror	r12
     94c:	b7 94       	ror	r11
     94e:	a7 94       	ror	r10
     950:	0a 94       	dec	r0
     952:	d2 f7       	brpl	.-12     	; 0x948 <__floatunsisf+0x56>
     954:	40 e0       	ldi	r20, 0x00	; 0
     956:	50 e0       	ldi	r21, 0x00	; 0
     958:	60 e0       	ldi	r22, 0x00	; 0
     95a:	70 e0       	ldi	r23, 0x00	; 0
     95c:	81 e0       	ldi	r24, 0x01	; 1
     95e:	90 e0       	ldi	r25, 0x00	; 0
     960:	a0 e0       	ldi	r26, 0x00	; 0
     962:	b0 e0       	ldi	r27, 0x00	; 0
     964:	04 c0       	rjmp	.+8      	; 0x96e <__floatunsisf+0x7c>
     966:	88 0f       	add	r24, r24
     968:	99 1f       	adc	r25, r25
     96a:	aa 1f       	adc	r26, r26
     96c:	bb 1f       	adc	r27, r27
     96e:	2a 95       	dec	r18
     970:	d2 f7       	brpl	.-12     	; 0x966 <__floatunsisf+0x74>
     972:	01 97       	sbiw	r24, 0x01	; 1
     974:	a1 09       	sbc	r26, r1
     976:	b1 09       	sbc	r27, r1
     978:	8e 21       	and	r24, r14
     97a:	9f 21       	and	r25, r15
     97c:	a0 23       	and	r26, r16
     97e:	b1 23       	and	r27, r17
     980:	00 97       	sbiw	r24, 0x00	; 0
     982:	a1 05       	cpc	r26, r1
     984:	b1 05       	cpc	r27, r1
     986:	21 f0       	breq	.+8      	; 0x990 <__floatunsisf+0x9e>
     988:	41 e0       	ldi	r20, 0x01	; 1
     98a:	50 e0       	ldi	r21, 0x00	; 0
     98c:	60 e0       	ldi	r22, 0x00	; 0
     98e:	70 e0       	ldi	r23, 0x00	; 0
     990:	4a 29       	or	r20, r10
     992:	5b 29       	or	r21, r11
     994:	6c 29       	or	r22, r12
     996:	7d 29       	or	r23, r13
     998:	4d 83       	std	Y+5, r20	; 0x05
     99a:	5e 83       	std	Y+6, r21	; 0x06
     99c:	6f 83       	std	Y+7, r22	; 0x07
     99e:	78 87       	std	Y+8, r23	; 0x08
     9a0:	8e e1       	ldi	r24, 0x1E	; 30
     9a2:	90 e0       	ldi	r25, 0x00	; 0
     9a4:	8e 1b       	sub	r24, r30
     9a6:	9f 0b       	sbc	r25, r31
     9a8:	9c 83       	std	Y+4, r25	; 0x04
     9aa:	8b 83       	std	Y+3, r24	; 0x03
     9ac:	12 c0       	rjmp	.+36     	; 0x9d2 <__floatunsisf+0xe0>
     9ae:	30 97       	sbiw	r30, 0x00	; 0
     9b0:	81 f0       	breq	.+32     	; 0x9d2 <__floatunsisf+0xe0>
     9b2:	0e 2e       	mov	r0, r30
     9b4:	04 c0       	rjmp	.+8      	; 0x9be <__floatunsisf+0xcc>
     9b6:	ee 0c       	add	r14, r14
     9b8:	ff 1c       	adc	r15, r15
     9ba:	00 1f       	adc	r16, r16
     9bc:	11 1f       	adc	r17, r17
     9be:	0a 94       	dec	r0
     9c0:	d2 f7       	brpl	.-12     	; 0x9b6 <__floatunsisf+0xc4>
     9c2:	ed 82       	std	Y+5, r14	; 0x05
     9c4:	fe 82       	std	Y+6, r15	; 0x06
     9c6:	0f 83       	std	Y+7, r16	; 0x07
     9c8:	18 87       	std	Y+8, r17	; 0x08
     9ca:	ce 1a       	sub	r12, r30
     9cc:	df 0a       	sbc	r13, r31
     9ce:	dc 82       	std	Y+4, r13	; 0x04
     9d0:	cb 82       	std	Y+3, r12	; 0x03
     9d2:	1a 82       	std	Y+2, r1	; 0x02
     9d4:	ce 01       	movw	r24, r28
     9d6:	01 96       	adiw	r24, 0x01	; 1
     9d8:	0e 94 41 05 	call	0xa82	; 0xa82 <__pack_f>
     9dc:	28 96       	adiw	r28, 0x08	; 8
     9de:	ea e0       	ldi	r30, 0x0A	; 10
     9e0:	0c 94 12 31 	jmp	0x6224	; 0x6224 <__epilogue_restores__+0x10>

000009e4 <__clzsi2>:
     9e4:	ef 92       	push	r14
     9e6:	ff 92       	push	r15
     9e8:	0f 93       	push	r16
     9ea:	1f 93       	push	r17
     9ec:	7b 01       	movw	r14, r22
     9ee:	8c 01       	movw	r16, r24
     9f0:	80 e0       	ldi	r24, 0x00	; 0
     9f2:	e8 16       	cp	r14, r24
     9f4:	80 e0       	ldi	r24, 0x00	; 0
     9f6:	f8 06       	cpc	r15, r24
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	08 07       	cpc	r16, r24
     9fc:	80 e0       	ldi	r24, 0x00	; 0
     9fe:	18 07       	cpc	r17, r24
     a00:	88 f4       	brcc	.+34     	; 0xa24 <__clzsi2+0x40>
     a02:	8f ef       	ldi	r24, 0xFF	; 255
     a04:	e8 16       	cp	r14, r24
     a06:	f1 04       	cpc	r15, r1
     a08:	01 05       	cpc	r16, r1
     a0a:	11 05       	cpc	r17, r1
     a0c:	31 f0       	breq	.+12     	; 0xa1a <__clzsi2+0x36>
     a0e:	28 f0       	brcs	.+10     	; 0xa1a <__clzsi2+0x36>
     a10:	88 e0       	ldi	r24, 0x08	; 8
     a12:	90 e0       	ldi	r25, 0x00	; 0
     a14:	a0 e0       	ldi	r26, 0x00	; 0
     a16:	b0 e0       	ldi	r27, 0x00	; 0
     a18:	17 c0       	rjmp	.+46     	; 0xa48 <__clzsi2+0x64>
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	90 e0       	ldi	r25, 0x00	; 0
     a1e:	a0 e0       	ldi	r26, 0x00	; 0
     a20:	b0 e0       	ldi	r27, 0x00	; 0
     a22:	12 c0       	rjmp	.+36     	; 0xa48 <__clzsi2+0x64>
     a24:	80 e0       	ldi	r24, 0x00	; 0
     a26:	e8 16       	cp	r14, r24
     a28:	80 e0       	ldi	r24, 0x00	; 0
     a2a:	f8 06       	cpc	r15, r24
     a2c:	80 e0       	ldi	r24, 0x00	; 0
     a2e:	08 07       	cpc	r16, r24
     a30:	81 e0       	ldi	r24, 0x01	; 1
     a32:	18 07       	cpc	r17, r24
     a34:	28 f0       	brcs	.+10     	; 0xa40 <__clzsi2+0x5c>
     a36:	88 e1       	ldi	r24, 0x18	; 24
     a38:	90 e0       	ldi	r25, 0x00	; 0
     a3a:	a0 e0       	ldi	r26, 0x00	; 0
     a3c:	b0 e0       	ldi	r27, 0x00	; 0
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__clzsi2+0x64>
     a40:	80 e1       	ldi	r24, 0x10	; 16
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	a0 e0       	ldi	r26, 0x00	; 0
     a46:	b0 e0       	ldi	r27, 0x00	; 0
     a48:	20 e2       	ldi	r18, 0x20	; 32
     a4a:	30 e0       	ldi	r19, 0x00	; 0
     a4c:	40 e0       	ldi	r20, 0x00	; 0
     a4e:	50 e0       	ldi	r21, 0x00	; 0
     a50:	28 1b       	sub	r18, r24
     a52:	39 0b       	sbc	r19, r25
     a54:	4a 0b       	sbc	r20, r26
     a56:	5b 0b       	sbc	r21, r27
     a58:	04 c0       	rjmp	.+8      	; 0xa62 <__clzsi2+0x7e>
     a5a:	16 95       	lsr	r17
     a5c:	07 95       	ror	r16
     a5e:	f7 94       	ror	r15
     a60:	e7 94       	ror	r14
     a62:	8a 95       	dec	r24
     a64:	d2 f7       	brpl	.-12     	; 0xa5a <__clzsi2+0x76>
     a66:	f7 01       	movw	r30, r14
     a68:	ed 5e       	subi	r30, 0xED	; 237
     a6a:	fd 4f       	sbci	r31, 0xFD	; 253
     a6c:	80 81       	ld	r24, Z
     a6e:	28 1b       	sub	r18, r24
     a70:	31 09       	sbc	r19, r1
     a72:	41 09       	sbc	r20, r1
     a74:	51 09       	sbc	r21, r1
     a76:	c9 01       	movw	r24, r18
     a78:	1f 91       	pop	r17
     a7a:	0f 91       	pop	r16
     a7c:	ff 90       	pop	r15
     a7e:	ef 90       	pop	r14
     a80:	08 95       	ret

00000a82 <__pack_f>:
     a82:	df 92       	push	r13
     a84:	ef 92       	push	r14
     a86:	ff 92       	push	r15
     a88:	0f 93       	push	r16
     a8a:	1f 93       	push	r17
     a8c:	fc 01       	movw	r30, r24
     a8e:	e4 80       	ldd	r14, Z+4	; 0x04
     a90:	f5 80       	ldd	r15, Z+5	; 0x05
     a92:	06 81       	ldd	r16, Z+6	; 0x06
     a94:	17 81       	ldd	r17, Z+7	; 0x07
     a96:	d1 80       	ldd	r13, Z+1	; 0x01
     a98:	80 81       	ld	r24, Z
     a9a:	82 30       	cpi	r24, 0x02	; 2
     a9c:	48 f4       	brcc	.+18     	; 0xab0 <__pack_f+0x2e>
     a9e:	80 e0       	ldi	r24, 0x00	; 0
     aa0:	90 e0       	ldi	r25, 0x00	; 0
     aa2:	a0 e1       	ldi	r26, 0x10	; 16
     aa4:	b0 e0       	ldi	r27, 0x00	; 0
     aa6:	e8 2a       	or	r14, r24
     aa8:	f9 2a       	or	r15, r25
     aaa:	0a 2b       	or	r16, r26
     aac:	1b 2b       	or	r17, r27
     aae:	a5 c0       	rjmp	.+330    	; 0xbfa <__pack_f+0x178>
     ab0:	84 30       	cpi	r24, 0x04	; 4
     ab2:	09 f4       	brne	.+2      	; 0xab6 <__pack_f+0x34>
     ab4:	9f c0       	rjmp	.+318    	; 0xbf4 <__pack_f+0x172>
     ab6:	82 30       	cpi	r24, 0x02	; 2
     ab8:	21 f4       	brne	.+8      	; 0xac2 <__pack_f+0x40>
     aba:	ee 24       	eor	r14, r14
     abc:	ff 24       	eor	r15, r15
     abe:	87 01       	movw	r16, r14
     ac0:	05 c0       	rjmp	.+10     	; 0xacc <__pack_f+0x4a>
     ac2:	e1 14       	cp	r14, r1
     ac4:	f1 04       	cpc	r15, r1
     ac6:	01 05       	cpc	r16, r1
     ac8:	11 05       	cpc	r17, r1
     aca:	19 f4       	brne	.+6      	; 0xad2 <__pack_f+0x50>
     acc:	e0 e0       	ldi	r30, 0x00	; 0
     ace:	f0 e0       	ldi	r31, 0x00	; 0
     ad0:	96 c0       	rjmp	.+300    	; 0xbfe <__pack_f+0x17c>
     ad2:	62 81       	ldd	r22, Z+2	; 0x02
     ad4:	73 81       	ldd	r23, Z+3	; 0x03
     ad6:	9f ef       	ldi	r25, 0xFF	; 255
     ad8:	62 38       	cpi	r22, 0x82	; 130
     ada:	79 07       	cpc	r23, r25
     adc:	0c f0       	brlt	.+2      	; 0xae0 <__pack_f+0x5e>
     ade:	5b c0       	rjmp	.+182    	; 0xb96 <__pack_f+0x114>
     ae0:	22 e8       	ldi	r18, 0x82	; 130
     ae2:	3f ef       	ldi	r19, 0xFF	; 255
     ae4:	26 1b       	sub	r18, r22
     ae6:	37 0b       	sbc	r19, r23
     ae8:	2a 31       	cpi	r18, 0x1A	; 26
     aea:	31 05       	cpc	r19, r1
     aec:	2c f0       	brlt	.+10     	; 0xaf8 <__pack_f+0x76>
     aee:	20 e0       	ldi	r18, 0x00	; 0
     af0:	30 e0       	ldi	r19, 0x00	; 0
     af2:	40 e0       	ldi	r20, 0x00	; 0
     af4:	50 e0       	ldi	r21, 0x00	; 0
     af6:	2a c0       	rjmp	.+84     	; 0xb4c <__pack_f+0xca>
     af8:	b8 01       	movw	r22, r16
     afa:	a7 01       	movw	r20, r14
     afc:	02 2e       	mov	r0, r18
     afe:	04 c0       	rjmp	.+8      	; 0xb08 <__pack_f+0x86>
     b00:	76 95       	lsr	r23
     b02:	67 95       	ror	r22
     b04:	57 95       	ror	r21
     b06:	47 95       	ror	r20
     b08:	0a 94       	dec	r0
     b0a:	d2 f7       	brpl	.-12     	; 0xb00 <__pack_f+0x7e>
     b0c:	81 e0       	ldi	r24, 0x01	; 1
     b0e:	90 e0       	ldi	r25, 0x00	; 0
     b10:	a0 e0       	ldi	r26, 0x00	; 0
     b12:	b0 e0       	ldi	r27, 0x00	; 0
     b14:	04 c0       	rjmp	.+8      	; 0xb1e <__pack_f+0x9c>
     b16:	88 0f       	add	r24, r24
     b18:	99 1f       	adc	r25, r25
     b1a:	aa 1f       	adc	r26, r26
     b1c:	bb 1f       	adc	r27, r27
     b1e:	2a 95       	dec	r18
     b20:	d2 f7       	brpl	.-12     	; 0xb16 <__pack_f+0x94>
     b22:	01 97       	sbiw	r24, 0x01	; 1
     b24:	a1 09       	sbc	r26, r1
     b26:	b1 09       	sbc	r27, r1
     b28:	8e 21       	and	r24, r14
     b2a:	9f 21       	and	r25, r15
     b2c:	a0 23       	and	r26, r16
     b2e:	b1 23       	and	r27, r17
     b30:	00 97       	sbiw	r24, 0x00	; 0
     b32:	a1 05       	cpc	r26, r1
     b34:	b1 05       	cpc	r27, r1
     b36:	21 f0       	breq	.+8      	; 0xb40 <__pack_f+0xbe>
     b38:	81 e0       	ldi	r24, 0x01	; 1
     b3a:	90 e0       	ldi	r25, 0x00	; 0
     b3c:	a0 e0       	ldi	r26, 0x00	; 0
     b3e:	b0 e0       	ldi	r27, 0x00	; 0
     b40:	9a 01       	movw	r18, r20
     b42:	ab 01       	movw	r20, r22
     b44:	28 2b       	or	r18, r24
     b46:	39 2b       	or	r19, r25
     b48:	4a 2b       	or	r20, r26
     b4a:	5b 2b       	or	r21, r27
     b4c:	da 01       	movw	r26, r20
     b4e:	c9 01       	movw	r24, r18
     b50:	8f 77       	andi	r24, 0x7F	; 127
     b52:	90 70       	andi	r25, 0x00	; 0
     b54:	a0 70       	andi	r26, 0x00	; 0
     b56:	b0 70       	andi	r27, 0x00	; 0
     b58:	80 34       	cpi	r24, 0x40	; 64
     b5a:	91 05       	cpc	r25, r1
     b5c:	a1 05       	cpc	r26, r1
     b5e:	b1 05       	cpc	r27, r1
     b60:	39 f4       	brne	.+14     	; 0xb70 <__pack_f+0xee>
     b62:	27 ff       	sbrs	r18, 7
     b64:	09 c0       	rjmp	.+18     	; 0xb78 <__pack_f+0xf6>
     b66:	20 5c       	subi	r18, 0xC0	; 192
     b68:	3f 4f       	sbci	r19, 0xFF	; 255
     b6a:	4f 4f       	sbci	r20, 0xFF	; 255
     b6c:	5f 4f       	sbci	r21, 0xFF	; 255
     b6e:	04 c0       	rjmp	.+8      	; 0xb78 <__pack_f+0xf6>
     b70:	21 5c       	subi	r18, 0xC1	; 193
     b72:	3f 4f       	sbci	r19, 0xFF	; 255
     b74:	4f 4f       	sbci	r20, 0xFF	; 255
     b76:	5f 4f       	sbci	r21, 0xFF	; 255
     b78:	e0 e0       	ldi	r30, 0x00	; 0
     b7a:	f0 e0       	ldi	r31, 0x00	; 0
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	a0 e0       	ldi	r26, 0x00	; 0
     b80:	3a 07       	cpc	r19, r26
     b82:	a0 e0       	ldi	r26, 0x00	; 0
     b84:	4a 07       	cpc	r20, r26
     b86:	a0 e4       	ldi	r26, 0x40	; 64
     b88:	5a 07       	cpc	r21, r26
     b8a:	10 f0       	brcs	.+4      	; 0xb90 <__pack_f+0x10e>
     b8c:	e1 e0       	ldi	r30, 0x01	; 1
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	79 01       	movw	r14, r18
     b92:	8a 01       	movw	r16, r20
     b94:	27 c0       	rjmp	.+78     	; 0xbe4 <__pack_f+0x162>
     b96:	60 38       	cpi	r22, 0x80	; 128
     b98:	71 05       	cpc	r23, r1
     b9a:	64 f5       	brge	.+88     	; 0xbf4 <__pack_f+0x172>
     b9c:	fb 01       	movw	r30, r22
     b9e:	e1 58       	subi	r30, 0x81	; 129
     ba0:	ff 4f       	sbci	r31, 0xFF	; 255
     ba2:	d8 01       	movw	r26, r16
     ba4:	c7 01       	movw	r24, r14
     ba6:	8f 77       	andi	r24, 0x7F	; 127
     ba8:	90 70       	andi	r25, 0x00	; 0
     baa:	a0 70       	andi	r26, 0x00	; 0
     bac:	b0 70       	andi	r27, 0x00	; 0
     bae:	80 34       	cpi	r24, 0x40	; 64
     bb0:	91 05       	cpc	r25, r1
     bb2:	a1 05       	cpc	r26, r1
     bb4:	b1 05       	cpc	r27, r1
     bb6:	39 f4       	brne	.+14     	; 0xbc6 <__pack_f+0x144>
     bb8:	e7 fe       	sbrs	r14, 7
     bba:	0d c0       	rjmp	.+26     	; 0xbd6 <__pack_f+0x154>
     bbc:	80 e4       	ldi	r24, 0x40	; 64
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	a0 e0       	ldi	r26, 0x00	; 0
     bc2:	b0 e0       	ldi	r27, 0x00	; 0
     bc4:	04 c0       	rjmp	.+8      	; 0xbce <__pack_f+0x14c>
     bc6:	8f e3       	ldi	r24, 0x3F	; 63
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	a0 e0       	ldi	r26, 0x00	; 0
     bcc:	b0 e0       	ldi	r27, 0x00	; 0
     bce:	e8 0e       	add	r14, r24
     bd0:	f9 1e       	adc	r15, r25
     bd2:	0a 1f       	adc	r16, r26
     bd4:	1b 1f       	adc	r17, r27
     bd6:	17 ff       	sbrs	r17, 7
     bd8:	05 c0       	rjmp	.+10     	; 0xbe4 <__pack_f+0x162>
     bda:	16 95       	lsr	r17
     bdc:	07 95       	ror	r16
     bde:	f7 94       	ror	r15
     be0:	e7 94       	ror	r14
     be2:	31 96       	adiw	r30, 0x01	; 1
     be4:	87 e0       	ldi	r24, 0x07	; 7
     be6:	16 95       	lsr	r17
     be8:	07 95       	ror	r16
     bea:	f7 94       	ror	r15
     bec:	e7 94       	ror	r14
     bee:	8a 95       	dec	r24
     bf0:	d1 f7       	brne	.-12     	; 0xbe6 <__pack_f+0x164>
     bf2:	05 c0       	rjmp	.+10     	; 0xbfe <__pack_f+0x17c>
     bf4:	ee 24       	eor	r14, r14
     bf6:	ff 24       	eor	r15, r15
     bf8:	87 01       	movw	r16, r14
     bfa:	ef ef       	ldi	r30, 0xFF	; 255
     bfc:	f0 e0       	ldi	r31, 0x00	; 0
     bfe:	6e 2f       	mov	r22, r30
     c00:	67 95       	ror	r22
     c02:	66 27       	eor	r22, r22
     c04:	67 95       	ror	r22
     c06:	90 2f       	mov	r25, r16
     c08:	9f 77       	andi	r25, 0x7F	; 127
     c0a:	d7 94       	ror	r13
     c0c:	dd 24       	eor	r13, r13
     c0e:	d7 94       	ror	r13
     c10:	8e 2f       	mov	r24, r30
     c12:	86 95       	lsr	r24
     c14:	49 2f       	mov	r20, r25
     c16:	46 2b       	or	r20, r22
     c18:	58 2f       	mov	r21, r24
     c1a:	5d 29       	or	r21, r13
     c1c:	b7 01       	movw	r22, r14
     c1e:	ca 01       	movw	r24, r20
     c20:	1f 91       	pop	r17
     c22:	0f 91       	pop	r16
     c24:	ff 90       	pop	r15
     c26:	ef 90       	pop	r14
     c28:	df 90       	pop	r13
     c2a:	08 95       	ret

00000c2c <__unpack_f>:
     c2c:	fc 01       	movw	r30, r24
     c2e:	db 01       	movw	r26, r22
     c30:	40 81       	ld	r20, Z
     c32:	51 81       	ldd	r21, Z+1	; 0x01
     c34:	22 81       	ldd	r18, Z+2	; 0x02
     c36:	62 2f       	mov	r22, r18
     c38:	6f 77       	andi	r22, 0x7F	; 127
     c3a:	70 e0       	ldi	r23, 0x00	; 0
     c3c:	22 1f       	adc	r18, r18
     c3e:	22 27       	eor	r18, r18
     c40:	22 1f       	adc	r18, r18
     c42:	93 81       	ldd	r25, Z+3	; 0x03
     c44:	89 2f       	mov	r24, r25
     c46:	88 0f       	add	r24, r24
     c48:	82 2b       	or	r24, r18
     c4a:	28 2f       	mov	r18, r24
     c4c:	30 e0       	ldi	r19, 0x00	; 0
     c4e:	99 1f       	adc	r25, r25
     c50:	99 27       	eor	r25, r25
     c52:	99 1f       	adc	r25, r25
     c54:	11 96       	adiw	r26, 0x01	; 1
     c56:	9c 93       	st	X, r25
     c58:	11 97       	sbiw	r26, 0x01	; 1
     c5a:	21 15       	cp	r18, r1
     c5c:	31 05       	cpc	r19, r1
     c5e:	a9 f5       	brne	.+106    	; 0xcca <__unpack_f+0x9e>
     c60:	41 15       	cp	r20, r1
     c62:	51 05       	cpc	r21, r1
     c64:	61 05       	cpc	r22, r1
     c66:	71 05       	cpc	r23, r1
     c68:	11 f4       	brne	.+4      	; 0xc6e <__unpack_f+0x42>
     c6a:	82 e0       	ldi	r24, 0x02	; 2
     c6c:	37 c0       	rjmp	.+110    	; 0xcdc <__unpack_f+0xb0>
     c6e:	82 e8       	ldi	r24, 0x82	; 130
     c70:	9f ef       	ldi	r25, 0xFF	; 255
     c72:	13 96       	adiw	r26, 0x03	; 3
     c74:	9c 93       	st	X, r25
     c76:	8e 93       	st	-X, r24
     c78:	12 97       	sbiw	r26, 0x02	; 2
     c7a:	9a 01       	movw	r18, r20
     c7c:	ab 01       	movw	r20, r22
     c7e:	67 e0       	ldi	r22, 0x07	; 7
     c80:	22 0f       	add	r18, r18
     c82:	33 1f       	adc	r19, r19
     c84:	44 1f       	adc	r20, r20
     c86:	55 1f       	adc	r21, r21
     c88:	6a 95       	dec	r22
     c8a:	d1 f7       	brne	.-12     	; 0xc80 <__unpack_f+0x54>
     c8c:	83 e0       	ldi	r24, 0x03	; 3
     c8e:	8c 93       	st	X, r24
     c90:	0d c0       	rjmp	.+26     	; 0xcac <__unpack_f+0x80>
     c92:	22 0f       	add	r18, r18
     c94:	33 1f       	adc	r19, r19
     c96:	44 1f       	adc	r20, r20
     c98:	55 1f       	adc	r21, r21
     c9a:	12 96       	adiw	r26, 0x02	; 2
     c9c:	8d 91       	ld	r24, X+
     c9e:	9c 91       	ld	r25, X
     ca0:	13 97       	sbiw	r26, 0x03	; 3
     ca2:	01 97       	sbiw	r24, 0x01	; 1
     ca4:	13 96       	adiw	r26, 0x03	; 3
     ca6:	9c 93       	st	X, r25
     ca8:	8e 93       	st	-X, r24
     caa:	12 97       	sbiw	r26, 0x02	; 2
     cac:	20 30       	cpi	r18, 0x00	; 0
     cae:	80 e0       	ldi	r24, 0x00	; 0
     cb0:	38 07       	cpc	r19, r24
     cb2:	80 e0       	ldi	r24, 0x00	; 0
     cb4:	48 07       	cpc	r20, r24
     cb6:	80 e4       	ldi	r24, 0x40	; 64
     cb8:	58 07       	cpc	r21, r24
     cba:	58 f3       	brcs	.-42     	; 0xc92 <__unpack_f+0x66>
     cbc:	14 96       	adiw	r26, 0x04	; 4
     cbe:	2d 93       	st	X+, r18
     cc0:	3d 93       	st	X+, r19
     cc2:	4d 93       	st	X+, r20
     cc4:	5c 93       	st	X, r21
     cc6:	17 97       	sbiw	r26, 0x07	; 7
     cc8:	08 95       	ret
     cca:	2f 3f       	cpi	r18, 0xFF	; 255
     ccc:	31 05       	cpc	r19, r1
     cce:	79 f4       	brne	.+30     	; 0xcee <__unpack_f+0xc2>
     cd0:	41 15       	cp	r20, r1
     cd2:	51 05       	cpc	r21, r1
     cd4:	61 05       	cpc	r22, r1
     cd6:	71 05       	cpc	r23, r1
     cd8:	19 f4       	brne	.+6      	; 0xce0 <__unpack_f+0xb4>
     cda:	84 e0       	ldi	r24, 0x04	; 4
     cdc:	8c 93       	st	X, r24
     cde:	08 95       	ret
     ce0:	64 ff       	sbrs	r22, 4
     ce2:	03 c0       	rjmp	.+6      	; 0xcea <__unpack_f+0xbe>
     ce4:	81 e0       	ldi	r24, 0x01	; 1
     ce6:	8c 93       	st	X, r24
     ce8:	12 c0       	rjmp	.+36     	; 0xd0e <__unpack_f+0xe2>
     cea:	1c 92       	st	X, r1
     cec:	10 c0       	rjmp	.+32     	; 0xd0e <__unpack_f+0xe2>
     cee:	2f 57       	subi	r18, 0x7F	; 127
     cf0:	30 40       	sbci	r19, 0x00	; 0
     cf2:	13 96       	adiw	r26, 0x03	; 3
     cf4:	3c 93       	st	X, r19
     cf6:	2e 93       	st	-X, r18
     cf8:	12 97       	sbiw	r26, 0x02	; 2
     cfa:	83 e0       	ldi	r24, 0x03	; 3
     cfc:	8c 93       	st	X, r24
     cfe:	87 e0       	ldi	r24, 0x07	; 7
     d00:	44 0f       	add	r20, r20
     d02:	55 1f       	adc	r21, r21
     d04:	66 1f       	adc	r22, r22
     d06:	77 1f       	adc	r23, r23
     d08:	8a 95       	dec	r24
     d0a:	d1 f7       	brne	.-12     	; 0xd00 <__unpack_f+0xd4>
     d0c:	70 64       	ori	r23, 0x40	; 64
     d0e:	14 96       	adiw	r26, 0x04	; 4
     d10:	4d 93       	st	X+, r20
     d12:	5d 93       	st	X+, r21
     d14:	6d 93       	st	X+, r22
     d16:	7c 93       	st	X, r23
     d18:	17 97       	sbiw	r26, 0x07	; 7
     d1a:	08 95       	ret

00000d1c <__fpcmp_parts_f>:
     d1c:	1f 93       	push	r17
     d1e:	dc 01       	movw	r26, r24
     d20:	fb 01       	movw	r30, r22
     d22:	9c 91       	ld	r25, X
     d24:	92 30       	cpi	r25, 0x02	; 2
     d26:	08 f4       	brcc	.+2      	; 0xd2a <__fpcmp_parts_f+0xe>
     d28:	47 c0       	rjmp	.+142    	; 0xdb8 <__fpcmp_parts_f+0x9c>
     d2a:	80 81       	ld	r24, Z
     d2c:	82 30       	cpi	r24, 0x02	; 2
     d2e:	08 f4       	brcc	.+2      	; 0xd32 <__fpcmp_parts_f+0x16>
     d30:	43 c0       	rjmp	.+134    	; 0xdb8 <__fpcmp_parts_f+0x9c>
     d32:	94 30       	cpi	r25, 0x04	; 4
     d34:	51 f4       	brne	.+20     	; 0xd4a <__fpcmp_parts_f+0x2e>
     d36:	11 96       	adiw	r26, 0x01	; 1
     d38:	1c 91       	ld	r17, X
     d3a:	84 30       	cpi	r24, 0x04	; 4
     d3c:	99 f5       	brne	.+102    	; 0xda4 <__fpcmp_parts_f+0x88>
     d3e:	81 81       	ldd	r24, Z+1	; 0x01
     d40:	68 2f       	mov	r22, r24
     d42:	70 e0       	ldi	r23, 0x00	; 0
     d44:	61 1b       	sub	r22, r17
     d46:	71 09       	sbc	r23, r1
     d48:	3f c0       	rjmp	.+126    	; 0xdc8 <__fpcmp_parts_f+0xac>
     d4a:	84 30       	cpi	r24, 0x04	; 4
     d4c:	21 f0       	breq	.+8      	; 0xd56 <__fpcmp_parts_f+0x3a>
     d4e:	92 30       	cpi	r25, 0x02	; 2
     d50:	31 f4       	brne	.+12     	; 0xd5e <__fpcmp_parts_f+0x42>
     d52:	82 30       	cpi	r24, 0x02	; 2
     d54:	b9 f1       	breq	.+110    	; 0xdc4 <__fpcmp_parts_f+0xa8>
     d56:	81 81       	ldd	r24, Z+1	; 0x01
     d58:	88 23       	and	r24, r24
     d5a:	89 f1       	breq	.+98     	; 0xdbe <__fpcmp_parts_f+0xa2>
     d5c:	2d c0       	rjmp	.+90     	; 0xdb8 <__fpcmp_parts_f+0x9c>
     d5e:	11 96       	adiw	r26, 0x01	; 1
     d60:	1c 91       	ld	r17, X
     d62:	11 97       	sbiw	r26, 0x01	; 1
     d64:	82 30       	cpi	r24, 0x02	; 2
     d66:	f1 f0       	breq	.+60     	; 0xda4 <__fpcmp_parts_f+0x88>
     d68:	81 81       	ldd	r24, Z+1	; 0x01
     d6a:	18 17       	cp	r17, r24
     d6c:	d9 f4       	brne	.+54     	; 0xda4 <__fpcmp_parts_f+0x88>
     d6e:	12 96       	adiw	r26, 0x02	; 2
     d70:	2d 91       	ld	r18, X+
     d72:	3c 91       	ld	r19, X
     d74:	13 97       	sbiw	r26, 0x03	; 3
     d76:	82 81       	ldd	r24, Z+2	; 0x02
     d78:	93 81       	ldd	r25, Z+3	; 0x03
     d7a:	82 17       	cp	r24, r18
     d7c:	93 07       	cpc	r25, r19
     d7e:	94 f0       	brlt	.+36     	; 0xda4 <__fpcmp_parts_f+0x88>
     d80:	28 17       	cp	r18, r24
     d82:	39 07       	cpc	r19, r25
     d84:	bc f0       	brlt	.+46     	; 0xdb4 <__fpcmp_parts_f+0x98>
     d86:	14 96       	adiw	r26, 0x04	; 4
     d88:	8d 91       	ld	r24, X+
     d8a:	9d 91       	ld	r25, X+
     d8c:	0d 90       	ld	r0, X+
     d8e:	bc 91       	ld	r27, X
     d90:	a0 2d       	mov	r26, r0
     d92:	24 81       	ldd	r18, Z+4	; 0x04
     d94:	35 81       	ldd	r19, Z+5	; 0x05
     d96:	46 81       	ldd	r20, Z+6	; 0x06
     d98:	57 81       	ldd	r21, Z+7	; 0x07
     d9a:	28 17       	cp	r18, r24
     d9c:	39 07       	cpc	r19, r25
     d9e:	4a 07       	cpc	r20, r26
     da0:	5b 07       	cpc	r21, r27
     da2:	18 f4       	brcc	.+6      	; 0xdaa <__fpcmp_parts_f+0x8e>
     da4:	11 23       	and	r17, r17
     da6:	41 f0       	breq	.+16     	; 0xdb8 <__fpcmp_parts_f+0x9c>
     da8:	0a c0       	rjmp	.+20     	; 0xdbe <__fpcmp_parts_f+0xa2>
     daa:	82 17       	cp	r24, r18
     dac:	93 07       	cpc	r25, r19
     dae:	a4 07       	cpc	r26, r20
     db0:	b5 07       	cpc	r27, r21
     db2:	40 f4       	brcc	.+16     	; 0xdc4 <__fpcmp_parts_f+0xa8>
     db4:	11 23       	and	r17, r17
     db6:	19 f0       	breq	.+6      	; 0xdbe <__fpcmp_parts_f+0xa2>
     db8:	61 e0       	ldi	r22, 0x01	; 1
     dba:	70 e0       	ldi	r23, 0x00	; 0
     dbc:	05 c0       	rjmp	.+10     	; 0xdc8 <__fpcmp_parts_f+0xac>
     dbe:	6f ef       	ldi	r22, 0xFF	; 255
     dc0:	7f ef       	ldi	r23, 0xFF	; 255
     dc2:	02 c0       	rjmp	.+4      	; 0xdc8 <__fpcmp_parts_f+0xac>
     dc4:	60 e0       	ldi	r22, 0x00	; 0
     dc6:	70 e0       	ldi	r23, 0x00	; 0
     dc8:	cb 01       	movw	r24, r22
     dca:	1f 91       	pop	r17
     dcc:	08 95       	ret

00000dce <MCAL_TWI_voidMasterInit>:
#include"TWI.h"

void MCAL_TWI_voidMasterInit(void)
{
	//Enable TWI
	SET_BIT(TWCR,TWEN);
     dce:	86 b7       	in	r24, 0x36	; 54
     dd0:	84 60       	ori	r24, 0x04	; 4
     dd2:	86 bf       	out	0x36, r24	; 54
	//Enable Acknowledge
	SET_BIT(TWCR,TWEA);
     dd4:	86 b7       	in	r24, 0x36	; 54
     dd6:	80 64       	ori	r24, 0x40	; 64
     dd8:	86 bf       	out	0x36, r24	; 54
	//SCL Clock Frequency
	CLR_BIT(TWCR,TWPS1);
     dda:	86 b7       	in	r24, 0x36	; 54
     ddc:	8d 7f       	andi	r24, 0xFD	; 253
     dde:	86 bf       	out	0x36, r24	; 54
	CLR_BIT(TWCR,TWPS0);
     de0:	86 b7       	in	r24, 0x36	; 54
     de2:	8e 7f       	andi	r24, 0xFE	; 254
     de4:	86 bf       	out	0x36, r24	; 54
	TWBR = 152;	//50KHz
     de6:	88 e9       	ldi	r24, 0x98	; 152
     de8:	80 b9       	out	0x00, r24	; 0
}
     dea:	08 95       	ret

00000dec <MCAL_TWI_voidSlaveInit>:


void MCAL_TWI_voidSlaveInit(u8 LOC_u8SlaveAddress)
{
	//Enable TWI
	SET_BIT(TWCR,TWEN);
     dec:	96 b7       	in	r25, 0x36	; 54
     dee:	94 60       	ori	r25, 0x04	; 4
     df0:	96 bf       	out	0x36, r25	; 54
	//Enable Acknowledge
	SET_BIT(TWCR,TWEA);
     df2:	96 b7       	in	r25, 0x36	; 54
     df4:	90 64       	ori	r25, 0x40	; 64
     df6:	96 bf       	out	0x36, r25	; 54
	//Set Slave Address
	TWAR = LOC_u8SlaveAddress <<1 ;
     df8:	88 0f       	add	r24, r24
     dfa:	82 b9       	out	0x02, r24	; 2
	//Configure General Call
#if GENERAL_CALL 	== 	ENABLE
	SET_BIT(TWAR,TWGCE);
#elif	GENERAL_CALL 	== 		DISABLE
	CLR_BIT(TWAR,TWGCE);
     dfc:	10 98       	cbi	0x02, 0	; 2
#endif
	//CLR Interrupt Flag (TWINT)
	SET_BIT(TWCR,TWINT);
     dfe:	86 b7       	in	r24, 0x36	; 54
     e00:	80 68       	ori	r24, 0x80	; 128
     e02:	86 bf       	out	0x36, r24	; 54

}
     e04:	08 95       	ret

00000e06 <MCAL_TWI_voidStartCondition>:
void MCAL_TWI_voidStartCondition(void)
{
	//Set Start Condition Bit
	SET_BIT(TWCR,TWSTA);
     e06:	86 b7       	in	r24, 0x36	; 54
     e08:	80 62       	ori	r24, 0x20	; 32
     e0a:	86 bf       	out	0x36, r24	; 54
	//CLR Interrupt Flag (TWINT)
	SET_BIT(TWCR,TWINT);
     e0c:	86 b7       	in	r24, 0x36	; 54
     e0e:	80 68       	ori	r24, 0x80	; 128
     e10:	86 bf       	out	0x36, r24	; 54
	//wait until TWINT is Set.
	while((GET_BIT(TWCR,TWINT))==0);
     e12:	06 b6       	in	r0, 0x36	; 54
     e14:	07 fe       	sbrs	r0, 7
     e16:	fd cf       	rjmp	.-6      	; 0xe12 <MCAL_TWI_voidStartCondition+0xc>

}
     e18:	08 95       	ret

00000e1a <MCAL_TWI_voidRepeatedStartCondition>:

void MCAL_TWI_voidRepeatedStartCondition(void)
{
	//Set Start Condition Bit
	SET_BIT(TWCR,TWSTA);
     e1a:	86 b7       	in	r24, 0x36	; 54
     e1c:	80 62       	ori	r24, 0x20	; 32
     e1e:	86 bf       	out	0x36, r24	; 54
	//CLR Interrupt Flag (TWINT)
	SET_BIT(TWCR,TWINT);
     e20:	86 b7       	in	r24, 0x36	; 54
     e22:	80 68       	ori	r24, 0x80	; 128
     e24:	86 bf       	out	0x36, r24	; 54
	//wait until TWINT is Set.
	while((GET_BIT(TWCR,TWINT))==0);
     e26:	06 b6       	in	r0, 0x36	; 54
     e28:	07 fe       	sbrs	r0, 7
     e2a:	fd cf       	rjmp	.-6      	; 0xe26 <MCAL_TWI_voidRepeatedStartCondition+0xc>

}
     e2c:	08 95       	ret

00000e2e <MCAL_TWI_voidStopCondition>:

void MCAL_TWI_voidStopCondition(void)
{
	CLR_BIT(TWCR,TWSTA);
     e2e:	86 b7       	in	r24, 0x36	; 54
     e30:	8f 7d       	andi	r24, 0xDF	; 223
     e32:	86 bf       	out	0x36, r24	; 54
	//Set Stop Condition Bit
	SET_BIT(TWCR,TWSTO);
     e34:	86 b7       	in	r24, 0x36	; 54
     e36:	80 61       	ori	r24, 0x10	; 16
     e38:	86 bf       	out	0x36, r24	; 54
	//CLR Interrupt Flag (TWINT)
	SET_BIT(TWCR,TWINT);
     e3a:	86 b7       	in	r24, 0x36	; 54
     e3c:	80 68       	ori	r24, 0x80	; 128
     e3e:	86 bf       	out	0x36, r24	; 54
	//wait until TWINT is Set.
//	while((GET_BIT(TWCR,TWINT))==0);

}
     e40:	08 95       	ret

00000e42 <MCAL_TWI_voidSendSlaveAddressWithWrite>:
void MCAL_TWI_voidSendSlaveAddressWithWrite(u8 LOC_u8SlaveAddress)
{
	//Select Address
	TWDR = LOC_u8SlaveAddress << 1;
     e42:	88 0f       	add	r24, r24
     e44:	83 b9       	out	0x03, r24	; 3
	//write
	CLR_BIT(TWDR,0);
     e46:	18 98       	cbi	0x03, 0	; 3
	//Clear Start Condition Bit
	CLR_BIT(TWCR,TWSTA);
     e48:	86 b7       	in	r24, 0x36	; 54
     e4a:	8f 7d       	andi	r24, 0xDF	; 223
     e4c:	86 bf       	out	0x36, r24	; 54
	//CLR Interrupt Flag (TWINT)
	SET_BIT(TWCR,TWINT);
     e4e:	86 b7       	in	r24, 0x36	; 54
     e50:	80 68       	ori	r24, 0x80	; 128
     e52:	86 bf       	out	0x36, r24	; 54
	while((GET_BIT(TWCR,TWINT))==0);
     e54:	06 b6       	in	r0, 0x36	; 54
     e56:	07 fe       	sbrs	r0, 7
     e58:	fd cf       	rjmp	.-6      	; 0xe54 <MCAL_TWI_voidSendSlaveAddressWithWrite+0x12>

}
     e5a:	08 95       	ret

00000e5c <MCAL_TWI_voidSendSlaveAddressWithRead>:

void MCAL_TWI_voidSendSlaveAddressWithRead(u8 LOC_u8SlaveAddress)
{
	//Select Address
	TWDR = LOC_u8SlaveAddress << 1;
     e5c:	88 0f       	add	r24, r24
     e5e:	83 b9       	out	0x03, r24	; 3
	//Read
	SET_BIT(TWDR,0);
     e60:	18 9a       	sbi	0x03, 0	; 3
	//Clear Start Condition Bit
	CLR_BIT(TWCR,TWSTA);
     e62:	86 b7       	in	r24, 0x36	; 54
     e64:	8f 7d       	andi	r24, 0xDF	; 223
     e66:	86 bf       	out	0x36, r24	; 54
	//CLR Interrupt Flag (TWINT)
	SET_BIT(TWCR,TWINT);
     e68:	86 b7       	in	r24, 0x36	; 54
     e6a:	80 68       	ori	r24, 0x80	; 128
     e6c:	86 bf       	out	0x36, r24	; 54
	while((GET_BIT(TWCR,TWINT))==0);
     e6e:	06 b6       	in	r0, 0x36	; 54
     e70:	07 fe       	sbrs	r0, 7
     e72:	fd cf       	rjmp	.-6      	; 0xe6e <MCAL_TWI_voidSendSlaveAddressWithRead+0x12>

}
     e74:	08 95       	ret

00000e76 <MCAL_TWI_voidMasterReceiveData>:

void MCAL_TWI_voidMasterReceiveData(u8* LOC_Pu8Data)
{
     e76:	fc 01       	movw	r30, r24
	//Set Acknowledge.
	SET_BIT(TWCR,TWEA);
     e78:	86 b7       	in	r24, 0x36	; 54
     e7a:	80 64       	ori	r24, 0x40	; 64
     e7c:	86 bf       	out	0x36, r24	; 54
	//CLR Interrupt Flag (TWINT)
	SET_BIT(TWCR,TWINT);
     e7e:	86 b7       	in	r24, 0x36	; 54
     e80:	80 68       	ori	r24, 0x80	; 128
     e82:	86 bf       	out	0x36, r24	; 54
	while((GET_BIT(TWCR,TWINT))==0);
     e84:	06 b6       	in	r0, 0x36	; 54
     e86:	07 fe       	sbrs	r0, 7
     e88:	fd cf       	rjmp	.-6      	; 0xe84 <MCAL_TWI_voidMasterReceiveData+0xe>
	*LOC_Pu8Data = TWDR;
     e8a:	83 b1       	in	r24, 0x03	; 3
     e8c:	80 83       	st	Z, r24
}
     e8e:	08 95       	ret

00000e90 <MCAL_TWI_voidMasterSendData>:
void MCAL_TWI_voidMasterSendData(u8 LOC_u8Data)
{
	TWDR = LOC_u8Data;
     e90:	83 b9       	out	0x03, r24	; 3
	//CLR Interrupt Flag (TWINT)
	SET_BIT(TWCR,TWINT);
     e92:	86 b7       	in	r24, 0x36	; 54
     e94:	80 68       	ori	r24, 0x80	; 128
     e96:	86 bf       	out	0x36, r24	; 54
	while((GET_BIT(TWCR,TWINT))==0);
     e98:	06 b6       	in	r0, 0x36	; 54
     e9a:	07 fe       	sbrs	r0, 7
     e9c:	fd cf       	rjmp	.-6      	; 0xe98 <MCAL_TWI_voidMasterSendData+0x8>

}
     e9e:	08 95       	ret

00000ea0 <MCAL_TWI_voidSlaveListen>:
void MCAL_TWI_voidSlaveListen(void)
{
	while((GET_BIT(TWCR,TWINT))==0);
     ea0:	06 b6       	in	r0, 0x36	; 54
     ea2:	07 fe       	sbrs	r0, 7
     ea4:	fd cf       	rjmp	.-6      	; 0xea0 <MCAL_TWI_voidSlaveListen>
}
     ea6:	08 95       	ret

00000ea8 <MCAL_TWI_voidMasterReceiveDataNACK>:


void MCAL_TWI_voidMasterReceiveDataNACK(u8* LOC_Pu8Data)
{
     ea8:	fc 01       	movw	r30, r24
	//Clear Acknowledge.
	CLR_BIT(TWCR,TWEA);
     eaa:	86 b7       	in	r24, 0x36	; 54
     eac:	8f 7b       	andi	r24, 0xBF	; 191
     eae:	86 bf       	out	0x36, r24	; 54
	//CLR Interrupt Flag (TWINT)
	SET_BIT(TWCR,TWINT);
     eb0:	86 b7       	in	r24, 0x36	; 54
     eb2:	80 68       	ori	r24, 0x80	; 128
     eb4:	86 bf       	out	0x36, r24	; 54
	while((GET_BIT(TWCR,TWINT))==0);
     eb6:	06 b6       	in	r0, 0x36	; 54
     eb8:	07 fe       	sbrs	r0, 7
     eba:	fd cf       	rjmp	.-6      	; 0xeb6 <MCAL_TWI_voidMasterReceiveDataNACK+0xe>
	*LOC_Pu8Data = TWDR;
     ebc:	83 b1       	in	r24, 0x03	; 3
     ebe:	80 83       	st	Z, r24
}
     ec0:	08 95       	ret

00000ec2 <MCAL_TIMER_Timer0_Init>:
static void (*GLOB_PTimer0COMP_CallBack)(void) = NULL;

void MCAL_TIMER_Timer0_Init(u8 LOC_u8Timer0Mode,u8 LOC_u8Prescaler,u8 LOC_u8OCR0Mode)
{
	//Timer Mode
	if (LOC_u8Timer0Mode == NORMAL)
     ec2:	88 23       	and	r24, r24
     ec4:	31 f5       	brne	.+76     	; 0xf12 <MCAL_TIMER_Timer0_Init+0x50>
	{
		CLR_BIT(TCCR0,WGM00);
     ec6:	83 b7       	in	r24, 0x33	; 51
     ec8:	8f 7b       	andi	r24, 0xBF	; 191
     eca:	83 bf       	out	0x33, r24	; 51
		CLR_BIT(TCCR0,WGM01);
     ecc:	83 b7       	in	r24, 0x33	; 51
     ece:	87 7f       	andi	r24, 0xF7	; 247
     ed0:	83 bf       	out	0x33, r24	; 51
		if (LOC_u8OCR0Mode == NORMAL_OC0)
     ed2:	44 23       	and	r20, r20
     ed4:	a9 f5       	brne	.+106    	; 0xf40 <MCAL_TIMER_Timer0_Init+0x7e>
	{
		SET_BIT(TCCR0,WGM00);
		SET_BIT(TCCR0,WGM01);
		if (LOC_u8OCR0Mode == NORMAL_OC0)
		{
			CLR_BIT(TCCR0,COM01);
     ed6:	83 b7       	in	r24, 0x33	; 51
     ed8:	8f 7d       	andi	r24, 0xDF	; 223
     eda:	83 bf       	out	0x33, r24	; 51
			CLR_BIT(TCCR0,COM00);
     edc:	83 b7       	in	r24, 0x33	; 51
     ede:	8f 7e       	andi	r24, 0xEF	; 239
     ee0:	83 bf       	out	0x33, r24	; 51
		else {/*Do Nothing*/}

	}

	//Select Clock & Perscaler
	if (LOC_u8Prescaler == CLK_OFF)
     ee2:	66 23       	and	r22, r22
     ee4:	d9 f1       	breq	.+118    	; 0xf5c <MCAL_TIMER_Timer0_Init+0x9a>
	{
		CLR_BIT(TCCR0,CS02);
		CLR_BIT(TCCR0,CS01);
		CLR_BIT(TCCR0,CS00);
	}
	else if (LOC_u8Prescaler == CLK_PRE1)
     ee6:	61 30       	cpi	r22, 0x01	; 1
     ee8:	09 f4       	brne	.+2      	; 0xeec <MCAL_TIMER_Timer0_Init+0x2a>
     eea:	5b c0       	rjmp	.+182    	; 0xfa2 <MCAL_TIMER_Timer0_Init+0xe0>
	{
		CLR_BIT(TCCR0,CS02);
		CLR_BIT(TCCR0,CS01);
		SET_BIT(TCCR0,CS00);
	}
	else if (LOC_u8Prescaler == CLK_PRE8)
     eec:	62 30       	cpi	r22, 0x02	; 2
     eee:	09 f4       	brne	.+2      	; 0xef2 <MCAL_TIMER_Timer0_Init+0x30>
     ef0:	62 c0       	rjmp	.+196    	; 0xfb6 <MCAL_TIMER_Timer0_Init+0xf4>
	{
		CLR_BIT(TCCR0,CS02);
		SET_BIT(TCCR0,CS01);
		CLR_BIT(TCCR0,CS00);
	}
	else if (LOC_u8Prescaler == CLK_PRE64)
     ef2:	63 30       	cpi	r22, 0x03	; 3
     ef4:	09 f4       	brne	.+2      	; 0xef8 <MCAL_TIMER_Timer0_Init+0x36>
     ef6:	70 c0       	rjmp	.+224    	; 0xfd8 <MCAL_TIMER_Timer0_Init+0x116>
	{
		CLR_BIT(TCCR0,CS02);
		SET_BIT(TCCR0,CS01);
		SET_BIT(TCCR0,CS00);
	}
	else if (LOC_u8Prescaler == CLK_PRE256)
     ef8:	64 30       	cpi	r22, 0x04	; 4
     efa:	09 f4       	brne	.+2      	; 0xefe <MCAL_TIMER_Timer0_Init+0x3c>
     efc:	4f c0       	rjmp	.+158    	; 0xf9c <MCAL_TIMER_Timer0_Init+0xda>
	{
		SET_BIT(TCCR0,CS02);
		CLR_BIT(TCCR0,CS01);
		CLR_BIT(TCCR0,CS00);
	}
	else if (LOC_u8Prescaler == CLK_PRE1024)
     efe:	65 30       	cpi	r22, 0x05	; 5
     f00:	09 f4       	brne	.+2      	; 0xf04 <MCAL_TIMER_Timer0_Init+0x42>
     f02:	4c c0       	rjmp	.+152    	; 0xf9c <MCAL_TIMER_Timer0_Init+0xda>
	{
		SET_BIT(TCCR0,CS02);
		CLR_BIT(TCCR0,CS01);
		CLR_BIT(TCCR0,CS00);
	}
	else if (LOC_u8Prescaler == EXTCLK_FALLING)
     f04:	66 30       	cpi	r22, 0x06	; 6
     f06:	09 f4       	brne	.+2      	; 0xf0a <MCAL_TIMER_Timer0_Init+0x48>
     f08:	7b c0       	rjmp	.+246    	; 0x1000 <MCAL_TIMER_Timer0_Init+0x13e>
	{
		SET_BIT(TCCR0,CS02);
		SET_BIT(TCCR0,CS01);
		CLR_BIT(TCCR0,CS00);
	}
	else if (LOC_u8Prescaler == EXTCLK_RISING)
     f0a:	67 30       	cpi	r22, 0x07	; 7
     f0c:	09 f4       	brne	.+2      	; 0xf10 <MCAL_TIMER_Timer0_Init+0x4e>
     f0e:	6e c0       	rjmp	.+220    	; 0xfec <MCAL_TIMER_Timer0_Init+0x12a>
     f10:	08 95       	ret
			SET_BIT(TCCR0,COM00);
		}
		else{/*Do Nothing*/}

	}
	else if (LOC_u8Timer0Mode == PWM_PHASECORRECT)
     f12:	81 30       	cpi	r24, 0x01	; 1
     f14:	69 f1       	breq	.+90     	; 0xf70 <MCAL_TIMER_Timer0_Init+0xae>
			SET_BIT(TCCR0,COM00);
		}
		else{/*Do Nothing*/}
	}

	else if (LOC_u8Timer0Mode == CTC)
     f16:	82 30       	cpi	r24, 0x02	; 2
     f18:	59 f0       	breq	.+22     	; 0xf30 <MCAL_TIMER_Timer0_Init+0x6e>
			SET_BIT(TCCR0,COM00);
		}
		else {/*Do Nothiing*/}

	}
	else if (LOC_u8Timer0Mode == FAST_PWM)
     f1a:	83 30       	cpi	r24, 0x03	; 3
     f1c:	11 f7       	brne	.-60     	; 0xee2 <MCAL_TIMER_Timer0_Init+0x20>
	{
		SET_BIT(TCCR0,WGM00);
     f1e:	83 b7       	in	r24, 0x33	; 51
     f20:	80 64       	ori	r24, 0x40	; 64
     f22:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TCCR0,WGM01);
     f24:	83 b7       	in	r24, 0x33	; 51
     f26:	88 60       	ori	r24, 0x08	; 8
     f28:	83 bf       	out	0x33, r24	; 51
		if (LOC_u8OCR0Mode == NORMAL_OC0)
     f2a:	44 23       	and	r20, r20
     f2c:	51 f5       	brne	.+84     	; 0xf82 <MCAL_TIMER_Timer0_Init+0xc0>
     f2e:	d3 cf       	rjmp	.-90     	; 0xed6 <MCAL_TIMER_Timer0_Init+0x14>
		else{/*Do Nothing*/}
	}

	else if (LOC_u8Timer0Mode == CTC)
	{
		CLR_BIT(TCCR0,WGM00);
     f30:	83 b7       	in	r24, 0x33	; 51
     f32:	8f 7b       	andi	r24, 0xBF	; 191
     f34:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TCCR0,WGM01);
     f36:	83 b7       	in	r24, 0x33	; 51
     f38:	88 60       	ori	r24, 0x08	; 8
     f3a:	83 bf       	out	0x33, r24	; 51
		if (LOC_u8OCR0Mode == NORMAL_OC0)
     f3c:	44 23       	and	r20, r20
     f3e:	59 f2       	breq	.-106    	; 0xed6 <MCAL_TIMER_Timer0_Init+0x14>
		{
			CLR_BIT(TCCR0,COM01);
			CLR_BIT(TCCR0,COM00);
		}
		else if (LOC_u8OCR0Mode == TOG_OC0)
     f40:	41 30       	cpi	r20, 0x01	; 1
     f42:	09 f4       	brne	.+2      	; 0xf46 <MCAL_TIMER_Timer0_Init+0x84>
     f44:	42 c0       	rjmp	.+132    	; 0xfca <MCAL_TIMER_Timer0_Init+0x108>
		{
			CLR_BIT(TCCR0,COM01);
			SET_BIT(TCCR0,COM00);
		}
		else if (LOC_u8OCR0Mode == CLR_OC0)
     f46:	42 30       	cpi	r20, 0x02	; 2
     f48:	11 f1       	breq	.+68     	; 0xf8e <MCAL_TIMER_Timer0_Init+0xcc>
		{
			SET_BIT(TCCR0,COM01);
			CLR_BIT(TCCR0,COM00);
		}
		else if (LOC_u8OCR0Mode == SET_OC0)
     f4a:	43 30       	cpi	r20, 0x03	; 3
     f4c:	51 f6       	brne	.-108    	; 0xee2 <MCAL_TIMER_Timer0_Init+0x20>
			SET_BIT(TCCR0,COM01);
			CLR_BIT(TCCR0,COM00);
		}
		else if (LOC_u8OCR0Mode == INVERTING_OC0)
		{
			SET_BIT(TCCR0,COM01);
     f4e:	83 b7       	in	r24, 0x33	; 51
     f50:	80 62       	ori	r24, 0x20	; 32
     f52:	83 bf       	out	0x33, r24	; 51
			SET_BIT(TCCR0,COM00);
     f54:	83 b7       	in	r24, 0x33	; 51
     f56:	80 61       	ori	r24, 0x10	; 16
     f58:	83 bf       	out	0x33, r24	; 51
     f5a:	c3 cf       	rjmp	.-122    	; 0xee2 <MCAL_TIMER_Timer0_Init+0x20>
	}

	//Select Clock & Perscaler
	if (LOC_u8Prescaler == CLK_OFF)
	{
		CLR_BIT(TCCR0,CS02);
     f5c:	83 b7       	in	r24, 0x33	; 51
     f5e:	8b 7f       	andi	r24, 0xFB	; 251
		CLR_BIT(TCCR0,CS01);
		CLR_BIT(TCCR0,CS00);
	}
	else if (LOC_u8Prescaler == CLK_PRE1024)
	{
		SET_BIT(TCCR0,CS02);
     f60:	83 bf       	out	0x33, r24	; 51
		CLR_BIT(TCCR0,CS01);
     f62:	83 b7       	in	r24, 0x33	; 51
     f64:	8d 7f       	andi	r24, 0xFD	; 253
     f66:	83 bf       	out	0x33, r24	; 51
		CLR_BIT(TCCR0,CS00);
     f68:	83 b7       	in	r24, 0x33	; 51
     f6a:	8e 7f       	andi	r24, 0xFE	; 254
     f6c:	83 bf       	out	0x33, r24	; 51
     f6e:	08 95       	ret

	}
	else if (LOC_u8Timer0Mode == PWM_PHASECORRECT)
	{

		SET_BIT(TCCR0,WGM00);
     f70:	83 b7       	in	r24, 0x33	; 51
     f72:	80 64       	ori	r24, 0x40	; 64
     f74:	83 bf       	out	0x33, r24	; 51
		CLR_BIT(TCCR0,WGM01);
     f76:	83 b7       	in	r24, 0x33	; 51
     f78:	87 7f       	andi	r24, 0xF7	; 247
     f7a:	83 bf       	out	0x33, r24	; 51
		if (LOC_u8OCR0Mode == NORMAL_OC0)
     f7c:	44 23       	and	r20, r20
     f7e:	09 f4       	brne	.+2      	; 0xf82 <MCAL_TIMER_Timer0_Init+0xc0>
     f80:	aa cf       	rjmp	.-172    	; 0xed6 <MCAL_TIMER_Timer0_Init+0x14>
		if (LOC_u8OCR0Mode == NORMAL_OC0)
		{
			CLR_BIT(TCCR0,COM01);
			CLR_BIT(TCCR0,COM00);
		}
		else if (LOC_u8OCR0Mode == NON_INVERTING_OC0)
     f82:	41 30       	cpi	r20, 0x01	; 1
     f84:	21 f0       	breq	.+8      	; 0xf8e <MCAL_TIMER_Timer0_Init+0xcc>
		{
			SET_BIT(TCCR0,COM01);
			CLR_BIT(TCCR0,COM00);
		}
		else if (LOC_u8OCR0Mode == INVERTING_OC0)
     f86:	42 30       	cpi	r20, 0x02	; 2
     f88:	09 f0       	breq	.+2      	; 0xf8c <MCAL_TIMER_Timer0_Init+0xca>
     f8a:	ab cf       	rjmp	.-170    	; 0xee2 <MCAL_TIMER_Timer0_Init+0x20>
     f8c:	e0 cf       	rjmp	.-64     	; 0xf4e <MCAL_TIMER_Timer0_Init+0x8c>
			CLR_BIT(TCCR0,COM01);
			CLR_BIT(TCCR0,COM00);
		}
		else if (LOC_u8OCR0Mode == NON_INVERTING_OC0)
		{
			SET_BIT(TCCR0,COM01);
     f8e:	83 b7       	in	r24, 0x33	; 51
     f90:	80 62       	ori	r24, 0x20	; 32
     f92:	83 bf       	out	0x33, r24	; 51
			CLR_BIT(TCCR0,COM00);
     f94:	83 b7       	in	r24, 0x33	; 51
     f96:	8f 7e       	andi	r24, 0xEF	; 239
     f98:	83 bf       	out	0x33, r24	; 51
     f9a:	a3 cf       	rjmp	.-186    	; 0xee2 <MCAL_TIMER_Timer0_Init+0x20>
		CLR_BIT(TCCR0,CS01);
		CLR_BIT(TCCR0,CS00);
	}
	else if (LOC_u8Prescaler == CLK_PRE1024)
	{
		SET_BIT(TCCR0,CS02);
     f9c:	83 b7       	in	r24, 0x33	; 51
     f9e:	84 60       	ori	r24, 0x04	; 4
     fa0:	df cf       	rjmp	.-66     	; 0xf60 <MCAL_TIMER_Timer0_Init+0x9e>
		CLR_BIT(TCCR0,CS01);
		CLR_BIT(TCCR0,CS00);
	}
	else if (LOC_u8Prescaler == CLK_PRE1)
	{
		CLR_BIT(TCCR0,CS02);
     fa2:	83 b7       	in	r24, 0x33	; 51
     fa4:	8b 7f       	andi	r24, 0xFB	; 251
     fa6:	83 bf       	out	0x33, r24	; 51
		CLR_BIT(TCCR0,CS01);
     fa8:	83 b7       	in	r24, 0x33	; 51
     faa:	8d 7f       	andi	r24, 0xFD	; 253
     fac:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TCCR0,CS00);
     fae:	83 b7       	in	r24, 0x33	; 51
     fb0:	81 60       	ori	r24, 0x01	; 1
     fb2:	83 bf       	out	0x33, r24	; 51
     fb4:	08 95       	ret
	}
	else if (LOC_u8Prescaler == CLK_PRE8)
	{
		CLR_BIT(TCCR0,CS02);
     fb6:	83 b7       	in	r24, 0x33	; 51
     fb8:	8b 7f       	andi	r24, 0xFB	; 251
		CLR_BIT(TCCR0,CS01);
		CLR_BIT(TCCR0,CS00);
	}
	else if (LOC_u8Prescaler == EXTCLK_FALLING)
	{
		SET_BIT(TCCR0,CS02);
     fba:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TCCR0,CS01);
     fbc:	83 b7       	in	r24, 0x33	; 51
     fbe:	82 60       	ori	r24, 0x02	; 2
     fc0:	83 bf       	out	0x33, r24	; 51
		CLR_BIT(TCCR0,CS00);
     fc2:	83 b7       	in	r24, 0x33	; 51
     fc4:	8e 7f       	andi	r24, 0xFE	; 254
     fc6:	83 bf       	out	0x33, r24	; 51
     fc8:	08 95       	ret
			CLR_BIT(TCCR0,COM01);
			CLR_BIT(TCCR0,COM00);
		}
		else if (LOC_u8OCR0Mode == TOG_OC0)
		{
			CLR_BIT(TCCR0,COM01);
     fca:	83 b7       	in	r24, 0x33	; 51
     fcc:	8f 7d       	andi	r24, 0xDF	; 223
     fce:	83 bf       	out	0x33, r24	; 51
			SET_BIT(TCCR0,COM00);
     fd0:	83 b7       	in	r24, 0x33	; 51
     fd2:	80 61       	ori	r24, 0x10	; 16
     fd4:	83 bf       	out	0x33, r24	; 51
     fd6:	85 cf       	rjmp	.-246    	; 0xee2 <MCAL_TIMER_Timer0_Init+0x20>
		SET_BIT(TCCR0,CS01);
		CLR_BIT(TCCR0,CS00);
	}
	else if (LOC_u8Prescaler == CLK_PRE64)
	{
		CLR_BIT(TCCR0,CS02);
     fd8:	83 b7       	in	r24, 0x33	; 51
     fda:	8b 7f       	andi	r24, 0xFB	; 251
     fdc:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TCCR0,CS01);
     fde:	83 b7       	in	r24, 0x33	; 51
     fe0:	82 60       	ori	r24, 0x02	; 2
     fe2:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TCCR0,CS00);
     fe4:	83 b7       	in	r24, 0x33	; 51
     fe6:	81 60       	ori	r24, 0x01	; 1
     fe8:	83 bf       	out	0x33, r24	; 51
     fea:	08 95       	ret
		SET_BIT(TCCR0,CS01);
		CLR_BIT(TCCR0,CS00);
	}
	else if (LOC_u8Prescaler == EXTCLK_RISING)
	{
		SET_BIT(TCCR0,CS02);
     fec:	83 b7       	in	r24, 0x33	; 51
     fee:	84 60       	ori	r24, 0x04	; 4
     ff0:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TCCR0,CS01);
     ff2:	83 b7       	in	r24, 0x33	; 51
     ff4:	82 60       	ori	r24, 0x02	; 2
     ff6:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TCCR0,CS00);
     ff8:	83 b7       	in	r24, 0x33	; 51
     ffa:	81 60       	ori	r24, 0x01	; 1
     ffc:	83 bf       	out	0x33, r24	; 51
     ffe:	08 95       	ret
		CLR_BIT(TCCR0,CS01);
		CLR_BIT(TCCR0,CS00);
	}
	else if (LOC_u8Prescaler == EXTCLK_FALLING)
	{
		SET_BIT(TCCR0,CS02);
    1000:	83 b7       	in	r24, 0x33	; 51
    1002:	84 60       	ori	r24, 0x04	; 4
    1004:	da cf       	rjmp	.-76     	; 0xfba <MCAL_TIMER_Timer0_Init+0xf8>

00001006 <MCAL_TIMER_Timer0_SetPreloadValue>:

}

void MCAL_TIMER_Timer0_SetPreloadValue(u8 LOC_u8Value)
{
	TCNT0 = LOC_u8Value;
    1006:	82 bf       	out	0x32, r24	; 50
}
    1008:	08 95       	ret

0000100a <MCAL_TIMER_Timer0_SetCompareValue>:
void MCAL_TIMER_Timer0_SetCompareValue(u8 LOC_u8Value)
{
	OCR0 = LOC_u8Value;
    100a:	8c bf       	out	0x3c, r24	; 60
}
    100c:	08 95       	ret

0000100e <MCAL_TIMER_Timer0_InterruptOVF_Enable>:


void MCAL_TIMER_Timer0_InterruptOVF_Enable(void)
{
	/* To Enable Timer0 OVF Interrupt */
	SET_BIT(TIMSK,TOIE0);
    100e:	89 b7       	in	r24, 0x39	; 57
    1010:	81 60       	ori	r24, 0x01	; 1
    1012:	89 bf       	out	0x39, r24	; 57
}
    1014:	08 95       	ret

00001016 <MCAL_TIMER_Timer0_InterruptOVF_Disable>:
void MCAL_TIMER_Timer0_InterruptOVF_Disable(void)
{
	/* To Disable Timer0 OVF Interrupt */
	CLR_BIT(TIMSK,TOIE0);
    1016:	89 b7       	in	r24, 0x39	; 57
    1018:	8e 7f       	andi	r24, 0xFE	; 254
    101a:	89 bf       	out	0x39, r24	; 57
}
    101c:	08 95       	ret

0000101e <MCAL_TIMER_Timer0_InterruptCompare_Enable>:


void MCAL_TIMER_Timer0_InterruptCompare_Enable(void)
{
	/* To Enable Timer0 OVF Interrupt */
	SET_BIT(TIMSK,OCIE0);
    101e:	89 b7       	in	r24, 0x39	; 57
    1020:	82 60       	ori	r24, 0x02	; 2
    1022:	89 bf       	out	0x39, r24	; 57
}
    1024:	08 95       	ret

00001026 <MCAL_TIMER_Timer0_InterruptCompare_Disable>:
void MCAL_TIMER_Timer0_InterruptCompare_Disable(void)
{
	/* To Disable Timer0 OVF Interrupt */
	CLR_BIT(TIMSK,OCIE0);
    1026:	89 b7       	in	r24, 0x39	; 57
    1028:	8d 7f       	andi	r24, 0xFD	; 253
    102a:	89 bf       	out	0x39, r24	; 57
}
    102c:	08 95       	ret

0000102e <MCAL_TIMER_voidTimer0_OVFSetCallBack>:


void MCAL_TIMER_voidTimer0_OVFSetCallBack(void(*Timer0Action)(void))
{
	if (Timer0Action != NULL)
    102e:	00 97       	sbiw	r24, 0x00	; 0
    1030:	21 f0       	breq	.+8      	; 0x103a <MCAL_TIMER_voidTimer0_OVFSetCallBack+0xc>
	{
		GLOB_PTimer0OVF_CallBack = Timer0Action;
    1032:	90 93 47 03 	sts	0x0347, r25
    1036:	80 93 46 03 	sts	0x0346, r24
    103a:	08 95       	ret

0000103c <MCAL_TIMER_voidTimer0_COMPSetCallBack>:
	}
}
void MCAL_TIMER_voidTimer0_COMPSetCallBack(void(*Timer0Action)(void))
{
	if (Timer0Action != NULL)
    103c:	00 97       	sbiw	r24, 0x00	; 0
    103e:	21 f0       	breq	.+8      	; 0x1048 <MCAL_TIMER_voidTimer0_COMPSetCallBack+0xc>
	{
		GLOB_PTimer0COMP_CallBack = Timer0Action;
    1040:	90 93 45 03 	sts	0x0345, r25
    1044:	80 93 44 03 	sts	0x0344, r24
    1048:	08 95       	ret

0000104a <DelayUs>:
	}
}

void DelayUs(u32 LOC_u32Time)
{
    104a:	af 92       	push	r10
    104c:	bf 92       	push	r11
    104e:	cf 92       	push	r12
    1050:	df 92       	push	r13
    1052:	ef 92       	push	r14
    1054:	ff 92       	push	r15
    1056:	0f 93       	push	r16
    1058:	1f 93       	push	r17
    105a:	7b 01       	movw	r14, r22
    105c:	8c 01       	movw	r16, r24
	u32 Tick,OVF_Time,Perscaler = 256,Preload;
	f32 OVF_Number;
	Tick = Perscaler/CLK;
	OVF_Time = Tick * OVF_Count;
	OVF_Number = LOC_u32Time/OVF_Time;
    105e:	2c e0       	ldi	r18, 0x0C	; 12
    1060:	96 95       	lsr	r25
    1062:	87 95       	ror	r24
    1064:	77 95       	ror	r23
    1066:	67 95       	ror	r22
    1068:	2a 95       	dec	r18
    106a:	d1 f7       	brne	.-12     	; 0x1060 <DelayUs+0x16>
    106c:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__floatunsisf>
    1070:	5b 01       	movw	r10, r22
    1072:	6c 01       	movw	r12, r24
	Preload = OVF_Count - ( (((f32) LOC_u32Time/OVF_Count)-OVF_Number) * OVF_Count);
    1074:	c8 01       	movw	r24, r16
    1076:	b7 01       	movw	r22, r14
    1078:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__floatunsisf>
    107c:	20 e0       	ldi	r18, 0x00	; 0
    107e:	30 e0       	ldi	r19, 0x00	; 0
    1080:	40 e8       	ldi	r20, 0x80	; 128
    1082:	5b e3       	ldi	r21, 0x3B	; 59
    1084:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1088:	a6 01       	movw	r20, r12
    108a:	95 01       	movw	r18, r10
    108c:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1090:	20 e0       	ldi	r18, 0x00	; 0
    1092:	30 e0       	ldi	r19, 0x00	; 0
    1094:	40 e8       	ldi	r20, 0x80	; 128
    1096:	53 ec       	ldi	r21, 0xC3	; 195
    1098:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    109c:	20 e0       	ldi	r18, 0x00	; 0
    109e:	30 e0       	ldi	r19, 0x00	; 0
    10a0:	40 e8       	ldi	r20, 0x80	; 128
    10a2:	53 e4       	ldi	r21, 0x43	; 67
    10a4:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    10a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
	if(Preload!=0)
    10ac:	61 15       	cp	r22, r1
    10ae:	71 05       	cpc	r23, r1
    10b0:	81 05       	cpc	r24, r1
    10b2:	91 05       	cpc	r25, r1
    10b4:	59 f0       	breq	.+22     	; 0x10cc <DelayUs+0x82>

}

void MCAL_TIMER_Timer0_SetPreloadValue(u8 LOC_u8Value)
{
	TCNT0 = LOC_u8Value;
    10b6:	62 bf       	out	0x32, r22	; 50
	OVF_Number = LOC_u32Time/OVF_Time;
	Preload = OVF_Count - ( (((f32) LOC_u32Time/OVF_Count)-OVF_Number) * OVF_Count);
	if(Preload!=0)
	{
		MCAL_TIMER_Timer0_SetPreloadValue((u8)Preload);
		OVF_Number++;
    10b8:	c6 01       	movw	r24, r12
    10ba:	b5 01       	movw	r22, r10
    10bc:	20 e0       	ldi	r18, 0x00	; 0
    10be:	30 e0       	ldi	r19, 0x00	; 0
    10c0:	40 e8       	ldi	r20, 0x80	; 128
    10c2:	5f e3       	ldi	r21, 0x3F	; 63
    10c4:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    10c8:	5b 01       	movw	r10, r22
    10ca:	6c 01       	movw	r12, r24
	}
	else
	{
		//Do Nothing.
	}
	while(OVF_Number--)
    10cc:	c6 01       	movw	r24, r12
    10ce:	b5 01       	movw	r22, r10
    10d0:	20 e0       	ldi	r18, 0x00	; 0
    10d2:	30 e0       	ldi	r19, 0x00	; 0
    10d4:	40 e0       	ldi	r20, 0x00	; 0
    10d6:	50 e0       	ldi	r21, 0x00	; 0
    10d8:	0e 94 c5 03 	call	0x78a	; 0x78a <__nesf2>
    10dc:	88 23       	and	r24, r24
    10de:	29 f1       	breq	.+74     	; 0x112a <DelayUs+0xe0>
    10e0:	c6 01       	movw	r24, r12
    10e2:	b5 01       	movw	r22, r10
    10e4:	20 e0       	ldi	r18, 0x00	; 0
    10e6:	30 e0       	ldi	r19, 0x00	; 0
    10e8:	40 e8       	ldi	r20, 0x80	; 128
    10ea:	5f e3       	ldi	r21, 0x3F	; 63
    10ec:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    10f0:	7b 01       	movw	r14, r22
    10f2:	8c 01       	movw	r16, r24
	{
		while(GET_BIT(TIFR,TOV0)==0);
    10f4:	08 b6       	in	r0, 0x38	; 56
    10f6:	00 fe       	sbrs	r0, 0
    10f8:	fd cf       	rjmp	.-6      	; 0x10f4 <DelayUs+0xaa>
		SET_BIT(TIFR,TOV0);
    10fa:	88 b7       	in	r24, 0x38	; 56
    10fc:	81 60       	ori	r24, 0x01	; 1
    10fe:	88 bf       	out	0x38, r24	; 56
	}
	else
	{
		//Do Nothing.
	}
	while(OVF_Number--)
    1100:	c8 01       	movw	r24, r16
    1102:	b7 01       	movw	r22, r14
    1104:	20 e0       	ldi	r18, 0x00	; 0
    1106:	30 e0       	ldi	r19, 0x00	; 0
    1108:	40 e0       	ldi	r20, 0x00	; 0
    110a:	50 e0       	ldi	r21, 0x00	; 0
    110c:	0e 94 c5 03 	call	0x78a	; 0x78a <__nesf2>
    1110:	88 23       	and	r24, r24
    1112:	59 f0       	breq	.+22     	; 0x112a <DelayUs+0xe0>
    1114:	c8 01       	movw	r24, r16
    1116:	b7 01       	movw	r22, r14
    1118:	20 e0       	ldi	r18, 0x00	; 0
    111a:	30 e0       	ldi	r19, 0x00	; 0
    111c:	40 e8       	ldi	r20, 0x80	; 128
    111e:	5f e3       	ldi	r21, 0x3F	; 63
    1120:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1124:	7b 01       	movw	r14, r22
    1126:	8c 01       	movw	r16, r24
    1128:	e5 cf       	rjmp	.-54     	; 0x10f4 <DelayUs+0xaa>
	{
		while(GET_BIT(TIFR,TOV0)==0);
		SET_BIT(TIFR,TOV0);
	}

}
    112a:	1f 91       	pop	r17
    112c:	0f 91       	pop	r16
    112e:	ff 90       	pop	r15
    1130:	ef 90       	pop	r14
    1132:	df 90       	pop	r13
    1134:	cf 90       	pop	r12
    1136:	bf 90       	pop	r11
    1138:	af 90       	pop	r10
    113a:	08 95       	ret

0000113c <DelayMs>:
{
	u16 LOC_u16OVF_NO,OVF_Time,Perscaler = 256;
	u8 Tick,LOC_u8Preload;
	Tick = Perscaler/CLK;
	OVF_Time = Tick * OVF_Count;
	u16 Local_u16Remainder = (LOC_u32Time * 1000) % OVF_Time;
    113c:	28 ee       	ldi	r18, 0xE8	; 232
    113e:	33 e0       	ldi	r19, 0x03	; 3
    1140:	40 e0       	ldi	r20, 0x00	; 0
    1142:	50 e0       	ldi	r21, 0x00	; 0
    1144:	0e 94 7e 30 	call	0x60fc	; 0x60fc <__mulsi3>
    1148:	9b 01       	movw	r18, r22
    114a:	ac 01       	movw	r20, r24
    114c:	dc 01       	movw	r26, r24
    114e:	cb 01       	movw	r24, r22
    1150:	9f 70       	andi	r25, 0x0F	; 15
    1152:	a0 70       	andi	r26, 0x00	; 0
    1154:	b0 70       	andi	r27, 0x00	; 0
    1156:	fc 01       	movw	r30, r24
	if(Local_u16Remainder == 0)
    1158:	89 2b       	or	r24, r25
    115a:	c9 f4       	brne	.+50     	; 0x118e <DelayMs+0x52>
	{
		LOC_u16OVF_NO = (LOC_u32Time * 1000) / OVF_Time;
    115c:	da 01       	movw	r26, r20
    115e:	c9 01       	movw	r24, r18
    1160:	5c e0       	ldi	r21, 0x0C	; 12
    1162:	b6 95       	lsr	r27
    1164:	a7 95       	ror	r26
    1166:	97 95       	ror	r25
    1168:	87 95       	ror	r24
    116a:	5a 95       	dec	r21
    116c:	d1 f7       	brne	.-12     	; 0x1162 <DelayMs+0x26>
    116e:	bc 01       	movw	r22, r24
    1170:	80 e0       	ldi	r24, 0x00	; 0

}

void MCAL_TIMER_Timer0_SetPreloadValue(u8 LOC_u8Value)
{
	TCNT0 = LOC_u8Value;
    1172:	82 bf       	out	0x32, r24	; 50
	{
		LOC_u16OVF_NO = ((LOC_u32Time * 1000) / OVF_Time ) + 1;
		LOC_u8Preload = OVF_Count - (Local_u16Remainder / Tick);
	}
	MCAL_TIMER_Timer0_SetPreloadValue(LOC_u8Preload);
	while(LOC_u16OVF_NO--)
    1174:	61 15       	cp	r22, r1
    1176:	71 05       	cpc	r23, r1
    1178:	49 f0       	breq	.+18     	; 0x118c <DelayMs+0x50>
	{
		while(GET_BIT(TIFR,TOV0)==0);
    117a:	08 b6       	in	r0, 0x38	; 56
    117c:	00 fe       	sbrs	r0, 0
    117e:	fd cf       	rjmp	.-6      	; 0x117a <DelayMs+0x3e>
		SET_BIT(TIFR,TOV0);
    1180:	88 b7       	in	r24, 0x38	; 56
    1182:	81 60       	ori	r24, 0x01	; 1
    1184:	88 bf       	out	0x38, r24	; 56
    1186:	61 50       	subi	r22, 0x01	; 1
    1188:	70 40       	sbci	r23, 0x00	; 0
	{
		LOC_u16OVF_NO = ((LOC_u32Time * 1000) / OVF_Time ) + 1;
		LOC_u8Preload = OVF_Count - (Local_u16Remainder / Tick);
	}
	MCAL_TIMER_Timer0_SetPreloadValue(LOC_u8Preload);
	while(LOC_u16OVF_NO--)
    118a:	b9 f7       	brne	.-18     	; 0x117a <DelayMs+0x3e>
    118c:	08 95       	ret
		LOC_u16OVF_NO = (LOC_u32Time * 1000) / OVF_Time;
		LOC_u8Preload = 0;
	}
	else
	{
		LOC_u16OVF_NO = ((LOC_u32Time * 1000) / OVF_Time ) + 1;
    118e:	da 01       	movw	r26, r20
    1190:	c9 01       	movw	r24, r18
    1192:	4c e0       	ldi	r20, 0x0C	; 12
    1194:	b6 95       	lsr	r27
    1196:	a7 95       	ror	r26
    1198:	97 95       	ror	r25
    119a:	87 95       	ror	r24
    119c:	4a 95       	dec	r20
    119e:	d1 f7       	brne	.-12     	; 0x1194 <DelayMs+0x58>
    11a0:	bc 01       	movw	r22, r24
    11a2:	6f 5f       	subi	r22, 0xFF	; 255
    11a4:	7f 4f       	sbci	r23, 0xFF	; 255
		LOC_u8Preload = OVF_Count - (Local_u16Remainder / Tick);
    11a6:	f2 95       	swap	r31
    11a8:	e2 95       	swap	r30
    11aa:	ef 70       	andi	r30, 0x0F	; 15
    11ac:	ef 27       	eor	r30, r31
    11ae:	ff 70       	andi	r31, 0x0F	; 15
    11b0:	ef 27       	eor	r30, r31
    11b2:	8e 2f       	mov	r24, r30
    11b4:	81 95       	neg	r24
    11b6:	dd cf       	rjmp	.-70     	; 0x1172 <DelayMs+0x36>

000011b8 <__vector_11>:

}


ISR(TIMER0_OVF_vect)
{
    11b8:	1f 92       	push	r1
    11ba:	0f 92       	push	r0
    11bc:	0f b6       	in	r0, 0x3f	; 63
    11be:	0f 92       	push	r0
    11c0:	11 24       	eor	r1, r1
    11c2:	2f 93       	push	r18
    11c4:	3f 93       	push	r19
    11c6:	4f 93       	push	r20
    11c8:	5f 93       	push	r21
    11ca:	6f 93       	push	r22
    11cc:	7f 93       	push	r23
    11ce:	8f 93       	push	r24
    11d0:	9f 93       	push	r25
    11d2:	af 93       	push	r26
    11d4:	bf 93       	push	r27
    11d6:	ef 93       	push	r30
    11d8:	ff 93       	push	r31
	if (GLOB_PTimer0OVF_CallBack != NULL)
    11da:	e0 91 46 03 	lds	r30, 0x0346
    11de:	f0 91 47 03 	lds	r31, 0x0347
    11e2:	30 97       	sbiw	r30, 0x00	; 0
    11e4:	09 f0       	breq	.+2      	; 0x11e8 <__vector_11+0x30>
	{
		GLOB_PTimer0OVF_CallBack();
    11e6:	09 95       	icall
	}

}
    11e8:	ff 91       	pop	r31
    11ea:	ef 91       	pop	r30
    11ec:	bf 91       	pop	r27
    11ee:	af 91       	pop	r26
    11f0:	9f 91       	pop	r25
    11f2:	8f 91       	pop	r24
    11f4:	7f 91       	pop	r23
    11f6:	6f 91       	pop	r22
    11f8:	5f 91       	pop	r21
    11fa:	4f 91       	pop	r20
    11fc:	3f 91       	pop	r19
    11fe:	2f 91       	pop	r18
    1200:	0f 90       	pop	r0
    1202:	0f be       	out	0x3f, r0	; 63
    1204:	0f 90       	pop	r0
    1206:	1f 90       	pop	r1
    1208:	18 95       	reti

0000120a <__vector_10>:

ISR(TIMER0_COMP_vect)
{
    120a:	1f 92       	push	r1
    120c:	0f 92       	push	r0
    120e:	0f b6       	in	r0, 0x3f	; 63
    1210:	0f 92       	push	r0
    1212:	11 24       	eor	r1, r1
    1214:	2f 93       	push	r18
    1216:	3f 93       	push	r19
    1218:	4f 93       	push	r20
    121a:	5f 93       	push	r21
    121c:	6f 93       	push	r22
    121e:	7f 93       	push	r23
    1220:	8f 93       	push	r24
    1222:	9f 93       	push	r25
    1224:	af 93       	push	r26
    1226:	bf 93       	push	r27
    1228:	ef 93       	push	r30
    122a:	ff 93       	push	r31
	if (GLOB_PTimer0COMP_CallBack != NULL)
    122c:	e0 91 44 03 	lds	r30, 0x0344
    1230:	f0 91 45 03 	lds	r31, 0x0345
    1234:	30 97       	sbiw	r30, 0x00	; 0
    1236:	09 f0       	breq	.+2      	; 0x123a <__vector_10+0x30>
	{
		GLOB_PTimer0COMP_CallBack();
    1238:	09 95       	icall
	}

}
    123a:	ff 91       	pop	r31
    123c:	ef 91       	pop	r30
    123e:	bf 91       	pop	r27
    1240:	af 91       	pop	r26
    1242:	9f 91       	pop	r25
    1244:	8f 91       	pop	r24
    1246:	7f 91       	pop	r23
    1248:	6f 91       	pop	r22
    124a:	5f 91       	pop	r21
    124c:	4f 91       	pop	r20
    124e:	3f 91       	pop	r19
    1250:	2f 91       	pop	r18
    1252:	0f 90       	pop	r0
    1254:	0f be       	out	0x3f, r0	; 63
    1256:	0f 90       	pop	r0
    1258:	1f 90       	pop	r1
    125a:	18 95       	reti

0000125c <MCAL_Timer_Timer1_voidInit>:
static void (*GLOB_PTimer1COMPB_CallBack)(void) = NULL;
static void (*GLOB_PTimer1CAPT_CallBack)(void) = NULL;


void MCAL_Timer_Timer1_voidInit(u8 LOC_u8Mode,u8 LOC_u8Scaler,u8 LOC_u8OC1AMode,u8 LOC_u8OC1BMode)
{
    125c:	98 2f       	mov	r25, r24
	u8 LOC_u8TCCR1A_OCR1_Modes;
	if((LOC_u8Scaler>=TIMER1_SCALER_TIMER_STOP_MASK) && (LOC_u8Scaler<=TIMER1_SCALER_EXT_T1_RISING_EDGE_MASK))
    125e:	68 30       	cpi	r22, 0x08	; 8
    1260:	30 f4       	brcc	.+12     	; 0x126e <MCAL_Timer_Timer1_voidInit+0x12>
	{
		TCCR1B &= TIMER1_SCALER_CLEAR_MASK;
    1262:	8e b5       	in	r24, 0x2e	; 46
    1264:	88 7f       	andi	r24, 0xF8	; 248
    1266:	8e bd       	out	0x2e, r24	; 46
		TCCR1B |= LOC_u8Scaler;
    1268:	8e b5       	in	r24, 0x2e	; 46
    126a:	86 2b       	or	r24, r22
    126c:	8e bd       	out	0x2e, r24	; 46
	}
	else {/*Do Nothing*/}

	if((LOC_u8Mode>=TIMER1_NORMAL_MODE) && (LOC_u8Mode<=TIMER1_PWM_FAST_MODE_TOP_OCR1A))
    126e:	9f 30       	cpi	r25, 0x0F	; 15
    1270:	e0 f4       	brcc	.+56     	; 0x12aa <MCAL_Timer_Timer1_voidInit+0x4e>
	{
		switch(LOC_u8Mode)
    1272:	97 30       	cpi	r25, 0x07	; 7
    1274:	09 f4       	brne	.+2      	; 0x1278 <MCAL_Timer_Timer1_voidInit+0x1c>
    1276:	5b c0       	rjmp	.+182    	; 0x132e <MCAL_Timer_Timer1_voidInit+0xd2>
    1278:	98 30       	cpi	r25, 0x08	; 8
    127a:	38 f1       	brcs	.+78     	; 0x12ca <MCAL_Timer_Timer1_voidInit+0x6e>
    127c:	9b 30       	cpi	r25, 0x0B	; 11
    127e:	09 f4       	brne	.+2      	; 0x1282 <MCAL_Timer_Timer1_voidInit+0x26>
    1280:	93 c0       	rjmp	.+294    	; 0x13a8 <MCAL_Timer_Timer1_voidInit+0x14c>
    1282:	9c 30       	cpi	r25, 0x0C	; 12
    1284:	c8 f5       	brcc	.+114    	; 0x12f8 <MCAL_Timer_Timer1_voidInit+0x9c>
    1286:	99 30       	cpi	r25, 0x09	; 9
    1288:	09 f4       	brne	.+2      	; 0x128c <MCAL_Timer_Timer1_voidInit+0x30>
    128a:	5e c0       	rjmp	.+188    	; 0x1348 <MCAL_Timer_Timer1_voidInit+0xec>
    128c:	9a 30       	cpi	r25, 0x0A	; 10
    128e:	08 f4       	brcc	.+2      	; 0x1292 <MCAL_Timer_Timer1_voidInit+0x36>
    1290:	7f c0       	rjmp	.+254    	; 0x1390 <MCAL_Timer_Timer1_voidInit+0x134>
			CLR_BIT(TCCR1A,TCCR1A_WGM11);
			CLR_BIT(TCCR1B,TCCR1B_WGM12);
			SET_BIT(TCCR1B,TCCR1B_WGM13);
			break;
		case TIMER1_PWM_PHASE_CORRECT_MODE_TOP_ICR1 :
			CLR_BIT(TCCR1A,TCCR1A_WGM10);
    1292:	8f b5       	in	r24, 0x2f	; 47
    1294:	8e 7f       	andi	r24, 0xFE	; 254
			SET_BIT(TCCR1A,TCCR1A_WGM11);
			CLR_BIT(TCCR1B,TCCR1B_WGM12);
			SET_BIT(TCCR1B,TCCR1B_WGM13);
			break;
		case TIMER1_PWM_PHASE_CORRECT_MODE_TOP_OCR1A :
			SET_BIT(TCCR1A,TCCR1A_WGM10);
    1296:	8f bd       	out	0x2f, r24	; 47
			SET_BIT(TCCR1A,TCCR1A_WGM11);
    1298:	8f b5       	in	r24, 0x2f	; 47
    129a:	82 60       	ori	r24, 0x02	; 2
    129c:	8f bd       	out	0x2f, r24	; 47
			CLR_BIT(TCCR1B,TCCR1B_WGM12);
    129e:	8e b5       	in	r24, 0x2e	; 46
    12a0:	87 7f       	andi	r24, 0xF7	; 247
    12a2:	8e bd       	out	0x2e, r24	; 46
			SET_BIT(TCCR1B,TCCR1B_WGM13);
    12a4:	8e b5       	in	r24, 0x2e	; 46
    12a6:	80 61       	ori	r24, 0x10	; 16
    12a8:	8e bd       	out	0x2e, r24	; 46
		}
	}
	else {/*Do Nothing*/}

	//OCR1A/OCR1B Mode Select.
	if((LOC_u8OC1AMode >=TIMER1_OCR1_DISCONNECTED && LOC_u8OC1AMode<=TIMER1_OCR1_SET) && (LOC_u8OC1AMode >=TIMER1_OCR1_DISCONNECTED && LOC_u8OC1AMode<=TIMER1_OCR1_SET))
    12aa:	44 30       	cpi	r20, 0x04	; 4
    12ac:	38 f4       	brcc	.+14     	; 0x12bc <MCAL_Timer_Timer1_voidInit+0x60>
	LOC_u8TCCR1A_OCR1_Modes = (LOC_u8OC1AMode<<6) | (LOC_u8OC1BMode<<4);
    12ae:	22 95       	swap	r18
    12b0:	20 7f       	andi	r18, 0xF0	; 240
    12b2:	42 95       	swap	r20
    12b4:	44 0f       	add	r20, r20
    12b6:	44 0f       	add	r20, r20
    12b8:	40 7c       	andi	r20, 0xC0	; 192
    12ba:	42 2b       	or	r20, r18
	TCCR1A &= TIMER1_OCR1_CLEAR_MASK;
    12bc:	8f b5       	in	r24, 0x2f	; 47
    12be:	8f 70       	andi	r24, 0x0F	; 15
    12c0:	8f bd       	out	0x2f, r24	; 47
	TCCR1A |= LOC_u8TCCR1A_OCR1_Modes;
    12c2:	8f b5       	in	r24, 0x2f	; 47
    12c4:	48 2b       	or	r20, r24
    12c6:	4f bd       	out	0x2f, r20	; 47

}
    12c8:	08 95       	ret
	}
	else {/*Do Nothing*/}

	if((LOC_u8Mode>=TIMER1_NORMAL_MODE) && (LOC_u8Mode<=TIMER1_PWM_FAST_MODE_TOP_OCR1A))
	{
		switch(LOC_u8Mode)
    12ca:	93 30       	cpi	r25, 0x03	; 3
    12cc:	09 f4       	brne	.+2      	; 0x12d0 <MCAL_Timer_Timer1_voidInit+0x74>
    12ce:	66 c0       	rjmp	.+204    	; 0x139c <MCAL_Timer_Timer1_voidInit+0x140>
    12d0:	94 30       	cpi	r25, 0x04	; 4
    12d2:	30 f5       	brcc	.+76     	; 0x1320 <MCAL_Timer_Timer1_voidInit+0xc4>
    12d4:	91 30       	cpi	r25, 0x01	; 1
    12d6:	f1 f1       	breq	.+124    	; 0x1354 <MCAL_Timer_Timer1_voidInit+0xf8>
    12d8:	92 30       	cpi	r25, 0x02	; 2
    12da:	08 f4       	brcc	.+2      	; 0x12de <MCAL_Timer_Timer1_voidInit+0x82>
    12dc:	4a c0       	rjmp	.+148    	; 0x1372 <MCAL_Timer_Timer1_voidInit+0x116>
			CLR_BIT(TCCR1A,TCCR1A_WGM11);
			CLR_BIT(TCCR1B,TCCR1B_WGM12);
			CLR_BIT(TCCR1B,TCCR1B_WGM13);
			break;
		case TIMER1_PWM_PHASE_CORRECT_MODE_9_BIT :
			CLR_BIT(TCCR1A,TCCR1A_WGM10);
    12de:	8f b5       	in	r24, 0x2f	; 47
    12e0:	8e 7f       	andi	r24, 0xFE	; 254
    12e2:	8f bd       	out	0x2f, r24	; 47
			SET_BIT(TCCR1A,TCCR1A_WGM11);
    12e4:	8f b5       	in	r24, 0x2f	; 47
    12e6:	82 60       	ori	r24, 0x02	; 2
			CLR_BIT(TCCR1B,TCCR1B_WGM12);
			CLR_BIT(TCCR1B,TCCR1B_WGM13);
			break;
		case TIMER1_PWM_PHASE_CORRECT_MODE_8_BIT :
			SET_BIT(TCCR1A,TCCR1A_WGM10);
			CLR_BIT(TCCR1A,TCCR1A_WGM11);
    12e8:	8f bd       	out	0x2f, r24	; 47
			CLR_BIT(TCCR1B,TCCR1B_WGM12);
    12ea:	8e b5       	in	r24, 0x2e	; 46
    12ec:	87 7f       	andi	r24, 0xF7	; 247
    12ee:	8e bd       	out	0x2e, r24	; 46
			CLR_BIT(TCCR1B,TCCR1B_WGM13);
    12f0:	8e b5       	in	r24, 0x2e	; 46
    12f2:	8f 7e       	andi	r24, 0xEF	; 239
    12f4:	8e bd       	out	0x2e, r24	; 46
    12f6:	d9 cf       	rjmp	.-78     	; 0x12aa <MCAL_Timer_Timer1_voidInit+0x4e>
	}
	else {/*Do Nothing*/}

	if((LOC_u8Mode>=TIMER1_NORMAL_MODE) && (LOC_u8Mode<=TIMER1_PWM_FAST_MODE_TOP_OCR1A))
	{
		switch(LOC_u8Mode)
    12f8:	9d 30       	cpi	r25, 0x0D	; 13
    12fa:	c1 f1       	breq	.+112    	; 0x136c <MCAL_Timer_Timer1_voidInit+0x110>
    12fc:	9d 30       	cpi	r25, 0x0D	; 13
    12fe:	08 f4       	brcc	.+2      	; 0x1302 <MCAL_Timer_Timer1_voidInit+0xa6>
    1300:	41 c0       	rjmp	.+130    	; 0x1384 <MCAL_Timer_Timer1_voidInit+0x128>
    1302:	9e 30       	cpi	r25, 0x0E	; 14
    1304:	91 f6       	brne	.-92     	; 0x12aa <MCAL_Timer_Timer1_voidInit+0x4e>
			SET_BIT(TCCR1A,TCCR1A_WGM11);
			SET_BIT(TCCR1B,TCCR1B_WGM12);
			SET_BIT(TCCR1B,TCCR1B_WGM13);
			break;
		case TIMER1_PWM_FAST_MODE_TOP_OCR1A :
			SET_BIT(TCCR1A,TCCR1A_WGM10);
    1306:	8f b5       	in	r24, 0x2f	; 47
    1308:	81 60       	ori	r24, 0x01	; 1
    130a:	8f bd       	out	0x2f, r24	; 47
			SET_BIT(TCCR1A,TCCR1A_WGM11);
    130c:	8f b5       	in	r24, 0x2f	; 47
    130e:	82 60       	ori	r24, 0x02	; 2
    1310:	8f bd       	out	0x2f, r24	; 47
			SET_BIT(TCCR1B,TCCR1B_WGM12);
    1312:	8e b5       	in	r24, 0x2e	; 46
    1314:	88 60       	ori	r24, 0x08	; 8
    1316:	8e bd       	out	0x2e, r24	; 46
			SET_BIT(TCCR1B,TCCR1B_WGM13);
    1318:	8e b5       	in	r24, 0x2e	; 46
    131a:	80 61       	ori	r24, 0x10	; 16
    131c:	8e bd       	out	0x2e, r24	; 46
    131e:	c5 cf       	rjmp	.-118    	; 0x12aa <MCAL_Timer_Timer1_voidInit+0x4e>
	}
	else {/*Do Nothing*/}

	if((LOC_u8Mode>=TIMER1_NORMAL_MODE) && (LOC_u8Mode<=TIMER1_PWM_FAST_MODE_TOP_OCR1A))
	{
		switch(LOC_u8Mode)
    1320:	95 30       	cpi	r25, 0x05	; 5
    1322:	f1 f0       	breq	.+60     	; 0x1360 <MCAL_Timer_Timer1_voidInit+0x104>
    1324:	96 30       	cpi	r25, 0x06	; 6
    1326:	40 f1       	brcs	.+80     	; 0x1378 <MCAL_Timer_Timer1_voidInit+0x11c>
			CLR_BIT(TCCR1A,TCCR1A_WGM11);
			SET_BIT(TCCR1B,TCCR1B_WGM12);
			CLR_BIT(TCCR1B,TCCR1B_WGM13);
			break;
		case TIMER1_PWM_FAST_MODE_9_BIT :
			CLR_BIT(TCCR1A,TCCR1A_WGM10);
    1328:	8f b5       	in	r24, 0x2f	; 47
    132a:	8e 7f       	andi	r24, 0xFE	; 254
    132c:	02 c0       	rjmp	.+4      	; 0x1332 <MCAL_Timer_Timer1_voidInit+0xd6>
			SET_BIT(TCCR1A,TCCR1A_WGM11);
			SET_BIT(TCCR1B,TCCR1B_WGM12);
			CLR_BIT(TCCR1B,TCCR1B_WGM13);
			break;
		case TIMER1_PWM_FAST_MODE_10_BIT :
			SET_BIT(TCCR1A,TCCR1A_WGM10);
    132e:	8f b5       	in	r24, 0x2f	; 47
    1330:	81 60       	ori	r24, 0x01	; 1
    1332:	8f bd       	out	0x2f, r24	; 47
			SET_BIT(TCCR1A,TCCR1A_WGM11);
    1334:	8f b5       	in	r24, 0x2f	; 47
    1336:	82 60       	ori	r24, 0x02	; 2
    1338:	8f bd       	out	0x2f, r24	; 47
			SET_BIT(TCCR1B,TCCR1B_WGM12);
    133a:	8e b5       	in	r24, 0x2e	; 46
    133c:	88 60       	ori	r24, 0x08	; 8
    133e:	8e bd       	out	0x2e, r24	; 46
			CLR_BIT(TCCR1B,TCCR1B_WGM13);
    1340:	8e b5       	in	r24, 0x2e	; 46
    1342:	8f 7e       	andi	r24, 0xEF	; 239
    1344:	8e bd       	out	0x2e, r24	; 46
    1346:	b1 cf       	rjmp	.-158    	; 0x12aa <MCAL_Timer_Timer1_voidInit+0x4e>
			CLR_BIT(TCCR1A,TCCR1A_WGM11);
			CLR_BIT(TCCR1B,TCCR1B_WGM12);
			SET_BIT(TCCR1B,TCCR1B_WGM13);
			break;
		case TIMER1_PWM_PHASE_FREQUENCY_CORRECT_MODE_TOP_OCR1A :
			SET_BIT(TCCR1A,TCCR1A_WGM10);
    1348:	8f b5       	in	r24, 0x2f	; 47
    134a:	81 60       	ori	r24, 0x01	; 1
    134c:	8f bd       	out	0x2f, r24	; 47
			CLR_BIT(TCCR1A,TCCR1A_WGM11);
    134e:	8f b5       	in	r24, 0x2f	; 47
    1350:	8d 7f       	andi	r24, 0xFD	; 253
    1352:	a4 cf       	rjmp	.-184    	; 0x129c <MCAL_Timer_Timer1_voidInit+0x40>
			CLR_BIT(TCCR1A,TCCR1A_WGM11);
			CLR_BIT(TCCR1B,TCCR1B_WGM12);
			CLR_BIT(TCCR1B,TCCR1B_WGM13);
			break;
		case TIMER1_PWM_PHASE_CORRECT_MODE_8_BIT :
			SET_BIT(TCCR1A,TCCR1A_WGM10);
    1354:	8f b5       	in	r24, 0x2f	; 47
    1356:	81 60       	ori	r24, 0x01	; 1
    1358:	8f bd       	out	0x2f, r24	; 47
			CLR_BIT(TCCR1A,TCCR1A_WGM11);
    135a:	8f b5       	in	r24, 0x2f	; 47
    135c:	8d 7f       	andi	r24, 0xFD	; 253
    135e:	c4 cf       	rjmp	.-120    	; 0x12e8 <MCAL_Timer_Timer1_voidInit+0x8c>
			SET_BIT(TCCR1B,TCCR1B_WGM12);
			CLR_BIT(TCCR1B,TCCR1B_WGM13);
			break;

		case TIMER1_PWM_FAST_MODE_8_BIT :
			SET_BIT(TCCR1A,TCCR1A_WGM10);
    1360:	8f b5       	in	r24, 0x2f	; 47
    1362:	81 60       	ori	r24, 0x01	; 1
    1364:	8f bd       	out	0x2f, r24	; 47
			CLR_BIT(TCCR1A,TCCR1A_WGM11);
    1366:	8f b5       	in	r24, 0x2f	; 47
    1368:	8d 7f       	andi	r24, 0xFD	; 253
    136a:	e6 cf       	rjmp	.-52     	; 0x1338 <MCAL_Timer_Timer1_voidInit+0xdc>
			CLR_BIT(TCCR1A,TCCR1A_WGM11);
			SET_BIT(TCCR1B,TCCR1B_WGM12);
			SET_BIT(TCCR1B,TCCR1B_WGM13);
			break;
		case TIMER1_PWM_FAST_MODE_TOP_ICR1 :
			CLR_BIT(TCCR1A,TCCR1A_WGM10);
    136c:	8f b5       	in	r24, 0x2f	; 47
    136e:	8e 7f       	andi	r24, 0xFE	; 254
    1370:	cc cf       	rjmp	.-104    	; 0x130a <MCAL_Timer_Timer1_voidInit+0xae>
	if((LOC_u8Mode>=TIMER1_NORMAL_MODE) && (LOC_u8Mode<=TIMER1_PWM_FAST_MODE_TOP_OCR1A))
	{
		switch(LOC_u8Mode)
		{
		case TIMER1_NORMAL_MODE :
			CLR_BIT(TCCR1A,TCCR1A_WGM10);
    1372:	8f b5       	in	r24, 0x2f	; 47
    1374:	8e 7f       	andi	r24, 0xFE	; 254
    1376:	f0 cf       	rjmp	.-32     	; 0x1358 <MCAL_Timer_Timer1_voidInit+0xfc>
			SET_BIT(TCCR1A,TCCR1A_WGM11);
			CLR_BIT(TCCR1B,TCCR1B_WGM12);
			CLR_BIT(TCCR1B,TCCR1B_WGM13);
			break;
		case TIMER1_CTC_MODE_TOP_OCR1A :
			CLR_BIT(TCCR1A,TCCR1A_WGM10);
    1378:	8f b5       	in	r24, 0x2f	; 47
    137a:	8e 7f       	andi	r24, 0xFE	; 254
    137c:	8f bd       	out	0x2f, r24	; 47
			CLR_BIT(TCCR1A,TCCR1A_WGM11);
    137e:	8f b5       	in	r24, 0x2f	; 47
    1380:	8d 7f       	andi	r24, 0xFD	; 253
    1382:	da cf       	rjmp	.-76     	; 0x1338 <MCAL_Timer_Timer1_voidInit+0xdc>
			SET_BIT(TCCR1A,TCCR1A_WGM11);
			CLR_BIT(TCCR1B,TCCR1B_WGM12);
			SET_BIT(TCCR1B,TCCR1B_WGM13);
			break;
		case TIMER1_CTC_MODE_TOP_ICR1 :
			CLR_BIT(TCCR1A,TCCR1A_WGM10);
    1384:	8f b5       	in	r24, 0x2f	; 47
    1386:	8e 7f       	andi	r24, 0xFE	; 254
    1388:	8f bd       	out	0x2f, r24	; 47
			CLR_BIT(TCCR1A,TCCR1A_WGM11);
    138a:	8f b5       	in	r24, 0x2f	; 47
    138c:	8d 7f       	andi	r24, 0xFD	; 253
    138e:	c0 cf       	rjmp	.-128    	; 0x1310 <MCAL_Timer_Timer1_voidInit+0xb4>
			SET_BIT(TCCR1A,TCCR1A_WGM11);
			SET_BIT(TCCR1B,TCCR1B_WGM12);
			CLR_BIT(TCCR1B,TCCR1B_WGM13);
			break;
		case TIMER1_PWM_PHASE_FREQUENCY_CORRECT_MODE_TOP_ICR1 :
			CLR_BIT(TCCR1A,TCCR1A_WGM10);
    1390:	8f b5       	in	r24, 0x2f	; 47
    1392:	8e 7f       	andi	r24, 0xFE	; 254
    1394:	8f bd       	out	0x2f, r24	; 47
			CLR_BIT(TCCR1A,TCCR1A_WGM11);
    1396:	8f b5       	in	r24, 0x2f	; 47
    1398:	8d 7f       	andi	r24, 0xFD	; 253
    139a:	80 cf       	rjmp	.-256    	; 0x129c <MCAL_Timer_Timer1_voidInit+0x40>
			SET_BIT(TCCR1A,TCCR1A_WGM11);
			CLR_BIT(TCCR1B,TCCR1B_WGM12);
			CLR_BIT(TCCR1B,TCCR1B_WGM13);
			break;
		case TIMER1_PWM_PHASE_CORRECT_MODE_10_BIT :
			SET_BIT(TCCR1A,TCCR1A_WGM10);
    139c:	8f b5       	in	r24, 0x2f	; 47
    139e:	81 60       	ori	r24, 0x01	; 1
    13a0:	8f bd       	out	0x2f, r24	; 47
			SET_BIT(TCCR1A,TCCR1A_WGM11);
    13a2:	8f b5       	in	r24, 0x2f	; 47
    13a4:	82 60       	ori	r24, 0x02	; 2
    13a6:	a0 cf       	rjmp	.-192    	; 0x12e8 <MCAL_Timer_Timer1_voidInit+0x8c>
			SET_BIT(TCCR1A,TCCR1A_WGM11);
			CLR_BIT(TCCR1B,TCCR1B_WGM12);
			SET_BIT(TCCR1B,TCCR1B_WGM13);
			break;
		case TIMER1_PWM_PHASE_CORRECT_MODE_TOP_OCR1A :
			SET_BIT(TCCR1A,TCCR1A_WGM10);
    13a8:	8f b5       	in	r24, 0x2f	; 47
    13aa:	81 60       	ori	r24, 0x01	; 1
    13ac:	74 cf       	rjmp	.-280    	; 0x1296 <MCAL_Timer_Timer1_voidInit+0x3a>

000013ae <MCAL_Timer_Timer1_voidSetPreloadValue>:
}


void MCAL_Timer_Timer1_voidSetPreloadValue(u16 LOC_u16PreValue)
{
	TCNT1 = LOC_u16PreValue;
    13ae:	9d bd       	out	0x2d, r25	; 45
    13b0:	8c bd       	out	0x2c, r24	; 44
}
    13b2:	08 95       	ret

000013b4 <MCAL_Timer_Timer1_u16GetCounterValue>:


u16	 MCAL_Timer_Timer1_u16GetCounterValue(void)
{
	return TCNT1;
    13b4:	2c b5       	in	r18, 0x2c	; 44
    13b6:	3d b5       	in	r19, 0x2d	; 45
}
    13b8:	c9 01       	movw	r24, r18
    13ba:	08 95       	ret

000013bc <MCAL_Timer_Timer1_voidSetOCR1AValue>:


void MCAL_Timer_Timer1_voidSetOCR1AValue(u16 LOC_u16OCR1AValue)
{
	OCR1A = LOC_u16OCR1AValue;
    13bc:	9b bd       	out	0x2b, r25	; 43
    13be:	8a bd       	out	0x2a, r24	; 42
}
    13c0:	08 95       	ret

000013c2 <MCAL_Timer_Timer1_voidSetOCR1BValue>:


void MCAL_Timer_Timer1_voidSetOCR1BValue(u16 LOC_u16OCR1BValue)
{
	OCR1B = LOC_u16OCR1BValue;
    13c2:	99 bd       	out	0x29, r25	; 41
    13c4:	88 bd       	out	0x28, r24	; 40
}
    13c6:	08 95       	ret

000013c8 <MCAL_Timer_Timer1_voidSetICR1Value>:


void MCAL_Timer_Timer1_voidSetICR1Value(u16 LOC_u16ICR1Value)
{
	ICR1 = LOC_u16ICR1Value;
    13c8:	97 bd       	out	0x27, r25	; 39
    13ca:	86 bd       	out	0x26, r24	; 38
}
    13cc:	08 95       	ret

000013ce <MCAL_Timer_Timer1_voidOverflowSetCallBack>:


void MCAL_Timer_Timer1_voidOverflowSetCallBack(void (*NotifiFunction)(void))
{
	if (NotifiFunction != NULL)
    13ce:	00 97       	sbiw	r24, 0x00	; 0
    13d0:	21 f0       	breq	.+8      	; 0x13da <MCAL_Timer_Timer1_voidOverflowSetCallBack+0xc>
	{
		GLOB_PTimer1OVF_CallBack = NotifiFunction;
    13d2:	90 93 4d 03 	sts	0x034D, r25
    13d6:	80 93 4c 03 	sts	0x034C, r24
    13da:	08 95       	ret

000013dc <MCAL_Timer_Timer1_voidCompareMatch1ASetCallBack>:

}

void MCAL_Timer_Timer1_voidCompareMatch1ASetCallBack(void (*NotifiFunction)(void))
{
	if (NotifiFunction != NULL)
    13dc:	00 97       	sbiw	r24, 0x00	; 0
    13de:	21 f0       	breq	.+8      	; 0x13e8 <MCAL_Timer_Timer1_voidCompareMatch1ASetCallBack+0xc>
	{
		GLOB_PTimer1COMPA_CallBack = NotifiFunction;
    13e0:	90 93 4b 03 	sts	0x034B, r25
    13e4:	80 93 4a 03 	sts	0x034A, r24
    13e8:	08 95       	ret

000013ea <MCAL_Timer_Timer1_voidCompareMatch1BSetCallBack>:

}

void MCAL_Timer_Timer1_voidCompareMatch1BSetCallBack(void (*NotifiFunction)(void))
{
	if (NotifiFunction != NULL)
    13ea:	00 97       	sbiw	r24, 0x00	; 0
    13ec:	21 f0       	breq	.+8      	; 0x13f6 <MCAL_Timer_Timer1_voidCompareMatch1BSetCallBack+0xc>
	{
		GLOB_PTimer1COMPB_CallBack = NotifiFunction;
    13ee:	90 93 49 03 	sts	0x0349, r25
    13f2:	80 93 48 03 	sts	0x0348, r24
    13f6:	08 95       	ret

000013f8 <MCAL_Timer_Timer1_voidOverflowInterruptEnable>:

}

void MCAL_Timer_Timer1_voidOverflowInterruptEnable(void)
{
	SET_BIT(TIMSK,TIMSK_TOIE1);
    13f8:	89 b7       	in	r24, 0x39	; 57
    13fa:	84 60       	ori	r24, 0x04	; 4
    13fc:	89 bf       	out	0x39, r24	; 57
}
    13fe:	08 95       	ret

00001400 <MCAL_Timer_Timer1_voidOverflowInterruptDisable>:

void MCAL_Timer_Timer1_voidOverflowInterruptDisable(void)
{
	CLR_BIT(TIMSK,TIMSK_TOIE1);
    1400:	89 b7       	in	r24, 0x39	; 57
    1402:	8b 7f       	andi	r24, 0xFB	; 251
    1404:	89 bf       	out	0x39, r24	; 57
}
    1406:	08 95       	ret

00001408 <MCAL_Timer_Timer1_voidCompareMatch1AInterruptEnable>:

void MCAL_Timer_Timer1_voidCompareMatch1AInterruptEnable(void)
{
	SET_BIT(TIMSK,TIMSK_OCIE1A);
    1408:	89 b7       	in	r24, 0x39	; 57
    140a:	80 61       	ori	r24, 0x10	; 16
    140c:	89 bf       	out	0x39, r24	; 57

}
    140e:	08 95       	ret

00001410 <MCAL_Timer_Timer1_voidCompareMatch1AInterruptDisable>:

void MCAL_Timer_Timer1_voidCompareMatch1AInterruptDisable(void)
{
	CLR_BIT(TIMSK,TIMSK_OCIE1A);
    1410:	89 b7       	in	r24, 0x39	; 57
    1412:	8f 7e       	andi	r24, 0xEF	; 239
    1414:	89 bf       	out	0x39, r24	; 57
}
    1416:	08 95       	ret

00001418 <MCAL_Timer_Timer1_voidCompareMatch1BInterruptEnable>:

void MCAL_Timer_Timer1_voidCompareMatch1BInterruptEnable(void)
{
	SET_BIT(TIMSK,TIMSK_OCIE1B);
    1418:	89 b7       	in	r24, 0x39	; 57
    141a:	88 60       	ori	r24, 0x08	; 8
    141c:	89 bf       	out	0x39, r24	; 57
}
    141e:	08 95       	ret

00001420 <MCAL_Timer_Timer1_voidCompareMatch1BInterruptDisable>:

void MCAL_Timer_Timer1_voidCompareMatch1BInterruptDisable(void)
{
	CLR_BIT(TIMSK,TIMSK_OCIE1B);
    1420:	89 b7       	in	r24, 0x39	; 57
    1422:	87 7f       	andi	r24, 0xF7	; 247
    1424:	89 bf       	out	0x39, r24	; 57
}
    1426:	08 95       	ret

00001428 <MCAL_Timer_Timer1_voidICUGetICR1Value>:

u16	 MCAL_Timer_Timer1_voidICUGetICR1Value(void)
{
	return ICR1;
    1428:	26 b5       	in	r18, 0x26	; 38
    142a:	37 b5       	in	r19, 0x27	; 39
}
    142c:	c9 01       	movw	r24, r18
    142e:	08 95       	ret

00001430 <MCAL_Timer_Timer1_voidICUSetTriggerEdge>:
void MCAL_Timer_Timer1_voidICUSetTriggerEdge(u8 LOC_u8TriggerEdge)
{
//ICES1
	if(LOC_u8TriggerEdge == RISING_EDGE)
    1430:	81 30       	cpi	r24, 0x01	; 1
    1432:	31 f0       	breq	.+12     	; 0x1440 <MCAL_Timer_Timer1_voidICUSetTriggerEdge+0x10>
	{
		SET_BIT(TCCR1B,TCCR1B_ICES1);
	}
	else if(LOC_u8TriggerEdge == FALLING_EDGE)
    1434:	88 23       	and	r24, r24
    1436:	19 f4       	brne	.+6      	; 0x143e <MCAL_Timer_Timer1_voidICUSetTriggerEdge+0xe>
	{
		CLR_BIT(TCCR1B,TCCR1B_ICES1);
    1438:	8e b5       	in	r24, 0x2e	; 46
    143a:	8f 7b       	andi	r24, 0xBF	; 191
    143c:	8e bd       	out	0x2e, r24	; 46
    143e:	08 95       	ret
void MCAL_Timer_Timer1_voidICUSetTriggerEdge(u8 LOC_u8TriggerEdge)
{
//ICES1
	if(LOC_u8TriggerEdge == RISING_EDGE)
	{
		SET_BIT(TCCR1B,TCCR1B_ICES1);
    1440:	8e b5       	in	r24, 0x2e	; 46
    1442:	80 64       	ori	r24, 0x40	; 64
    1444:	8e bd       	out	0x2e, r24	; 46
    1446:	08 95       	ret

00001448 <MCAL_Timer_Timer1_voidICUInterruptEnable>:
	}
	else {/*Do Nothing.*/}
}
void MCAL_Timer_Timer1_voidICUInterruptEnable(void)
{
		SET_BIT(TIMSK,TIMSK_TICIE1);
    1448:	89 b7       	in	r24, 0x39	; 57
    144a:	80 62       	ori	r24, 0x20	; 32
    144c:	89 bf       	out	0x39, r24	; 57
}
    144e:	08 95       	ret

00001450 <MCAL_Timer_Timer1_voidICUInterruptDisable>:
void MCAL_Timer_Timer1_voidICUInterruptDisable(void)
{
		CLR_BIT(TIMSK,TIMSK_TICIE1);
    1450:	89 b7       	in	r24, 0x39	; 57
    1452:	8f 7d       	andi	r24, 0xDF	; 223
    1454:	89 bf       	out	0x39, r24	; 57
}
    1456:	08 95       	ret

00001458 <__vector_9>:




ISR(TIMER1_OVF_vect)
{
    1458:	1f 92       	push	r1
    145a:	0f 92       	push	r0
    145c:	0f b6       	in	r0, 0x3f	; 63
    145e:	0f 92       	push	r0
    1460:	11 24       	eor	r1, r1
    1462:	2f 93       	push	r18
    1464:	3f 93       	push	r19
    1466:	4f 93       	push	r20
    1468:	5f 93       	push	r21
    146a:	6f 93       	push	r22
    146c:	7f 93       	push	r23
    146e:	8f 93       	push	r24
    1470:	9f 93       	push	r25
    1472:	af 93       	push	r26
    1474:	bf 93       	push	r27
    1476:	ef 93       	push	r30
    1478:	ff 93       	push	r31
	if (GLOB_PTimer1OVF_CallBack != NULL)
    147a:	e0 91 4c 03 	lds	r30, 0x034C
    147e:	f0 91 4d 03 	lds	r31, 0x034D
    1482:	30 97       	sbiw	r30, 0x00	; 0
    1484:	09 f0       	breq	.+2      	; 0x1488 <__vector_9+0x30>
	{
		GLOB_PTimer1OVF_CallBack();
    1486:	09 95       	icall
	}

}
    1488:	ff 91       	pop	r31
    148a:	ef 91       	pop	r30
    148c:	bf 91       	pop	r27
    148e:	af 91       	pop	r26
    1490:	9f 91       	pop	r25
    1492:	8f 91       	pop	r24
    1494:	7f 91       	pop	r23
    1496:	6f 91       	pop	r22
    1498:	5f 91       	pop	r21
    149a:	4f 91       	pop	r20
    149c:	3f 91       	pop	r19
    149e:	2f 91       	pop	r18
    14a0:	0f 90       	pop	r0
    14a2:	0f be       	out	0x3f, r0	; 63
    14a4:	0f 90       	pop	r0
    14a6:	1f 90       	pop	r1
    14a8:	18 95       	reti

000014aa <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
    14aa:	1f 92       	push	r1
    14ac:	0f 92       	push	r0
    14ae:	0f b6       	in	r0, 0x3f	; 63
    14b0:	0f 92       	push	r0
    14b2:	11 24       	eor	r1, r1
    14b4:	2f 93       	push	r18
    14b6:	3f 93       	push	r19
    14b8:	4f 93       	push	r20
    14ba:	5f 93       	push	r21
    14bc:	6f 93       	push	r22
    14be:	7f 93       	push	r23
    14c0:	8f 93       	push	r24
    14c2:	9f 93       	push	r25
    14c4:	af 93       	push	r26
    14c6:	bf 93       	push	r27
    14c8:	ef 93       	push	r30
    14ca:	ff 93       	push	r31
	if (GLOB_PTimer1COMPA_CallBack != NULL)
    14cc:	e0 91 4a 03 	lds	r30, 0x034A
    14d0:	f0 91 4b 03 	lds	r31, 0x034B
    14d4:	30 97       	sbiw	r30, 0x00	; 0
    14d6:	09 f0       	breq	.+2      	; 0x14da <__vector_7+0x30>
	{
		GLOB_PTimer1COMPA_CallBack();
    14d8:	09 95       	icall
	}

}
    14da:	ff 91       	pop	r31
    14dc:	ef 91       	pop	r30
    14de:	bf 91       	pop	r27
    14e0:	af 91       	pop	r26
    14e2:	9f 91       	pop	r25
    14e4:	8f 91       	pop	r24
    14e6:	7f 91       	pop	r23
    14e8:	6f 91       	pop	r22
    14ea:	5f 91       	pop	r21
    14ec:	4f 91       	pop	r20
    14ee:	3f 91       	pop	r19
    14f0:	2f 91       	pop	r18
    14f2:	0f 90       	pop	r0
    14f4:	0f be       	out	0x3f, r0	; 63
    14f6:	0f 90       	pop	r0
    14f8:	1f 90       	pop	r1
    14fa:	18 95       	reti

000014fc <__vector_8>:

ISR(TIMER1_COMPB_vect)
{
    14fc:	1f 92       	push	r1
    14fe:	0f 92       	push	r0
    1500:	0f b6       	in	r0, 0x3f	; 63
    1502:	0f 92       	push	r0
    1504:	11 24       	eor	r1, r1
    1506:	2f 93       	push	r18
    1508:	3f 93       	push	r19
    150a:	4f 93       	push	r20
    150c:	5f 93       	push	r21
    150e:	6f 93       	push	r22
    1510:	7f 93       	push	r23
    1512:	8f 93       	push	r24
    1514:	9f 93       	push	r25
    1516:	af 93       	push	r26
    1518:	bf 93       	push	r27
    151a:	ef 93       	push	r30
    151c:	ff 93       	push	r31
	if (GLOB_PTimer1COMPB_CallBack != NULL)
    151e:	e0 91 48 03 	lds	r30, 0x0348
    1522:	f0 91 49 03 	lds	r31, 0x0349
    1526:	30 97       	sbiw	r30, 0x00	; 0
    1528:	09 f0       	breq	.+2      	; 0x152c <__vector_8+0x30>
	{
		GLOB_PTimer1COMPB_CallBack();
    152a:	09 95       	icall
	}

}
    152c:	ff 91       	pop	r31
    152e:	ef 91       	pop	r30
    1530:	bf 91       	pop	r27
    1532:	af 91       	pop	r26
    1534:	9f 91       	pop	r25
    1536:	8f 91       	pop	r24
    1538:	7f 91       	pop	r23
    153a:	6f 91       	pop	r22
    153c:	5f 91       	pop	r21
    153e:	4f 91       	pop	r20
    1540:	3f 91       	pop	r19
    1542:	2f 91       	pop	r18
    1544:	0f 90       	pop	r0
    1546:	0f be       	out	0x3f, r0	; 63
    1548:	0f 90       	pop	r0
    154a:	1f 90       	pop	r1
    154c:	18 95       	reti

0000154e <__vector_6>:

ISR(TIMER1_CAPT_vect)
{
    154e:	1f 92       	push	r1
    1550:	0f 92       	push	r0
    1552:	0f b6       	in	r0, 0x3f	; 63
    1554:	0f 92       	push	r0
    1556:	11 24       	eor	r1, r1
	if (GLOB_PTimer1CAPT_CallBack != NULL)
	{
		GLOB_PTimer1CAPT_CallBack();
	}

}
    1558:	0f 90       	pop	r0
    155a:	0f be       	out	0x3f, r0	; 63
    155c:	0f 90       	pop	r0
    155e:	1f 90       	pop	r1
    1560:	18 95       	reti

00001562 <MCAL_SPI_MASTER_SLAVE_u8_SpiSetMasterSlave>:


STD_TYPE MCAL_SPI_MASTER_SLAVE_u8_SpiSetMasterSlave(u8 Loc_u8_SelectMasterSlave)
{
	u8 Loc_u8_Retval = E_NOT_OK;
	if(Loc_u8_SelectMasterSlave == SPI_SLAVE)
    1562:	88 23       	and	r24, r24
    1564:	21 f0       	breq	.+8      	; 0x156e <MCAL_SPI_MASTER_SLAVE_u8_SpiSetMasterSlave+0xc>
	{
		CLR_BIT(SPCR,MSTR);
		Loc_u8_Retval = EOK;
	}
	else if(Loc_u8_SelectMasterSlave == SPI_MASTER)
    1566:	81 30       	cpi	r24, 0x01	; 1
    1568:	21 f0       	breq	.+8      	; 0x1572 <MCAL_SPI_MASTER_SLAVE_u8_SpiSetMasterSlave+0x10>
    156a:	81 e0       	ldi	r24, 0x01	; 1
    156c:	08 95       	ret
STD_TYPE MCAL_SPI_MASTER_SLAVE_u8_SpiSetMasterSlave(u8 Loc_u8_SelectMasterSlave)
{
	u8 Loc_u8_Retval = E_NOT_OK;
	if(Loc_u8_SelectMasterSlave == SPI_SLAVE)
	{
		CLR_BIT(SPCR,MSTR);
    156e:	6c 98       	cbi	0x0d, 4	; 13
    1570:	08 95       	ret
		Loc_u8_Retval = EOK;
	}
	else if(Loc_u8_SelectMasterSlave == SPI_MASTER)
	{
		SET_BIT(SPCR,MSTR);
    1572:	6c 9a       	sbi	0x0d, 4	; 13
    1574:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		//Do Nothing
	}
	return Loc_u8_Retval;
}
    1576:	08 95       	ret

00001578 <MCAL_SPI_MASTER_SLAVE_void_SpiEnableInterrupt>:

void MCAL_SPI_MASTER_SLAVE_void_SpiEnableInterrupt(void)
{
	SET_BIT(SPCR,SPIE);
    1578:	6f 9a       	sbi	0x0d, 7	; 13
}
    157a:	08 95       	ret

0000157c <MCAL_SPI_MASTER_SLAVE_void_SpiEnable>:

void MCAL_SPI_MASTER_SLAVE_void_SpiEnable(void)
{
	SET_BIT(SPCR,SPE);
    157c:	6e 9a       	sbi	0x0d, 6	; 13
}
    157e:	08 95       	ret

00001580 <MCAL_SPI_MASTER_SLAVE_u8_SpiSetMsbLsb>:

STD_TYPE MCAL_SPI_MASTER_SLAVE_u8_SpiSetMsbLsb(u8 Loc_u8_SelectMsbLsb)
{
	u8 Loc_u8_Retval = E_NOT_OK;
	if(Loc_u8_SelectMsbLsb == SPI_MSB)
    1580:	82 30       	cpi	r24, 0x02	; 2
    1582:	39 f0       	breq	.+14     	; 0x1592 <MCAL_SPI_MASTER_SLAVE_u8_SpiSetMsbLsb+0x12>
	{
		CLR_BIT(SPCR,DORD);
		Loc_u8_Retval = EOK;
	}
	else if(Loc_u8_SelectMsbLsb == SPI_LSB)
    1584:	83 30       	cpi	r24, 0x03	; 3
    1586:	11 f0       	breq	.+4      	; 0x158c <MCAL_SPI_MASTER_SLAVE_u8_SpiSetMsbLsb+0xc>
    1588:	81 e0       	ldi	r24, 0x01	; 1
    158a:	08 95       	ret
	{
		SET_BIT(SPCR,DORD);
    158c:	6d 9a       	sbi	0x0d, 5	; 13
    158e:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		//Do Nothing
	}
	return Loc_u8_Retval;
}
    1590:	08 95       	ret
STD_TYPE MCAL_SPI_MASTER_SLAVE_u8_SpiSetMsbLsb(u8 Loc_u8_SelectMsbLsb)
{
	u8 Loc_u8_Retval = E_NOT_OK;
	if(Loc_u8_SelectMsbLsb == SPI_MSB)
	{
		CLR_BIT(SPCR,DORD);
    1592:	6d 98       	cbi	0x0d, 5	; 13
    1594:	80 e0       	ldi	r24, 0x00	; 0
    1596:	08 95       	ret

00001598 <MCAL_SPI_MASTER_SLAVE_u8_SpiSetEdge>:
}

STD_TYPE MCAL_SPI_MASTER_SLAVE_u8_SpiSetEdge(u8 Loc_u8_SelectEdge)
{
	u8 Loc_u8_Retval = E_NOT_OK;
	if(Loc_u8_SelectEdge == SPI_RISING_EDGE)
    1598:	84 30       	cpi	r24, 0x04	; 4
    159a:	39 f0       	breq	.+14     	; 0x15aa <MCAL_SPI_MASTER_SLAVE_u8_SpiSetEdge+0x12>
	{
		CLR_BIT(SPCR,CPOL);
		Loc_u8_Retval = EOK;
	}
	else if(Loc_u8_SelectEdge == SPI_FALLING_EDGE)
    159c:	85 30       	cpi	r24, 0x05	; 5
    159e:	11 f0       	breq	.+4      	; 0x15a4 <MCAL_SPI_MASTER_SLAVE_u8_SpiSetEdge+0xc>
    15a0:	81 e0       	ldi	r24, 0x01	; 1
    15a2:	08 95       	ret
	{
		SET_BIT(SPCR,CPOL);
    15a4:	6b 9a       	sbi	0x0d, 3	; 13
    15a6:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		//Do Nothing
	}
	return Loc_u8_Retval;
}
    15a8:	08 95       	ret
STD_TYPE MCAL_SPI_MASTER_SLAVE_u8_SpiSetEdge(u8 Loc_u8_SelectEdge)
{
	u8 Loc_u8_Retval = E_NOT_OK;
	if(Loc_u8_SelectEdge == SPI_RISING_EDGE)
	{
		CLR_BIT(SPCR,CPOL);
    15aa:	6b 98       	cbi	0x0d, 3	; 13
    15ac:	80 e0       	ldi	r24, 0x00	; 0
    15ae:	08 95       	ret

000015b0 <MCAL_SPI_MASTER_SLAVE_u8_SpiSetLeadingEdge>:
}

STD_TYPE MCAL_SPI_MASTER_SLAVE_u8_SpiSetLeadingEdge(u8 Loc_u8_SelectLeadingEdge)
{
	u8 Loc_u8_Retval = E_NOT_OK;
	if(Loc_u8_SelectLeadingEdge == SPI_SAMPLE_LEADING)
    15b0:	86 30       	cpi	r24, 0x06	; 6
    15b2:	39 f0       	breq	.+14     	; 0x15c2 <MCAL_SPI_MASTER_SLAVE_u8_SpiSetLeadingEdge+0x12>
	{
		CLR_BIT(SPCR,CPHA);
		Loc_u8_Retval = EOK;
	}
	else if(Loc_u8_SelectLeadingEdge == SPI_SETUP_LEADING)
    15b4:	87 30       	cpi	r24, 0x07	; 7
    15b6:	11 f0       	breq	.+4      	; 0x15bc <MCAL_SPI_MASTER_SLAVE_u8_SpiSetLeadingEdge+0xc>
    15b8:	81 e0       	ldi	r24, 0x01	; 1
    15ba:	08 95       	ret
	{
		SET_BIT(SPCR,CPHA);
    15bc:	6a 9a       	sbi	0x0d, 2	; 13
    15be:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		//Do Nothing
	}
	return Loc_u8_Retval;
}
    15c0:	08 95       	ret
STD_TYPE MCAL_SPI_MASTER_SLAVE_u8_SpiSetLeadingEdge(u8 Loc_u8_SelectLeadingEdge)
{
	u8 Loc_u8_Retval = E_NOT_OK;
	if(Loc_u8_SelectLeadingEdge == SPI_SAMPLE_LEADING)
	{
		CLR_BIT(SPCR,CPHA);
    15c2:	6a 98       	cbi	0x0d, 2	; 13
    15c4:	80 e0       	ldi	r24, 0x00	; 0
    15c6:	08 95       	ret

000015c8 <MCAL_SPI_MASTER_SLAVE_u8_SpiSetPrescaler>:
}

STD_TYPE MCAL_SPI_MASTER_SLAVE_u8_SpiSetPrescaler(u8 Loc_u8_SelectPrescaler)
{
	u8 Loc_u8_Retval = E_NOT_OK;
	if(Loc_u8_SelectPrescaler == SPI_PRESCALER_4)
    15c8:	88 23       	and	r24, r24
    15ca:	81 f0       	breq	.+32     	; 0x15ec <MCAL_SPI_MASTER_SLAVE_u8_SpiSetPrescaler+0x24>
		CLR_BIT(SPCR,SPR0);
		CLR_BIT(SPCR,SPR1);
		CLR_BIT(SPSR,SPI2X);
		Loc_u8_Retval = EOK;
	}
	else if(Loc_u8_SelectPrescaler == SPI_PRESCALER_16)
    15cc:	81 30       	cpi	r24, 0x01	; 1
    15ce:	91 f0       	breq	.+36     	; 0x15f4 <MCAL_SPI_MASTER_SLAVE_u8_SpiSetPrescaler+0x2c>
		SET_BIT(SPCR,SPR0);
		CLR_BIT(SPCR,SPR1);
		CLR_BIT(SPSR,SPI2X);
		Loc_u8_Retval = EOK;
	}
	else if(Loc_u8_SelectPrescaler == SPI_PRESCALER_64)
    15d0:	82 30       	cpi	r24, 0x02	; 2
    15d2:	d1 f0       	breq	.+52     	; 0x1608 <MCAL_SPI_MASTER_SLAVE_u8_SpiSetPrescaler+0x40>
		CLR_BIT(SPCR,SPR0);
		SET_BIT(SPCR,SPR1);
		CLR_BIT(SPSR,SPI2X);
		Loc_u8_Retval = EOK;
	}
	else if(Loc_u8_SelectPrescaler == SPI_PRESCALER_128)
    15d4:	83 30       	cpi	r24, 0x03	; 3
    15d6:	e9 f0       	breq	.+58     	; 0x1612 <MCAL_SPI_MASTER_SLAVE_u8_SpiSetPrescaler+0x4a>
		SET_BIT(SPCR,SPR0);
		SET_BIT(SPCR,SPR1);
		CLR_BIT(SPSR,SPI2X);
		Loc_u8_Retval = EOK;
	}
	else if(Loc_u8_SelectPrescaler == SPI_PRESCALER_SPI2X_2)
    15d8:	84 30       	cpi	r24, 0x04	; 4
    15da:	89 f0       	breq	.+34     	; 0x15fe <MCAL_SPI_MASTER_SLAVE_u8_SpiSetPrescaler+0x36>
		CLR_BIT(SPCR,SPR0);
		CLR_BIT(SPCR,SPR1);
		SET_BIT(SPSR,SPI2X);
		Loc_u8_Retval = EOK;
	}
	else if(Loc_u8_SelectPrescaler == SPI_PRESCALER_SPI2X_8)
    15dc:	85 30       	cpi	r24, 0x05	; 5
    15de:	f1 f0       	breq	.+60     	; 0x161c <MCAL_SPI_MASTER_SLAVE_u8_SpiSetPrescaler+0x54>
		SET_BIT(SPCR,SPR0);
		CLR_BIT(SPCR,SPR1);
		SET_BIT(SPSR,SPI2X);
		Loc_u8_Retval = EOK;
	}
	else if(Loc_u8_SelectPrescaler == SPI_PRESCALER_SPI2X_32)
    15e0:	86 30       	cpi	r24, 0x06	; 6
    15e2:	09 f1       	breq	.+66     	; 0x1626 <MCAL_SPI_MASTER_SLAVE_u8_SpiSetPrescaler+0x5e>
		CLR_BIT(SPCR,SPR0);
		SET_BIT(SPCR,SPR1);
		SET_BIT(SPSR,SPI2X);
		Loc_u8_Retval = EOK;
	}
	else if(Loc_u8_SelectPrescaler == SPI_PRESCALER_SPI2X_64)
    15e4:	87 30       	cpi	r24, 0x07	; 7
    15e6:	21 f1       	breq	.+72     	; 0x1630 <MCAL_SPI_MASTER_SLAVE_u8_SpiSetPrescaler+0x68>
    15e8:	81 e0       	ldi	r24, 0x01	; 1
    15ea:	08 95       	ret
STD_TYPE MCAL_SPI_MASTER_SLAVE_u8_SpiSetPrescaler(u8 Loc_u8_SelectPrescaler)
{
	u8 Loc_u8_Retval = E_NOT_OK;
	if(Loc_u8_SelectPrescaler == SPI_PRESCALER_4)
	{
		CLR_BIT(SPCR,SPR0);
    15ec:	68 98       	cbi	0x0d, 0	; 13
		CLR_BIT(SPCR,SPR1);
    15ee:	69 98       	cbi	0x0d, 1	; 13
		CLR_BIT(SPSR,SPI2X);
    15f0:	70 98       	cbi	0x0e, 0	; 14
    15f2:	08 95       	ret
		Loc_u8_Retval = EOK;
	}
	else if(Loc_u8_SelectPrescaler == SPI_PRESCALER_16)
	{
		SET_BIT(SPCR,SPR0);
    15f4:	68 9a       	sbi	0x0d, 0	; 13
		CLR_BIT(SPCR,SPR1);
    15f6:	69 98       	cbi	0x0d, 1	; 13
		CLR_BIT(SPSR,SPI2X);
    15f8:	70 98       	cbi	0x0e, 0	; 14
    15fa:	80 e0       	ldi	r24, 0x00	; 0
    15fc:	08 95       	ret
		CLR_BIT(SPSR,SPI2X);
		Loc_u8_Retval = EOK;
	}
	else if(Loc_u8_SelectPrescaler == SPI_PRESCALER_SPI2X_2)
	{
		CLR_BIT(SPCR,SPR0);
    15fe:	68 98       	cbi	0x0d, 0	; 13
		CLR_BIT(SPCR,SPR1);
    1600:	69 98       	cbi	0x0d, 1	; 13
		SET_BIT(SPSR,SPI2X);
    1602:	70 9a       	sbi	0x0e, 0	; 14
    1604:	80 e0       	ldi	r24, 0x00	; 0
    1606:	08 95       	ret
		CLR_BIT(SPSR,SPI2X);
		Loc_u8_Retval = EOK;
	}
	else if(Loc_u8_SelectPrescaler == SPI_PRESCALER_64)
	{
		CLR_BIT(SPCR,SPR0);
    1608:	68 98       	cbi	0x0d, 0	; 13
		SET_BIT(SPCR,SPR1);
    160a:	69 9a       	sbi	0x0d, 1	; 13
		CLR_BIT(SPSR,SPI2X);
    160c:	70 98       	cbi	0x0e, 0	; 14
    160e:	80 e0       	ldi	r24, 0x00	; 0
    1610:	08 95       	ret
		Loc_u8_Retval = EOK;
	}
	else if(Loc_u8_SelectPrescaler == SPI_PRESCALER_128)
	{
		SET_BIT(SPCR,SPR0);
    1612:	68 9a       	sbi	0x0d, 0	; 13
		SET_BIT(SPCR,SPR1);
    1614:	69 9a       	sbi	0x0d, 1	; 13
		CLR_BIT(SPSR,SPI2X);
    1616:	70 98       	cbi	0x0e, 0	; 14
    1618:	80 e0       	ldi	r24, 0x00	; 0
    161a:	08 95       	ret
		SET_BIT(SPSR,SPI2X);
		Loc_u8_Retval = EOK;
	}
	else if(Loc_u8_SelectPrescaler == SPI_PRESCALER_SPI2X_8)
	{
		SET_BIT(SPCR,SPR0);
    161c:	68 9a       	sbi	0x0d, 0	; 13
		CLR_BIT(SPCR,SPR1);
    161e:	69 98       	cbi	0x0d, 1	; 13
		SET_BIT(SPSR,SPI2X);
    1620:	70 9a       	sbi	0x0e, 0	; 14
    1622:	80 e0       	ldi	r24, 0x00	; 0
    1624:	08 95       	ret
		Loc_u8_Retval = EOK;
	}
	else if(Loc_u8_SelectPrescaler == SPI_PRESCALER_SPI2X_32)
	{
		CLR_BIT(SPCR,SPR0);
    1626:	68 98       	cbi	0x0d, 0	; 13
		SET_BIT(SPCR,SPR1);
    1628:	69 9a       	sbi	0x0d, 1	; 13
		SET_BIT(SPSR,SPI2X);
    162a:	70 9a       	sbi	0x0e, 0	; 14
    162c:	80 e0       	ldi	r24, 0x00	; 0
    162e:	08 95       	ret
		Loc_u8_Retval = EOK;
	}
	else if(Loc_u8_SelectPrescaler == SPI_PRESCALER_SPI2X_64)
	{
		SET_BIT(SPCR,SPR0);
    1630:	68 9a       	sbi	0x0d, 0	; 13
		SET_BIT(SPCR,SPR1);
    1632:	69 9a       	sbi	0x0d, 1	; 13
		SET_BIT(SPSR,SPI2X);
    1634:	70 9a       	sbi	0x0e, 0	; 14
    1636:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		//Do Nothing
	}
	return Loc_u8_Retval;
}
    1638:	08 95       	ret

0000163a <MCAL_SPI_MASTER_u8_SpiMaster_Transceive>:

u8 MCAL_SPI_MASTER_u8_SpiMaster_Transceive(u8 Loc_u8_Data)
{

	SPDR = Loc_u8_Data;
    163a:	8f b9       	out	0x0f, r24	; 15
	while(!GET_BIT(SPSR,SPIF));
    163c:	77 9b       	sbis	0x0e, 7	; 14
    163e:	fe cf       	rjmp	.-4      	; 0x163c <MCAL_SPI_MASTER_u8_SpiMaster_Transceive+0x2>
	return SPDR;
    1640:	8f b1       	in	r24, 0x0f	; 15
}
    1642:	08 95       	ret

00001644 <MCAL_SPI_SLAVE_u8_SpiSlave_Transceive>:
	}
}*/

u8 MCAL_SPI_SLAVE_u8_SpiSlave_Transceive(u8 Loc_u8_Data)
{
	SPDR = Loc_u8_Data;
    1644:	8f b9       	out	0x0f, r24	; 15
	while(!GET_BIT(SPSR,SPIF));
    1646:	77 9b       	sbis	0x0e, 7	; 14
    1648:	fe cf       	rjmp	.-4      	; 0x1646 <MCAL_SPI_SLAVE_u8_SpiSlave_Transceive+0x2>
	return SPDR;
    164a:	8f b1       	in	r24, 0x0f	; 15
}
    164c:	08 95       	ret

0000164e <MCAL_SPI_MASTER_SLAVE_u8_SetMasterSalve_Prescaler_SpiMasterSlaveInit>:
 * **********************************************************************
 **/

STD_TYPE MCAL_SPI_MASTER_SLAVE_u8_SetMasterSalve_Prescaler_SpiMasterSlaveInit(u8 Loc_u8_SelectMasterSlave,
																			  u8 Loc_u8_SelectPrescaler)
{
    164e:	1f 93       	push	r17
    1650:	16 2f       	mov	r17, r22
	u8 Loc_u8_Retval = E_NOT_OK;
	if((Loc_u8_SelectMasterSlave <= SPI_MASTER) && (Loc_u8_SelectPrescaler <= SPI_PRESCALER_SPI2X_64))
    1652:	82 30       	cpi	r24, 0x02	; 2
    1654:	18 f0       	brcs	.+6      	; 0x165c <MCAL_SPI_MASTER_SLAVE_u8_SetMasterSalve_Prescaler_SpiMasterSlaveInit+0xe>
	SET_BIT(SPCR,SPIE);
}

void MCAL_SPI_MASTER_SLAVE_void_SpiEnable(void)
{
	SET_BIT(SPCR,SPE);
    1656:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		//Do Nothing
	}
	return Loc_u8_Retval;
}
    1658:	1f 91       	pop	r17
    165a:	08 95       	ret

STD_TYPE MCAL_SPI_MASTER_SLAVE_u8_SetMasterSalve_Prescaler_SpiMasterSlaveInit(u8 Loc_u8_SelectMasterSlave,
																			  u8 Loc_u8_SelectPrescaler)
{
	u8 Loc_u8_Retval = E_NOT_OK;
	if((Loc_u8_SelectMasterSlave <= SPI_MASTER) && (Loc_u8_SelectPrescaler <= SPI_PRESCALER_SPI2X_64))
    165c:	68 30       	cpi	r22, 0x08	; 8
    165e:	d8 f7       	brcc	.-10     	; 0x1656 <MCAL_SPI_MASTER_SLAVE_u8_SetMasterSalve_Prescaler_SpiMasterSlaveInit+0x8>
	{
		if  (Loc_u8_SelectMasterSlave == SPI_MASTER)
    1660:	81 30       	cpi	r24, 0x01	; 1
    1662:	b1 f0       	breq	.+44     	; 0x1690 <MCAL_SPI_MASTER_SLAVE_u8_SetMasterSalve_Prescaler_SpiMasterSlaveInit+0x42>
			Loc_u8_Retval = MCAL_SPI_MASTER_SLAVE_u8_SpiSetMasterSlave(Loc_u8_SelectMasterSlave);
			MCAL_SPI_MASTER_SLAVE_void_SpiEnable();
		}
		else if (Loc_u8_SelectMasterSlave == SPI_SLAVE)
		{
			Loc_u8_Retval = MCAL_DIO_u8SetPinDirection(MISO_PORT,MISO_PIN,PIN_OUTPUT);
    1664:	81 e0       	ldi	r24, 0x01	; 1
    1666:	66 e0       	ldi	r22, 0x06	; 6
    1668:	41 e0       	ldi	r20, 0x01	; 1
    166a:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <MCAL_DIO_u8SetPinDirection>
			Loc_u8_Retval = MCAL_SPI_MASTER_SLAVE_u8_SpiSetLeadingEdge(SPI_SETUP_LEADING);
    166e:	87 e0       	ldi	r24, 0x07	; 7
    1670:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <MCAL_SPI_MASTER_SLAVE_u8_SpiSetLeadingEdge>
			Loc_u8_Retval = MCAL_SPI_MASTER_SLAVE_u8_SpiSetEdge(SPI_FALLING_EDGE);
    1674:	85 e0       	ldi	r24, 0x05	; 5
    1676:	0e 94 cc 0a 	call	0x1598	; 0x1598 <MCAL_SPI_MASTER_SLAVE_u8_SpiSetEdge>
			Loc_u8_Retval = MCAL_SPI_MASTER_SLAVE_u8_SpiSetMsbLsb(SPI_LSB);
    167a:	83 e0       	ldi	r24, 0x03	; 3
    167c:	0e 94 c0 0a 	call	0x1580	; 0x1580 <MCAL_SPI_MASTER_SLAVE_u8_SpiSetMsbLsb>
			Loc_u8_Retval = MCAL_SPI_MASTER_SLAVE_u8_SpiSetPrescaler(Loc_u8_SelectPrescaler);
    1680:	81 2f       	mov	r24, r17
    1682:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <MCAL_SPI_MASTER_SLAVE_u8_SpiSetPrescaler>
			Loc_u8_Retval = MCAL_SPI_MASTER_SLAVE_u8_SpiSetMasterSlave(Loc_u8_SelectMasterSlave);
    1686:	80 e0       	ldi	r24, 0x00	; 0
    1688:	0e 94 b1 0a 	call	0x1562	; 0x1562 <MCAL_SPI_MASTER_SLAVE_u8_SpiSetMasterSlave>
	SET_BIT(SPCR,SPIE);
}

void MCAL_SPI_MASTER_SLAVE_void_SpiEnable(void)
{
	SET_BIT(SPCR,SPE);
    168c:	6e 9a       	sbi	0x0d, 6	; 13
    168e:	e4 cf       	rjmp	.-56     	; 0x1658 <MCAL_SPI_MASTER_SLAVE_u8_SetMasterSalve_Prescaler_SpiMasterSlaveInit+0xa>
	u8 Loc_u8_Retval = E_NOT_OK;
	if((Loc_u8_SelectMasterSlave <= SPI_MASTER) && (Loc_u8_SelectPrescaler <= SPI_PRESCALER_SPI2X_64))
	{
		if  (Loc_u8_SelectMasterSlave == SPI_MASTER)
		{
			Loc_u8_Retval = MCAL_DIO_u8SetPinDirection(MOSI_PORT,MOSI_PIN,PIN_OUTPUT);
    1690:	65 e0       	ldi	r22, 0x05	; 5
    1692:	41 e0       	ldi	r20, 0x01	; 1
    1694:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <MCAL_DIO_u8SetPinDirection>
			Loc_u8_Retval = MCAL_DIO_u8SetPinDirection(SS_PORT,SS_PIN,PIN_OUTPUT);
    1698:	81 e0       	ldi	r24, 0x01	; 1
    169a:	64 e0       	ldi	r22, 0x04	; 4
    169c:	41 e0       	ldi	r20, 0x01	; 1
    169e:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <MCAL_DIO_u8SetPinDirection>
			Loc_u8_Retval = MCAL_DIO_u8SetPinDirection(SCK_PORT,SCK_PIN,PIN_OUTPUT);
    16a2:	81 e0       	ldi	r24, 0x01	; 1
    16a4:	67 e0       	ldi	r22, 0x07	; 7
    16a6:	41 e0       	ldi	r20, 0x01	; 1
    16a8:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <MCAL_DIO_u8SetPinDirection>
			Loc_u8_Retval = MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_HIGH);
    16ac:	81 e0       	ldi	r24, 0x01	; 1
    16ae:	64 e0       	ldi	r22, 0x04	; 4
    16b0:	41 e0       	ldi	r20, 0x01	; 1
    16b2:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
			Loc_u8_Retval = MCAL_SPI_MASTER_SLAVE_u8_SpiSetLeadingEdge(SPI_SETUP_LEADING);
    16b6:	87 e0       	ldi	r24, 0x07	; 7
    16b8:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <MCAL_SPI_MASTER_SLAVE_u8_SpiSetLeadingEdge>
			Loc_u8_Retval = MCAL_SPI_MASTER_SLAVE_u8_SpiSetEdge(SPI_FALLING_EDGE);
    16bc:	85 e0       	ldi	r24, 0x05	; 5
    16be:	0e 94 cc 0a 	call	0x1598	; 0x1598 <MCAL_SPI_MASTER_SLAVE_u8_SpiSetEdge>
			Loc_u8_Retval = MCAL_SPI_MASTER_SLAVE_u8_SpiSetMsbLsb(SPI_LSB);
    16c2:	83 e0       	ldi	r24, 0x03	; 3
    16c4:	0e 94 c0 0a 	call	0x1580	; 0x1580 <MCAL_SPI_MASTER_SLAVE_u8_SpiSetMsbLsb>
			Loc_u8_Retval = MCAL_SPI_MASTER_SLAVE_u8_SpiSetPrescaler(Loc_u8_SelectPrescaler);
    16c8:	81 2f       	mov	r24, r17
    16ca:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <MCAL_SPI_MASTER_SLAVE_u8_SpiSetPrescaler>
			Loc_u8_Retval = MCAL_SPI_MASTER_SLAVE_u8_SpiSetMasterSlave(Loc_u8_SelectMasterSlave);
    16ce:	81 e0       	ldi	r24, 0x01	; 1
    16d0:	0e 94 b1 0a 	call	0x1562	; 0x1562 <MCAL_SPI_MASTER_SLAVE_u8_SpiSetMasterSlave>
	SET_BIT(SPCR,SPIE);
}

void MCAL_SPI_MASTER_SLAVE_void_SpiEnable(void)
{
	SET_BIT(SPCR,SPE);
    16d4:	6e 9a       	sbi	0x0d, 6	; 13
    16d6:	c0 cf       	rjmp	.-128    	; 0x1658 <MCAL_SPI_MASTER_SLAVE_u8_SetMasterSalve_Prescaler_SpiMasterSlaveInit+0xa>

000016d8 <MCAL_EXT_INT_voidEXTInt_Init>:

void (*GLOB_CallBackToAPP[3]) (void) = {NULL,NULL,NULL};

void MCAL_EXT_INT_voidEXTInt_Init(u8 LOC_u8IntNum,u8 LOC_u8SenseControl)
{
	if (LOC_u8IntNum == INT_0)
    16d8:	88 23       	and	r24, r24
    16da:	61 f4       	brne	.+24     	; 0x16f4 <MCAL_EXT_INT_voidEXTInt_Init+0x1c>
	{
		SET_BIT(GICR,INT0_BIT);
    16dc:	8b b7       	in	r24, 0x3b	; 59
    16de:	80 64       	ori	r24, 0x40	; 64
    16e0:	8b bf       	out	0x3b, r24	; 59
		switch(LOC_u8SenseControl)
    16e2:	61 30       	cpi	r22, 0x01	; 1
    16e4:	61 f1       	breq	.+88     	; 0x173e <MCAL_EXT_INT_voidEXTInt_Init+0x66>
    16e6:	61 30       	cpi	r22, 0x01	; 1
    16e8:	a8 f0       	brcs	.+42     	; 0x1714 <MCAL_EXT_INT_voidEXTInt_Init+0x3c>
    16ea:	62 30       	cpi	r22, 0x02	; 2
    16ec:	b1 f1       	breq	.+108    	; 0x175a <MCAL_EXT_INT_voidEXTInt_Init+0x82>
    16ee:	63 30       	cpi	r22, 0x03	; 3
    16f0:	69 f1       	breq	.+90     	; 0x174c <MCAL_EXT_INT_voidEXTInt_Init+0x74>
    16f2:	08 95       	ret
			break;
		default:
			break;
		}
	}
	else if (LOC_u8IntNum == INT_1)
    16f4:	81 30       	cpi	r24, 0x01	; 1
    16f6:	a9 f0       	breq	.+42     	; 0x1722 <MCAL_EXT_INT_voidEXTInt_Init+0x4a>
		default:
			break;
		}

	}
	else if (LOC_u8IntNum == INT_2)
    16f8:	82 30       	cpi	r24, 0x02	; 2
    16fa:	d9 f7       	brne	.-10     	; 0x16f2 <MCAL_EXT_INT_voidEXTInt_Init+0x1a>
	{
		SET_BIT(GICR,INT2_BIT);
    16fc:	8b b7       	in	r24, 0x3b	; 59
    16fe:	80 62       	ori	r24, 0x20	; 32
    1700:	8b bf       	out	0x3b, r24	; 59
		switch(LOC_u8SenseControl)
    1702:	62 30       	cpi	r22, 0x02	; 2
    1704:	09 f4       	brne	.+2      	; 0x1708 <MCAL_EXT_INT_voidEXTInt_Init+0x30>
    1706:	42 c0       	rjmp	.+132    	; 0x178c <MCAL_EXT_INT_voidEXTInt_Init+0xb4>
    1708:	63 30       	cpi	r22, 0x03	; 3
    170a:	99 f7       	brne	.-26     	; 0x16f2 <MCAL_EXT_INT_voidEXTInt_Init+0x1a>
		{
		case FALLING_EDGE:
			CLR_BIT(MCUCSR,ISC2_BIT);
			break;
		case RISING_EDGE:
			SET_BIT(MCUCSR,ISC2_BIT);
    170c:	84 b7       	in	r24, 0x34	; 52
    170e:	80 64       	ori	r24, 0x40	; 64
    1710:	84 bf       	out	0x34, r24	; 52
    1712:	08 95       	ret
	{
		SET_BIT(GICR,INT0_BIT);
		switch(LOC_u8SenseControl)
		{
		case LOW_LEVEL:
			CLR_BIT(MCUCR,ISC00_BIT);
    1714:	85 b7       	in	r24, 0x35	; 53
    1716:	8e 7f       	andi	r24, 0xFE	; 254
    1718:	85 bf       	out	0x35, r24	; 53
			CLR_BIT(MCUCR,ISC01_BIT);
    171a:	85 b7       	in	r24, 0x35	; 53
    171c:	8d 7f       	andi	r24, 0xFD	; 253
    171e:	85 bf       	out	0x35, r24	; 53
    1720:	08 95       	ret
			break;
		}
	}
	else if (LOC_u8IntNum == INT_1)
	{
		SET_BIT(GICR,INT1_BIT);
    1722:	8b b7       	in	r24, 0x3b	; 59
    1724:	80 68       	ori	r24, 0x80	; 128
    1726:	8b bf       	out	0x3b, r24	; 59
		switch(LOC_u8SenseControl)
    1728:	61 30       	cpi	r22, 0x01	; 1
    172a:	a1 f1       	breq	.+104    	; 0x1794 <MCAL_EXT_INT_voidEXTInt_Init+0xbc>
    172c:	61 30       	cpi	r22, 0x01	; 1
    172e:	e0 f4       	brcc	.+56     	; 0x1768 <MCAL_EXT_INT_voidEXTInt_Init+0x90>
		{
		case LOW_LEVEL:
			CLR_BIT(MCUCR,ISC10_BIT);
    1730:	85 b7       	in	r24, 0x35	; 53
    1732:	8b 7f       	andi	r24, 0xFB	; 251
    1734:	85 bf       	out	0x35, r24	; 53
			CLR_BIT(MCUCR,ISC11_BIT);
    1736:	85 b7       	in	r24, 0x35	; 53
    1738:	87 7f       	andi	r24, 0xF7	; 247
    173a:	85 bf       	out	0x35, r24	; 53
    173c:	08 95       	ret
		case LOW_LEVEL:
			CLR_BIT(MCUCR,ISC00_BIT);
			CLR_BIT(MCUCR,ISC01_BIT);
			break;
		case LOGICAL_CHANGE:
			SET_BIT(MCUCR,ISC00_BIT);
    173e:	85 b7       	in	r24, 0x35	; 53
    1740:	81 60       	ori	r24, 0x01	; 1
    1742:	85 bf       	out	0x35, r24	; 53
			CLR_BIT(MCUCR,ISC01_BIT);
    1744:	85 b7       	in	r24, 0x35	; 53
    1746:	8d 7f       	andi	r24, 0xFD	; 253
    1748:	85 bf       	out	0x35, r24	; 53
    174a:	08 95       	ret
		case FALLING_EDGE:
			CLR_BIT(MCUCR,ISC00_BIT);
			SET_BIT(MCUCR,ISC01_BIT);
			break;
		case RISING_EDGE:
			SET_BIT(MCUCR,ISC00_BIT);
    174c:	85 b7       	in	r24, 0x35	; 53
    174e:	81 60       	ori	r24, 0x01	; 1
    1750:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,ISC01_BIT);
    1752:	85 b7       	in	r24, 0x35	; 53
    1754:	82 60       	ori	r24, 0x02	; 2
    1756:	85 bf       	out	0x35, r24	; 53
    1758:	08 95       	ret
		case LOGICAL_CHANGE:
			SET_BIT(MCUCR,ISC00_BIT);
			CLR_BIT(MCUCR,ISC01_BIT);
			break;
		case FALLING_EDGE:
			CLR_BIT(MCUCR,ISC00_BIT);
    175a:	85 b7       	in	r24, 0x35	; 53
    175c:	8e 7f       	andi	r24, 0xFE	; 254
    175e:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,ISC01_BIT);
    1760:	85 b7       	in	r24, 0x35	; 53
    1762:	82 60       	ori	r24, 0x02	; 2
    1764:	85 bf       	out	0x35, r24	; 53
    1766:	08 95       	ret
		}
	}
	else if (LOC_u8IntNum == INT_1)
	{
		SET_BIT(GICR,INT1_BIT);
		switch(LOC_u8SenseControl)
    1768:	62 30       	cpi	r22, 0x02	; 2
    176a:	49 f0       	breq	.+18     	; 0x177e <MCAL_EXT_INT_voidEXTInt_Init+0xa6>
    176c:	63 30       	cpi	r22, 0x03	; 3
    176e:	09 f6       	brne	.-126    	; 0x16f2 <MCAL_EXT_INT_voidEXTInt_Init+0x1a>
		case FALLING_EDGE:
			CLR_BIT(MCUCR,ISC10_BIT);
			SET_BIT(MCUCR,ISC11_BIT);
			break;
		case RISING_EDGE:
			SET_BIT(MCUCR,ISC10_BIT);
    1770:	85 b7       	in	r24, 0x35	; 53
    1772:	84 60       	ori	r24, 0x04	; 4
    1774:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,ISC11_BIT);
    1776:	85 b7       	in	r24, 0x35	; 53
    1778:	88 60       	ori	r24, 0x08	; 8
    177a:	85 bf       	out	0x35, r24	; 53
    177c:	08 95       	ret
		case LOGICAL_CHANGE:
			SET_BIT(MCUCR,ISC10_BIT);
			CLR_BIT(MCUCR,ISC11_BIT);
			break;
		case FALLING_EDGE:
			CLR_BIT(MCUCR,ISC10_BIT);
    177e:	85 b7       	in	r24, 0x35	; 53
    1780:	8b 7f       	andi	r24, 0xFB	; 251
    1782:	85 bf       	out	0x35, r24	; 53
			SET_BIT(MCUCR,ISC11_BIT);
    1784:	85 b7       	in	r24, 0x35	; 53
    1786:	88 60       	ori	r24, 0x08	; 8
    1788:	85 bf       	out	0x35, r24	; 53
    178a:	08 95       	ret
	{
		SET_BIT(GICR,INT2_BIT);
		switch(LOC_u8SenseControl)
		{
		case FALLING_EDGE:
			CLR_BIT(MCUCSR,ISC2_BIT);
    178c:	84 b7       	in	r24, 0x34	; 52
    178e:	8f 7b       	andi	r24, 0xBF	; 191
    1790:	84 bf       	out	0x34, r24	; 52
    1792:	08 95       	ret
		case LOW_LEVEL:
			CLR_BIT(MCUCR,ISC10_BIT);
			CLR_BIT(MCUCR,ISC11_BIT);
			break;
		case LOGICAL_CHANGE:
			SET_BIT(MCUCR,ISC10_BIT);
    1794:	85 b7       	in	r24, 0x35	; 53
    1796:	84 60       	ori	r24, 0x04	; 4
    1798:	85 bf       	out	0x35, r24	; 53
			CLR_BIT(MCUCR,ISC11_BIT);
    179a:	85 b7       	in	r24, 0x35	; 53
    179c:	87 7f       	andi	r24, 0xF7	; 247
    179e:	85 bf       	out	0x35, r24	; 53
    17a0:	08 95       	ret

000017a2 <MCAL_EXT_INT_voidEXTInt_CallBack>:
	}
}

void MCAL_EXT_INT_voidEXTInt_CallBack(u8 LOC_u8IntNum, void(*InterruptAction)(void))
{
	if (InterruptAction != NULL)
    17a2:	61 15       	cp	r22, r1
    17a4:	71 05       	cpc	r23, r1
    17a6:	41 f0       	breq	.+16     	; 0x17b8 <MCAL_EXT_INT_voidEXTInt_CallBack+0x16>
	{
		GLOB_CallBackToAPP[LOC_u8IntNum] = InterruptAction;
    17a8:	e8 2f       	mov	r30, r24
    17aa:	f0 e0       	ldi	r31, 0x00	; 0
    17ac:	ee 0f       	add	r30, r30
    17ae:	ff 1f       	adc	r31, r31
    17b0:	e2 5b       	subi	r30, 0xB2	; 178
    17b2:	fc 4f       	sbci	r31, 0xFC	; 252
    17b4:	71 83       	std	Z+1, r23	; 0x01
    17b6:	60 83       	st	Z, r22
    17b8:	08 95       	ret

000017ba <__vector_1>:
}



ISR(EXTINT0_vect)
{
    17ba:	1f 92       	push	r1
    17bc:	0f 92       	push	r0
    17be:	0f b6       	in	r0, 0x3f	; 63
    17c0:	0f 92       	push	r0
    17c2:	11 24       	eor	r1, r1
    17c4:	2f 93       	push	r18
    17c6:	3f 93       	push	r19
    17c8:	4f 93       	push	r20
    17ca:	5f 93       	push	r21
    17cc:	6f 93       	push	r22
    17ce:	7f 93       	push	r23
    17d0:	8f 93       	push	r24
    17d2:	9f 93       	push	r25
    17d4:	af 93       	push	r26
    17d6:	bf 93       	push	r27
    17d8:	ef 93       	push	r30
    17da:	ff 93       	push	r31
	if (GLOB_CallBackToAPP[INT_0] != NULL)
    17dc:	e0 91 4e 03 	lds	r30, 0x034E
    17e0:	f0 91 4f 03 	lds	r31, 0x034F
    17e4:	30 97       	sbiw	r30, 0x00	; 0
    17e6:	09 f0       	breq	.+2      	; 0x17ea <__vector_1+0x30>
	{
		GLOB_CallBackToAPP[INT_0]();
    17e8:	09 95       	icall
	}
}
    17ea:	ff 91       	pop	r31
    17ec:	ef 91       	pop	r30
    17ee:	bf 91       	pop	r27
    17f0:	af 91       	pop	r26
    17f2:	9f 91       	pop	r25
    17f4:	8f 91       	pop	r24
    17f6:	7f 91       	pop	r23
    17f8:	6f 91       	pop	r22
    17fa:	5f 91       	pop	r21
    17fc:	4f 91       	pop	r20
    17fe:	3f 91       	pop	r19
    1800:	2f 91       	pop	r18
    1802:	0f 90       	pop	r0
    1804:	0f be       	out	0x3f, r0	; 63
    1806:	0f 90       	pop	r0
    1808:	1f 90       	pop	r1
    180a:	18 95       	reti

0000180c <__vector_2>:
ISR(EXTINT1_vect)
{
    180c:	1f 92       	push	r1
    180e:	0f 92       	push	r0
    1810:	0f b6       	in	r0, 0x3f	; 63
    1812:	0f 92       	push	r0
    1814:	11 24       	eor	r1, r1
    1816:	2f 93       	push	r18
    1818:	3f 93       	push	r19
    181a:	4f 93       	push	r20
    181c:	5f 93       	push	r21
    181e:	6f 93       	push	r22
    1820:	7f 93       	push	r23
    1822:	8f 93       	push	r24
    1824:	9f 93       	push	r25
    1826:	af 93       	push	r26
    1828:	bf 93       	push	r27
    182a:	ef 93       	push	r30
    182c:	ff 93       	push	r31
	if (GLOB_CallBackToAPP[INT_1] != NULL)
    182e:	e0 91 50 03 	lds	r30, 0x0350
    1832:	f0 91 51 03 	lds	r31, 0x0351
    1836:	30 97       	sbiw	r30, 0x00	; 0
    1838:	09 f0       	breq	.+2      	; 0x183c <__vector_2+0x30>
	{
		GLOB_CallBackToAPP[INT_1]();
    183a:	09 95       	icall
	}
}
    183c:	ff 91       	pop	r31
    183e:	ef 91       	pop	r30
    1840:	bf 91       	pop	r27
    1842:	af 91       	pop	r26
    1844:	9f 91       	pop	r25
    1846:	8f 91       	pop	r24
    1848:	7f 91       	pop	r23
    184a:	6f 91       	pop	r22
    184c:	5f 91       	pop	r21
    184e:	4f 91       	pop	r20
    1850:	3f 91       	pop	r19
    1852:	2f 91       	pop	r18
    1854:	0f 90       	pop	r0
    1856:	0f be       	out	0x3f, r0	; 63
    1858:	0f 90       	pop	r0
    185a:	1f 90       	pop	r1
    185c:	18 95       	reti

0000185e <__vector_3>:
ISR(EXTINT2_vect)
{
    185e:	1f 92       	push	r1
    1860:	0f 92       	push	r0
    1862:	0f b6       	in	r0, 0x3f	; 63
    1864:	0f 92       	push	r0
    1866:	11 24       	eor	r1, r1
    1868:	2f 93       	push	r18
    186a:	3f 93       	push	r19
    186c:	4f 93       	push	r20
    186e:	5f 93       	push	r21
    1870:	6f 93       	push	r22
    1872:	7f 93       	push	r23
    1874:	8f 93       	push	r24
    1876:	9f 93       	push	r25
    1878:	af 93       	push	r26
    187a:	bf 93       	push	r27
    187c:	ef 93       	push	r30
    187e:	ff 93       	push	r31
	if (GLOB_CallBackToAPP[INT_2] != NULL)
    1880:	e0 91 52 03 	lds	r30, 0x0352
    1884:	f0 91 53 03 	lds	r31, 0x0353
    1888:	30 97       	sbiw	r30, 0x00	; 0
    188a:	09 f0       	breq	.+2      	; 0x188e <__vector_3+0x30>
	{
		GLOB_CallBackToAPP[INT_2]();
    188c:	09 95       	icall
	}
}
    188e:	ff 91       	pop	r31
    1890:	ef 91       	pop	r30
    1892:	bf 91       	pop	r27
    1894:	af 91       	pop	r26
    1896:	9f 91       	pop	r25
    1898:	8f 91       	pop	r24
    189a:	7f 91       	pop	r23
    189c:	6f 91       	pop	r22
    189e:	5f 91       	pop	r21
    18a0:	4f 91       	pop	r20
    18a2:	3f 91       	pop	r19
    18a4:	2f 91       	pop	r18
    18a6:	0f 90       	pop	r0
    18a8:	0f be       	out	0x3f, r0	; 63
    18aa:	0f 90       	pop	r0
    18ac:	1f 90       	pop	r1
    18ae:	18 95       	reti

000018b0 <MCAL_Interrupt_GIE_Enable>:


void MCAL_Interrupt_GIE_Enable(void)
{
	/* To enable the global interrupt */
	SET_BIT(SREG,I_BIT);
    18b0:	8f b7       	in	r24, 0x3f	; 63
    18b2:	80 68       	ori	r24, 0x80	; 128
    18b4:	8f bf       	out	0x3f, r24	; 63
}
    18b6:	08 95       	ret

000018b8 <MCAL_Interrupt_GIE_Disable>:

void MCAL_Interrupt_GIE_Disable(void)
{
	/* To disable the global interrupt */
	CLR_BIT(SREG,I_BIT);
    18b8:	8f b7       	in	r24, 0x3f	; 63
    18ba:	8f 77       	andi	r24, 0x7F	; 127
    18bc:	8f bf       	out	0x3f, r24	; 63
}
    18be:	08 95       	ret

000018c0 <MCAL_DIO_u8SetPortDirection>:
#include "DIO.h"
//SetPortDirection
STD_TYPE MCAL_DIO_u8SetPortDirection (u8 LOC_u8PortID, u8 LOC_u8PortDirection)
{
	u8 LOC_u8Return_Value = E_NOT_OK;
	if((LOC_u8PortID <= PortD))
    18c0:	84 30       	cpi	r24, 0x04	; 4
    18c2:	58 f4       	brcc	.+22     	; 0x18da <MCAL_DIO_u8SetPortDirection+0x1a>
	{
		if (LOC_u8PortID ==PortA)
    18c4:	88 23       	and	r24, r24
    18c6:	39 f0       	breq	.+14     	; 0x18d6 <MCAL_DIO_u8SetPortDirection+0x16>
		{
			DDRA = LOC_u8PortDirection;
			LOC_u8Return_Value = E_OK;
		}
		else if(LOC_u8PortID ==PortB)
    18c8:	81 30       	cpi	r24, 0x01	; 1
    18ca:	61 f0       	breq	.+24     	; 0x18e4 <MCAL_DIO_u8SetPortDirection+0x24>
		{
			DDRB = LOC_u8PortDirection;
			LOC_u8Return_Value = E_OK;
		}
		else if(LOC_u8PortID ==PortC)
    18cc:	82 30       	cpi	r24, 0x02	; 2
    18ce:	39 f0       	breq	.+14     	; 0x18de <MCAL_DIO_u8SetPortDirection+0x1e>
			DDRC = LOC_u8PortDirection;
			LOC_u8Return_Value = E_OK;
		}
		else if(LOC_u8PortID ==PortD)
		{
			DDRD = LOC_u8PortDirection;
    18d0:	61 bb       	out	0x11, r22	; 17
    18d2:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		//Do Nothing
	}
	return LOC_u8Return_Value;
}
    18d4:	08 95       	ret
	u8 LOC_u8Return_Value = E_NOT_OK;
	if((LOC_u8PortID <= PortD))
	{
		if (LOC_u8PortID ==PortA)
		{
			DDRA = LOC_u8PortDirection;
    18d6:	6a bb       	out	0x1a, r22	; 26
    18d8:	08 95       	ret
#include "DIO.h"
//SetPortDirection
STD_TYPE MCAL_DIO_u8SetPortDirection (u8 LOC_u8PortID, u8 LOC_u8PortDirection)
{
	u8 LOC_u8Return_Value = E_NOT_OK;
	if((LOC_u8PortID <= PortD))
    18da:	81 e0       	ldi	r24, 0x01	; 1
    18dc:	08 95       	ret
			DDRB = LOC_u8PortDirection;
			LOC_u8Return_Value = E_OK;
		}
		else if(LOC_u8PortID ==PortC)
		{
			DDRC = LOC_u8PortDirection;
    18de:	64 bb       	out	0x14, r22	; 20
    18e0:	80 e0       	ldi	r24, 0x00	; 0
    18e2:	08 95       	ret
			DDRA = LOC_u8PortDirection;
			LOC_u8Return_Value = E_OK;
		}
		else if(LOC_u8PortID ==PortB)
		{
			DDRB = LOC_u8PortDirection;
    18e4:	67 bb       	out	0x17, r22	; 23
    18e6:	80 e0       	ldi	r24, 0x00	; 0
    18e8:	08 95       	ret

000018ea <MCAL_DIO_u8SetPortValue>:

//SetPortValue
STD_TYPE MCAL_DIO_u8SetPortValue (u8 LOC_u8PortID, u8 LOC_u8PortValue)
{
	u8 LOC_u8Return_Value = E_NOT_OK;
	if( (LOC_u8PortID <= PortD) && (LOC_u8PortValue <= Port_HIGH) )
    18ea:	84 30       	cpi	r24, 0x04	; 4
    18ec:	58 f4       	brcc	.+22     	; 0x1904 <MCAL_DIO_u8SetPortValue+0x1a>
	{
		//		if(LOC_u8PortValue == Port_HIGH)
		//		{
		if(LOC_u8PortID ==PortA)
    18ee:	88 23       	and	r24, r24
    18f0:	39 f0       	breq	.+14     	; 0x1900 <MCAL_DIO_u8SetPortValue+0x16>
		{
			PORTA = LOC_u8PortValue;
			LOC_u8Return_Value = E_OK;
		}
		else if(LOC_u8PortID ==PortB)
    18f2:	81 30       	cpi	r24, 0x01	; 1
    18f4:	61 f0       	breq	.+24     	; 0x190e <MCAL_DIO_u8SetPortValue+0x24>
		{
			PORTB = LOC_u8PortValue;
			LOC_u8Return_Value = E_OK;
		}
		else if(LOC_u8PortID ==PortC)
    18f6:	82 30       	cpi	r24, 0x02	; 2
    18f8:	39 f0       	breq	.+14     	; 0x1908 <MCAL_DIO_u8SetPortValue+0x1e>
			PORTC = LOC_u8PortValue;
			LOC_u8Return_Value = E_OK;
		}
		else if(LOC_u8PortID ==PortD)
		{
			PORTD = LOC_u8PortValue;
    18fa:	62 bb       	out	0x12, r22	; 18
    18fc:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		//Do Nothing
	}
	return LOC_u8Return_Value;
}
    18fe:	08 95       	ret
	{
		//		if(LOC_u8PortValue == Port_HIGH)
		//		{
		if(LOC_u8PortID ==PortA)
		{
			PORTA = LOC_u8PortValue;
    1900:	6b bb       	out	0x1b, r22	; 27
    1902:	08 95       	ret

//SetPortValue
STD_TYPE MCAL_DIO_u8SetPortValue (u8 LOC_u8PortID, u8 LOC_u8PortValue)
{
	u8 LOC_u8Return_Value = E_NOT_OK;
	if( (LOC_u8PortID <= PortD) && (LOC_u8PortValue <= Port_HIGH) )
    1904:	81 e0       	ldi	r24, 0x01	; 1
    1906:	08 95       	ret
			PORTB = LOC_u8PortValue;
			LOC_u8Return_Value = E_OK;
		}
		else if(LOC_u8PortID ==PortC)
		{
			PORTC = LOC_u8PortValue;
    1908:	65 bb       	out	0x15, r22	; 21
    190a:	80 e0       	ldi	r24, 0x00	; 0
    190c:	08 95       	ret
			PORTA = LOC_u8PortValue;
			LOC_u8Return_Value = E_OK;
		}
		else if(LOC_u8PortID ==PortB)
		{
			PORTB = LOC_u8PortValue;
    190e:	68 bb       	out	0x18, r22	; 24
    1910:	80 e0       	ldi	r24, 0x00	; 0
    1912:	08 95       	ret

00001914 <MCAL_DIO_u8SetPinValue>:

//SetPinValue
STD_TYPE MCAL_DIO_u8SetPinValue (u8 LOC_u8PortID, u8 LOC_u8PinID, u8 LOC_u8PinValue)
{
	u8 LOC_u8Return_Value = E_NOT_OK;
	if( (LOC_u8PortID <= PortD) && (LOC_u8PinID <= Pin7) && (LOC_u8PinValue <= Pin_HIGH) )
    1914:	84 30       	cpi	r24, 0x04	; 4
    1916:	20 f4       	brcc	.+8      	; 0x1920 <MCAL_DIO_u8SetPinValue+0xc>
    1918:	68 30       	cpi	r22, 0x08	; 8
    191a:	10 f4       	brcc	.+4      	; 0x1920 <MCAL_DIO_u8SetPinValue+0xc>
    191c:	42 30       	cpi	r20, 0x02	; 2
    191e:	10 f0       	brcs	.+4      	; 0x1924 <MCAL_DIO_u8SetPinValue+0x10>
				CLR_BIT(PORTC,LOC_u8PinID);
				LOC_u8Return_Value = E_OK;
			}
			else if(LOC_u8PortID ==PortD)
			{
				CLR_BIT(PORTD,LOC_u8PinID);
    1920:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		//Do Nothing.
	}
	return LOC_u8Return_Value;
}
    1922:	08 95       	ret
STD_TYPE MCAL_DIO_u8SetPinValue (u8 LOC_u8PortID, u8 LOC_u8PinID, u8 LOC_u8PinValue)
{
	u8 LOC_u8Return_Value = E_NOT_OK;
	if( (LOC_u8PortID <= PortD) && (LOC_u8PinID <= Pin7) && (LOC_u8PinValue <= Pin_HIGH) )
	{
		if(LOC_u8PinValue == Pin_HIGH)
    1924:	41 30       	cpi	r20, 0x01	; 1
    1926:	11 f1       	breq	.+68     	; 0x196c <MCAL_DIO_u8SetPinValue+0x58>
				//Do Nothing
			}
		}
		else if(LOC_u8PinValue == Pin_LOW)
		{
			if(LOC_u8PortID == PortA)
    1928:	88 23       	and	r24, r24
    192a:	99 f0       	breq	.+38     	; 0x1952 <MCAL_DIO_u8SetPinValue+0x3e>
			{
				CLR_BIT(PORTA,LOC_u8PinID);
				LOC_u8Return_Value = E_OK;
			}
			else if(LOC_u8PortID ==PortB)
    192c:	81 30       	cpi	r24, 0x01	; 1
    192e:	09 f4       	brne	.+2      	; 0x1932 <MCAL_DIO_u8SetPinValue+0x1e>
    1930:	3c c0       	rjmp	.+120    	; 0x19aa <MCAL_DIO_u8SetPinValue+0x96>
			{
				CLR_BIT(PORTB,LOC_u8PinID);
				LOC_u8Return_Value = E_OK;
			}
			else if(LOC_u8PortID ==PortC)
    1932:	82 30       	cpi	r24, 0x02	; 2
    1934:	09 f4       	brne	.+2      	; 0x1938 <MCAL_DIO_u8SetPinValue+0x24>
    1936:	52 c0       	rjmp	.+164    	; 0x19dc <MCAL_DIO_u8SetPinValue+0xc8>
				CLR_BIT(PORTC,LOC_u8PinID);
				LOC_u8Return_Value = E_OK;
			}
			else if(LOC_u8PortID ==PortD)
			{
				CLR_BIT(PORTD,LOC_u8PinID);
    1938:	22 b3       	in	r18, 0x12	; 18
    193a:	81 e0       	ldi	r24, 0x01	; 1
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	02 c0       	rjmp	.+4      	; 0x1944 <MCAL_DIO_u8SetPinValue+0x30>
    1940:	88 0f       	add	r24, r24
    1942:	99 1f       	adc	r25, r25
    1944:	6a 95       	dec	r22
    1946:	e2 f7       	brpl	.-8      	; 0x1940 <MCAL_DIO_u8SetPinValue+0x2c>
    1948:	80 95       	com	r24
    194a:	82 23       	and	r24, r18
    194c:	82 bb       	out	0x12, r24	; 18
    194e:	80 e0       	ldi	r24, 0x00	; 0
    1950:	08 95       	ret
		}
		else if(LOC_u8PinValue == Pin_LOW)
		{
			if(LOC_u8PortID == PortA)
			{
				CLR_BIT(PORTA,LOC_u8PinID);
    1952:	2b b3       	in	r18, 0x1b	; 27
    1954:	81 e0       	ldi	r24, 0x01	; 1
    1956:	90 e0       	ldi	r25, 0x00	; 0
    1958:	02 c0       	rjmp	.+4      	; 0x195e <MCAL_DIO_u8SetPinValue+0x4a>
    195a:	88 0f       	add	r24, r24
    195c:	99 1f       	adc	r25, r25
    195e:	6a 95       	dec	r22
    1960:	e2 f7       	brpl	.-8      	; 0x195a <MCAL_DIO_u8SetPinValue+0x46>
    1962:	80 95       	com	r24
    1964:	82 23       	and	r24, r18
    1966:	8b bb       	out	0x1b, r24	; 27
    1968:	80 e0       	ldi	r24, 0x00	; 0
    196a:	08 95       	ret
	u8 LOC_u8Return_Value = E_NOT_OK;
	if( (LOC_u8PortID <= PortD) && (LOC_u8PinID <= Pin7) && (LOC_u8PinValue <= Pin_HIGH) )
	{
		if(LOC_u8PinValue == Pin_HIGH)
		{
			if(LOC_u8PortID == PortA)
    196c:	88 23       	and	r24, r24
    196e:	89 f0       	breq	.+34     	; 0x1992 <MCAL_DIO_u8SetPinValue+0x7e>
			{
				SET_BIT(PORTA,LOC_u8PinID);
				LOC_u8Return_Value = E_OK;
			}
			else if(LOC_u8PortID ==PortB)
    1970:	81 30       	cpi	r24, 0x01	; 1
    1972:	41 f1       	breq	.+80     	; 0x19c4 <MCAL_DIO_u8SetPinValue+0xb0>
			{
				SET_BIT(PORTB,LOC_u8PinID);
				LOC_u8Return_Value = E_OK;
			}
			else if(LOC_u8PortID ==PortC)
    1974:	82 30       	cpi	r24, 0x02	; 2
    1976:	09 f4       	brne	.+2      	; 0x197a <MCAL_DIO_u8SetPinValue+0x66>
    1978:	3e c0       	rjmp	.+124    	; 0x19f6 <MCAL_DIO_u8SetPinValue+0xe2>
				SET_BIT(PORTC,LOC_u8PinID);
				LOC_u8Return_Value = E_OK;
			}
			else if(LOC_u8PortID ==PortD)
			{
				SET_BIT(PORTD,LOC_u8PinID);
    197a:	22 b3       	in	r18, 0x12	; 18
    197c:	81 e0       	ldi	r24, 0x01	; 1
    197e:	90 e0       	ldi	r25, 0x00	; 0
    1980:	02 c0       	rjmp	.+4      	; 0x1986 <MCAL_DIO_u8SetPinValue+0x72>
    1982:	88 0f       	add	r24, r24
    1984:	99 1f       	adc	r25, r25
    1986:	6a 95       	dec	r22
    1988:	e2 f7       	brpl	.-8      	; 0x1982 <MCAL_DIO_u8SetPinValue+0x6e>
    198a:	28 2b       	or	r18, r24
    198c:	22 bb       	out	0x12, r18	; 18
    198e:	80 e0       	ldi	r24, 0x00	; 0
    1990:	08 95       	ret
	{
		if(LOC_u8PinValue == Pin_HIGH)
		{
			if(LOC_u8PortID == PortA)
			{
				SET_BIT(PORTA,LOC_u8PinID);
    1992:	2b b3       	in	r18, 0x1b	; 27
    1994:	81 e0       	ldi	r24, 0x01	; 1
    1996:	90 e0       	ldi	r25, 0x00	; 0
    1998:	02 c0       	rjmp	.+4      	; 0x199e <MCAL_DIO_u8SetPinValue+0x8a>
    199a:	88 0f       	add	r24, r24
    199c:	99 1f       	adc	r25, r25
    199e:	6a 95       	dec	r22
    19a0:	e2 f7       	brpl	.-8      	; 0x199a <MCAL_DIO_u8SetPinValue+0x86>
    19a2:	28 2b       	or	r18, r24
    19a4:	2b bb       	out	0x1b, r18	; 27
    19a6:	80 e0       	ldi	r24, 0x00	; 0
    19a8:	08 95       	ret
				CLR_BIT(PORTA,LOC_u8PinID);
				LOC_u8Return_Value = E_OK;
			}
			else if(LOC_u8PortID ==PortB)
			{
				CLR_BIT(PORTB,LOC_u8PinID);
    19aa:	28 b3       	in	r18, 0x18	; 24
    19ac:	81 e0       	ldi	r24, 0x01	; 1
    19ae:	90 e0       	ldi	r25, 0x00	; 0
    19b0:	02 c0       	rjmp	.+4      	; 0x19b6 <MCAL_DIO_u8SetPinValue+0xa2>
    19b2:	88 0f       	add	r24, r24
    19b4:	99 1f       	adc	r25, r25
    19b6:	6a 95       	dec	r22
    19b8:	e2 f7       	brpl	.-8      	; 0x19b2 <MCAL_DIO_u8SetPinValue+0x9e>
    19ba:	80 95       	com	r24
    19bc:	82 23       	and	r24, r18
    19be:	88 bb       	out	0x18, r24	; 24
    19c0:	80 e0       	ldi	r24, 0x00	; 0
    19c2:	08 95       	ret
				SET_BIT(PORTA,LOC_u8PinID);
				LOC_u8Return_Value = E_OK;
			}
			else if(LOC_u8PortID ==PortB)
			{
				SET_BIT(PORTB,LOC_u8PinID);
    19c4:	28 b3       	in	r18, 0x18	; 24
    19c6:	81 e0       	ldi	r24, 0x01	; 1
    19c8:	90 e0       	ldi	r25, 0x00	; 0
    19ca:	02 c0       	rjmp	.+4      	; 0x19d0 <MCAL_DIO_u8SetPinValue+0xbc>
    19cc:	88 0f       	add	r24, r24
    19ce:	99 1f       	adc	r25, r25
    19d0:	6a 95       	dec	r22
    19d2:	e2 f7       	brpl	.-8      	; 0x19cc <MCAL_DIO_u8SetPinValue+0xb8>
    19d4:	28 2b       	or	r18, r24
    19d6:	28 bb       	out	0x18, r18	; 24
    19d8:	80 e0       	ldi	r24, 0x00	; 0
    19da:	08 95       	ret
				CLR_BIT(PORTB,LOC_u8PinID);
				LOC_u8Return_Value = E_OK;
			}
			else if(LOC_u8PortID ==PortC)
			{
				CLR_BIT(PORTC,LOC_u8PinID);
    19dc:	25 b3       	in	r18, 0x15	; 21
    19de:	81 e0       	ldi	r24, 0x01	; 1
    19e0:	90 e0       	ldi	r25, 0x00	; 0
    19e2:	02 c0       	rjmp	.+4      	; 0x19e8 <MCAL_DIO_u8SetPinValue+0xd4>
    19e4:	88 0f       	add	r24, r24
    19e6:	99 1f       	adc	r25, r25
    19e8:	6a 95       	dec	r22
    19ea:	e2 f7       	brpl	.-8      	; 0x19e4 <MCAL_DIO_u8SetPinValue+0xd0>
    19ec:	80 95       	com	r24
    19ee:	82 23       	and	r24, r18
    19f0:	85 bb       	out	0x15, r24	; 21
    19f2:	80 e0       	ldi	r24, 0x00	; 0
    19f4:	08 95       	ret
				SET_BIT(PORTB,LOC_u8PinID);
				LOC_u8Return_Value = E_OK;
			}
			else if(LOC_u8PortID ==PortC)
			{
				SET_BIT(PORTC,LOC_u8PinID);
    19f6:	25 b3       	in	r18, 0x15	; 21
    19f8:	81 e0       	ldi	r24, 0x01	; 1
    19fa:	90 e0       	ldi	r25, 0x00	; 0
    19fc:	02 c0       	rjmp	.+4      	; 0x1a02 <MCAL_DIO_u8SetPinValue+0xee>
    19fe:	88 0f       	add	r24, r24
    1a00:	99 1f       	adc	r25, r25
    1a02:	6a 95       	dec	r22
    1a04:	e2 f7       	brpl	.-8      	; 0x19fe <MCAL_DIO_u8SetPinValue+0xea>
    1a06:	28 2b       	or	r18, r24
    1a08:	25 bb       	out	0x15, r18	; 21
    1a0a:	80 e0       	ldi	r24, 0x00	; 0
    1a0c:	08 95       	ret

00001a0e <MCAL_DIO_u8SetPinDirection>:

//SetPinDirection
STD_TYPE MCAL_DIO_u8SetPinDirection (u8 LOC_u8PortID, u8 LOC_u8PinID, u8 LOC_u8PinDirection)
{
	u8 LOC_u8Return_Value = E_NOT_OK;
	if( (LOC_u8PortID <= PortD) && (LOC_u8PinID <= Pin7) && (LOC_u8PinDirection <= Pin_Output) )
    1a0e:	84 30       	cpi	r24, 0x04	; 4
    1a10:	20 f4       	brcc	.+8      	; 0x1a1a <MCAL_DIO_u8SetPinDirection+0xc>
    1a12:	68 30       	cpi	r22, 0x08	; 8
    1a14:	10 f4       	brcc	.+4      	; 0x1a1a <MCAL_DIO_u8SetPinDirection+0xc>
    1a16:	42 30       	cpi	r20, 0x02	; 2
    1a18:	10 f0       	brcs	.+4      	; 0x1a1e <MCAL_DIO_u8SetPinDirection+0x10>
				CLR_BIT(DDRC,LOC_u8PinID);
				LOC_u8Return_Value = E_OK;
			}
			else if(LOC_u8PortID ==PortD)
			{
				CLR_BIT(DDRD,LOC_u8PinID);
    1a1a:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		//Do Nothing.
	}
	return LOC_u8Return_Value;
}
    1a1c:	08 95       	ret
STD_TYPE MCAL_DIO_u8SetPinDirection (u8 LOC_u8PortID, u8 LOC_u8PinID, u8 LOC_u8PinDirection)
{
	u8 LOC_u8Return_Value = E_NOT_OK;
	if( (LOC_u8PortID <= PortD) && (LOC_u8PinID <= Pin7) && (LOC_u8PinDirection <= Pin_Output) )
	{
		if(LOC_u8PinDirection == Pin_Output)
    1a1e:	41 30       	cpi	r20, 0x01	; 1
    1a20:	11 f1       	breq	.+68     	; 0x1a66 <MCAL_DIO_u8SetPinDirection+0x58>
				//Do Nothing
			}
		}
		else if(LOC_u8PinDirection == Pin_Input)
		{
			if(LOC_u8PortID == PortA)
    1a22:	88 23       	and	r24, r24
    1a24:	99 f0       	breq	.+38     	; 0x1a4c <MCAL_DIO_u8SetPinDirection+0x3e>
			{
				CLR_BIT(DDRA,LOC_u8PinID);
				LOC_u8Return_Value = E_OK;
			}
			else if(LOC_u8PortID ==PortB)
    1a26:	81 30       	cpi	r24, 0x01	; 1
    1a28:	09 f4       	brne	.+2      	; 0x1a2c <MCAL_DIO_u8SetPinDirection+0x1e>
    1a2a:	3c c0       	rjmp	.+120    	; 0x1aa4 <MCAL_DIO_u8SetPinDirection+0x96>
			{
				CLR_BIT(DDRB,LOC_u8PinID);
				LOC_u8Return_Value = E_OK;
			}
			else if(LOC_u8PortID ==PortC)
    1a2c:	82 30       	cpi	r24, 0x02	; 2
    1a2e:	09 f4       	brne	.+2      	; 0x1a32 <MCAL_DIO_u8SetPinDirection+0x24>
    1a30:	52 c0       	rjmp	.+164    	; 0x1ad6 <MCAL_DIO_u8SetPinDirection+0xc8>
				CLR_BIT(DDRC,LOC_u8PinID);
				LOC_u8Return_Value = E_OK;
			}
			else if(LOC_u8PortID ==PortD)
			{
				CLR_BIT(DDRD,LOC_u8PinID);
    1a32:	21 b3       	in	r18, 0x11	; 17
    1a34:	81 e0       	ldi	r24, 0x01	; 1
    1a36:	90 e0       	ldi	r25, 0x00	; 0
    1a38:	02 c0       	rjmp	.+4      	; 0x1a3e <MCAL_DIO_u8SetPinDirection+0x30>
    1a3a:	88 0f       	add	r24, r24
    1a3c:	99 1f       	adc	r25, r25
    1a3e:	6a 95       	dec	r22
    1a40:	e2 f7       	brpl	.-8      	; 0x1a3a <MCAL_DIO_u8SetPinDirection+0x2c>
    1a42:	80 95       	com	r24
    1a44:	82 23       	and	r24, r18
    1a46:	81 bb       	out	0x11, r24	; 17
    1a48:	80 e0       	ldi	r24, 0x00	; 0
    1a4a:	08 95       	ret
		}
		else if(LOC_u8PinDirection == Pin_Input)
		{
			if(LOC_u8PortID == PortA)
			{
				CLR_BIT(DDRA,LOC_u8PinID);
    1a4c:	2a b3       	in	r18, 0x1a	; 26
    1a4e:	81 e0       	ldi	r24, 0x01	; 1
    1a50:	90 e0       	ldi	r25, 0x00	; 0
    1a52:	02 c0       	rjmp	.+4      	; 0x1a58 <MCAL_DIO_u8SetPinDirection+0x4a>
    1a54:	88 0f       	add	r24, r24
    1a56:	99 1f       	adc	r25, r25
    1a58:	6a 95       	dec	r22
    1a5a:	e2 f7       	brpl	.-8      	; 0x1a54 <MCAL_DIO_u8SetPinDirection+0x46>
    1a5c:	80 95       	com	r24
    1a5e:	82 23       	and	r24, r18
    1a60:	8a bb       	out	0x1a, r24	; 26
    1a62:	80 e0       	ldi	r24, 0x00	; 0
    1a64:	08 95       	ret
	u8 LOC_u8Return_Value = E_NOT_OK;
	if( (LOC_u8PortID <= PortD) && (LOC_u8PinID <= Pin7) && (LOC_u8PinDirection <= Pin_Output) )
	{
		if(LOC_u8PinDirection == Pin_Output)
		{
			if(LOC_u8PortID == PortA)
    1a66:	88 23       	and	r24, r24
    1a68:	89 f0       	breq	.+34     	; 0x1a8c <MCAL_DIO_u8SetPinDirection+0x7e>
			{
				SET_BIT(DDRA,LOC_u8PinID);
				LOC_u8Return_Value = E_OK;
			}
			else if(LOC_u8PortID ==PortB)
    1a6a:	81 30       	cpi	r24, 0x01	; 1
    1a6c:	41 f1       	breq	.+80     	; 0x1abe <MCAL_DIO_u8SetPinDirection+0xb0>
			{
				SET_BIT(DDRB,LOC_u8PinID);
				LOC_u8Return_Value = E_OK;
			}
			else if(LOC_u8PortID ==PortC)
    1a6e:	82 30       	cpi	r24, 0x02	; 2
    1a70:	09 f4       	brne	.+2      	; 0x1a74 <MCAL_DIO_u8SetPinDirection+0x66>
    1a72:	3e c0       	rjmp	.+124    	; 0x1af0 <MCAL_DIO_u8SetPinDirection+0xe2>
				SET_BIT(DDRC,LOC_u8PinID);
				LOC_u8Return_Value = E_OK;
			}
			else if(LOC_u8PortID ==PortD)
			{
				SET_BIT(DDRD,LOC_u8PinID);
    1a74:	21 b3       	in	r18, 0x11	; 17
    1a76:	81 e0       	ldi	r24, 0x01	; 1
    1a78:	90 e0       	ldi	r25, 0x00	; 0
    1a7a:	02 c0       	rjmp	.+4      	; 0x1a80 <MCAL_DIO_u8SetPinDirection+0x72>
    1a7c:	88 0f       	add	r24, r24
    1a7e:	99 1f       	adc	r25, r25
    1a80:	6a 95       	dec	r22
    1a82:	e2 f7       	brpl	.-8      	; 0x1a7c <MCAL_DIO_u8SetPinDirection+0x6e>
    1a84:	28 2b       	or	r18, r24
    1a86:	21 bb       	out	0x11, r18	; 17
    1a88:	80 e0       	ldi	r24, 0x00	; 0
    1a8a:	08 95       	ret
	{
		if(LOC_u8PinDirection == Pin_Output)
		{
			if(LOC_u8PortID == PortA)
			{
				SET_BIT(DDRA,LOC_u8PinID);
    1a8c:	2a b3       	in	r18, 0x1a	; 26
    1a8e:	81 e0       	ldi	r24, 0x01	; 1
    1a90:	90 e0       	ldi	r25, 0x00	; 0
    1a92:	02 c0       	rjmp	.+4      	; 0x1a98 <MCAL_DIO_u8SetPinDirection+0x8a>
    1a94:	88 0f       	add	r24, r24
    1a96:	99 1f       	adc	r25, r25
    1a98:	6a 95       	dec	r22
    1a9a:	e2 f7       	brpl	.-8      	; 0x1a94 <MCAL_DIO_u8SetPinDirection+0x86>
    1a9c:	28 2b       	or	r18, r24
    1a9e:	2a bb       	out	0x1a, r18	; 26
    1aa0:	80 e0       	ldi	r24, 0x00	; 0
    1aa2:	08 95       	ret
				CLR_BIT(DDRA,LOC_u8PinID);
				LOC_u8Return_Value = E_OK;
			}
			else if(LOC_u8PortID ==PortB)
			{
				CLR_BIT(DDRB,LOC_u8PinID);
    1aa4:	27 b3       	in	r18, 0x17	; 23
    1aa6:	81 e0       	ldi	r24, 0x01	; 1
    1aa8:	90 e0       	ldi	r25, 0x00	; 0
    1aaa:	02 c0       	rjmp	.+4      	; 0x1ab0 <MCAL_DIO_u8SetPinDirection+0xa2>
    1aac:	88 0f       	add	r24, r24
    1aae:	99 1f       	adc	r25, r25
    1ab0:	6a 95       	dec	r22
    1ab2:	e2 f7       	brpl	.-8      	; 0x1aac <MCAL_DIO_u8SetPinDirection+0x9e>
    1ab4:	80 95       	com	r24
    1ab6:	82 23       	and	r24, r18
    1ab8:	87 bb       	out	0x17, r24	; 23
    1aba:	80 e0       	ldi	r24, 0x00	; 0
    1abc:	08 95       	ret
				SET_BIT(DDRA,LOC_u8PinID);
				LOC_u8Return_Value = E_OK;
			}
			else if(LOC_u8PortID ==PortB)
			{
				SET_BIT(DDRB,LOC_u8PinID);
    1abe:	27 b3       	in	r18, 0x17	; 23
    1ac0:	81 e0       	ldi	r24, 0x01	; 1
    1ac2:	90 e0       	ldi	r25, 0x00	; 0
    1ac4:	02 c0       	rjmp	.+4      	; 0x1aca <MCAL_DIO_u8SetPinDirection+0xbc>
    1ac6:	88 0f       	add	r24, r24
    1ac8:	99 1f       	adc	r25, r25
    1aca:	6a 95       	dec	r22
    1acc:	e2 f7       	brpl	.-8      	; 0x1ac6 <MCAL_DIO_u8SetPinDirection+0xb8>
    1ace:	28 2b       	or	r18, r24
    1ad0:	27 bb       	out	0x17, r18	; 23
    1ad2:	80 e0       	ldi	r24, 0x00	; 0
    1ad4:	08 95       	ret
				CLR_BIT(DDRB,LOC_u8PinID);
				LOC_u8Return_Value = E_OK;
			}
			else if(LOC_u8PortID ==PortC)
			{
				CLR_BIT(DDRC,LOC_u8PinID);
    1ad6:	24 b3       	in	r18, 0x14	; 20
    1ad8:	81 e0       	ldi	r24, 0x01	; 1
    1ada:	90 e0       	ldi	r25, 0x00	; 0
    1adc:	02 c0       	rjmp	.+4      	; 0x1ae2 <MCAL_DIO_u8SetPinDirection+0xd4>
    1ade:	88 0f       	add	r24, r24
    1ae0:	99 1f       	adc	r25, r25
    1ae2:	6a 95       	dec	r22
    1ae4:	e2 f7       	brpl	.-8      	; 0x1ade <MCAL_DIO_u8SetPinDirection+0xd0>
    1ae6:	80 95       	com	r24
    1ae8:	82 23       	and	r24, r18
    1aea:	84 bb       	out	0x14, r24	; 20
    1aec:	80 e0       	ldi	r24, 0x00	; 0
    1aee:	08 95       	ret
				SET_BIT(DDRB,LOC_u8PinID);
				LOC_u8Return_Value = E_OK;
			}
			else if(LOC_u8PortID ==PortC)
			{
				SET_BIT(DDRC,LOC_u8PinID);
    1af0:	24 b3       	in	r18, 0x14	; 20
    1af2:	81 e0       	ldi	r24, 0x01	; 1
    1af4:	90 e0       	ldi	r25, 0x00	; 0
    1af6:	02 c0       	rjmp	.+4      	; 0x1afc <MCAL_DIO_u8SetPinDirection+0xee>
    1af8:	88 0f       	add	r24, r24
    1afa:	99 1f       	adc	r25, r25
    1afc:	6a 95       	dec	r22
    1afe:	e2 f7       	brpl	.-8      	; 0x1af8 <MCAL_DIO_u8SetPinDirection+0xea>
    1b00:	28 2b       	or	r18, r24
    1b02:	24 bb       	out	0x14, r18	; 20
    1b04:	80 e0       	ldi	r24, 0x00	; 0
    1b06:	08 95       	ret

00001b08 <MCAL_DIO_u8GetPinValue>:
	return LOC_u8Return_Value;
}

//GetPinValue
STD_TYPE MCAL_DIO_u8GetPinValue (u8 LOC_u8PortID, u8 LOC_u8PinID, u8* LOC_Pu8PinValue)
{
    1b08:	fa 01       	movw	r30, r20
	u8 LOC_u8Return_Value = E_NOT_OK;
	if( (LOC_u8PortID <= PortD) && (LOC_u8PinID <= Pin7) )
    1b0a:	84 30       	cpi	r24, 0x04	; 4
    1b0c:	50 f4       	brcc	.+20     	; 0x1b22 <MCAL_DIO_u8GetPinValue+0x1a>
    1b0e:	68 30       	cpi	r22, 0x08	; 8
    1b10:	40 f4       	brcc	.+16     	; 0x1b22 <MCAL_DIO_u8GetPinValue+0x1a>
	{

		if(LOC_u8PortID == PortA)
    1b12:	88 23       	and	r24, r24
    1b14:	41 f0       	breq	.+16     	; 0x1b26 <MCAL_DIO_u8GetPinValue+0x1e>
		{
			*LOC_Pu8PinValue = GET_BIT(PINA,LOC_u8PinID);
			LOC_u8Return_Value = E_OK;
		}
		else if(LOC_u8PortID ==PortB)
    1b16:	81 30       	cpi	r24, 0x01	; 1
    1b18:	89 f0       	breq	.+34     	; 0x1b3c <MCAL_DIO_u8GetPinValue+0x34>
		{
			*LOC_Pu8PinValue = GET_BIT(PINB,LOC_u8PinID);
			LOC_u8Return_Value = E_OK;
		}
		else if(LOC_u8PortID ==PortC)
    1b1a:	82 30       	cpi	r24, 0x02	; 2
    1b1c:	89 f0       	breq	.+34     	; 0x1b40 <MCAL_DIO_u8GetPinValue+0x38>
			*LOC_Pu8PinValue = GET_BIT(PINC,LOC_u8PinID);
			LOC_u8Return_Value = E_OK;
		}
		else if(LOC_u8PortID ==PortD)
		{
			*LOC_Pu8PinValue = GET_BIT(PIND,LOC_u8PinID);
    1b1e:	80 b3       	in	r24, 0x10	; 16
    1b20:	03 c0       	rjmp	.+6      	; 0x1b28 <MCAL_DIO_u8GetPinValue+0x20>
    1b22:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		//Do Nothing.
	}
	return LOC_u8Return_Value;
}
    1b24:	08 95       	ret
	if( (LOC_u8PortID <= PortD) && (LOC_u8PinID <= Pin7) )
	{

		if(LOC_u8PortID == PortA)
		{
			*LOC_Pu8PinValue = GET_BIT(PINA,LOC_u8PinID);
    1b26:	89 b3       	in	r24, 0x19	; 25
			*LOC_Pu8PinValue = GET_BIT(PINC,LOC_u8PinID);
			LOC_u8Return_Value = E_OK;
		}
		else if(LOC_u8PortID ==PortD)
		{
			*LOC_Pu8PinValue = GET_BIT(PIND,LOC_u8PinID);
    1b28:	90 e0       	ldi	r25, 0x00	; 0
    1b2a:	02 c0       	rjmp	.+4      	; 0x1b30 <MCAL_DIO_u8GetPinValue+0x28>
    1b2c:	95 95       	asr	r25
    1b2e:	87 95       	ror	r24
    1b30:	6a 95       	dec	r22
    1b32:	e2 f7       	brpl	.-8      	; 0x1b2c <MCAL_DIO_u8GetPinValue+0x24>
    1b34:	81 70       	andi	r24, 0x01	; 1
    1b36:	80 83       	st	Z, r24
    1b38:	80 e0       	ldi	r24, 0x00	; 0
    1b3a:	08 95       	ret
			*LOC_Pu8PinValue = GET_BIT(PINA,LOC_u8PinID);
			LOC_u8Return_Value = E_OK;
		}
		else if(LOC_u8PortID ==PortB)
		{
			*LOC_Pu8PinValue = GET_BIT(PINB,LOC_u8PinID);
    1b3c:	86 b3       	in	r24, 0x16	; 22
    1b3e:	f4 cf       	rjmp	.-24     	; 0x1b28 <MCAL_DIO_u8GetPinValue+0x20>
			LOC_u8Return_Value = E_OK;
		}
		else if(LOC_u8PortID ==PortC)
		{
			*LOC_Pu8PinValue = GET_BIT(PINC,LOC_u8PinID);
    1b40:	83 b3       	in	r24, 0x13	; 19
    1b42:	f2 cf       	rjmp	.-28     	; 0x1b28 <MCAL_DIO_u8GetPinValue+0x20>

00001b44 <MCAL_DIO_u8TogglePortValue>:

//TogglePortValue
STD_TYPE MCAL_DIO_u8TogglePortValue (u8 LOC_u8PortID)
{
	u8 LOC_u8Return_Value = E_NOT_OK;
	if(LOC_u8PortID <= PortD)
    1b44:	84 30       	cpi	r24, 0x04	; 4
    1b46:	80 f4       	brcc	.+32     	; 0x1b68 <MCAL_DIO_u8TogglePortValue+0x24>
	{
		if (LOC_u8PortID ==PortA)
    1b48:	88 23       	and	r24, r24
    1b4a:	49 f0       	breq	.+18     	; 0x1b5e <MCAL_DIO_u8TogglePortValue+0x1a>
		{
			PORTA = ~PORTA;
			LOC_u8Return_Value = E_OK;
		}
		else if (LOC_u8PortID ==PortB)
    1b4c:	81 30       	cpi	r24, 0x01	; 1
    1b4e:	99 f0       	breq	.+38     	; 0x1b76 <MCAL_DIO_u8TogglePortValue+0x32>
		{
			PORTB = ~PORTB;
			LOC_u8Return_Value = E_OK;
		}
		else if (LOC_u8PortID ==PortC)
    1b50:	82 30       	cpi	r24, 0x02	; 2
    1b52:	61 f0       	breq	.+24     	; 0x1b6c <MCAL_DIO_u8TogglePortValue+0x28>
			PORTC = ~PORTC;
			LOC_u8Return_Value = E_OK;
		}
		else if (LOC_u8PortID == PortD)
		{
			PORTD = ~PORTD;
    1b54:	82 b3       	in	r24, 0x12	; 18
    1b56:	80 95       	com	r24
    1b58:	82 bb       	out	0x12, r24	; 18
    1b5a:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		//Do Nothing
	}
	return LOC_u8Return_Value;
}
    1b5c:	08 95       	ret
	u8 LOC_u8Return_Value = E_NOT_OK;
	if(LOC_u8PortID <= PortD)
	{
		if (LOC_u8PortID ==PortA)
		{
			PORTA = ~PORTA;
    1b5e:	8b b3       	in	r24, 0x1b	; 27
    1b60:	80 95       	com	r24
    1b62:	8b bb       	out	0x1b, r24	; 27
    1b64:	80 e0       	ldi	r24, 0x00	; 0
    1b66:	08 95       	ret

//TogglePortValue
STD_TYPE MCAL_DIO_u8TogglePortValue (u8 LOC_u8PortID)
{
	u8 LOC_u8Return_Value = E_NOT_OK;
	if(LOC_u8PortID <= PortD)
    1b68:	81 e0       	ldi	r24, 0x01	; 1
    1b6a:	08 95       	ret
			PORTB = ~PORTB;
			LOC_u8Return_Value = E_OK;
		}
		else if (LOC_u8PortID ==PortC)
		{
			PORTC = ~PORTC;
    1b6c:	85 b3       	in	r24, 0x15	; 21
    1b6e:	80 95       	com	r24
    1b70:	85 bb       	out	0x15, r24	; 21
    1b72:	80 e0       	ldi	r24, 0x00	; 0
    1b74:	08 95       	ret
			PORTA = ~PORTA;
			LOC_u8Return_Value = E_OK;
		}
		else if (LOC_u8PortID ==PortB)
		{
			PORTB = ~PORTB;
    1b76:	88 b3       	in	r24, 0x18	; 24
    1b78:	80 95       	com	r24
    1b7a:	88 bb       	out	0x18, r24	; 24
    1b7c:	80 e0       	ldi	r24, 0x00	; 0
    1b7e:	08 95       	ret

00001b80 <MCAL_DIO_u8TogglePinValue>:

//TogglePinValue
STD_TYPE MCAL_DIO_u8TogglePinValue (u8 LOC_u8PortID, u8 LOC_u8PinID)
{
	u8 LOC_u8Return_Value = E_NOT_OK;
	if( (LOC_u8PortID <= PortD) && (LOC_u8PinID <= Pin7) )
    1b80:	84 30       	cpi	r24, 0x04	; 4
    1b82:	a0 f4       	brcc	.+40     	; 0x1bac <MCAL_DIO_u8TogglePinValue+0x2c>
    1b84:	68 30       	cpi	r22, 0x08	; 8
    1b86:	90 f4       	brcc	.+36     	; 0x1bac <MCAL_DIO_u8TogglePinValue+0x2c>
	{

		if(LOC_u8PortID == PortA)
    1b88:	88 23       	and	r24, r24
    1b8a:	91 f0       	breq	.+36     	; 0x1bb0 <MCAL_DIO_u8TogglePinValue+0x30>
		{
			TOGGLE_BIT(PORTA,LOC_u8PinID);
			LOC_u8Return_Value = E_OK;
		}
		else if(LOC_u8PortID ==PortB)
    1b8c:	81 30       	cpi	r24, 0x01	; 1
    1b8e:	e1 f0       	breq	.+56     	; 0x1bc8 <MCAL_DIO_u8TogglePinValue+0x48>
		{
			TOGGLE_BIT(PORTB,LOC_u8PinID);
			LOC_u8Return_Value = E_OK;
		}
		else if(LOC_u8PortID ==PortC)
    1b90:	82 30       	cpi	r24, 0x02	; 2
    1b92:	31 f1       	breq	.+76     	; 0x1be0 <MCAL_DIO_u8TogglePinValue+0x60>
			TOGGLE_BIT(PORTC,LOC_u8PinID);
			LOC_u8Return_Value = E_OK;
		}
		else if(LOC_u8PortID ==PortD)
		{
			TOGGLE_BIT(PORTD,LOC_u8PinID);
    1b94:	22 b3       	in	r18, 0x12	; 18
    1b96:	81 e0       	ldi	r24, 0x01	; 1
    1b98:	90 e0       	ldi	r25, 0x00	; 0
    1b9a:	02 c0       	rjmp	.+4      	; 0x1ba0 <MCAL_DIO_u8TogglePinValue+0x20>
    1b9c:	88 0f       	add	r24, r24
    1b9e:	99 1f       	adc	r25, r25
    1ba0:	6a 95       	dec	r22
    1ba2:	e2 f7       	brpl	.-8      	; 0x1b9c <MCAL_DIO_u8TogglePinValue+0x1c>
    1ba4:	28 27       	eor	r18, r24
    1ba6:	22 bb       	out	0x12, r18	; 18
    1ba8:	80 e0       	ldi	r24, 0x00	; 0
    1baa:	08 95       	ret
    1bac:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		//Do Nothing.
	}
	return LOC_u8Return_Value;
}
    1bae:	08 95       	ret
	if( (LOC_u8PortID <= PortD) && (LOC_u8PinID <= Pin7) )
	{

		if(LOC_u8PortID == PortA)
		{
			TOGGLE_BIT(PORTA,LOC_u8PinID);
    1bb0:	2b b3       	in	r18, 0x1b	; 27
    1bb2:	81 e0       	ldi	r24, 0x01	; 1
    1bb4:	90 e0       	ldi	r25, 0x00	; 0
    1bb6:	02 c0       	rjmp	.+4      	; 0x1bbc <MCAL_DIO_u8TogglePinValue+0x3c>
    1bb8:	88 0f       	add	r24, r24
    1bba:	99 1f       	adc	r25, r25
    1bbc:	6a 95       	dec	r22
    1bbe:	e2 f7       	brpl	.-8      	; 0x1bb8 <MCAL_DIO_u8TogglePinValue+0x38>
    1bc0:	28 27       	eor	r18, r24
    1bc2:	2b bb       	out	0x1b, r18	; 27
    1bc4:	80 e0       	ldi	r24, 0x00	; 0
    1bc6:	08 95       	ret
			LOC_u8Return_Value = E_OK;
		}
		else if(LOC_u8PortID ==PortB)
		{
			TOGGLE_BIT(PORTB,LOC_u8PinID);
    1bc8:	28 b3       	in	r18, 0x18	; 24
    1bca:	81 e0       	ldi	r24, 0x01	; 1
    1bcc:	90 e0       	ldi	r25, 0x00	; 0
    1bce:	02 c0       	rjmp	.+4      	; 0x1bd4 <MCAL_DIO_u8TogglePinValue+0x54>
    1bd0:	88 0f       	add	r24, r24
    1bd2:	99 1f       	adc	r25, r25
    1bd4:	6a 95       	dec	r22
    1bd6:	e2 f7       	brpl	.-8      	; 0x1bd0 <MCAL_DIO_u8TogglePinValue+0x50>
    1bd8:	28 27       	eor	r18, r24
    1bda:	28 bb       	out	0x18, r18	; 24
    1bdc:	80 e0       	ldi	r24, 0x00	; 0
    1bde:	08 95       	ret
			LOC_u8Return_Value = E_OK;
		}
		else if(LOC_u8PortID ==PortC)
		{
			TOGGLE_BIT(PORTC,LOC_u8PinID);
    1be0:	25 b3       	in	r18, 0x15	; 21
    1be2:	81 e0       	ldi	r24, 0x01	; 1
    1be4:	90 e0       	ldi	r25, 0x00	; 0
    1be6:	02 c0       	rjmp	.+4      	; 0x1bec <MCAL_DIO_u8TogglePinValue+0x6c>
    1be8:	88 0f       	add	r24, r24
    1bea:	99 1f       	adc	r25, r25
    1bec:	6a 95       	dec	r22
    1bee:	e2 f7       	brpl	.-8      	; 0x1be8 <MCAL_DIO_u8TogglePinValue+0x68>
    1bf0:	28 27       	eor	r18, r24
    1bf2:	25 bb       	out	0x15, r18	; 21
    1bf4:	80 e0       	ldi	r24, 0x00	; 0
    1bf6:	08 95       	ret

00001bf8 <MCAL_DIO_u8GetPortValue>:
	return LOC_u8Return_Value;
}

//GetPortValue
STD_TYPE MCAL_DIO_u8GetPortValue (u8 LOC_u8PortID, u8* LOC_Pu8PortValue)
{
    1bf8:	fb 01       	movw	r30, r22
	u8 LOC_u8Return_Value = E_NOT_OK;
	if (LOC_u8PortID <= PortD)
    1bfa:	84 30       	cpi	r24, 0x04	; 4
    1bfc:	70 f4       	brcc	.+28     	; 0x1c1a <MCAL_DIO_u8GetPortValue+0x22>
	{

		if(LOC_u8PortID == PortA)
    1bfe:	88 23       	and	r24, r24
    1c00:	41 f0       	breq	.+16     	; 0x1c12 <MCAL_DIO_u8GetPortValue+0x1a>
		{
			*LOC_Pu8PortValue = PINA;
			LOC_u8Return_Value = E_OK;
		}
		else if(LOC_u8PortID ==PortB)
    1c02:	81 30       	cpi	r24, 0x01	; 1
    1c04:	81 f0       	breq	.+32     	; 0x1c26 <MCAL_DIO_u8GetPortValue+0x2e>
		{
			*LOC_Pu8PortValue = PINB;
			LOC_u8Return_Value = E_OK;
		}
		else if(LOC_u8PortID ==PortC)
    1c06:	82 30       	cpi	r24, 0x02	; 2
    1c08:	51 f0       	breq	.+20     	; 0x1c1e <MCAL_DIO_u8GetPortValue+0x26>
			*LOC_Pu8PortValue = PINC;
			LOC_u8Return_Value = E_OK;
		}
		else if(LOC_u8PortID ==PortD)
		{
			*LOC_Pu8PortValue = PIND;
    1c0a:	80 b3       	in	r24, 0x10	; 16
    1c0c:	80 83       	st	Z, r24
    1c0e:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		//Do Nothing.
	}
	return LOC_u8Return_Value;
}
    1c10:	08 95       	ret
	if (LOC_u8PortID <= PortD)
	{

		if(LOC_u8PortID == PortA)
		{
			*LOC_Pu8PortValue = PINA;
    1c12:	89 b3       	in	r24, 0x19	; 25
    1c14:	80 83       	st	Z, r24
    1c16:	80 e0       	ldi	r24, 0x00	; 0
    1c18:	08 95       	ret

//GetPortValue
STD_TYPE MCAL_DIO_u8GetPortValue (u8 LOC_u8PortID, u8* LOC_Pu8PortValue)
{
	u8 LOC_u8Return_Value = E_NOT_OK;
	if (LOC_u8PortID <= PortD)
    1c1a:	81 e0       	ldi	r24, 0x01	; 1
    1c1c:	08 95       	ret
			*LOC_Pu8PortValue = PINB;
			LOC_u8Return_Value = E_OK;
		}
		else if(LOC_u8PortID ==PortC)
		{
			*LOC_Pu8PortValue = PINC;
    1c1e:	83 b3       	in	r24, 0x13	; 19
    1c20:	80 83       	st	Z, r24
    1c22:	80 e0       	ldi	r24, 0x00	; 0
    1c24:	08 95       	ret
			*LOC_Pu8PortValue = PINA;
			LOC_u8Return_Value = E_OK;
		}
		else if(LOC_u8PortID ==PortB)
		{
			*LOC_Pu8PortValue = PINB;
    1c26:	86 b3       	in	r24, 0x16	; 22
    1c28:	80 83       	st	Z, r24
    1c2a:	80 e0       	ldi	r24, 0x00	; 0
    1c2c:	08 95       	ret

00001c2e <MCAL_ADC_ADC_Init>:
//(Volt_Ref,LEFT/RIGHT_ADJUST,INPUT_Channel) //Single Ended Input

void MCAL_ADC_ADC_Init(void)
{
#if   ADC_V_REF   ==   AVCC
	SET_BIT(ADMUX,REFS0);
    1c2e:	3e 9a       	sbi	0x07, 6	; 7
	CLR_BIT(ADMUX,REFS1);
    1c30:	3f 98       	cbi	0x07, 7	; 7
#elif ADC_V_REF   ==   V_256
	SET_BIT(ADMUX,REFS0);
	SET_BIT(ADMUX,REFS1);
#endif
#if   	ADJUST   ==   LEFT
	SET_BIT(ADMUX,ADLAR);
    1c32:	3d 9a       	sbi	0x07, 5	; 7
#elif   ADJUST   ==   RIGHT
	CLR_BIT(ADMUX,ADLAR);
#endif

	/* To select an ADC channel */
	ADMUX = (ADMUX & KEEP_ADMUX) | ADC_CHANNEL ;
    1c34:	87 b1       	in	r24, 0x07	; 7
    1c36:	81 74       	andi	r24, 0x41	; 65
    1c38:	87 b9       	out	0x07, r24	; 7
	/* To select the ADC frequency (Under Editing) */
	ADCSRA = 0b10100111;
    1c3a:	87 ea       	ldi	r24, 0xA7	; 167
    1c3c:	86 b9       	out	0x06, r24	; 6
	//MCAL_Interrupt_GIE_Enable();
	/* To enable ADC circuit */
	//SET_BIT(ADCSRA,ADEN_BIT);


}
    1c3e:	08 95       	ret

00001c40 <MCAL_ADC_ADC_InterruptEnable>:

void MCAL_ADC_ADC_InterruptEnable(void)
{
	/* To Enable ADC Interrupt */
	SET_BIT(ADCSRA,ADIE);
    1c40:	33 9a       	sbi	0x06, 3	; 6
}
    1c42:	08 95       	ret

00001c44 <MCAL_ADC_ADC_InterruptDisable>:
void MCAL_ADC_ADC_InterruptDisable(void)
{
	/* To Disable ADC Interrupt */
	CLR_BIT(ADCSRA,ADIE);
    1c44:	33 98       	cbi	0x06, 3	; 6
}
    1c46:	08 95       	ret

00001c48 <MCAL_ADC_ADC_StartConversion>:
*/

void MCAL_ADC_ADC_StartConversion(void)
{
	/* To start conversion */
	SET_BIT(ADCSRA,ADSC);
    1c48:	36 9a       	sbi	0x06, 6	; 6
	//while(IS_BIT_CLEARED(ADCSRA,ADIF_BIT));
}
    1c4a:	08 95       	ret

00001c4c <MCAL_ADC_voidADC_CallBack>:

void MCAL_ADC_voidADC_CallBack(void(*ADCAction)(void))
{
	if (ADCAction != NULL)
    1c4c:	00 97       	sbiw	r24, 0x00	; 0
    1c4e:	21 f0       	breq	.+8      	; 0x1c58 <MCAL_ADC_voidADC_CallBack+0xc>
	{
		GLOB_PADC_CallBack = ADCAction;
    1c50:	90 93 55 03 	sts	0x0355, r25
    1c54:	80 93 54 03 	sts	0x0354, r24
    1c58:	08 95       	ret

00001c5a <__vector_16>:
}



ISR(ADC_vect)
{
    1c5a:	1f 92       	push	r1
    1c5c:	0f 92       	push	r0
    1c5e:	0f b6       	in	r0, 0x3f	; 63
    1c60:	0f 92       	push	r0
    1c62:	11 24       	eor	r1, r1
    1c64:	2f 93       	push	r18
    1c66:	3f 93       	push	r19
    1c68:	4f 93       	push	r20
    1c6a:	5f 93       	push	r21
    1c6c:	6f 93       	push	r22
    1c6e:	7f 93       	push	r23
    1c70:	8f 93       	push	r24
    1c72:	9f 93       	push	r25
    1c74:	af 93       	push	r26
    1c76:	bf 93       	push	r27
    1c78:	ef 93       	push	r30
    1c7a:	ff 93       	push	r31
	if (GLOB_PADC_CallBack != NULL)
    1c7c:	e0 91 54 03 	lds	r30, 0x0354
    1c80:	f0 91 55 03 	lds	r31, 0x0355
    1c84:	30 97       	sbiw	r30, 0x00	; 0
    1c86:	09 f0       	breq	.+2      	; 0x1c8a <__vector_16+0x30>
	{
		GLOB_PADC_CallBack();
    1c88:	09 95       	icall
	}

}
    1c8a:	ff 91       	pop	r31
    1c8c:	ef 91       	pop	r30
    1c8e:	bf 91       	pop	r27
    1c90:	af 91       	pop	r26
    1c92:	9f 91       	pop	r25
    1c94:	8f 91       	pop	r24
    1c96:	7f 91       	pop	r23
    1c98:	6f 91       	pop	r22
    1c9a:	5f 91       	pop	r21
    1c9c:	4f 91       	pop	r20
    1c9e:	3f 91       	pop	r19
    1ca0:	2f 91       	pop	r18
    1ca2:	0f 90       	pop	r0
    1ca4:	0f be       	out	0x3f, r0	; 63
    1ca6:	0f 90       	pop	r0
    1ca8:	1f 90       	pop	r1
    1caa:	18 95       	reti

00001cac <LM35_Read>:
u16 LM35_Read(void)
{

	u16 LOC_u16AnalogValue,LOC_u16DigitalValue;
	u8 LOC_u8Temp;
	MCAL_ADC_ADC_StartConversion();
    1cac:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <MCAL_ADC_ADC_StartConversion>

	LOC_u16DigitalValue = ADC_DATA;
    1cb0:	64 b1       	in	r22, 0x04	; 4
    1cb2:	75 b1       	in	r23, 0x05	; 5
    1cb4:	80 e0       	ldi	r24, 0x00	; 0
    1cb6:	90 e0       	ldi	r25, 0x00	; 0
    1cb8:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__floatunsisf>
    1cbc:	2f e6       	ldi	r18, 0x6F	; 111
    1cbe:	32 e1       	ldi	r19, 0x12	; 18
    1cc0:	43 e0       	ldi	r20, 0x03	; 3
    1cc2:	50 e4       	ldi	r21, 0x40	; 64
    1cc4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1cc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ccc:	dc 01       	movw	r26, r24
    1cce:	cb 01       	movw	r24, r22
	LOC_u16AnalogValue = ((u32) LOC_u16DigitalValue)/2.048;
	LOC_u8Temp = LOC_u16AnalogValue;


	return LOC_u8Temp;
}
    1cd0:	90 e0       	ldi	r25, 0x00	; 0
    1cd2:	08 95       	ret

00001cd4 <LM35_Init>:

void LM35_Init(void)
{
	//ADC Initialization.
	//
	MCAL_ADC_ADC_Init();
    1cd4:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <MCAL_ADC_ADC_Init>
	//Set LM35 Pin Direction as Input.
	MCAL_DIO_u8SetPinDirection(PortA,Pin0,PIN_INPUT);
    1cd8:	80 e0       	ldi	r24, 0x00	; 0
    1cda:	60 e0       	ldi	r22, 0x00	; 0
    1cdc:	40 e0       	ldi	r20, 0x00	; 0
    1cde:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <MCAL_DIO_u8SetPinDirection>

}
    1ce2:	08 95       	ret

00001ce4 <HAL_LED_u8LedMode>:

//LED_Mode
STD_TYPE HAL_LED_u8LedMode(u8 LOC_u8LEDPortID, u8 LOC_u8LEDPinID, u8 LOC_u8LEDMode)
{
	u8 LOC_u8Return_Value = E_NOT_OK;
	if( (LOC_u8LEDPortID <= PortD) && (LOC_u8LEDPinID <= Pin7) && (LOC_u8LEDMode <= LED_TOG))
    1ce4:	84 30       	cpi	r24, 0x04	; 4
    1ce6:	50 f4       	brcc	.+20     	; 0x1cfc <HAL_LED_u8LedMode+0x18>
    1ce8:	68 30       	cpi	r22, 0x08	; 8
    1cea:	40 f4       	brcc	.+16     	; 0x1cfc <HAL_LED_u8LedMode+0x18>
    1cec:	43 30       	cpi	r20, 0x03	; 3
    1cee:	30 f4       	brcc	.+12     	; 0x1cfc <HAL_LED_u8LedMode+0x18>
	{
		if (LOC_u8LEDMode == LED_ON)
    1cf0:	41 30       	cpi	r20, 0x01	; 1
    1cf2:	31 f0       	breq	.+12     	; 0x1d00 <HAL_LED_u8LedMode+0x1c>
		{
			LOC_u8Return_Value = MCAL_DIO_u8SetPinValue(LOC_u8LEDPortID, LOC_u8LEDPinID, LED_ON);
		}
		else if (LOC_u8LEDMode == LED_OFF)
    1cf4:	44 23       	and	r20, r20
    1cf6:	21 f0       	breq	.+8      	; 0x1d00 <HAL_LED_u8LedMode+0x1c>
		{
			LOC_u8Return_Value = MCAL_DIO_u8SetPinValue(LOC_u8LEDPortID, LOC_u8LEDPinID, LED_OFF);
		}
		else if (LOC_u8LEDMode == LED_TOG)
    1cf8:	42 30       	cpi	r20, 0x02	; 2
    1cfa:	29 f0       	breq	.+10     	; 0x1d06 <HAL_LED_u8LedMode+0x22>
		{
			LOC_u8Return_Value = MCAL_DIO_u8TogglePinValue(LOC_u8LEDPortID, LOC_u8LEDPinID);
    1cfc:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		//Do Nothing.
	}
	return LOC_u8Return_Value;
}
    1cfe:	08 95       	ret
		{
			LOC_u8Return_Value = MCAL_DIO_u8SetPinValue(LOC_u8LEDPortID, LOC_u8LEDPinID, LED_ON);
		}
		else if (LOC_u8LEDMode == LED_OFF)
		{
			LOC_u8Return_Value = MCAL_DIO_u8SetPinValue(LOC_u8LEDPortID, LOC_u8LEDPinID, LED_OFF);
    1d00:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
    1d04:	08 95       	ret
		}
		else if (LOC_u8LEDMode == LED_TOG)
		{
			LOC_u8Return_Value = MCAL_DIO_u8TogglePinValue(LOC_u8LEDPortID, LOC_u8LEDPinID);
    1d06:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <MCAL_DIO_u8TogglePinValue>
    1d0a:	08 95       	ret

00001d0c <HAL_LED_u8LedInit>:

//LED_Init
STD_TYPE HAL_LED_u8LedInit(u8 LOC_u8LEDPortID, u8 LOC_u8LEDPinID)
{
	u8 LOC_u8Return_Value = E_NOT_OK;
	if( (LOC_u8LEDPortID <= PortD) && (LOC_u8LEDPinID <= Pin7) )
    1d0c:	84 30       	cpi	r24, 0x04	; 4
    1d0e:	10 f4       	brcc	.+4      	; 0x1d14 <HAL_LED_u8LedInit+0x8>
    1d10:	68 30       	cpi	r22, 0x08	; 8
    1d12:	10 f0       	brcs	.+4      	; 0x1d18 <HAL_LED_u8LedInit+0xc>
	{
		LOC_u8Return_Value = MCAL_DIO_u8SetPinDirection(LOC_u8LEDPortID,LOC_u8LEDPinID,Pin_Output);
    1d14:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		//Do Nothing.
	}
	return LOC_u8Return_Value;
}
    1d16:	08 95       	ret
STD_TYPE HAL_LED_u8LedInit(u8 LOC_u8LEDPortID, u8 LOC_u8LEDPinID)
{
	u8 LOC_u8Return_Value = E_NOT_OK;
	if( (LOC_u8LEDPortID <= PortD) && (LOC_u8LEDPinID <= Pin7) )
	{
		LOC_u8Return_Value = MCAL_DIO_u8SetPinDirection(LOC_u8LEDPortID,LOC_u8LEDPinID,Pin_Output);
    1d18:	41 e0       	ldi	r20, 0x01	; 1
    1d1a:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <MCAL_DIO_u8SetPinDirection>
    1d1e:	08 95       	ret

00001d20 <HAL_LED_u8AllLedsInit>:
    1d20:	80 e0       	ldi	r24, 0x00	; 0
    1d22:	63 e0       	ldi	r22, 0x03	; 3
    1d24:	41 e0       	ldi	r20, 0x01	; 1
    1d26:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <MCAL_DIO_u8SetPinDirection>
    1d2a:	80 e0       	ldi	r24, 0x00	; 0
    1d2c:	64 e0       	ldi	r22, 0x04	; 4
    1d2e:	41 e0       	ldi	r20, 0x01	; 1
    1d30:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <MCAL_DIO_u8SetPinDirection>
    1d34:	80 e0       	ldi	r24, 0x00	; 0
    1d36:	65 e0       	ldi	r22, 0x05	; 5
    1d38:	41 e0       	ldi	r20, 0x01	; 1
    1d3a:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <MCAL_DIO_u8SetPinDirection>
    1d3e:	80 e0       	ldi	r24, 0x00	; 0
    1d40:	66 e0       	ldi	r22, 0x06	; 6
    1d42:	41 e0       	ldi	r20, 0x01	; 1
    1d44:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <MCAL_DIO_u8SetPinDirection>
    1d48:	80 e0       	ldi	r24, 0x00	; 0
    1d4a:	67 e0       	ldi	r22, 0x07	; 7
    1d4c:	41 e0       	ldi	r20, 0x01	; 1
    1d4e:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <MCAL_DIO_u8SetPinDirection>
	HAL_LED_u8LedInit(LED1_Port,LED1_Pin);
	HAL_LED_u8LedInit(LED2_Port,LED2_Pin);
	HAL_LED_u8LedInit(LED3_Port,LED3_Pin);
	HAL_LED_u8LedInit(LED4_Port,LED4_Pin);
	HAL_LED_u8LedInit(LED5_Port,LED5_Pin);
}
    1d52:	08 95       	ret

00001d54 <HAL_LCD_u8_SendDataInit>:
 * INPUT Arg   : No Args
 * RETURN      : Execution Status (OK OR NOT_OK)
 * **********************************************************************
 **/
STD_TYPE HAL_LCD_u8_SendDataInit(void)
{
    1d54:	1f 93       	push	r17
	u8 Loc_u8_Retval = E_NOT_OK;
#if ((LCD_CONTROL_PORT == NC) && (LCD_DATA_PORT == NC))
	Loc_u8_Retval  = MCAL_DIO_u8SetPinValue(LCD_RS_PORT, LCD_RS_PIN, PIN_HIGH);
    1d56:	83 e0       	ldi	r24, 0x03	; 3
    1d58:	66 e0       	ldi	r22, 0x06	; 6
    1d5a:	41 e0       	ldi	r20, 0x01	; 1
    1d5c:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
    1d60:	18 2f       	mov	r17, r24
	Loc_u8_Retval |= MCAL_DIO_u8SetPinValue(LCD_RW_PORT, LCD_RW_PIN, PIN_LOW);
    1d62:	81 e0       	ldi	r24, 0x01	; 1
    1d64:	61 e0       	ldi	r22, 0x01	; 1
    1d66:	40 e0       	ldi	r20, 0x00	; 0
    1d68:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
	Loc_u8_Retval |= MCAL_DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_RW_PIN, PIN_LOW);
#else
	#error ("Error Configurations")
#endif
	return Loc_u8_Retval;
}
    1d6c:	81 2b       	or	r24, r17
    1d6e:	1f 91       	pop	r17
    1d70:	08 95       	ret

00001d72 <HAL_LCD_u8_SendCommandInit>:
 * INPUT Arg   : No Args
 * RETURN      : Execution Status (OK OR NOT_OK)
 * **********************************************************************
 **/
STD_TYPE HAL_LCD_u8_SendCommandInit(void)
{
    1d72:	1f 93       	push	r17
	u8 Loc_u8_Retval = E_NOT_OK;
#if ((LCD_CONTROL_PORT == NC) && (LCD_DATA_PORT == NC))
	Loc_u8_Retval  = MCAL_DIO_u8SetPinValue(LCD_RS_PORT, LCD_RS_PIN, PIN_LOW);
    1d74:	83 e0       	ldi	r24, 0x03	; 3
    1d76:	66 e0       	ldi	r22, 0x06	; 6
    1d78:	40 e0       	ldi	r20, 0x00	; 0
    1d7a:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
    1d7e:	18 2f       	mov	r17, r24
	Loc_u8_Retval |= MCAL_DIO_u8SetPinValue(LCD_RW_PORT, LCD_RW_PIN, PIN_LOW);
    1d80:	81 e0       	ldi	r24, 0x01	; 1
    1d82:	61 e0       	ldi	r22, 0x01	; 1
    1d84:	40 e0       	ldi	r20, 0x00	; 0
    1d86:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
	Loc_u8_Retval |= MCAL_DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_RW_PIN, PIN_LOW);
#else
	#error ("Error Configurations")
#endif
	return Loc_u8_Retval;
}
    1d8a:	81 2b       	or	r24, r17
    1d8c:	1f 91       	pop	r17
    1d8e:	08 95       	ret

00001d90 <HAL_LCD_u8_LcdPinInit>:
 **/

STD_TYPE HAL_LCD_u8_LcdPinInit(u8 Loc_u8_LcdPortID, u8 Loc_u8_LcdPinID)
{
	u8 Loc_u8_Retval = E_NOT_OK;
	if(Loc_u8_LcdPortID <= PortD && Loc_u8_LcdPinID <= PIN7)
    1d90:	84 30       	cpi	r24, 0x04	; 4
    1d92:	10 f4       	brcc	.+4      	; 0x1d98 <HAL_LCD_u8_LcdPinInit+0x8>
    1d94:	68 30       	cpi	r22, 0x08	; 8
    1d96:	10 f0       	brcs	.+4      	; 0x1d9c <HAL_LCD_u8_LcdPinInit+0xc>
	{
		Loc_u8_Retval = MCAL_DIO_u8SetPinDirection(Loc_u8_LcdPortID, Loc_u8_LcdPinID, PIN_OUTPUT);
    1d98:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		//Do Nothing
	}
	return Loc_u8_Retval;
}
    1d9a:	08 95       	ret
STD_TYPE HAL_LCD_u8_LcdPinInit(u8 Loc_u8_LcdPortID, u8 Loc_u8_LcdPinID)
{
	u8 Loc_u8_Retval = E_NOT_OK;
	if(Loc_u8_LcdPortID <= PortD && Loc_u8_LcdPinID <= PIN7)
	{
		Loc_u8_Retval = MCAL_DIO_u8SetPinDirection(Loc_u8_LcdPortID, Loc_u8_LcdPinID, PIN_OUTPUT);
    1d9c:	41 e0       	ldi	r20, 0x01	; 1
    1d9e:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <MCAL_DIO_u8SetPinDirection>
    1da2:	08 95       	ret

00001da4 <HAL_LCD_u8_SendCommand>:
 * INPUT Arg   : Value of Instruction
 * RETURN      : Execution Status (OK OR NOT_OK)
 * **********************************************************************
 **/
STD_TYPE HAL_LCD_u8_SendCommand(u8 Loc_u8_Command)
{
    1da4:	5f 92       	push	r5
    1da6:	6f 92       	push	r6
    1da8:	7f 92       	push	r7
    1daa:	8f 92       	push	r8
    1dac:	9f 92       	push	r9
    1dae:	af 92       	push	r10
    1db0:	bf 92       	push	r11
    1db2:	cf 92       	push	r12
    1db4:	df 92       	push	r13
    1db6:	ef 92       	push	r14
    1db8:	ff 92       	push	r15
    1dba:	0f 93       	push	r16
    1dbc:	1f 93       	push	r17
    1dbe:	08 2f       	mov	r16, r24
 **/
STD_TYPE HAL_LCD_u8_SendCommandInit(void)
{
	u8 Loc_u8_Retval = E_NOT_OK;
#if ((LCD_CONTROL_PORT == NC) && (LCD_DATA_PORT == NC))
	Loc_u8_Retval  = MCAL_DIO_u8SetPinValue(LCD_RS_PORT, LCD_RS_PIN, PIN_LOW);
    1dc0:	83 e0       	ldi	r24, 0x03	; 3
    1dc2:	66 e0       	ldi	r22, 0x06	; 6
    1dc4:	40 e0       	ldi	r20, 0x00	; 0
    1dc6:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
	Loc_u8_Retval |= MCAL_DIO_u8SetPinValue(LCD_RW_PORT, LCD_RW_PIN, PIN_LOW);
    1dca:	81 e0       	ldi	r24, 0x01	; 1
    1dcc:	61 e0       	ldi	r22, 0x01	; 1
    1dce:	40 e0       	ldi	r20, 0x00	; 0
    1dd0:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
STD_TYPE HAL_LCD_u8_SendCommand(u8 Loc_u8_Command)
{
	u8 Loc_u8_Retval = E_NOT_OK;
	Loc_u8_Retval = HAL_LCD_u8_SendCommandInit();
#if ((LCD_CONTROL_PORT == NC) && (LCD_DATA_PORT == NC))
	Loc_u8_Retval  = MCAL_DIO_u8SetPinValue(LCD_D4_PORT,LCD_D4_PIN,GET_BIT(Loc_u8_Command,4));
    1dd4:	40 2f       	mov	r20, r16
    1dd6:	42 95       	swap	r20
    1dd8:	41 70       	andi	r20, 0x01	; 1
    1dda:	81 e0       	ldi	r24, 0x01	; 1
    1ddc:	63 e0       	ldi	r22, 0x03	; 3
    1dde:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
    1de2:	58 2e       	mov	r5, r24
	Loc_u8_Retval |= MCAL_DIO_u8SetPinValue(LCD_D5_PORT,LCD_D5_PIN,GET_BIT(Loc_u8_Command,5));
    1de4:	40 2f       	mov	r20, r16
    1de6:	42 95       	swap	r20
    1de8:	46 95       	lsr	r20
    1dea:	41 70       	andi	r20, 0x01	; 1
    1dec:	83 e0       	ldi	r24, 0x03	; 3
    1dee:	63 e0       	ldi	r22, 0x03	; 3
    1df0:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
    1df4:	f8 2e       	mov	r15, r24
	Loc_u8_Retval |= MCAL_DIO_u8SetPinValue(LCD_D6_PORT,LCD_D6_PIN,GET_BIT(Loc_u8_Command,6));
    1df6:	40 2f       	mov	r20, r16
    1df8:	42 95       	swap	r20
    1dfa:	46 95       	lsr	r20
    1dfc:	46 95       	lsr	r20
    1dfe:	41 70       	andi	r20, 0x01	; 1
    1e00:	83 e0       	ldi	r24, 0x03	; 3
    1e02:	64 e0       	ldi	r22, 0x04	; 4
    1e04:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
    1e08:	68 2e       	mov	r6, r24
	Loc_u8_Retval |= MCAL_DIO_u8SetPinValue(LCD_D7_PORT,LCD_D7_PIN,GET_BIT(Loc_u8_Command,7));
    1e0a:	40 2f       	mov	r20, r16
    1e0c:	44 1f       	adc	r20, r20
    1e0e:	44 27       	eor	r20, r20
    1e10:	44 1f       	adc	r20, r20
    1e12:	83 e0       	ldi	r24, 0x03	; 3
    1e14:	65 e0       	ldi	r22, 0x05	; 5
    1e16:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
    1e1a:	78 2e       	mov	r7, r24
	Loc_u8_Retval |= MCAL_DIO_u8SetPinValue(LCD_EN_PORT, LCD_EN_PIN, PIN_HIGH);
    1e1c:	83 e0       	ldi	r24, 0x03	; 3
    1e1e:	67 e0       	ldi	r22, 0x07	; 7
    1e20:	41 e0       	ldi	r20, 0x01	; 1
    1e22:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
    1e26:	88 2e       	mov	r8, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1e28:	50 e2       	ldi	r21, 0x20	; 32
    1e2a:	c5 2e       	mov	r12, r21
    1e2c:	5e e4       	ldi	r21, 0x4E	; 78
    1e2e:	d5 2e       	mov	r13, r21
    1e30:	c6 01       	movw	r24, r12
    1e32:	01 97       	sbiw	r24, 0x01	; 1
    1e34:	f1 f7       	brne	.-4      	; 0x1e32 <HAL_LCD_u8_SendCommand+0x8e>
	_delay_ms(10);
	Loc_u8_Retval |= MCAL_DIO_u8SetPinValue(LCD_EN_PORT, LCD_EN_PIN, PIN_LOW);
    1e36:	83 e0       	ldi	r24, 0x03	; 3
    1e38:	67 e0       	ldi	r22, 0x07	; 7
    1e3a:	40 e0       	ldi	r20, 0x00	; 0
    1e3c:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
    1e40:	98 2e       	mov	r9, r24
	Loc_u8_Retval |= MCAL_DIO_u8SetPinValue(LCD_D4_PORT,LCD_D4_PIN,GET_BIT(Loc_u8_Command<<4,4));
    1e42:	10 e0       	ldi	r17, 0x00	; 0
    1e44:	02 95       	swap	r16
    1e46:	12 95       	swap	r17
    1e48:	10 7f       	andi	r17, 0xF0	; 240
    1e4a:	10 27       	eor	r17, r16
    1e4c:	00 7f       	andi	r16, 0xF0	; 240
    1e4e:	10 27       	eor	r17, r16
    1e50:	15 95       	asr	r17
    1e52:	07 95       	ror	r16
    1e54:	15 95       	asr	r17
    1e56:	07 95       	ror	r16
    1e58:	15 95       	asr	r17
    1e5a:	07 95       	ror	r16
    1e5c:	15 95       	asr	r17
    1e5e:	07 95       	ror	r16
    1e60:	40 2f       	mov	r20, r16
    1e62:	41 70       	andi	r20, 0x01	; 1
    1e64:	81 e0       	ldi	r24, 0x01	; 1
    1e66:	63 e0       	ldi	r22, 0x03	; 3
    1e68:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
    1e6c:	a8 2e       	mov	r10, r24
	Loc_u8_Retval |= MCAL_DIO_u8SetPinValue(LCD_D5_PORT,LCD_D5_PIN,GET_BIT(Loc_u8_Command<<4,5));
    1e6e:	15 95       	asr	r17
    1e70:	07 95       	ror	r16
    1e72:	40 2f       	mov	r20, r16
    1e74:	41 70       	andi	r20, 0x01	; 1
    1e76:	83 e0       	ldi	r24, 0x03	; 3
    1e78:	63 e0       	ldi	r22, 0x03	; 3
    1e7a:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
    1e7e:	b8 2e       	mov	r11, r24
	Loc_u8_Retval |= MCAL_DIO_u8SetPinValue(LCD_D6_PORT,LCD_D6_PIN,GET_BIT(Loc_u8_Command<<4,6));
    1e80:	15 95       	asr	r17
    1e82:	07 95       	ror	r16
    1e84:	40 2f       	mov	r20, r16
    1e86:	41 70       	andi	r20, 0x01	; 1
    1e88:	83 e0       	ldi	r24, 0x03	; 3
    1e8a:	64 e0       	ldi	r22, 0x04	; 4
    1e8c:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
    1e90:	e8 2e       	mov	r14, r24
	Loc_u8_Retval |= MCAL_DIO_u8SetPinValue(LCD_D7_PORT,LCD_D7_PIN,GET_BIT(Loc_u8_Command<<4,7));
    1e92:	15 95       	asr	r17
    1e94:	07 95       	ror	r16
    1e96:	01 70       	andi	r16, 0x01	; 1
    1e98:	83 e0       	ldi	r24, 0x03	; 3
    1e9a:	65 e0       	ldi	r22, 0x05	; 5
    1e9c:	40 2f       	mov	r20, r16
    1e9e:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
    1ea2:	08 2f       	mov	r16, r24
	Loc_u8_Retval |= MCAL_DIO_u8SetPinValue(LCD_EN_PORT, LCD_EN_PIN, PIN_HIGH);
    1ea4:	83 e0       	ldi	r24, 0x03	; 3
    1ea6:	67 e0       	ldi	r22, 0x07	; 7
    1ea8:	41 e0       	ldi	r20, 0x01	; 1
    1eaa:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
    1eae:	18 2f       	mov	r17, r24
    1eb0:	c6 01       	movw	r24, r12
    1eb2:	01 97       	sbiw	r24, 0x01	; 1
    1eb4:	f1 f7       	brne	.-4      	; 0x1eb2 <HAL_LCD_u8_SendCommand+0x10e>
	_delay_ms(10);
	Loc_u8_Retval |= MCAL_DIO_u8SetPinValue(LCD_EN_PORT, LCD_EN_PIN, PIN_LOW);
    1eb6:	83 e0       	ldi	r24, 0x03	; 3
    1eb8:	67 e0       	ldi	r22, 0x07	; 7
    1eba:	40 e0       	ldi	r20, 0x00	; 0
    1ebc:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
{
	u8 Loc_u8_Retval = E_NOT_OK;
	Loc_u8_Retval = HAL_LCD_u8_SendCommandInit();
#if ((LCD_CONTROL_PORT == NC) && (LCD_DATA_PORT == NC))
	Loc_u8_Retval  = MCAL_DIO_u8SetPinValue(LCD_D4_PORT,LCD_D4_PIN,GET_BIT(Loc_u8_Command,4));
	Loc_u8_Retval |= MCAL_DIO_u8SetPinValue(LCD_D5_PORT,LCD_D5_PIN,GET_BIT(Loc_u8_Command,5));
    1ec0:	f5 28       	or	r15, r5
	Loc_u8_Retval |= MCAL_DIO_u8SetPinValue(LCD_D6_PORT,LCD_D6_PIN,GET_BIT(Loc_u8_Command,6));
    1ec2:	f6 28       	or	r15, r6
	Loc_u8_Retval |= MCAL_DIO_u8SetPinValue(LCD_D7_PORT,LCD_D7_PIN,GET_BIT(Loc_u8_Command,7));
    1ec4:	f7 28       	or	r15, r7
	Loc_u8_Retval |= MCAL_DIO_u8SetPinValue(LCD_EN_PORT, LCD_EN_PIN, PIN_HIGH);
    1ec6:	f8 28       	or	r15, r8
	_delay_ms(10);
	Loc_u8_Retval |= MCAL_DIO_u8SetPinValue(LCD_EN_PORT, LCD_EN_PIN, PIN_LOW);
    1ec8:	f9 28       	or	r15, r9
	Loc_u8_Retval |= MCAL_DIO_u8SetPinValue(LCD_D4_PORT,LCD_D4_PIN,GET_BIT(Loc_u8_Command<<4,4));
    1eca:	fa 28       	or	r15, r10
	Loc_u8_Retval |= MCAL_DIO_u8SetPinValue(LCD_D5_PORT,LCD_D5_PIN,GET_BIT(Loc_u8_Command<<4,5));
    1ecc:	fb 28       	or	r15, r11
	Loc_u8_Retval |= MCAL_DIO_u8SetPinValue(LCD_D6_PORT,LCD_D6_PIN,GET_BIT(Loc_u8_Command<<4,6));
    1ece:	fe 28       	or	r15, r14
	Loc_u8_Retval |= MCAL_DIO_u8SetPinValue(LCD_D7_PORT,LCD_D7_PIN,GET_BIT(Loc_u8_Command<<4,7));
    1ed0:	f0 2a       	or	r15, r16
	Loc_u8_Retval |= MCAL_DIO_u8SetPinValue(LCD_EN_PORT, LCD_EN_PIN, PIN_HIGH);
    1ed2:	f1 2a       	or	r15, r17
    1ed4:	f6 01       	movw	r30, r12
    1ed6:	31 97       	sbiw	r30, 0x01	; 1
    1ed8:	f1 f7       	brne	.-4      	; 0x1ed6 <HAL_LCD_u8_SendCommand+0x132>
	_delay_ms(10);
#else
	#error ("Error Configurations")
#endif
	return Loc_u8_Retval;
}
    1eda:	8f 29       	or	r24, r15
    1edc:	1f 91       	pop	r17
    1ede:	0f 91       	pop	r16
    1ee0:	ff 90       	pop	r15
    1ee2:	ef 90       	pop	r14
    1ee4:	df 90       	pop	r13
    1ee6:	cf 90       	pop	r12
    1ee8:	bf 90       	pop	r11
    1eea:	af 90       	pop	r10
    1eec:	9f 90       	pop	r9
    1eee:	8f 90       	pop	r8
    1ef0:	7f 90       	pop	r7
    1ef2:	6f 90       	pop	r6
    1ef4:	5f 90       	pop	r5
    1ef6:	08 95       	ret

00001ef8 <HAL_LCD_u8_ClearFullScreen>:
 * **********************************************************************
 **/
STD_TYPE HAL_LCD_u8_ClearFullScreen(void)
{
	u8 Loc_u8_Retval = E_NOT_OK;
	Loc_u8_Retval = HAL_LCD_u8_SendCommand(0x01);
    1ef8:	81 e0       	ldi	r24, 0x01	; 1
    1efa:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <HAL_LCD_u8_SendCommand>
	return Loc_u8_Retval;
}
    1efe:	08 95       	ret

00001f00 <HAL_u8_LCD_8BitModeInit>:
 * INPUT Arg   : No Args
 * RETURN      : Execution Status (OK OR NOT_OK)
 * **********************************************************************
 **/
STD_TYPE HAL_u8_LCD_8BitModeInit(void)
{
    1f00:	ff 92       	push	r15
    1f02:	0f 93       	push	r16
    1f04:	1f 93       	push	r17
	u8 Loc_u8_Retval = E_NOT_OK;
	Loc_u8_Retval  = HAL_LCD_u8_SendCommand(0x38);
    1f06:	88 e3       	ldi	r24, 0x38	; 56
    1f08:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <HAL_LCD_u8_SendCommand>
    1f0c:	f8 2e       	mov	r15, r24
	Loc_u8_Retval |= HAL_LCD_u8_SendCommand(0x0F);
    1f0e:	8f e0       	ldi	r24, 0x0F	; 15
    1f10:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <HAL_LCD_u8_SendCommand>
    1f14:	08 2f       	mov	r16, r24
    1f16:	20 e0       	ldi	r18, 0x00	; 0
    1f18:	30 e0       	ldi	r19, 0x00	; 0
    1f1a:	48 ec       	ldi	r20, 0xC8	; 200
    1f1c:	50 e0       	ldi	r21, 0x00	; 0
    1f1e:	ca 01       	movw	r24, r20
    1f20:	01 97       	sbiw	r24, 0x01	; 1
    1f22:	f1 f7       	brne	.-4      	; 0x1f20 <HAL_u8_LCD_8BitModeInit+0x20>
    1f24:	2f 5f       	subi	r18, 0xFF	; 255
    1f26:	3f 4f       	sbci	r19, 0xFF	; 255
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f28:	89 e0       	ldi	r24, 0x09	; 9
    1f2a:	24 3c       	cpi	r18, 0xC4	; 196
    1f2c:	38 07       	cpc	r19, r24
    1f2e:	b9 f7       	brne	.-18     	; 0x1f1e <HAL_u8_LCD_8BitModeInit+0x1e>
	_delay_ms(250);
	Loc_u8_Retval |= HAL_LCD_u8_SendCommand(0x01);
    1f30:	81 e0       	ldi	r24, 0x01	; 1
    1f32:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <HAL_LCD_u8_SendCommand>
    1f36:	18 2f       	mov	r17, r24
	Loc_u8_Retval |= HAL_LCD_u8_SendCommand(0x06);
    1f38:	86 e0       	ldi	r24, 0x06	; 6
    1f3a:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <HAL_LCD_u8_SendCommand>
 **/
STD_TYPE HAL_u8_LCD_8BitModeInit(void)
{
	u8 Loc_u8_Retval = E_NOT_OK;
	Loc_u8_Retval  = HAL_LCD_u8_SendCommand(0x38);
	Loc_u8_Retval |= HAL_LCD_u8_SendCommand(0x0F);
    1f3e:	0f 29       	or	r16, r15
	_delay_ms(250);
	Loc_u8_Retval |= HAL_LCD_u8_SendCommand(0x01);
    1f40:	01 2b       	or	r16, r17
	Loc_u8_Retval |= HAL_LCD_u8_SendCommand(0x06);
	return Loc_u8_Retval;
}
    1f42:	80 2b       	or	r24, r16
    1f44:	1f 91       	pop	r17
    1f46:	0f 91       	pop	r16
    1f48:	ff 90       	pop	r15
    1f4a:	08 95       	ret

00001f4c <HAL_u8_LCD_4BitModeInit>:
 * INPUT Arg   : No Args
 * RETURN      : Execution Status (OK OR NOT_OK)
 * **********************************************************************
 **/
STD_TYPE HAL_u8_LCD_4BitModeInit(void)
{
    1f4c:	ef 92       	push	r14
    1f4e:	ff 92       	push	r15
    1f50:	0f 93       	push	r16
    1f52:	1f 93       	push	r17
	u8 Loc_u8_Retval = E_NOT_OK;
	Loc_u8_Retval  = HAL_LCD_u8_SendCommand(0x02);
    1f54:	82 e0       	ldi	r24, 0x02	; 2
    1f56:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <HAL_LCD_u8_SendCommand>
    1f5a:	e8 2e       	mov	r14, r24
	Loc_u8_Retval |= HAL_LCD_u8_SendCommand(0x28);
    1f5c:	88 e2       	ldi	r24, 0x28	; 40
    1f5e:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <HAL_LCD_u8_SendCommand>
    1f62:	18 2f       	mov	r17, r24
	Loc_u8_Retval |= HAL_LCD_u8_SendCommand(0x0F);
    1f64:	8f e0       	ldi	r24, 0x0F	; 15
    1f66:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <HAL_LCD_u8_SendCommand>
    1f6a:	f8 2e       	mov	r15, r24
	Loc_u8_Retval |= HAL_LCD_u8_SendCommand(0x01);
    1f6c:	81 e0       	ldi	r24, 0x01	; 1
    1f6e:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <HAL_LCD_u8_SendCommand>
    1f72:	08 2f       	mov	r16, r24
	Loc_u8_Retval |= HAL_LCD_u8_SendCommand(0x06);
    1f74:	86 e0       	ldi	r24, 0x06	; 6
    1f76:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <HAL_LCD_u8_SendCommand>
 **/
STD_TYPE HAL_u8_LCD_4BitModeInit(void)
{
	u8 Loc_u8_Retval = E_NOT_OK;
	Loc_u8_Retval  = HAL_LCD_u8_SendCommand(0x02);
	Loc_u8_Retval |= HAL_LCD_u8_SendCommand(0x28);
    1f7a:	1e 29       	or	r17, r14
	Loc_u8_Retval |= HAL_LCD_u8_SendCommand(0x0F);
    1f7c:	1f 29       	or	r17, r15
	Loc_u8_Retval |= HAL_LCD_u8_SendCommand(0x01);
    1f7e:	10 2b       	or	r17, r16
	Loc_u8_Retval |= HAL_LCD_u8_SendCommand(0x06);
	return Loc_u8_Retval;
}
    1f80:	81 2b       	or	r24, r17
    1f82:	1f 91       	pop	r17
    1f84:	0f 91       	pop	r16
    1f86:	ff 90       	pop	r15
    1f88:	ef 90       	pop	r14
    1f8a:	08 95       	ret

00001f8c <HAL_LCD_u8_SendData>:
 * INPUT Arg   : Value Of Data in ASCII Table or Character
 * RETURN      : Execution Status (OK OR NOT_OK)
 * **********************************************************************
 **/
STD_TYPE HAL_LCD_u8_SendData(u8 Loc_u8_Data)
{
    1f8c:	5f 92       	push	r5
    1f8e:	6f 92       	push	r6
    1f90:	7f 92       	push	r7
    1f92:	8f 92       	push	r8
    1f94:	9f 92       	push	r9
    1f96:	af 92       	push	r10
    1f98:	bf 92       	push	r11
    1f9a:	cf 92       	push	r12
    1f9c:	df 92       	push	r13
    1f9e:	ef 92       	push	r14
    1fa0:	ff 92       	push	r15
    1fa2:	0f 93       	push	r16
    1fa4:	1f 93       	push	r17
    1fa6:	08 2f       	mov	r16, r24
 **/
STD_TYPE HAL_LCD_u8_SendDataInit(void)
{
	u8 Loc_u8_Retval = E_NOT_OK;
#if ((LCD_CONTROL_PORT == NC) && (LCD_DATA_PORT == NC))
	Loc_u8_Retval  = MCAL_DIO_u8SetPinValue(LCD_RS_PORT, LCD_RS_PIN, PIN_HIGH);
    1fa8:	83 e0       	ldi	r24, 0x03	; 3
    1faa:	66 e0       	ldi	r22, 0x06	; 6
    1fac:	41 e0       	ldi	r20, 0x01	; 1
    1fae:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
	Loc_u8_Retval |= MCAL_DIO_u8SetPinValue(LCD_RW_PORT, LCD_RW_PIN, PIN_LOW);
    1fb2:	81 e0       	ldi	r24, 0x01	; 1
    1fb4:	61 e0       	ldi	r22, 0x01	; 1
    1fb6:	40 e0       	ldi	r20, 0x00	; 0
    1fb8:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
STD_TYPE HAL_LCD_u8_SendData(u8 Loc_u8_Data)
{
	u8 Loc_u8_Retval = E_NOT_OK;
	Loc_u8_Retval = HAL_LCD_u8_SendDataInit();
#if ((LCD_CONTROL_PORT == NC) && (LCD_DATA_PORT == NC))
	Loc_u8_Retval  = MCAL_DIO_u8SetPinValue(LCD_D4_PORT,LCD_D4_PIN,GET_BIT(Loc_u8_Data,4));
    1fbc:	40 2f       	mov	r20, r16
    1fbe:	42 95       	swap	r20
    1fc0:	41 70       	andi	r20, 0x01	; 1
    1fc2:	81 e0       	ldi	r24, 0x01	; 1
    1fc4:	63 e0       	ldi	r22, 0x03	; 3
    1fc6:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
    1fca:	58 2e       	mov	r5, r24
	Loc_u8_Retval |= MCAL_DIO_u8SetPinValue(LCD_D5_PORT,LCD_D5_PIN,GET_BIT(Loc_u8_Data,5));
    1fcc:	40 2f       	mov	r20, r16
    1fce:	42 95       	swap	r20
    1fd0:	46 95       	lsr	r20
    1fd2:	41 70       	andi	r20, 0x01	; 1
    1fd4:	83 e0       	ldi	r24, 0x03	; 3
    1fd6:	63 e0       	ldi	r22, 0x03	; 3
    1fd8:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
    1fdc:	f8 2e       	mov	r15, r24
	Loc_u8_Retval |= MCAL_DIO_u8SetPinValue(LCD_D6_PORT,LCD_D6_PIN,GET_BIT(Loc_u8_Data,6));
    1fde:	40 2f       	mov	r20, r16
    1fe0:	42 95       	swap	r20
    1fe2:	46 95       	lsr	r20
    1fe4:	46 95       	lsr	r20
    1fe6:	41 70       	andi	r20, 0x01	; 1
    1fe8:	83 e0       	ldi	r24, 0x03	; 3
    1fea:	64 e0       	ldi	r22, 0x04	; 4
    1fec:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
    1ff0:	68 2e       	mov	r6, r24
	Loc_u8_Retval |= MCAL_DIO_u8SetPinValue(LCD_D7_PORT,LCD_D7_PIN,GET_BIT(Loc_u8_Data,7));
    1ff2:	40 2f       	mov	r20, r16
    1ff4:	44 1f       	adc	r20, r20
    1ff6:	44 27       	eor	r20, r20
    1ff8:	44 1f       	adc	r20, r20
    1ffa:	83 e0       	ldi	r24, 0x03	; 3
    1ffc:	65 e0       	ldi	r22, 0x05	; 5
    1ffe:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
    2002:	78 2e       	mov	r7, r24
	Loc_u8_Retval |= MCAL_DIO_u8SetPinValue(LCD_EN_PORT, LCD_EN_PIN, PIN_HIGH);
    2004:	83 e0       	ldi	r24, 0x03	; 3
    2006:	67 e0       	ldi	r22, 0x07	; 7
    2008:	41 e0       	ldi	r20, 0x01	; 1
    200a:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
    200e:	88 2e       	mov	r8, r24
    2010:	b0 e7       	ldi	r27, 0x70	; 112
    2012:	cb 2e       	mov	r12, r27
    2014:	b7 e1       	ldi	r27, 0x17	; 23
    2016:	db 2e       	mov	r13, r27
    2018:	c6 01       	movw	r24, r12
    201a:	01 97       	sbiw	r24, 0x01	; 1
    201c:	f1 f7       	brne	.-4      	; 0x201a <HAL_LCD_u8_SendData+0x8e>
	_delay_ms(3);
	Loc_u8_Retval |= MCAL_DIO_u8SetPinValue(LCD_EN_PORT, LCD_EN_PIN, PIN_LOW);
    201e:	83 e0       	ldi	r24, 0x03	; 3
    2020:	67 e0       	ldi	r22, 0x07	; 7
    2022:	40 e0       	ldi	r20, 0x00	; 0
    2024:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
    2028:	98 2e       	mov	r9, r24
	Loc_u8_Retval |= MCAL_DIO_u8SetPinValue(LCD_D4_PORT,LCD_D4_PIN,GET_BIT(Loc_u8_Data<<4,4));
    202a:	10 e0       	ldi	r17, 0x00	; 0
    202c:	02 95       	swap	r16
    202e:	12 95       	swap	r17
    2030:	10 7f       	andi	r17, 0xF0	; 240
    2032:	10 27       	eor	r17, r16
    2034:	00 7f       	andi	r16, 0xF0	; 240
    2036:	10 27       	eor	r17, r16
    2038:	15 95       	asr	r17
    203a:	07 95       	ror	r16
    203c:	15 95       	asr	r17
    203e:	07 95       	ror	r16
    2040:	15 95       	asr	r17
    2042:	07 95       	ror	r16
    2044:	15 95       	asr	r17
    2046:	07 95       	ror	r16
    2048:	40 2f       	mov	r20, r16
    204a:	41 70       	andi	r20, 0x01	; 1
    204c:	81 e0       	ldi	r24, 0x01	; 1
    204e:	63 e0       	ldi	r22, 0x03	; 3
    2050:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
    2054:	a8 2e       	mov	r10, r24
	Loc_u8_Retval |= MCAL_DIO_u8SetPinValue(LCD_D5_PORT,LCD_D5_PIN,GET_BIT(Loc_u8_Data<<4,5));
    2056:	15 95       	asr	r17
    2058:	07 95       	ror	r16
    205a:	40 2f       	mov	r20, r16
    205c:	41 70       	andi	r20, 0x01	; 1
    205e:	83 e0       	ldi	r24, 0x03	; 3
    2060:	63 e0       	ldi	r22, 0x03	; 3
    2062:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
    2066:	b8 2e       	mov	r11, r24
	Loc_u8_Retval |= MCAL_DIO_u8SetPinValue(LCD_D6_PORT,LCD_D6_PIN,GET_BIT(Loc_u8_Data<<4,6));
    2068:	15 95       	asr	r17
    206a:	07 95       	ror	r16
    206c:	40 2f       	mov	r20, r16
    206e:	41 70       	andi	r20, 0x01	; 1
    2070:	83 e0       	ldi	r24, 0x03	; 3
    2072:	64 e0       	ldi	r22, 0x04	; 4
    2074:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
    2078:	e8 2e       	mov	r14, r24
	Loc_u8_Retval |= MCAL_DIO_u8SetPinValue(LCD_D7_PORT,LCD_D7_PIN,GET_BIT(Loc_u8_Data<<4,7));
    207a:	15 95       	asr	r17
    207c:	07 95       	ror	r16
    207e:	01 70       	andi	r16, 0x01	; 1
    2080:	83 e0       	ldi	r24, 0x03	; 3
    2082:	65 e0       	ldi	r22, 0x05	; 5
    2084:	40 2f       	mov	r20, r16
    2086:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
    208a:	08 2f       	mov	r16, r24
	Loc_u8_Retval |= MCAL_DIO_u8SetPinValue(LCD_EN_PORT, LCD_EN_PIN, PIN_HIGH);
    208c:	83 e0       	ldi	r24, 0x03	; 3
    208e:	67 e0       	ldi	r22, 0x07	; 7
    2090:	41 e0       	ldi	r20, 0x01	; 1
    2092:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
    2096:	18 2f       	mov	r17, r24
    2098:	c6 01       	movw	r24, r12
    209a:	01 97       	sbiw	r24, 0x01	; 1
    209c:	f1 f7       	brne	.-4      	; 0x209a <HAL_LCD_u8_SendData+0x10e>
	_delay_ms(3);
	Loc_u8_Retval |= MCAL_DIO_u8SetPinValue(LCD_EN_PORT, LCD_EN_PIN, PIN_LOW);
    209e:	83 e0       	ldi	r24, 0x03	; 3
    20a0:	67 e0       	ldi	r22, 0x07	; 7
    20a2:	40 e0       	ldi	r20, 0x00	; 0
    20a4:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
{
	u8 Loc_u8_Retval = E_NOT_OK;
	Loc_u8_Retval = HAL_LCD_u8_SendDataInit();
#if ((LCD_CONTROL_PORT == NC) && (LCD_DATA_PORT == NC))
	Loc_u8_Retval  = MCAL_DIO_u8SetPinValue(LCD_D4_PORT,LCD_D4_PIN,GET_BIT(Loc_u8_Data,4));
	Loc_u8_Retval |= MCAL_DIO_u8SetPinValue(LCD_D5_PORT,LCD_D5_PIN,GET_BIT(Loc_u8_Data,5));
    20a8:	f5 28       	or	r15, r5
	Loc_u8_Retval |= MCAL_DIO_u8SetPinValue(LCD_D6_PORT,LCD_D6_PIN,GET_BIT(Loc_u8_Data,6));
    20aa:	f6 28       	or	r15, r6
	Loc_u8_Retval |= MCAL_DIO_u8SetPinValue(LCD_D7_PORT,LCD_D7_PIN,GET_BIT(Loc_u8_Data,7));
    20ac:	f7 28       	or	r15, r7
	Loc_u8_Retval |= MCAL_DIO_u8SetPinValue(LCD_EN_PORT, LCD_EN_PIN, PIN_HIGH);
    20ae:	f8 28       	or	r15, r8
	_delay_ms(3);
	Loc_u8_Retval |= MCAL_DIO_u8SetPinValue(LCD_EN_PORT, LCD_EN_PIN, PIN_LOW);
    20b0:	f9 28       	or	r15, r9
	Loc_u8_Retval |= MCAL_DIO_u8SetPinValue(LCD_D4_PORT,LCD_D4_PIN,GET_BIT(Loc_u8_Data<<4,4));
    20b2:	fa 28       	or	r15, r10
	Loc_u8_Retval |= MCAL_DIO_u8SetPinValue(LCD_D5_PORT,LCD_D5_PIN,GET_BIT(Loc_u8_Data<<4,5));
    20b4:	fb 28       	or	r15, r11
	Loc_u8_Retval |= MCAL_DIO_u8SetPinValue(LCD_D6_PORT,LCD_D6_PIN,GET_BIT(Loc_u8_Data<<4,6));
    20b6:	fe 28       	or	r15, r14
	Loc_u8_Retval |= MCAL_DIO_u8SetPinValue(LCD_D7_PORT,LCD_D7_PIN,GET_BIT(Loc_u8_Data<<4,7));
    20b8:	f0 2a       	or	r15, r16
	Loc_u8_Retval |= MCAL_DIO_u8SetPinValue(LCD_EN_PORT, LCD_EN_PIN, PIN_HIGH);
    20ba:	f1 2a       	or	r15, r17
    20bc:	f6 01       	movw	r30, r12
    20be:	31 97       	sbiw	r30, 0x01	; 1
    20c0:	f1 f7       	brne	.-4      	; 0x20be <HAL_LCD_u8_SendData+0x132>
	_delay_ms(10);
#else
	#error ("Error Configurations")
#endif
	return Loc_u8_Retval;
}
    20c2:	8f 29       	or	r24, r15
    20c4:	1f 91       	pop	r17
    20c6:	0f 91       	pop	r16
    20c8:	ff 90       	pop	r15
    20ca:	ef 90       	pop	r14
    20cc:	df 90       	pop	r13
    20ce:	cf 90       	pop	r12
    20d0:	bf 90       	pop	r11
    20d2:	af 90       	pop	r10
    20d4:	9f 90       	pop	r9
    20d6:	8f 90       	pop	r8
    20d8:	7f 90       	pop	r7
    20da:	6f 90       	pop	r6
    20dc:	5f 90       	pop	r5
    20de:	08 95       	ret

000020e0 <HAL_LCD_u8_WriteCharacter1>:
 * INPUT Arg   : Pointer Points to Character or Character
 * RETURN      : Execution Status (OK OR NOT_OK)
 * **********************************************************************
 **/
STD_TYPE HAL_LCD_u8_WriteCharacter1(u8 *Loc_u8_character)
{
    20e0:	fc 01       	movw	r30, r24
	u8 Loc_u8_Retval = E_NOT_OK;
	Loc_u8_Retval = HAL_LCD_u8_SendData(*Loc_u8_character);
    20e2:	80 81       	ld	r24, Z
    20e4:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <HAL_LCD_u8_SendData>
	return Loc_u8_Retval;
}
    20e8:	08 95       	ret

000020ea <HAL_LCD_u8_WriteCharacter>:
 * **********************************************************************
 **/
STD_TYPE HAL_LCD_u8_WriteCharacter(u8 Loc_u8_character)
{
	u8 Loc_u8_Retval = E_NOT_OK;
	Loc_u8_Retval = HAL_LCD_u8_SendData(Loc_u8_character);
    20ea:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <HAL_LCD_u8_SendData>
	return Loc_u8_Retval;
}
    20ee:	08 95       	ret

000020f0 <HAL_LCD_u8_WriteNumber>:
 * INPUT Arg1   : The Number you want print it
 * RETURN       : Execution Status (OK OR NOT_OK)
 * **********************************************************************
 **/
STD_TYPE HAL_LCD_u8_WriteNumber(s32 Loc_s32_Num)
{
    20f0:	8f 92       	push	r8
    20f2:	9f 92       	push	r9
    20f4:	af 92       	push	r10
    20f6:	bf 92       	push	r11
    20f8:	cf 92       	push	r12
    20fa:	df 92       	push	r13
    20fc:	ef 92       	push	r14
    20fe:	ff 92       	push	r15
    2100:	0f 93       	push	r16
    2102:	1f 93       	push	r17
    2104:	df 93       	push	r29
    2106:	cf 93       	push	r28
    2108:	cd b7       	in	r28, 0x3d	; 61
    210a:	de b7       	in	r29, 0x3e	; 62
    210c:	2a 97       	sbiw	r28, 0x0a	; 10
    210e:	0f b6       	in	r0, 0x3f	; 63
    2110:	f8 94       	cli
    2112:	de bf       	out	0x3e, r29	; 62
    2114:	0f be       	out	0x3f, r0	; 63
    2116:	cd bf       	out	0x3d, r28	; 61
    2118:	7b 01       	movw	r14, r22
    211a:	8c 01       	movw	r16, r24
	u8 Loc_u8_Retval = E_NOT_OK;
	u8 rem = 0;
	s8 arr[10];
	s8 i = 0;
	s8 j = 0;
	if(Loc_s32_Num == 0)
    211c:	61 15       	cp	r22, r1
    211e:	71 05       	cpc	r23, r1
    2120:	81 05       	cpc	r24, r1
    2122:	91 05       	cpc	r25, r1
    2124:	09 f4       	brne	.+2      	; 0x2128 <HAL_LCD_u8_WriteNumber+0x38>
    2126:	50 c0       	rjmp	.+160    	; 0x21c8 <HAL_LCD_u8_WriteNumber+0xd8>
	{
		return HAL_LCD_u8_WriteCharacter('0');
	}
	else if(Loc_s32_Num < 0)
    2128:	97 fd       	sbrc	r25, 7
    212a:	53 c0       	rjmp	.+166    	; 0x21d2 <HAL_LCD_u8_WriteNumber+0xe2>
    212c:	cc 24       	eor	r12, r12
    212e:	c3 94       	inc	r12
	{
		Loc_s32_Num *= -1;
		Loc_u8_Retval |= HAL_LCD_u8_WriteCharacter('-');
    2130:	4e 01       	movw	r8, r28
    2132:	08 94       	sec
    2134:	81 1c       	adc	r8, r1
    2136:	91 1c       	adc	r9, r1
    2138:	54 01       	movw	r10, r8
    213a:	dd 24       	eor	r13, r13
	}

	while (Loc_s32_Num > 0)
	{
		rem = Loc_s32_Num % 10;
    213c:	c8 01       	movw	r24, r16
    213e:	b7 01       	movw	r22, r14
    2140:	2a e0       	ldi	r18, 0x0A	; 10
    2142:	30 e0       	ldi	r19, 0x00	; 0
    2144:	40 e0       	ldi	r20, 0x00	; 0
    2146:	50 e0       	ldi	r21, 0x00	; 0
    2148:	0e 94 b1 30 	call	0x6162	; 0x6162 <__divmodsi4>
		rem = rem + '0';
		arr[i] = (char)rem;
    214c:	60 5d       	subi	r22, 0xD0	; 208
    214e:	f5 01       	movw	r30, r10
    2150:	61 93       	st	Z+, r22
    2152:	5f 01       	movw	r10, r30
		Loc_s32_Num = Loc_s32_Num / 10;
    2154:	c8 01       	movw	r24, r16
    2156:	b7 01       	movw	r22, r14
    2158:	2a e0       	ldi	r18, 0x0A	; 10
    215a:	30 e0       	ldi	r19, 0x00	; 0
    215c:	40 e0       	ldi	r20, 0x00	; 0
    215e:	50 e0       	ldi	r21, 0x00	; 0
    2160:	0e 94 b1 30 	call	0x6162	; 0x6162 <__divmodsi4>
    2164:	c9 01       	movw	r24, r18
    2166:	da 01       	movw	r26, r20
    2168:	7c 01       	movw	r14, r24
    216a:	8d 01       	movw	r16, r26
		i++;
    216c:	d3 94       	inc	r13
	{
		Loc_s32_Num *= -1;
		Loc_u8_Retval |= HAL_LCD_u8_WriteCharacter('-');
	}

	while (Loc_s32_Num > 0)
    216e:	e1 14       	cp	r14, r1
    2170:	f1 04       	cpc	r15, r1
    2172:	01 05       	cpc	r16, r1
    2174:	11 05       	cpc	r17, r1
    2176:	11 f7       	brne	.-60     	; 0x213c <HAL_LCD_u8_WriteNumber+0x4c>
		arr[i] = (char)rem;
		Loc_s32_Num = Loc_s32_Num / 10;
		i++;
	}

	for(j=i-1; j>=0; j--) /*j>=0, j must be a signed number*/
    2178:	fd 2c       	mov	r15, r13
    217a:	fa 94       	dec	r15
    217c:	f7 fc       	sbrc	r15, 7
    217e:	10 c0       	rjmp	.+32     	; 0x21a0 <HAL_LCD_u8_WriteNumber+0xb0>
    2180:	0f 2d       	mov	r16, r15
    2182:	11 27       	eor	r17, r17
    2184:	07 fd       	sbrc	r16, 7
    2186:	10 95       	com	r17
    2188:	08 0d       	add	r16, r8
    218a:	19 1d       	adc	r17, r9
 * **********************************************************************
 **/
STD_TYPE HAL_LCD_u8_WriteCharacter(u8 Loc_u8_character)
{
	u8 Loc_u8_Retval = E_NOT_OK;
	Loc_u8_Retval = HAL_LCD_u8_SendData(Loc_u8_character);
    218c:	f8 01       	movw	r30, r16
    218e:	80 81       	ld	r24, Z
    2190:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <HAL_LCD_u8_SendData>
		i++;
	}

	for(j=i-1; j>=0; j--) /*j>=0, j must be a signed number*/
	{
		Loc_u8_Retval |= HAL_LCD_u8_WriteCharacter(arr[j]);
    2194:	c8 2a       	or	r12, r24
		arr[i] = (char)rem;
		Loc_s32_Num = Loc_s32_Num / 10;
		i++;
	}

	for(j=i-1; j>=0; j--) /*j>=0, j must be a signed number*/
    2196:	fa 94       	dec	r15
    2198:	01 50       	subi	r16, 0x01	; 1
    219a:	10 40       	sbci	r17, 0x00	; 0
    219c:	f7 fe       	sbrs	r15, 7
    219e:	f6 cf       	rjmp	.-20     	; 0x218c <HAL_LCD_u8_WriteNumber+0x9c>
	{
		Loc_u8_Retval |= HAL_LCD_u8_WriteCharacter(arr[j]);
	}
	return Loc_u8_Retval;
}
    21a0:	8c 2d       	mov	r24, r12
    21a2:	2a 96       	adiw	r28, 0x0a	; 10
    21a4:	0f b6       	in	r0, 0x3f	; 63
    21a6:	f8 94       	cli
    21a8:	de bf       	out	0x3e, r29	; 62
    21aa:	0f be       	out	0x3f, r0	; 63
    21ac:	cd bf       	out	0x3d, r28	; 61
    21ae:	cf 91       	pop	r28
    21b0:	df 91       	pop	r29
    21b2:	1f 91       	pop	r17
    21b4:	0f 91       	pop	r16
    21b6:	ff 90       	pop	r15
    21b8:	ef 90       	pop	r14
    21ba:	df 90       	pop	r13
    21bc:	cf 90       	pop	r12
    21be:	bf 90       	pop	r11
    21c0:	af 90       	pop	r10
    21c2:	9f 90       	pop	r9
    21c4:	8f 90       	pop	r8
    21c6:	08 95       	ret
 * **********************************************************************
 **/
STD_TYPE HAL_LCD_u8_WriteCharacter(u8 Loc_u8_character)
{
	u8 Loc_u8_Retval = E_NOT_OK;
	Loc_u8_Retval = HAL_LCD_u8_SendData(Loc_u8_character);
    21c8:	80 e3       	ldi	r24, 0x30	; 48
    21ca:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <HAL_LCD_u8_SendData>
    21ce:	c8 2e       	mov	r12, r24
    21d0:	e7 cf       	rjmp	.-50     	; 0x21a0 <HAL_LCD_u8_WriteNumber+0xb0>
	{
		return HAL_LCD_u8_WriteCharacter('0');
	}
	else if(Loc_s32_Num < 0)
	{
		Loc_s32_Num *= -1;
    21d2:	10 95       	com	r17
    21d4:	00 95       	com	r16
    21d6:	f0 94       	com	r15
    21d8:	e0 94       	com	r14
    21da:	e1 1c       	adc	r14, r1
    21dc:	f1 1c       	adc	r15, r1
    21de:	01 1d       	adc	r16, r1
    21e0:	11 1d       	adc	r17, r1
 * **********************************************************************
 **/
STD_TYPE HAL_LCD_u8_WriteCharacter(u8 Loc_u8_character)
{
	u8 Loc_u8_Retval = E_NOT_OK;
	Loc_u8_Retval = HAL_LCD_u8_SendData(Loc_u8_character);
    21e2:	8d e2       	ldi	r24, 0x2D	; 45
    21e4:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <HAL_LCD_u8_SendData>
		return HAL_LCD_u8_WriteCharacter('0');
	}
	else if(Loc_s32_Num < 0)
	{
		Loc_s32_Num *= -1;
		Loc_u8_Retval |= HAL_LCD_u8_WriteCharacter('-');
    21e8:	cc 24       	eor	r12, r12
    21ea:	c3 94       	inc	r12
    21ec:	c8 2a       	or	r12, r24
    21ee:	a0 cf       	rjmp	.-192    	; 0x2130 <HAL_LCD_u8_WriteNumber+0x40>

000021f0 <HAL_LCD_u8_WriteString>:
 * INPUT Arg   : Pointer points to String or String
 * RETURN      : Execution Status (OK OR NOT_OK)
 * **********************************************************************
 **/
STD_TYPE HAL_LCD_u8_WriteString(s8 *Ploc_u8_str)
{
    21f0:	cf 93       	push	r28
    21f2:	df 93       	push	r29
    21f4:	ec 01       	movw	r28, r24
	u8 Loc_u8_Retval = E_NOT_OK;
	while(*Ploc_u8_str != '\0')
    21f6:	88 81       	ld	r24, Y
    21f8:	88 23       	and	r24, r24
    21fa:	59 f0       	breq	.+22     	; 0x2212 <HAL_LCD_u8_WriteString+0x22>
 * **********************************************************************
 **/
STD_TYPE HAL_LCD_u8_WriteCharacter(u8 Loc_u8_character)
{
	u8 Loc_u8_Retval = E_NOT_OK;
	Loc_u8_Retval = HAL_LCD_u8_SendData(Loc_u8_character);
    21fc:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <HAL_LCD_u8_SendData>
    2200:	98 2f       	mov	r25, r24
{
	u8 Loc_u8_Retval = E_NOT_OK;
	while(*Ploc_u8_str != '\0')
	{
		Loc_u8_Retval = HAL_LCD_u8_WriteCharacter(*Ploc_u8_str);
		Ploc_u8_str++;
    2202:	21 96       	adiw	r28, 0x01	; 1
 * **********************************************************************
 **/
STD_TYPE HAL_LCD_u8_WriteString(s8 *Ploc_u8_str)
{
	u8 Loc_u8_Retval = E_NOT_OK;
	while(*Ploc_u8_str != '\0')
    2204:	88 81       	ld	r24, Y
    2206:	88 23       	and	r24, r24
    2208:	c9 f7       	brne	.-14     	; 0x21fc <HAL_LCD_u8_WriteString+0xc>
	{
		Loc_u8_Retval = HAL_LCD_u8_WriteCharacter(*Ploc_u8_str);
		Ploc_u8_str++;
	}
	return Loc_u8_Retval;
}
    220a:	89 2f       	mov	r24, r25
    220c:	df 91       	pop	r29
    220e:	cf 91       	pop	r28
    2210:	08 95       	ret
 * **********************************************************************
 **/
STD_TYPE HAL_LCD_u8_WriteString(s8 *Ploc_u8_str)
{
	u8 Loc_u8_Retval = E_NOT_OK;
	while(*Ploc_u8_str != '\0')
    2212:	91 e0       	ldi	r25, 0x01	; 1
    2214:	fa cf       	rjmp	.-12     	; 0x220a <HAL_LCD_u8_WriteString+0x1a>

00002216 <HAL_LCD_u8_WriteCustomCharacter>:
 * INPUT Arg2   : Pointer Points to The array of Character Or name of the array of custom character
 * RETURN       : Execution Status (OK OR NOT_OK)
 * **********************************************************************
 **/
STD_TYPE HAL_LCD_u8_WriteCustomCharacter(u8 Loc_u8_Column,u8 *PLoc_u8_CustomCharacter)
{
    2216:	9f 92       	push	r9
    2218:	af 92       	push	r10
    221a:	bf 92       	push	r11
    221c:	cf 92       	push	r12
    221e:	df 92       	push	r13
    2220:	ef 92       	push	r14
    2222:	ff 92       	push	r15
    2224:	0f 93       	push	r16
    2226:	1f 93       	push	r17
    2228:	7b 01       	movw	r14, r22
	u8 Loc_u8_Retval = E_NOT_OK;
	u8 Loc_u8_Index = ZERO;
	Loc_u8_Retval = HAL_LCD_u8_SendCommand(0x40+Loc_u8_Column*8);
    222a:	88 0f       	add	r24, r24
    222c:	88 0f       	add	r24, r24
    222e:	88 0f       	add	r24, r24
    2230:	80 5c       	subi	r24, 0xC0	; 192
    2232:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <HAL_LCD_u8_SendCommand>
    2236:	98 2e       	mov	r9, r24
	for(Loc_u8_Index = 0; Loc_u8_Index<=7; Loc_u8_Index++)
	{
		Loc_u8_Retval |= HAL_LCD_u8_SendData(PLoc_u8_CustomCharacter[Loc_u8_Index]);
    2238:	f7 01       	movw	r30, r14
    223a:	80 81       	ld	r24, Z
    223c:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <HAL_LCD_u8_SendData>
    2240:	18 2f       	mov	r17, r24
    2242:	f7 01       	movw	r30, r14
    2244:	81 81       	ldd	r24, Z+1	; 0x01
    2246:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <HAL_LCD_u8_SendData>
    224a:	a8 2e       	mov	r10, r24
    224c:	f7 01       	movw	r30, r14
    224e:	82 81       	ldd	r24, Z+2	; 0x02
    2250:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <HAL_LCD_u8_SendData>
    2254:	b8 2e       	mov	r11, r24
    2256:	f7 01       	movw	r30, r14
    2258:	83 81       	ldd	r24, Z+3	; 0x03
    225a:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <HAL_LCD_u8_SendData>
    225e:	c8 2e       	mov	r12, r24
    2260:	f7 01       	movw	r30, r14
    2262:	84 81       	ldd	r24, Z+4	; 0x04
    2264:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <HAL_LCD_u8_SendData>
    2268:	d8 2e       	mov	r13, r24
    226a:	f7 01       	movw	r30, r14
    226c:	85 81       	ldd	r24, Z+5	; 0x05
    226e:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <HAL_LCD_u8_SendData>
    2272:	08 2f       	mov	r16, r24
    2274:	f7 01       	movw	r30, r14
    2276:	86 81       	ldd	r24, Z+6	; 0x06
    2278:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <HAL_LCD_u8_SendData>
    227c:	19 29       	or	r17, r9
    227e:	1a 29       	or	r17, r10
    2280:	1b 29       	or	r17, r11
    2282:	1c 29       	or	r17, r12
    2284:	1d 29       	or	r17, r13
    2286:	10 2b       	or	r17, r16
    2288:	18 2b       	or	r17, r24
    228a:	f7 01       	movw	r30, r14
    228c:	87 81       	ldd	r24, Z+7	; 0x07
    228e:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <HAL_LCD_u8_SendData>
	}
	return Loc_u8_Retval;
}
    2292:	81 2b       	or	r24, r17
    2294:	1f 91       	pop	r17
    2296:	0f 91       	pop	r16
    2298:	ff 90       	pop	r15
    229a:	ef 90       	pop	r14
    229c:	df 90       	pop	r13
    229e:	cf 90       	pop	r12
    22a0:	bf 90       	pop	r11
    22a2:	af 90       	pop	r10
    22a4:	9f 90       	pop	r9
    22a6:	08 95       	ret

000022a8 <HAL_LCD_u8_LcdInit>:
 * INPUT Arg   : No Args
 * RETURN      : Execution Status (OK OR NOT_OK)
 * **********************************************************************
 **/
STD_TYPE HAL_LCD_u8_LcdInit(void)
{
    22a8:	7f 92       	push	r7
    22aa:	8f 92       	push	r8
    22ac:	9f 92       	push	r9
    22ae:	af 92       	push	r10
    22b0:	bf 92       	push	r11
    22b2:	cf 92       	push	r12
    22b4:	df 92       	push	r13
    22b6:	ef 92       	push	r14
    22b8:	ff 92       	push	r15
    22ba:	0f 93       	push	r16
    22bc:	1f 93       	push	r17
STD_TYPE HAL_LCD_u8_LcdPinInit(u8 Loc_u8_LcdPortID, u8 Loc_u8_LcdPinID)
{
	u8 Loc_u8_Retval = E_NOT_OK;
	if(Loc_u8_LcdPortID <= PortD && Loc_u8_LcdPinID <= PIN7)
	{
		Loc_u8_Retval = MCAL_DIO_u8SetPinDirection(Loc_u8_LcdPortID, Loc_u8_LcdPinID, PIN_OUTPUT);
    22be:	83 e0       	ldi	r24, 0x03	; 3
    22c0:	66 e0       	ldi	r22, 0x06	; 6
    22c2:	41 e0       	ldi	r20, 0x01	; 1
    22c4:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <MCAL_DIO_u8SetPinDirection>
    22c8:	78 2e       	mov	r7, r24
    22ca:	81 e0       	ldi	r24, 0x01	; 1
    22cc:	61 e0       	ldi	r22, 0x01	; 1
    22ce:	41 e0       	ldi	r20, 0x01	; 1
    22d0:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <MCAL_DIO_u8SetPinDirection>
    22d4:	18 2f       	mov	r17, r24
    22d6:	83 e0       	ldi	r24, 0x03	; 3
    22d8:	67 e0       	ldi	r22, 0x07	; 7
    22da:	41 e0       	ldi	r20, 0x01	; 1
    22dc:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <MCAL_DIO_u8SetPinDirection>
    22e0:	88 2e       	mov	r8, r24
    22e2:	81 e0       	ldi	r24, 0x01	; 1
    22e4:	63 e0       	ldi	r22, 0x03	; 3
    22e6:	41 e0       	ldi	r20, 0x01	; 1
    22e8:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <MCAL_DIO_u8SetPinDirection>
    22ec:	98 2e       	mov	r9, r24
    22ee:	83 e0       	ldi	r24, 0x03	; 3
    22f0:	63 e0       	ldi	r22, 0x03	; 3
    22f2:	41 e0       	ldi	r20, 0x01	; 1
    22f4:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <MCAL_DIO_u8SetPinDirection>
    22f8:	a8 2e       	mov	r10, r24
    22fa:	83 e0       	ldi	r24, 0x03	; 3
    22fc:	64 e0       	ldi	r22, 0x04	; 4
    22fe:	41 e0       	ldi	r20, 0x01	; 1
    2300:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <MCAL_DIO_u8SetPinDirection>
    2304:	b8 2e       	mov	r11, r24
    2306:	83 e0       	ldi	r24, 0x03	; 3
    2308:	65 e0       	ldi	r22, 0x05	; 5
    230a:	41 e0       	ldi	r20, 0x01	; 1
    230c:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <MCAL_DIO_u8SetPinDirection>
    2310:	c8 2e       	mov	r12, r24
 * **********************************************************************
 **/
STD_TYPE HAL_u8_LCD_4BitModeInit(void)
{
	u8 Loc_u8_Retval = E_NOT_OK;
	Loc_u8_Retval  = HAL_LCD_u8_SendCommand(0x02);
    2312:	82 e0       	ldi	r24, 0x02	; 2
    2314:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <HAL_LCD_u8_SendCommand>
    2318:	d8 2e       	mov	r13, r24
	Loc_u8_Retval |= HAL_LCD_u8_SendCommand(0x28);
    231a:	88 e2       	ldi	r24, 0x28	; 40
    231c:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <HAL_LCD_u8_SendCommand>
    2320:	e8 2e       	mov	r14, r24
	Loc_u8_Retval |= HAL_LCD_u8_SendCommand(0x0F);
    2322:	8f e0       	ldi	r24, 0x0F	; 15
    2324:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <HAL_LCD_u8_SendCommand>
    2328:	f8 2e       	mov	r15, r24
	Loc_u8_Retval |= HAL_LCD_u8_SendCommand(0x01);
    232a:	81 e0       	ldi	r24, 0x01	; 1
    232c:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <HAL_LCD_u8_SendCommand>
    2330:	08 2f       	mov	r16, r24
	Loc_u8_Retval |= HAL_LCD_u8_SendCommand(0x06);
    2332:	86 e0       	ldi	r24, 0x06	; 6
    2334:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <HAL_LCD_u8_SendCommand>
STD_TYPE HAL_LCD_u8_LcdInit(void)
{
	u8 Loc_u8_Retval = E_NOT_OK;
#if ((LCD_CONTROL_PORT == NC) && (LCD_DATA_PORT == NC))
	Loc_u8_Retval  = HAL_LCD_u8_LcdPinInit(LCD_RS_PORT, LCD_RS_PIN);
	Loc_u8_Retval |= HAL_LCD_u8_LcdPinInit(LCD_RW_PORT, LCD_RW_PIN);
    2338:	17 29       	or	r17, r7
	Loc_u8_Retval |= HAL_LCD_u8_LcdPinInit(LCD_EN_PORT, LCD_EN_PIN);
    233a:	18 29       	or	r17, r8
	Loc_u8_Retval |= HAL_LCD_u8_LcdPinInit(LCD_D4_PORT, LCD_D4_PIN);
    233c:	19 29       	or	r17, r9
	Loc_u8_Retval |= HAL_LCD_u8_LcdPinInit(LCD_D5_PORT, LCD_D5_PIN);
    233e:	1a 29       	or	r17, r10
	Loc_u8_Retval |= HAL_LCD_u8_LcdPinInit(LCD_D6_PORT, LCD_D6_PIN);
    2340:	1b 29       	or	r17, r11
	u8 Loc_u8_Retval = E_NOT_OK;
	Loc_u8_Retval  = HAL_LCD_u8_SendCommand(0x02);
	Loc_u8_Retval |= HAL_LCD_u8_SendCommand(0x28);
	Loc_u8_Retval |= HAL_LCD_u8_SendCommand(0x0F);
	Loc_u8_Retval |= HAL_LCD_u8_SendCommand(0x01);
	Loc_u8_Retval |= HAL_LCD_u8_SendCommand(0x06);
    2342:	1c 29       	or	r17, r12
    2344:	1d 29       	or	r17, r13
{
	u8 Loc_u8_Retval = E_NOT_OK;
	Loc_u8_Retval  = HAL_LCD_u8_SendCommand(0x02);
	Loc_u8_Retval |= HAL_LCD_u8_SendCommand(0x28);
	Loc_u8_Retval |= HAL_LCD_u8_SendCommand(0x0F);
	Loc_u8_Retval |= HAL_LCD_u8_SendCommand(0x01);
    2346:	1e 29       	or	r17, r14
STD_TYPE HAL_u8_LCD_4BitModeInit(void)
{
	u8 Loc_u8_Retval = E_NOT_OK;
	Loc_u8_Retval  = HAL_LCD_u8_SendCommand(0x02);
	Loc_u8_Retval |= HAL_LCD_u8_SendCommand(0x28);
	Loc_u8_Retval |= HAL_LCD_u8_SendCommand(0x0F);
    2348:	1f 29       	or	r17, r15
    234a:	10 2b       	or	r17, r16
	Loc_u8_Retval |= HAL_u8_LCD_4BitModeInit();
#else
	#error ("Error Configurations")
#endif
	return Loc_u8_Retval;
}
    234c:	81 2b       	or	r24, r17
    234e:	1f 91       	pop	r17
    2350:	0f 91       	pop	r16
    2352:	ff 90       	pop	r15
    2354:	ef 90       	pop	r14
    2356:	df 90       	pop	r13
    2358:	cf 90       	pop	r12
    235a:	bf 90       	pop	r11
    235c:	af 90       	pop	r10
    235e:	9f 90       	pop	r9
    2360:	8f 90       	pop	r8
    2362:	7f 90       	pop	r7
    2364:	08 95       	ret

00002366 <HAL_LCD_u8_GoTo>:
 * INPUT Arg2   : Column (0:1:15)
 * RETURN       : Execution Status (OK OR NOT_OK)
 * **********************************************************************
 **/
STD_TYPE HAL_LCD_u8_GoTo(u8 Loc_u8_Row, u8 Loc_u8_Column)
{
    2366:	cf 93       	push	r28
    2368:	df 93       	push	r29
	u8 Loc_u8_Retval = E_NOT_OK;
	if(Loc_u8_Row == 0 && Loc_u8_Column < 20)
    236a:	88 23       	and	r24, r24
    236c:	c1 f4       	brne	.+48     	; 0x239e <HAL_LCD_u8_GoTo+0x38>
    236e:	64 31       	cpi	r22, 0x14	; 20
    2370:	40 f1       	brcs	.+80     	; 0x23c2 <HAL_LCD_u8_GoTo+0x5c>
 * **********************************************************************
 **/
STD_TYPE HAL_LCD_u8_ClearFullScreen(void)
{
	u8 Loc_u8_Retval = E_NOT_OK;
	Loc_u8_Retval = HAL_LCD_u8_SendCommand(0x01);
    2372:	81 e0       	ldi	r24, 0x01	; 1
    2374:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <HAL_LCD_u8_SendCommand>
STD_TYPE HAL_LCD_u8_GoTo(u8 Loc_u8_Row, u8 Loc_u8_Column)
{
	u8 Loc_u8_Retval = E_NOT_OK;
	if(Loc_u8_Row == 0 && Loc_u8_Column < 20)
	{
		Loc_u8_Retval = HAL_LCD_u8_SendCommand(0x80 + Loc_u8_Column);
    2378:	85 e8       	ldi	r24, 0x85	; 133
    237a:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <HAL_LCD_u8_SendCommand>
	}
	else
	{
		Loc_u8_Retval = HAL_LCD_u8_ClearFullScreen();
		Loc_u8_Retval = HAL_LCD_u8_GoTo(0,5);
		Loc_u8_Retval = HAL_LCD_u8_WriteString("Error !!");
    237e:	c0 e6       	ldi	r28, 0x60	; 96
    2380:	d0 e0       	ldi	r29, 0x00	; 0
 * **********************************************************************
 **/
STD_TYPE HAL_LCD_u8_WriteString(s8 *Ploc_u8_str)
{
	u8 Loc_u8_Retval = E_NOT_OK;
	while(*Ploc_u8_str != '\0')
    2382:	80 91 60 00 	lds	r24, 0x0060
    2386:	88 23       	and	r24, r24
    2388:	31 f0       	breq	.+12     	; 0x2396 <HAL_LCD_u8_GoTo+0x30>
 * **********************************************************************
 **/
STD_TYPE HAL_LCD_u8_WriteCharacter(u8 Loc_u8_character)
{
	u8 Loc_u8_Retval = E_NOT_OK;
	Loc_u8_Retval = HAL_LCD_u8_SendData(Loc_u8_character);
    238a:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <HAL_LCD_u8_SendData>
{
	u8 Loc_u8_Retval = E_NOT_OK;
	while(*Ploc_u8_str != '\0')
	{
		Loc_u8_Retval = HAL_LCD_u8_WriteCharacter(*Ploc_u8_str);
		Ploc_u8_str++;
    238e:	21 96       	adiw	r28, 0x01	; 1
 * **********************************************************************
 **/
STD_TYPE HAL_LCD_u8_WriteString(s8 *Ploc_u8_str)
{
	u8 Loc_u8_Retval = E_NOT_OK;
	while(*Ploc_u8_str != '\0')
    2390:	88 81       	ld	r24, Y
    2392:	88 23       	and	r24, r24
    2394:	d1 f7       	brne	.-12     	; 0x238a <HAL_LCD_u8_GoTo+0x24>
    2396:	81 e0       	ldi	r24, 0x01	; 1
		Loc_u8_Retval = HAL_LCD_u8_GoTo(0,5);
		Loc_u8_Retval = HAL_LCD_u8_WriteString("Error !!");
		Loc_u8_Retval = E_NOT_OK;
	}
	return Loc_u8_Retval;
}
    2398:	df 91       	pop	r29
    239a:	cf 91       	pop	r28
    239c:	08 95       	ret
	u8 Loc_u8_Retval = E_NOT_OK;
	if(Loc_u8_Row == 0 && Loc_u8_Column < 20)
	{
		Loc_u8_Retval = HAL_LCD_u8_SendCommand(0x80 + Loc_u8_Column);
	}
	else if(Loc_u8_Row == 1 && Loc_u8_Column < 20)
    239e:	81 30       	cpi	r24, 0x01	; 1
    23a0:	39 f4       	brne	.+14     	; 0x23b0 <HAL_LCD_u8_GoTo+0x4a>
    23a2:	64 31       	cpi	r22, 0x14	; 20
    23a4:	30 f7       	brcc	.-52     	; 0x2372 <HAL_LCD_u8_GoTo+0xc>
	{
		Loc_u8_Retval = HAL_LCD_u8_SendCommand(0x80 + 0x40 + Loc_u8_Column);
    23a6:	86 2f       	mov	r24, r22
    23a8:	80 54       	subi	r24, 0x40	; 64
    23aa:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <HAL_LCD_u8_SendCommand>
    23ae:	f4 cf       	rjmp	.-24     	; 0x2398 <HAL_LCD_u8_GoTo+0x32>
	}
	else if(Loc_u8_Row == 2 && Loc_u8_Column < 20)
    23b0:	82 30       	cpi	r24, 0x02	; 2
    23b2:	71 f4       	brne	.+28     	; 0x23d0 <HAL_LCD_u8_GoTo+0x6a>
    23b4:	64 31       	cpi	r22, 0x14	; 20
    23b6:	e8 f6       	brcc	.-70     	; 0x2372 <HAL_LCD_u8_GoTo+0xc>
	{
		Loc_u8_Retval = HAL_LCD_u8_SendCommand(0x80 + 0x14 + Loc_u8_Column);
    23b8:	86 2f       	mov	r24, r22
    23ba:	8c 56       	subi	r24, 0x6C	; 108
    23bc:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <HAL_LCD_u8_SendCommand>
    23c0:	eb cf       	rjmp	.-42     	; 0x2398 <HAL_LCD_u8_GoTo+0x32>
STD_TYPE HAL_LCD_u8_GoTo(u8 Loc_u8_Row, u8 Loc_u8_Column)
{
	u8 Loc_u8_Retval = E_NOT_OK;
	if(Loc_u8_Row == 0 && Loc_u8_Column < 20)
	{
		Loc_u8_Retval = HAL_LCD_u8_SendCommand(0x80 + Loc_u8_Column);
    23c2:	86 2f       	mov	r24, r22
    23c4:	80 58       	subi	r24, 0x80	; 128
    23c6:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <HAL_LCD_u8_SendCommand>
		Loc_u8_Retval = HAL_LCD_u8_GoTo(0,5);
		Loc_u8_Retval = HAL_LCD_u8_WriteString("Error !!");
		Loc_u8_Retval = E_NOT_OK;
	}
	return Loc_u8_Retval;
}
    23ca:	df 91       	pop	r29
    23cc:	cf 91       	pop	r28
    23ce:	08 95       	ret
	}
	else if(Loc_u8_Row == 2 && Loc_u8_Column < 20)
	{
		Loc_u8_Retval = HAL_LCD_u8_SendCommand(0x80 + 0x14 + Loc_u8_Column);
	}
	else if(Loc_u8_Row == 3 && Loc_u8_Column < 20)
    23d0:	83 30       	cpi	r24, 0x03	; 3
    23d2:	79 f6       	brne	.-98     	; 0x2372 <HAL_LCD_u8_GoTo+0xc>
    23d4:	64 31       	cpi	r22, 0x14	; 20
    23d6:	68 f6       	brcc	.-102    	; 0x2372 <HAL_LCD_u8_GoTo+0xc>
	{
		Loc_u8_Retval = HAL_LCD_u8_SendCommand(0x80 + 0x40 + 0x14 + Loc_u8_Column);
    23d8:	86 2f       	mov	r24, r22
    23da:	8c 52       	subi	r24, 0x2C	; 44
    23dc:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <HAL_LCD_u8_SendCommand>
		Loc_u8_Retval = HAL_LCD_u8_GoTo(0,5);
		Loc_u8_Retval = HAL_LCD_u8_WriteString("Error !!");
		Loc_u8_Retval = E_NOT_OK;
	}
	return Loc_u8_Retval;
}
    23e0:	df 91       	pop	r29
    23e2:	cf 91       	pop	r28
    23e4:	08 95       	ret

000023e6 <HAL_LCD_u8_ClearCharacter>:
 * INPUT Arg2   : Column (0:1:15)
 * RETURN       : Execution Status (OK OR NOT_OK)
 * **********************************************************************
 **/
STD_TYPE HAL_LCD_u8_ClearCharacter(u8 Loc_u8_Row, u8 Loc_u8_Column)
{
    23e6:	1f 93       	push	r17
    23e8:	cf 93       	push	r28
    23ea:	df 93       	push	r29
 * **********************************************************************
 **/
STD_TYPE HAL_LCD_u8_GoTo(u8 Loc_u8_Row, u8 Loc_u8_Column)
{
	u8 Loc_u8_Retval = E_NOT_OK;
	if(Loc_u8_Row == 0 && Loc_u8_Column < 20)
    23ec:	88 23       	and	r24, r24
    23ee:	f1 f4       	brne	.+60     	; 0x242c <HAL_LCD_u8_ClearCharacter+0x46>
    23f0:	64 31       	cpi	r22, 0x14	; 20
    23f2:	80 f1       	brcs	.+96     	; 0x2454 <HAL_LCD_u8_ClearCharacter+0x6e>
 * **********************************************************************
 **/
STD_TYPE HAL_LCD_u8_ClearFullScreen(void)
{
	u8 Loc_u8_Retval = E_NOT_OK;
	Loc_u8_Retval = HAL_LCD_u8_SendCommand(0x01);
    23f4:	81 e0       	ldi	r24, 0x01	; 1
    23f6:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <HAL_LCD_u8_SendCommand>
		Loc_u8_Retval = HAL_LCD_u8_SendCommand(0x80 + 0x40 + 0x14 + Loc_u8_Column);
	}
	else
	{
		Loc_u8_Retval = HAL_LCD_u8_ClearFullScreen();
		Loc_u8_Retval = HAL_LCD_u8_GoTo(0,5);
    23fa:	80 e0       	ldi	r24, 0x00	; 0
    23fc:	65 e0       	ldi	r22, 0x05	; 5
    23fe:	0e 94 b3 11 	call	0x2366	; 0x2366 <HAL_LCD_u8_GoTo>
		Loc_u8_Retval = HAL_LCD_u8_WriteString("Error !!");
    2402:	c0 e6       	ldi	r28, 0x60	; 96
    2404:	d0 e0       	ldi	r29, 0x00	; 0
 * **********************************************************************
 **/
STD_TYPE HAL_LCD_u8_WriteString(s8 *Ploc_u8_str)
{
	u8 Loc_u8_Retval = E_NOT_OK;
	while(*Ploc_u8_str != '\0')
    2406:	80 91 60 00 	lds	r24, 0x0060
    240a:	88 23       	and	r24, r24
    240c:	31 f0       	breq	.+12     	; 0x241a <HAL_LCD_u8_ClearCharacter+0x34>
 * **********************************************************************
 **/
STD_TYPE HAL_LCD_u8_WriteCharacter(u8 Loc_u8_character)
{
	u8 Loc_u8_Retval = E_NOT_OK;
	Loc_u8_Retval = HAL_LCD_u8_SendData(Loc_u8_character);
    240e:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <HAL_LCD_u8_SendData>
{
	u8 Loc_u8_Retval = E_NOT_OK;
	while(*Ploc_u8_str != '\0')
	{
		Loc_u8_Retval = HAL_LCD_u8_WriteCharacter(*Ploc_u8_str);
		Ploc_u8_str++;
    2412:	21 96       	adiw	r28, 0x01	; 1
 * **********************************************************************
 **/
STD_TYPE HAL_LCD_u8_WriteString(s8 *Ploc_u8_str)
{
	u8 Loc_u8_Retval = E_NOT_OK;
	while(*Ploc_u8_str != '\0')
    2414:	88 81       	ld	r24, Y
    2416:	88 23       	and	r24, r24
    2418:	d1 f7       	brne	.-12     	; 0x240e <HAL_LCD_u8_ClearCharacter+0x28>
    241a:	11 e0       	ldi	r17, 0x01	; 1
 * **********************************************************************
 **/
STD_TYPE HAL_LCD_u8_WriteCharacter(u8 Loc_u8_character)
{
	u8 Loc_u8_Retval = E_NOT_OK;
	Loc_u8_Retval = HAL_LCD_u8_SendData(Loc_u8_character);
    241c:	80 e2       	ldi	r24, 0x20	; 32
    241e:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <HAL_LCD_u8_SendData>
{
	u8 Loc_u8_Retval = E_NOT_OK;
	Loc_u8_Retval  = HAL_LCD_u8_GoTo(Loc_u8_Row,Loc_u8_Column);
	Loc_u8_Retval |= HAL_LCD_u8_WriteCharacter(' ');
	return Loc_u8_Retval;
}
    2422:	81 2b       	or	r24, r17
    2424:	df 91       	pop	r29
    2426:	cf 91       	pop	r28
    2428:	1f 91       	pop	r17
    242a:	08 95       	ret
	u8 Loc_u8_Retval = E_NOT_OK;
	if(Loc_u8_Row == 0 && Loc_u8_Column < 20)
	{
		Loc_u8_Retval = HAL_LCD_u8_SendCommand(0x80 + Loc_u8_Column);
	}
	else if(Loc_u8_Row == 1 && Loc_u8_Column < 20)
    242c:	81 30       	cpi	r24, 0x01	; 1
    242e:	41 f4       	brne	.+16     	; 0x2440 <HAL_LCD_u8_ClearCharacter+0x5a>
    2430:	64 31       	cpi	r22, 0x14	; 20
    2432:	00 f7       	brcc	.-64     	; 0x23f4 <HAL_LCD_u8_ClearCharacter+0xe>
	{
		Loc_u8_Retval = HAL_LCD_u8_SendCommand(0x80 + 0x40 + Loc_u8_Column);
    2434:	86 2f       	mov	r24, r22
    2436:	80 54       	subi	r24, 0x40	; 64
    2438:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <HAL_LCD_u8_SendCommand>
    243c:	18 2f       	mov	r17, r24
    243e:	ee cf       	rjmp	.-36     	; 0x241c <HAL_LCD_u8_ClearCharacter+0x36>
	}
	else if(Loc_u8_Row == 2 && Loc_u8_Column < 20)
    2440:	82 30       	cpi	r24, 0x02	; 2
    2442:	a9 f4       	brne	.+42     	; 0x246e <HAL_LCD_u8_ClearCharacter+0x88>
    2444:	64 31       	cpi	r22, 0x14	; 20
    2446:	b0 f6       	brcc	.-84     	; 0x23f4 <HAL_LCD_u8_ClearCharacter+0xe>
	{
		Loc_u8_Retval = HAL_LCD_u8_SendCommand(0x80 + 0x14 + Loc_u8_Column);
    2448:	86 2f       	mov	r24, r22
    244a:	8c 56       	subi	r24, 0x6C	; 108
    244c:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <HAL_LCD_u8_SendCommand>
    2450:	18 2f       	mov	r17, r24
    2452:	e4 cf       	rjmp	.-56     	; 0x241c <HAL_LCD_u8_ClearCharacter+0x36>
STD_TYPE HAL_LCD_u8_GoTo(u8 Loc_u8_Row, u8 Loc_u8_Column)
{
	u8 Loc_u8_Retval = E_NOT_OK;
	if(Loc_u8_Row == 0 && Loc_u8_Column < 20)
	{
		Loc_u8_Retval = HAL_LCD_u8_SendCommand(0x80 + Loc_u8_Column);
    2454:	86 2f       	mov	r24, r22
    2456:	80 58       	subi	r24, 0x80	; 128
    2458:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <HAL_LCD_u8_SendCommand>
    245c:	18 2f       	mov	r17, r24
 * **********************************************************************
 **/
STD_TYPE HAL_LCD_u8_WriteCharacter(u8 Loc_u8_character)
{
	u8 Loc_u8_Retval = E_NOT_OK;
	Loc_u8_Retval = HAL_LCD_u8_SendData(Loc_u8_character);
    245e:	80 e2       	ldi	r24, 0x20	; 32
    2460:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <HAL_LCD_u8_SendData>
{
	u8 Loc_u8_Retval = E_NOT_OK;
	Loc_u8_Retval  = HAL_LCD_u8_GoTo(Loc_u8_Row,Loc_u8_Column);
	Loc_u8_Retval |= HAL_LCD_u8_WriteCharacter(' ');
	return Loc_u8_Retval;
}
    2464:	81 2b       	or	r24, r17
    2466:	df 91       	pop	r29
    2468:	cf 91       	pop	r28
    246a:	1f 91       	pop	r17
    246c:	08 95       	ret
	}
	else if(Loc_u8_Row == 2 && Loc_u8_Column < 20)
	{
		Loc_u8_Retval = HAL_LCD_u8_SendCommand(0x80 + 0x14 + Loc_u8_Column);
	}
	else if(Loc_u8_Row == 3 && Loc_u8_Column < 20)
    246e:	83 30       	cpi	r24, 0x03	; 3
    2470:	09 f6       	brne	.-126    	; 0x23f4 <HAL_LCD_u8_ClearCharacter+0xe>
    2472:	64 31       	cpi	r22, 0x14	; 20
    2474:	08 f0       	brcs	.+2      	; 0x2478 <HAL_LCD_u8_ClearCharacter+0x92>
    2476:	be cf       	rjmp	.-132    	; 0x23f4 <HAL_LCD_u8_ClearCharacter+0xe>
	{
		Loc_u8_Retval = HAL_LCD_u8_SendCommand(0x80 + 0x40 + 0x14 + Loc_u8_Column);
    2478:	86 2f       	mov	r24, r22
    247a:	8c 52       	subi	r24, 0x2C	; 44
    247c:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <HAL_LCD_u8_SendCommand>
    2480:	18 2f       	mov	r17, r24
 * **********************************************************************
 **/
STD_TYPE HAL_LCD_u8_WriteCharacter(u8 Loc_u8_character)
{
	u8 Loc_u8_Retval = E_NOT_OK;
	Loc_u8_Retval = HAL_LCD_u8_SendData(Loc_u8_character);
    2482:	80 e2       	ldi	r24, 0x20	; 32
    2484:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <HAL_LCD_u8_SendData>
{
	u8 Loc_u8_Retval = E_NOT_OK;
	Loc_u8_Retval  = HAL_LCD_u8_GoTo(Loc_u8_Row,Loc_u8_Column);
	Loc_u8_Retval |= HAL_LCD_u8_WriteCharacter(' ');
	return Loc_u8_Retval;
}
    2488:	81 2b       	or	r24, r17
    248a:	df 91       	pop	r29
    248c:	cf 91       	pop	r28
    248e:	1f 91       	pop	r17
    2490:	08 95       	ret

00002492 <HAL_KEYPAD_u8_HomeKaypadButton>:
	return Loc_u8_Retval;
}

u8 G_RunningDevicesIndicator;
STD_TYPE HAL_KEYPAD_u8_HomeKaypadButton(u8 *Ploc_u8_ButtuonValue)
{
    2492:	2f 92       	push	r2
    2494:	3f 92       	push	r3
    2496:	4f 92       	push	r4
    2498:	5f 92       	push	r5
    249a:	6f 92       	push	r6
    249c:	7f 92       	push	r7
    249e:	8f 92       	push	r8
    24a0:	9f 92       	push	r9
    24a2:	af 92       	push	r10
    24a4:	bf 92       	push	r11
    24a6:	cf 92       	push	r12
    24a8:	df 92       	push	r13
    24aa:	ef 92       	push	r14
    24ac:	ff 92       	push	r15
    24ae:	0f 93       	push	r16
    24b0:	1f 93       	push	r17
    24b2:	df 93       	push	r29
    24b4:	cf 93       	push	r28
    24b6:	cd b7       	in	r28, 0x3d	; 61
    24b8:	de b7       	in	r29, 0x3e	; 62
    24ba:	a3 97       	sbiw	r28, 0x23	; 35
    24bc:	0f b6       	in	r0, 0x3f	; 63
    24be:	f8 94       	cli
    24c0:	de bf       	out	0x3e, r29	; 62
    24c2:	0f be       	out	0x3f, r0	; 63
    24c4:	cd bf       	out	0x3d, r28	; 61
    24c6:	9b a3       	std	Y+35, r25	; 0x23
    24c8:	8a a3       	std	Y+34, r24	; 0x22
	u8 Loc_u8_Retval = E_NOT_OK;
	u8 ch[4][4] = {{7,8,9,'/'},
				   {4,5,6,'*'},
	               {1,2,3,'-'},
				   {'N',0,'=','+'}};
    24ca:	de 01       	movw	r26, r28
    24cc:	52 96       	adiw	r26, 0x12	; 18
    24ce:	e3 e1       	ldi	r30, 0x13	; 19
    24d0:	f3 e0       	ldi	r31, 0x03	; 3
    24d2:	80 e1       	ldi	r24, 0x10	; 16
    24d4:	01 90       	ld	r0, Z+
    24d6:	0d 92       	st	X+, r0
    24d8:	81 50       	subi	r24, 0x01	; 1
    24da:	e1 f7       	brne	.-8      	; 0x24d4 <HAL_KEYPAD_u8_HomeKaypadButton+0x42>
	u8 ROWS_PORT[4]   = {KEYPAD_R3_PORT, KEYPAD_R2_PORT, KEYPAD_R1_PORT, KEYPAD_R0_PORT};
    24dc:	92 e0       	ldi	r25, 0x02	; 2
    24de:	9a 83       	std	Y+2, r25	; 0x02
    24e0:	1b 82       	std	Y+3, r1	; 0x03
    24e2:	1c 82       	std	Y+4, r1	; 0x04
    24e4:	9d 83       	std	Y+5, r25	; 0x05
	u8 COLUMS_PORT[4] = {KEYPAD_C3_PORT, KEYPAD_C2_PORT, KEYPAD_C1_PORT, KEYPAD_C0_PORT};
    24e6:	83 e0       	ldi	r24, 0x03	; 3
    24e8:	8e 83       	std	Y+6, r24	; 0x06
    24ea:	8f 83       	std	Y+7, r24	; 0x07
    24ec:	98 87       	std	Y+8, r25	; 0x08
    24ee:	99 87       	std	Y+9, r25	; 0x09
	u8 ROWS_PIN[4]    = {KEYPAD_R3_PIN, KEYPAD_R2_PIN, KEYPAD_R1_PIN, KEYPAD_R0_PIN};
    24f0:	9a 87       	std	Y+10, r25	; 0x0a
    24f2:	9b 87       	std	Y+11, r25	; 0x0b
    24f4:	91 e0       	ldi	r25, 0x01	; 1
    24f6:	9c 87       	std	Y+12, r25	; 0x0c
    24f8:	87 e0       	ldi	r24, 0x07	; 7
    24fa:	8d 87       	std	Y+13, r24	; 0x0d
	u8 COLUMS_PIN[4]  = {KEYPAD_C3_PIN, KEYPAD_C2_PIN, KEYPAD_C1_PIN, KEYPAD_C0_PIN};
    24fc:	9e 87       	std	Y+14, r25	; 0x0e
    24fe:	1f 86       	std	Y+15, r1	; 0x0f
    2500:	86 e0       	ldi	r24, 0x06	; 6
    2502:	88 8b       	std	Y+16, r24	; 0x10
    2504:	85 e0       	ldi	r24, 0x05	; 5
    2506:	89 8b       	std	Y+17, r24	; 0x11
	u8 column = 0;
	u8 r = 0;
	u8 c = 0;
	u8 flag = 0;
	u8 value = 0;
	if(Ploc_u8_ButtuonValue != NULL)
    2508:	8a a1       	ldd	r24, Y+34	; 0x22
    250a:	9b a1       	ldd	r25, Y+35	; 0x23
    250c:	89 2b       	or	r24, r25
    250e:	09 f4       	brne	.+2      	; 0x2512 <HAL_KEYPAD_u8_HomeKaypadButton+0x80>
    2510:	2a c1       	rjmp	.+596    	; 0x2766 <HAL_KEYPAD_u8_HomeKaypadButton+0x2d4>
	u8 row = 0;
	u8 column = 0;
	u8 r = 0;
	u8 c = 0;
	u8 flag = 0;
	u8 value = 0;
    2512:	19 82       	std	Y+1, r1	; 0x01
    2514:	77 24       	eor	r7, r7
    2516:	73 94       	inc	r7
    2518:	e6 e0       	ldi	r30, 0x06	; 6
    251a:	2e 2e       	mov	r2, r30
    251c:	31 2c       	mov	r3, r1
    251e:	2c 0e       	add	r2, r28
    2520:	3d 1e       	adc	r3, r29
    2522:	7e e0       	ldi	r23, 0x0E	; 14
    2524:	47 2e       	mov	r4, r23
    2526:	51 2c       	mov	r5, r1
    2528:	4c 0e       	add	r4, r28
    252a:	5d 1e       	adc	r5, r29
    252c:	5e 01       	movw	r10, r28
    252e:	08 94       	sec
    2530:	a1 1c       	adc	r10, r1
    2532:	b1 1c       	adc	r11, r1
					MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_HIGH);
					MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_LOW);
				}
				else if((G_LM35 < TURN_DC_OFF_TEMP) && (G_FanFlagOff == 0))
				{
					G_FanFlagOff = 1;
    2534:	66 24       	eor	r6, r6
    2536:	63 94       	inc	r6
	u8 value = 0;
	if(Ploc_u8_ButtuonValue != NULL)
	{
		while(1)
		{
			G_LM35 = LM35_Read();
    2538:	0e 94 56 0e 	call	0x1cac	; 0x1cac <LM35_Read>
    253c:	80 93 64 03 	sts	0x0364, r24
			if(G_FanControlFlag == 0)
    2540:	80 91 5d 03 	lds	r24, 0x035D
    2544:	88 23       	and	r24, r24
    2546:	f1 f4       	brne	.+60     	; 0x2584 <HAL_KEYPAD_u8_HomeKaypadButton+0xf2>
			{
				if((G_LM35 > TURN_DC_ON_TEMP) && (G_FanFlagOn == 0))
    2548:	80 91 64 03 	lds	r24, 0x0364
    254c:	8d 31       	cpi	r24, 0x1D	; 29
    254e:	28 f0       	brcs	.+10     	; 0x255a <HAL_KEYPAD_u8_HomeKaypadButton+0xc8>
    2550:	80 91 66 03 	lds	r24, 0x0366
    2554:	88 23       	and	r24, r24
    2556:	09 f4       	brne	.+2      	; 0x255a <HAL_KEYPAD_u8_HomeKaypadButton+0xc8>
    2558:	ad c0       	rjmp	.+346    	; 0x26b4 <HAL_KEYPAD_u8_HomeKaypadButton+0x222>
					MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_LOW);
					G_RecieveValue = MCAL_SPI_MASTER_u8_SpiMaster_Transceive('N');
					MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_HIGH);
					MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_LOW);
				}
				else if((G_LM35 < TURN_DC_OFF_TEMP) && (G_FanFlagOff == 0))
    255a:	80 91 64 03 	lds	r24, 0x0364
    255e:	85 31       	cpi	r24, 0x15	; 21
    2560:	28 f4       	brcc	.+10     	; 0x256c <HAL_KEYPAD_u8_HomeKaypadButton+0xda>
    2562:	80 91 5b 03 	lds	r24, 0x035B
    2566:	88 23       	and	r24, r24
    2568:	09 f4       	brne	.+2      	; 0x256c <HAL_KEYPAD_u8_HomeKaypadButton+0xda>
    256a:	d8 c0       	rjmp	.+432    	; 0x271c <HAL_KEYPAD_u8_HomeKaypadButton+0x28a>
					MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_LOW);
					G_RecieveValue = MCAL_SPI_MASTER_u8_SpiMaster_Transceive('F');
					MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_HIGH);
					MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_LOW);
				}
				else if((G_LM35 > TURN_DC_OFF_TEMP) && (G_LM35 < TURN_DC_ON_TEMP))
    256c:	80 91 64 03 	lds	r24, 0x0364
    2570:	86 31       	cpi	r24, 0x16	; 22
    2572:	40 f0       	brcs	.+16     	; 0x2584 <HAL_KEYPAD_u8_HomeKaypadButton+0xf2>
    2574:	80 91 64 03 	lds	r24, 0x0364
    2578:	8c 31       	cpi	r24, 0x1C	; 28
    257a:	20 f4       	brcc	.+8      	; 0x2584 <HAL_KEYPAD_u8_HomeKaypadButton+0xf2>
				{
					G_FanFlagOn = 0;
    257c:	10 92 66 03 	sts	0x0366, r1
					G_FanFlagOff = 0;
    2580:	10 92 5b 03 	sts	0x035B, r1
				}
			}
			if(G_RunningDevicesIndicator == 1)
    2584:	80 91 59 03 	lds	r24, 0x0359
    2588:	81 30       	cpi	r24, 0x01	; 1
    258a:	09 f4       	brne	.+2      	; 0x258e <HAL_KEYPAD_u8_HomeKaypadButton+0xfc>
    258c:	4f c0       	rjmp	.+158    	; 0x262c <HAL_KEYPAD_u8_HomeKaypadButton+0x19a>
			{
				APP_DEVICES_void_AppGetAnyDeviceOn();
				G_RunningDevicesIndicator = 0;
    258e:	63 e0       	ldi	r22, 0x03	; 3
    2590:	e6 2e       	mov	r14, r22
    2592:	cc 24       	eor	r12, r12
    2594:	dd 24       	eor	r13, r13
			}
			c = 3;
			for(column =0; column <= 3; column++)
			{
				r = 4;
				Loc_u8_Retval |= MCAL_DIO_u8SetPinValue(COLUMS_PORT[column],COLUMS_PIN[column],PIN_LOW);
    2596:	f1 01       	movw	r30, r2
    2598:	ec 0d       	add	r30, r12
    259a:	fd 1d       	adc	r31, r13
    259c:	80 80       	ld	r8, Z
    259e:	f2 01       	movw	r30, r4
    25a0:	ec 0d       	add	r30, r12
    25a2:	fd 1d       	adc	r31, r13
    25a4:	90 80       	ld	r9, Z
    25a6:	88 2d       	mov	r24, r8
    25a8:	69 2d       	mov	r22, r9
    25aa:	40 e0       	ldi	r20, 0x00	; 0
    25ac:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
    25b0:	18 2f       	mov	r17, r24
				for(row = 4; row <= 7; row++)
				{
					r--;
					Loc_u8_Retval |= MCAL_DIO_u8GetPinValue(ROWS_PORT[row-4],ROWS_PIN[row-4],&value);
    25b2:	fa 80       	ldd	r15, Y+2	; 0x02
    25b4:	0a 85       	ldd	r16, Y+10	; 0x0a
    25b6:	8f 2d       	mov	r24, r15
    25b8:	60 2f       	mov	r22, r16
    25ba:	a5 01       	movw	r20, r10
    25bc:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <MCAL_DIO_u8GetPinValue>
			}
			c = 3;
			for(column =0; column <= 3; column++)
			{
				r = 4;
				Loc_u8_Retval |= MCAL_DIO_u8SetPinValue(COLUMS_PORT[column],COLUMS_PIN[column],PIN_LOW);
    25c0:	18 2b       	or	r17, r24
				for(row = 4; row <= 7; row++)
				{
					r--;
					Loc_u8_Retval |= MCAL_DIO_u8GetPinValue(ROWS_PORT[row-4],ROWS_PIN[row-4],&value);
    25c2:	17 29       	or	r17, r7
					if(value == PIN_LOW)
    25c4:	89 81       	ldd	r24, Y+1	; 0x01
    25c6:	88 23       	and	r24, r24
    25c8:	b1 f1       	breq	.+108    	; 0x2636 <HAL_KEYPAD_u8_HomeKaypadButton+0x1a4>
				r = 4;
				Loc_u8_Retval |= MCAL_DIO_u8SetPinValue(COLUMS_PORT[column],COLUMS_PIN[column],PIN_LOW);
				for(row = 4; row <= 7; row++)
				{
					r--;
					Loc_u8_Retval |= MCAL_DIO_u8GetPinValue(ROWS_PORT[row-4],ROWS_PIN[row-4],&value);
    25ca:	fb 80       	ldd	r15, Y+3	; 0x03
    25cc:	0b 85       	ldd	r16, Y+11	; 0x0b
    25ce:	8f 2d       	mov	r24, r15
    25d0:	60 2f       	mov	r22, r16
    25d2:	a5 01       	movw	r20, r10
    25d4:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <MCAL_DIO_u8GetPinValue>
    25d8:	18 2b       	or	r17, r24
					if(value == PIN_LOW)
    25da:	89 81       	ldd	r24, Y+1	; 0x01
    25dc:	88 23       	and	r24, r24
    25de:	09 f4       	brne	.+2      	; 0x25e2 <HAL_KEYPAD_u8_HomeKaypadButton+0x150>
    25e0:	5e c0       	rjmp	.+188    	; 0x269e <HAL_KEYPAD_u8_HomeKaypadButton+0x20c>
				r = 4;
				Loc_u8_Retval |= MCAL_DIO_u8SetPinValue(COLUMS_PORT[column],COLUMS_PIN[column],PIN_LOW);
				for(row = 4; row <= 7; row++)
				{
					r--;
					Loc_u8_Retval |= MCAL_DIO_u8GetPinValue(ROWS_PORT[row-4],ROWS_PIN[row-4],&value);
    25e2:	fc 80       	ldd	r15, Y+4	; 0x04
    25e4:	0c 85       	ldd	r16, Y+12	; 0x0c
    25e6:	8f 2d       	mov	r24, r15
    25e8:	60 2f       	mov	r22, r16
    25ea:	a5 01       	movw	r20, r10
    25ec:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <MCAL_DIO_u8GetPinValue>
    25f0:	18 2b       	or	r17, r24
					if(value == PIN_LOW)
    25f2:	89 81       	ldd	r24, Y+1	; 0x01
    25f4:	88 23       	and	r24, r24
    25f6:	09 f4       	brne	.+2      	; 0x25fa <HAL_KEYPAD_u8_HomeKaypadButton+0x168>
    25f8:	55 c0       	rjmp	.+170    	; 0x26a4 <HAL_KEYPAD_u8_HomeKaypadButton+0x212>
				r = 4;
				Loc_u8_Retval |= MCAL_DIO_u8SetPinValue(COLUMS_PORT[column],COLUMS_PIN[column],PIN_LOW);
				for(row = 4; row <= 7; row++)
				{
					r--;
					Loc_u8_Retval |= MCAL_DIO_u8GetPinValue(ROWS_PORT[row-4],ROWS_PIN[row-4],&value);
    25fa:	82 e0       	ldi	r24, 0x02	; 2
    25fc:	67 e0       	ldi	r22, 0x07	; 7
    25fe:	a5 01       	movw	r20, r10
    2600:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <MCAL_DIO_u8GetPinValue>
    2604:	18 2b       	or	r17, r24
					if(value == PIN_LOW)
    2606:	89 81       	ldd	r24, Y+1	; 0x01
    2608:	88 23       	and	r24, r24
    260a:	09 f4       	brne	.+2      	; 0x260e <HAL_KEYPAD_u8_HomeKaypadButton+0x17c>
    260c:	4e c0       	rjmp	.+156    	; 0x26aa <HAL_KEYPAD_u8_HomeKaypadButton+0x218>
				if(flag == 1)
				{
					break;
				}
				c--;
				Loc_u8_Retval |= MCAL_DIO_u8SetPinValue(COLUMS_PORT[column],COLUMS_PIN[column],PIN_HIGH);
    260e:	88 2d       	mov	r24, r8
    2610:	69 2d       	mov	r22, r9
    2612:	41 e0       	ldi	r20, 0x01	; 1
    2614:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
    2618:	71 2e       	mov	r7, r17
    261a:	78 2a       	or	r7, r24
    261c:	08 94       	sec
    261e:	c1 1c       	adc	r12, r1
    2620:	d1 1c       	adc	r13, r1
			{
				APP_DEVICES_void_AppGetAnyDeviceOn();
				G_RunningDevicesIndicator = 0;
			}
			c = 3;
			for(column =0; column <= 3; column++)
    2622:	ee 20       	and	r14, r14
    2624:	09 f4       	brne	.+2      	; 0x2628 <HAL_KEYPAD_u8_HomeKaypadButton+0x196>
    2626:	88 cf       	rjmp	.-240    	; 0x2538 <HAL_KEYPAD_u8_HomeKaypadButton+0xa6>
				}
				if(flag == 1)
				{
					break;
				}
				c--;
    2628:	ea 94       	dec	r14
    262a:	b5 cf       	rjmp	.-150    	; 0x2596 <HAL_KEYPAD_u8_HomeKaypadButton+0x104>
					G_FanFlagOff = 0;
				}
			}
			if(G_RunningDevicesIndicator == 1)
			{
				APP_DEVICES_void_AppGetAnyDeviceOn();
    262c:	0e 94 ff 25 	call	0x4bfe	; 0x4bfe <APP_DEVICES_void_AppGetAnyDeviceOn>
				G_RunningDevicesIndicator = 0;
    2630:	10 92 59 03 	sts	0x0359, r1
    2634:	ac cf       	rjmp	.-168    	; 0x258e <HAL_KEYPAD_u8_HomeKaypadButton+0xfc>
				Loc_u8_Retval |= MCAL_DIO_u8SetPinValue(COLUMS_PORT[column],COLUMS_PIN[column],PIN_LOW);
				for(row = 4; row <= 7; row++)
				{
					r--;
					Loc_u8_Retval |= MCAL_DIO_u8GetPinValue(ROWS_PORT[row-4],ROWS_PIN[row-4],&value);
					if(value == PIN_LOW)
    2636:	53 e0       	ldi	r21, 0x03	; 3
    2638:	d5 2e       	mov	r13, r21
					{
						flag = 1;
						while(value == PIN_LOW)
						{
							Loc_u8_Retval |= MCAL_DIO_u8GetPinValue(ROWS_PORT[row-4],ROWS_PIN[row-4],&value);
    263a:	8f 2d       	mov	r24, r15
    263c:	60 2f       	mov	r22, r16
    263e:	a5 01       	movw	r20, r10
    2640:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <MCAL_DIO_u8GetPinValue>
    2644:	18 2b       	or	r17, r24
					r--;
					Loc_u8_Retval |= MCAL_DIO_u8GetPinValue(ROWS_PORT[row-4],ROWS_PIN[row-4],&value);
					if(value == PIN_LOW)
					{
						flag = 1;
						while(value == PIN_LOW)
    2646:	89 81       	ldd	r24, Y+1	; 0x01
    2648:	88 23       	and	r24, r24
    264a:	b9 f3       	breq	.-18     	; 0x263a <HAL_KEYPAD_u8_HomeKaypadButton+0x1a8>
						{
							Loc_u8_Retval |= MCAL_DIO_u8GetPinValue(ROWS_PORT[row-4],ROWS_PIN[row-4],&value);
						}
						*Ploc_u8_ButtuonValue = ch[r][c];
    264c:	8d 2d       	mov	r24, r13
    264e:	90 e0       	ldi	r25, 0x00	; 0
    2650:	88 0f       	add	r24, r24
    2652:	99 1f       	adc	r25, r25
    2654:	88 0f       	add	r24, r24
    2656:	99 1f       	adc	r25, r25
    2658:	a8 0e       	add	r10, r24
    265a:	b9 1e       	adc	r11, r25
    265c:	ae 0c       	add	r10, r14
    265e:	b1 1c       	adc	r11, r1
    2660:	f5 01       	movw	r30, r10
    2662:	81 89       	ldd	r24, Z+17	; 0x11
    2664:	ea a1       	ldd	r30, Y+34	; 0x22
    2666:	fb a1       	ldd	r31, Y+35	; 0x23
    2668:	80 83       	st	Z, r24
	else
	{
		//Do Nothing
	}
	return Loc_u8_Retval;
}
    266a:	81 2f       	mov	r24, r17
    266c:	a3 96       	adiw	r28, 0x23	; 35
    266e:	0f b6       	in	r0, 0x3f	; 63
    2670:	f8 94       	cli
    2672:	de bf       	out	0x3e, r29	; 62
    2674:	0f be       	out	0x3f, r0	; 63
    2676:	cd bf       	out	0x3d, r28	; 61
    2678:	cf 91       	pop	r28
    267a:	df 91       	pop	r29
    267c:	1f 91       	pop	r17
    267e:	0f 91       	pop	r16
    2680:	ff 90       	pop	r15
    2682:	ef 90       	pop	r14
    2684:	df 90       	pop	r13
    2686:	cf 90       	pop	r12
    2688:	bf 90       	pop	r11
    268a:	af 90       	pop	r10
    268c:	9f 90       	pop	r9
    268e:	8f 90       	pop	r8
    2690:	7f 90       	pop	r7
    2692:	6f 90       	pop	r6
    2694:	5f 90       	pop	r5
    2696:	4f 90       	pop	r4
    2698:	3f 90       	pop	r3
    269a:	2f 90       	pop	r2
    269c:	08 95       	ret
				Loc_u8_Retval |= MCAL_DIO_u8SetPinValue(COLUMS_PORT[column],COLUMS_PIN[column],PIN_LOW);
				for(row = 4; row <= 7; row++)
				{
					r--;
					Loc_u8_Retval |= MCAL_DIO_u8GetPinValue(ROWS_PORT[row-4],ROWS_PIN[row-4],&value);
					if(value == PIN_LOW)
    269e:	42 e0       	ldi	r20, 0x02	; 2
    26a0:	d4 2e       	mov	r13, r20
    26a2:	cb cf       	rjmp	.-106    	; 0x263a <HAL_KEYPAD_u8_HomeKaypadButton+0x1a8>
    26a4:	dd 24       	eor	r13, r13
    26a6:	d3 94       	inc	r13
    26a8:	c8 cf       	rjmp	.-112    	; 0x263a <HAL_KEYPAD_u8_HomeKaypadButton+0x1a8>
    26aa:	dd 24       	eor	r13, r13
    26ac:	32 e0       	ldi	r19, 0x02	; 2
    26ae:	f3 2e       	mov	r15, r19
    26b0:	07 e0       	ldi	r16, 0x07	; 7
    26b2:	c3 cf       	rjmp	.-122    	; 0x263a <HAL_KEYPAD_u8_HomeKaypadButton+0x1a8>
			G_LM35 = LM35_Read();
			if(G_FanControlFlag == 0)
			{
				if((G_LM35 > TURN_DC_ON_TEMP) && (G_FanFlagOn == 0))
				{
					G_FanFlagOn = 1;
    26b4:	60 92 66 03 	sts	0x0366, r6
					G_FanFlag = 1;
    26b8:	60 92 63 03 	sts	0x0363, r6
					G_FanFlagOff = 0;
    26bc:	10 92 5b 03 	sts	0x035B, r1
					HAL_DCMOTOR_void_DcMotorClockWise(motor_speed);
    26c0:	87 e0       	ldi	r24, 0x07	; 7
    26c2:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <HAL_DCMOTOR_void_DcMotorClockWise>
					G_RunningDevicesIndicator = 1;
    26c6:	60 92 59 03 	sts	0x0359, r6
					MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_HIGH);
    26ca:	81 e0       	ldi	r24, 0x01	; 1
    26cc:	62 e0       	ldi	r22, 0x02	; 2
    26ce:	41 e0       	ldi	r20, 0x01	; 1
    26d0:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
					MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_LOW);
    26d4:	81 e0       	ldi	r24, 0x01	; 1
    26d6:	64 e0       	ldi	r22, 0x04	; 4
    26d8:	40 e0       	ldi	r20, 0x00	; 0
    26da:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
					G_RecieveValue = MCAL_SPI_MASTER_u8_SpiMaster_Transceive('F');
    26de:	86 e4       	ldi	r24, 0x46	; 70
    26e0:	0e 94 1d 0b 	call	0x163a	; 0x163a <MCAL_SPI_MASTER_u8_SpiMaster_Transceive>
    26e4:	80 93 5c 03 	sts	0x035C, r24
					MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_HIGH);
    26e8:	81 e0       	ldi	r24, 0x01	; 1
    26ea:	64 e0       	ldi	r22, 0x04	; 4
    26ec:	41 e0       	ldi	r20, 0x01	; 1
    26ee:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
					MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_LOW);
    26f2:	81 e0       	ldi	r24, 0x01	; 1
    26f4:	64 e0       	ldi	r22, 0x04	; 4
    26f6:	40 e0       	ldi	r20, 0x00	; 0
    26f8:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
					G_RecieveValue = MCAL_SPI_MASTER_u8_SpiMaster_Transceive('N');
    26fc:	8e e4       	ldi	r24, 0x4E	; 78
					MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_HIGH);
					MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_LOW);
					G_RecieveValue = MCAL_SPI_MASTER_u8_SpiMaster_Transceive('F');
					MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_HIGH);
					MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_LOW);
					G_RecieveValue = MCAL_SPI_MASTER_u8_SpiMaster_Transceive('F');
    26fe:	0e 94 1d 0b 	call	0x163a	; 0x163a <MCAL_SPI_MASTER_u8_SpiMaster_Transceive>
    2702:	80 93 5c 03 	sts	0x035C, r24
					MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_HIGH);
    2706:	81 e0       	ldi	r24, 0x01	; 1
    2708:	64 e0       	ldi	r22, 0x04	; 4
    270a:	41 e0       	ldi	r20, 0x01	; 1
    270c:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
					MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_LOW);
    2710:	81 e0       	ldi	r24, 0x01	; 1
    2712:	62 e0       	ldi	r22, 0x02	; 2
    2714:	40 e0       	ldi	r20, 0x00	; 0
    2716:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
    271a:	34 cf       	rjmp	.-408    	; 0x2584 <HAL_KEYPAD_u8_HomeKaypadButton+0xf2>
					MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_HIGH);
					MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_LOW);
				}
				else if((G_LM35 < TURN_DC_OFF_TEMP) && (G_FanFlagOff == 0))
				{
					G_FanFlagOff = 1;
    271c:	60 92 5b 03 	sts	0x035B, r6
					G_FanFlag = 0;
    2720:	10 92 63 03 	sts	0x0363, r1
					G_FanFlagOn = 0;
    2724:	10 92 66 03 	sts	0x0366, r1
					HAL_DCMOTOR_void_DcMotorStop();
    2728:	0e 94 93 16 	call	0x2d26	; 0x2d26 <HAL_DCMOTOR_void_DcMotorStop>
					G_RunningDevicesIndicator = 1;
    272c:	60 92 59 03 	sts	0x0359, r6
					MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_HIGH);
    2730:	81 e0       	ldi	r24, 0x01	; 1
    2732:	62 e0       	ldi	r22, 0x02	; 2
    2734:	41 e0       	ldi	r20, 0x01	; 1
    2736:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
					MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_LOW);
    273a:	81 e0       	ldi	r24, 0x01	; 1
    273c:	64 e0       	ldi	r22, 0x04	; 4
    273e:	40 e0       	ldi	r20, 0x00	; 0
    2740:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
					G_RecieveValue = MCAL_SPI_MASTER_u8_SpiMaster_Transceive('F');
    2744:	86 e4       	ldi	r24, 0x46	; 70
    2746:	0e 94 1d 0b 	call	0x163a	; 0x163a <MCAL_SPI_MASTER_u8_SpiMaster_Transceive>
    274a:	80 93 5c 03 	sts	0x035C, r24
					MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_HIGH);
    274e:	81 e0       	ldi	r24, 0x01	; 1
    2750:	64 e0       	ldi	r22, 0x04	; 4
    2752:	41 e0       	ldi	r20, 0x01	; 1
    2754:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
					MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_LOW);
    2758:	81 e0       	ldi	r24, 0x01	; 1
    275a:	64 e0       	ldi	r22, 0x04	; 4
    275c:	40 e0       	ldi	r20, 0x00	; 0
    275e:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
					G_RecieveValue = MCAL_SPI_MASTER_u8_SpiMaster_Transceive('F');
    2762:	86 e4       	ldi	r24, 0x46	; 70
    2764:	cc cf       	rjmp	.-104    	; 0x26fe <HAL_KEYPAD_u8_HomeKaypadButton+0x26c>
				}
				if(flag == 1)
				{
					break;
				}
				c--;
    2766:	11 e0       	ldi	r17, 0x01	; 1
    2768:	80 cf       	rjmp	.-256    	; 0x266a <HAL_KEYPAD_u8_HomeKaypadButton+0x1d8>

0000276a <HAL_KEYPAD_u8_KaypadButton1>:
	}
	return Loc_u8_Retval;
}

STD_TYPE HAL_KEYPAD_u8_KaypadButton1(u8 *Ploc_u8_ButtuonValue)
{
    276a:	2f 92       	push	r2
    276c:	3f 92       	push	r3
    276e:	4f 92       	push	r4
    2770:	5f 92       	push	r5
    2772:	7f 92       	push	r7
    2774:	8f 92       	push	r8
    2776:	9f 92       	push	r9
    2778:	af 92       	push	r10
    277a:	bf 92       	push	r11
    277c:	cf 92       	push	r12
    277e:	df 92       	push	r13
    2780:	ef 92       	push	r14
    2782:	ff 92       	push	r15
    2784:	0f 93       	push	r16
    2786:	1f 93       	push	r17
    2788:	df 93       	push	r29
    278a:	cf 93       	push	r28
    278c:	cd b7       	in	r28, 0x3d	; 61
    278e:	de b7       	in	r29, 0x3e	; 62
    2790:	a3 97       	sbiw	r28, 0x23	; 35
    2792:	0f b6       	in	r0, 0x3f	; 63
    2794:	f8 94       	cli
    2796:	de bf       	out	0x3e, r29	; 62
    2798:	0f be       	out	0x3f, r0	; 63
    279a:	cd bf       	out	0x3d, r28	; 61
    279c:	9b a3       	std	Y+35, r25	; 0x23
    279e:	8a a3       	std	Y+34, r24	; 0x22
	u8 Loc_u8_Retval = E_NOT_OK;
	//u16 Loc_u16_Counter = 0;
	u8 ch[4][4] = {{7,8,9,'/'},
				   {4,5,6,'*'},
	               {1,2,3,'-'},
				   {'N',0,'=','+'}};
    27a0:	de 01       	movw	r26, r28
    27a2:	52 96       	adiw	r26, 0x12	; 18
    27a4:	e3 e2       	ldi	r30, 0x23	; 35
    27a6:	f3 e0       	ldi	r31, 0x03	; 3
    27a8:	80 e1       	ldi	r24, 0x10	; 16
    27aa:	01 90       	ld	r0, Z+
    27ac:	0d 92       	st	X+, r0
    27ae:	81 50       	subi	r24, 0x01	; 1
    27b0:	e1 f7       	brne	.-8      	; 0x27aa <HAL_KEYPAD_u8_KaypadButton1+0x40>
	u8 ROWS_PORT[4]   = {KEYPAD_R3_PORT, KEYPAD_R2_PORT, KEYPAD_R1_PORT, KEYPAD_R0_PORT};
    27b2:	92 e0       	ldi	r25, 0x02	; 2
    27b4:	9a 83       	std	Y+2, r25	; 0x02
    27b6:	1b 82       	std	Y+3, r1	; 0x03
    27b8:	1c 82       	std	Y+4, r1	; 0x04
    27ba:	9d 83       	std	Y+5, r25	; 0x05
	u8 COLUMS_PORT[4] = {KEYPAD_C3_PORT, KEYPAD_C2_PORT, KEYPAD_C1_PORT, KEYPAD_C0_PORT};
    27bc:	83 e0       	ldi	r24, 0x03	; 3
    27be:	8e 83       	std	Y+6, r24	; 0x06
    27c0:	8f 83       	std	Y+7, r24	; 0x07
    27c2:	98 87       	std	Y+8, r25	; 0x08
    27c4:	99 87       	std	Y+9, r25	; 0x09
	u8 ROWS_PIN[4]    = {KEYPAD_R3_PIN, KEYPAD_R2_PIN, KEYPAD_R1_PIN, KEYPAD_R0_PIN};
    27c6:	9a 87       	std	Y+10, r25	; 0x0a
    27c8:	9b 87       	std	Y+11, r25	; 0x0b
    27ca:	91 e0       	ldi	r25, 0x01	; 1
    27cc:	9c 87       	std	Y+12, r25	; 0x0c
    27ce:	87 e0       	ldi	r24, 0x07	; 7
    27d0:	8d 87       	std	Y+13, r24	; 0x0d
	u8 COLUMS_PIN[4]  = {KEYPAD_C3_PIN, KEYPAD_C2_PIN, KEYPAD_C1_PIN, KEYPAD_C0_PIN};
    27d2:	9e 87       	std	Y+14, r25	; 0x0e
    27d4:	1f 86       	std	Y+15, r1	; 0x0f
    27d6:	86 e0       	ldi	r24, 0x06	; 6
    27d8:	88 8b       	std	Y+16, r24	; 0x10
    27da:	85 e0       	ldi	r24, 0x05	; 5
    27dc:	89 8b       	std	Y+17, r24	; 0x11
	u8 column = 0;
	u8 r = 0;
	u8 c = 0;
	u8 flag = 0;
	u8 value = 0;
	if(Ploc_u8_ButtuonValue != NULL)
    27de:	8a a1       	ldd	r24, Y+34	; 0x22
    27e0:	9b a1       	ldd	r25, Y+35	; 0x23
    27e2:	89 2b       	or	r24, r25
    27e4:	09 f4       	brne	.+2      	; 0x27e8 <HAL_KEYPAD_u8_KaypadButton1+0x7e>
    27e6:	a0 c0       	rjmp	.+320    	; 0x2928 <HAL_KEYPAD_u8_KaypadButton1+0x1be>
	u8 row = 0;
	u8 column = 0;
	u8 r = 0;
	u8 c = 0;
	u8 flag = 0;
	u8 value = 0;
    27e8:	19 82       	std	Y+1, r1	; 0x01
    27ea:	ee 24       	eor	r14, r14
    27ec:	e3 94       	inc	r14
    27ee:	36 e0       	ldi	r19, 0x06	; 6
    27f0:	43 2e       	mov	r4, r19
    27f2:	51 2c       	mov	r5, r1
    27f4:	4c 0e       	add	r4, r28
    27f6:	5d 1e       	adc	r5, r29
    27f8:	2e e0       	ldi	r18, 0x0E	; 14
    27fa:	22 2e       	mov	r2, r18
    27fc:	31 2c       	mov	r3, r1
    27fe:	2c 0e       	add	r2, r28
    2800:	3d 1e       	adc	r3, r29
    2802:	6e 01       	movw	r12, r28
    2804:	08 94       	sec
    2806:	c1 1c       	adc	r12, r1
    2808:	d1 1c       	adc	r13, r1
	if(Ploc_u8_ButtuonValue != NULL)
	{
		while(1)
		{
			APP_FAN_void_AppFanReadWithoutWrite();
    280a:	0e 94 7b 25 	call	0x4af6	; 0x4af6 <APP_FAN_void_AppFanReadWithoutWrite>
    280e:	93 e0       	ldi	r25, 0x03	; 3
    2810:	99 2e       	mov	r9, r25
    2812:	aa 24       	eor	r10, r10
    2814:	bb 24       	eor	r11, r11
			c = 3;
			for(column =0; column <= 3; column++)
			{
				r = 4;
				Loc_u8_Retval |= MCAL_DIO_u8SetPinValue(COLUMS_PORT[column],COLUMS_PIN[column],PIN_LOW);
    2816:	f2 01       	movw	r30, r4
    2818:	ea 0d       	add	r30, r10
    281a:	fb 1d       	adc	r31, r11
    281c:	70 80       	ld	r7, Z
    281e:	f1 01       	movw	r30, r2
    2820:	ea 0d       	add	r30, r10
    2822:	fb 1d       	adc	r31, r11
    2824:	80 80       	ld	r8, Z
    2826:	87 2d       	mov	r24, r7
    2828:	68 2d       	mov	r22, r8
    282a:	40 e0       	ldi	r20, 0x00	; 0
    282c:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
    2830:	18 2f       	mov	r17, r24
				for(row = 4; row <= 7; row++)
				{
					r--;
					Loc_u8_Retval |= MCAL_DIO_u8GetPinValue(ROWS_PORT[row-4],ROWS_PIN[row-4],&value);
    2832:	fa 80       	ldd	r15, Y+2	; 0x02
    2834:	0a 85       	ldd	r16, Y+10	; 0x0a
    2836:	8f 2d       	mov	r24, r15
    2838:	60 2f       	mov	r22, r16
    283a:	a6 01       	movw	r20, r12
    283c:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <MCAL_DIO_u8GetPinValue>
			APP_FAN_void_AppFanReadWithoutWrite();
			c = 3;
			for(column =0; column <= 3; column++)
			{
				r = 4;
				Loc_u8_Retval |= MCAL_DIO_u8SetPinValue(COLUMS_PORT[column],COLUMS_PIN[column],PIN_LOW);
    2840:	18 2b       	or	r17, r24
				for(row = 4; row <= 7; row++)
				{
					r--;
					Loc_u8_Retval |= MCAL_DIO_u8GetPinValue(ROWS_PORT[row-4],ROWS_PIN[row-4],&value);
    2842:	1e 29       	or	r17, r14
					if(value == PIN_LOW)
    2844:	89 81       	ldd	r24, Y+1	; 0x01
    2846:	88 23       	and	r24, r24
    2848:	89 f1       	breq	.+98     	; 0x28ac <HAL_KEYPAD_u8_KaypadButton1+0x142>
				r = 4;
				Loc_u8_Retval |= MCAL_DIO_u8SetPinValue(COLUMS_PORT[column],COLUMS_PIN[column],PIN_LOW);
				for(row = 4; row <= 7; row++)
				{
					r--;
					Loc_u8_Retval |= MCAL_DIO_u8GetPinValue(ROWS_PORT[row-4],ROWS_PIN[row-4],&value);
    284a:	fb 80       	ldd	r15, Y+3	; 0x03
    284c:	0b 85       	ldd	r16, Y+11	; 0x0b
    284e:	8f 2d       	mov	r24, r15
    2850:	60 2f       	mov	r22, r16
    2852:	a6 01       	movw	r20, r12
    2854:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <MCAL_DIO_u8GetPinValue>
    2858:	18 2b       	or	r17, r24
					if(value == PIN_LOW)
    285a:	89 81       	ldd	r24, Y+1	; 0x01
    285c:	88 23       	and	r24, r24
    285e:	09 f4       	brne	.+2      	; 0x2862 <HAL_KEYPAD_u8_KaypadButton1+0xf8>
    2860:	58 c0       	rjmp	.+176    	; 0x2912 <HAL_KEYPAD_u8_KaypadButton1+0x1a8>
				r = 4;
				Loc_u8_Retval |= MCAL_DIO_u8SetPinValue(COLUMS_PORT[column],COLUMS_PIN[column],PIN_LOW);
				for(row = 4; row <= 7; row++)
				{
					r--;
					Loc_u8_Retval |= MCAL_DIO_u8GetPinValue(ROWS_PORT[row-4],ROWS_PIN[row-4],&value);
    2862:	fc 80       	ldd	r15, Y+4	; 0x04
    2864:	0c 85       	ldd	r16, Y+12	; 0x0c
    2866:	8f 2d       	mov	r24, r15
    2868:	60 2f       	mov	r22, r16
    286a:	a6 01       	movw	r20, r12
    286c:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <MCAL_DIO_u8GetPinValue>
    2870:	18 2b       	or	r17, r24
					if(value == PIN_LOW)
    2872:	89 81       	ldd	r24, Y+1	; 0x01
    2874:	88 23       	and	r24, r24
    2876:	09 f4       	brne	.+2      	; 0x287a <HAL_KEYPAD_u8_KaypadButton1+0x110>
    2878:	4f c0       	rjmp	.+158    	; 0x2918 <HAL_KEYPAD_u8_KaypadButton1+0x1ae>
				r = 4;
				Loc_u8_Retval |= MCAL_DIO_u8SetPinValue(COLUMS_PORT[column],COLUMS_PIN[column],PIN_LOW);
				for(row = 4; row <= 7; row++)
				{
					r--;
					Loc_u8_Retval |= MCAL_DIO_u8GetPinValue(ROWS_PORT[row-4],ROWS_PIN[row-4],&value);
    287a:	82 e0       	ldi	r24, 0x02	; 2
    287c:	67 e0       	ldi	r22, 0x07	; 7
    287e:	a6 01       	movw	r20, r12
    2880:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <MCAL_DIO_u8GetPinValue>
    2884:	18 2b       	or	r17, r24
					if(value == PIN_LOW)
    2886:	89 81       	ldd	r24, Y+1	; 0x01
    2888:	88 23       	and	r24, r24
    288a:	09 f4       	brne	.+2      	; 0x288e <HAL_KEYPAD_u8_KaypadButton1+0x124>
    288c:	48 c0       	rjmp	.+144    	; 0x291e <HAL_KEYPAD_u8_KaypadButton1+0x1b4>
				if(flag == 1)
				{
					break;
				}
				c--;
				Loc_u8_Retval |= MCAL_DIO_u8SetPinValue(COLUMS_PORT[column],COLUMS_PIN[column],PIN_HIGH);
    288e:	87 2d       	mov	r24, r7
    2890:	68 2d       	mov	r22, r8
    2892:	41 e0       	ldi	r20, 0x01	; 1
    2894:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
    2898:	e1 2e       	mov	r14, r17
    289a:	e8 2a       	or	r14, r24
    289c:	08 94       	sec
    289e:	a1 1c       	adc	r10, r1
    28a0:	b1 1c       	adc	r11, r1
	{
		while(1)
		{
			APP_FAN_void_AppFanReadWithoutWrite();
			c = 3;
			for(column =0; column <= 3; column++)
    28a2:	99 20       	and	r9, r9
    28a4:	09 f4       	brne	.+2      	; 0x28a8 <HAL_KEYPAD_u8_KaypadButton1+0x13e>
    28a6:	b1 cf       	rjmp	.-158    	; 0x280a <HAL_KEYPAD_u8_KaypadButton1+0xa0>
				}
				if(flag == 1)
				{
					break;
				}
				c--;
    28a8:	9a 94       	dec	r9
    28aa:	b5 cf       	rjmp	.-150    	; 0x2816 <HAL_KEYPAD_u8_KaypadButton1+0xac>
				Loc_u8_Retval |= MCAL_DIO_u8SetPinValue(COLUMS_PORT[column],COLUMS_PIN[column],PIN_LOW);
				for(row = 4; row <= 7; row++)
				{
					r--;
					Loc_u8_Retval |= MCAL_DIO_u8GetPinValue(ROWS_PORT[row-4],ROWS_PIN[row-4],&value);
					if(value == PIN_LOW)
    28ac:	83 e0       	ldi	r24, 0x03	; 3
    28ae:	e8 2e       	mov	r14, r24
					{
						flag = 1;
						while(value == PIN_LOW)
						{
							Loc_u8_Retval |= MCAL_DIO_u8GetPinValue(ROWS_PORT[row-4],ROWS_PIN[row-4],&value);
    28b0:	8f 2d       	mov	r24, r15
    28b2:	60 2f       	mov	r22, r16
    28b4:	a6 01       	movw	r20, r12
    28b6:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <MCAL_DIO_u8GetPinValue>
    28ba:	18 2b       	or	r17, r24
					r--;
					Loc_u8_Retval |= MCAL_DIO_u8GetPinValue(ROWS_PORT[row-4],ROWS_PIN[row-4],&value);
					if(value == PIN_LOW)
					{
						flag = 1;
						while(value == PIN_LOW)
    28bc:	89 81       	ldd	r24, Y+1	; 0x01
    28be:	88 23       	and	r24, r24
    28c0:	b9 f3       	breq	.-18     	; 0x28b0 <HAL_KEYPAD_u8_KaypadButton1+0x146>
						{
							Loc_u8_Retval |= MCAL_DIO_u8GetPinValue(ROWS_PORT[row-4],ROWS_PIN[row-4],&value);
						}
						*Ploc_u8_ButtuonValue = ch[r][c];
    28c2:	8e 2d       	mov	r24, r14
    28c4:	90 e0       	ldi	r25, 0x00	; 0
    28c6:	88 0f       	add	r24, r24
    28c8:	99 1f       	adc	r25, r25
    28ca:	88 0f       	add	r24, r24
    28cc:	99 1f       	adc	r25, r25
    28ce:	c8 0e       	add	r12, r24
    28d0:	d9 1e       	adc	r13, r25
    28d2:	c9 0c       	add	r12, r9
    28d4:	d1 1c       	adc	r13, r1
    28d6:	f6 01       	movw	r30, r12
    28d8:	81 89       	ldd	r24, Z+17	; 0x11
    28da:	ea a1       	ldd	r30, Y+34	; 0x22
    28dc:	fb a1       	ldd	r31, Y+35	; 0x23
    28de:	80 83       	st	Z, r24
	else
	{
		//Do Nothing
	}
	return Loc_u8_Retval;
}
    28e0:	81 2f       	mov	r24, r17
    28e2:	a3 96       	adiw	r28, 0x23	; 35
    28e4:	0f b6       	in	r0, 0x3f	; 63
    28e6:	f8 94       	cli
    28e8:	de bf       	out	0x3e, r29	; 62
    28ea:	0f be       	out	0x3f, r0	; 63
    28ec:	cd bf       	out	0x3d, r28	; 61
    28ee:	cf 91       	pop	r28
    28f0:	df 91       	pop	r29
    28f2:	1f 91       	pop	r17
    28f4:	0f 91       	pop	r16
    28f6:	ff 90       	pop	r15
    28f8:	ef 90       	pop	r14
    28fa:	df 90       	pop	r13
    28fc:	cf 90       	pop	r12
    28fe:	bf 90       	pop	r11
    2900:	af 90       	pop	r10
    2902:	9f 90       	pop	r9
    2904:	8f 90       	pop	r8
    2906:	7f 90       	pop	r7
    2908:	5f 90       	pop	r5
    290a:	4f 90       	pop	r4
    290c:	3f 90       	pop	r3
    290e:	2f 90       	pop	r2
    2910:	08 95       	ret
				Loc_u8_Retval |= MCAL_DIO_u8SetPinValue(COLUMS_PORT[column],COLUMS_PIN[column],PIN_LOW);
				for(row = 4; row <= 7; row++)
				{
					r--;
					Loc_u8_Retval |= MCAL_DIO_u8GetPinValue(ROWS_PORT[row-4],ROWS_PIN[row-4],&value);
					if(value == PIN_LOW)
    2912:	b2 e0       	ldi	r27, 0x02	; 2
    2914:	eb 2e       	mov	r14, r27
    2916:	cc cf       	rjmp	.-104    	; 0x28b0 <HAL_KEYPAD_u8_KaypadButton1+0x146>
    2918:	ee 24       	eor	r14, r14
    291a:	e3 94       	inc	r14
    291c:	c9 cf       	rjmp	.-110    	; 0x28b0 <HAL_KEYPAD_u8_KaypadButton1+0x146>
    291e:	ee 24       	eor	r14, r14
    2920:	a2 e0       	ldi	r26, 0x02	; 2
    2922:	fa 2e       	mov	r15, r26
    2924:	07 e0       	ldi	r16, 0x07	; 7
    2926:	c4 cf       	rjmp	.-120    	; 0x28b0 <HAL_KEYPAD_u8_KaypadButton1+0x146>
				}
				if(flag == 1)
				{
					break;
				}
				c--;
    2928:	11 e0       	ldi	r17, 0x01	; 1
    292a:	da cf       	rjmp	.-76     	; 0x28e0 <HAL_KEYPAD_u8_KaypadButton1+0x176>

0000292c <HAL_KEYPAD_u8_KaypadButton>:
 * RETURN      : Execution Status (OK OR NOT_OK)
 * **********************************************************************
 **/

STD_TYPE HAL_KEYPAD_u8_KaypadButton(u8 *Ploc_u8_ButtuonValue)
{
    292c:	2f 92       	push	r2
    292e:	3f 92       	push	r3
    2930:	4f 92       	push	r4
    2932:	5f 92       	push	r5
    2934:	6f 92       	push	r6
    2936:	7f 92       	push	r7
    2938:	8f 92       	push	r8
    293a:	9f 92       	push	r9
    293c:	af 92       	push	r10
    293e:	bf 92       	push	r11
    2940:	cf 92       	push	r12
    2942:	df 92       	push	r13
    2944:	ef 92       	push	r14
    2946:	ff 92       	push	r15
    2948:	0f 93       	push	r16
    294a:	1f 93       	push	r17
    294c:	df 93       	push	r29
    294e:	cf 93       	push	r28
    2950:	cd b7       	in	r28, 0x3d	; 61
    2952:	de b7       	in	r29, 0x3e	; 62
    2954:	a4 97       	sbiw	r28, 0x24	; 36
    2956:	0f b6       	in	r0, 0x3f	; 63
    2958:	f8 94       	cli
    295a:	de bf       	out	0x3e, r29	; 62
    295c:	0f be       	out	0x3f, r0	; 63
    295e:	cd bf       	out	0x3d, r28	; 61
    2960:	9c a3       	std	Y+36, r25	; 0x24
    2962:	8b a3       	std	Y+35, r24	; 0x23
	u8 Loc_u8_Retval = E_NOT_OK;
	u16 Loc_u16_Counter = 0;
	u8 ch[4][4] = {{7,8,9,'/'},
				   {4,5,6,'*'},
	               {1,2,3,'-'},
				   {'N',0,'=','+'}};
    2964:	de 01       	movw	r26, r28
    2966:	52 96       	adiw	r26, 0x12	; 18
    2968:	e3 e3       	ldi	r30, 0x33	; 51
    296a:	f3 e0       	ldi	r31, 0x03	; 3
    296c:	80 e1       	ldi	r24, 0x10	; 16
    296e:	01 90       	ld	r0, Z+
    2970:	0d 92       	st	X+, r0
    2972:	81 50       	subi	r24, 0x01	; 1
    2974:	e1 f7       	brne	.-8      	; 0x296e <HAL_KEYPAD_u8_KaypadButton+0x42>
	u8 ROWS_PORT[4]   = {KEYPAD_R3_PORT, KEYPAD_R2_PORT, KEYPAD_R1_PORT, KEYPAD_R0_PORT};
    2976:	92 e0       	ldi	r25, 0x02	; 2
    2978:	9a 83       	std	Y+2, r25	; 0x02
    297a:	1b 82       	std	Y+3, r1	; 0x03
    297c:	1c 82       	std	Y+4, r1	; 0x04
    297e:	9d 83       	std	Y+5, r25	; 0x05
	u8 COLUMS_PORT[4] = {KEYPAD_C3_PORT, KEYPAD_C2_PORT, KEYPAD_C1_PORT, KEYPAD_C0_PORT};
    2980:	83 e0       	ldi	r24, 0x03	; 3
    2982:	8e 83       	std	Y+6, r24	; 0x06
    2984:	8f 83       	std	Y+7, r24	; 0x07
    2986:	98 87       	std	Y+8, r25	; 0x08
    2988:	99 87       	std	Y+9, r25	; 0x09
	u8 ROWS_PIN[4]    = {KEYPAD_R3_PIN, KEYPAD_R2_PIN, KEYPAD_R1_PIN, KEYPAD_R0_PIN};
    298a:	9a 87       	std	Y+10, r25	; 0x0a
    298c:	9b 87       	std	Y+11, r25	; 0x0b
    298e:	91 e0       	ldi	r25, 0x01	; 1
    2990:	9c 87       	std	Y+12, r25	; 0x0c
    2992:	87 e0       	ldi	r24, 0x07	; 7
    2994:	8d 87       	std	Y+13, r24	; 0x0d
	u8 COLUMS_PIN[4]  = {KEYPAD_C3_PIN, KEYPAD_C2_PIN, KEYPAD_C1_PIN, KEYPAD_C0_PIN};
    2996:	9e 87       	std	Y+14, r25	; 0x0e
    2998:	1f 86       	std	Y+15, r1	; 0x0f
    299a:	86 e0       	ldi	r24, 0x06	; 6
    299c:	88 8b       	std	Y+16, r24	; 0x10
    299e:	85 e0       	ldi	r24, 0x05	; 5
    29a0:	89 8b       	std	Y+17, r24	; 0x11
	u8 column = 0;
	u8 r = 0;
	u8 c = 0;
	u8 flag = 0;
	u8 value = 0;
	if(Ploc_u8_ButtuonValue != NULL)
    29a2:	8b a1       	ldd	r24, Y+35	; 0x23
    29a4:	9c a1       	ldd	r25, Y+36	; 0x24
    29a6:	89 2b       	or	r24, r25
    29a8:	09 f4       	brne	.+2      	; 0x29ac <HAL_KEYPAD_u8_KaypadButton+0x80>
    29aa:	ad c0       	rjmp	.+346    	; 0x2b06 <HAL_KEYPAD_u8_KaypadButton+0x1da>
	u8 row = 0;
	u8 column = 0;
	u8 r = 0;
	u8 c = 0;
	u8 flag = 0;
	u8 value = 0;
    29ac:	19 82       	std	Y+1, r1	; 0x01
    29ae:	11 e0       	ldi	r17, 0x01	; 1
    29b0:	66 24       	eor	r6, r6
    29b2:	77 24       	eor	r7, r7
    29b4:	a6 e0       	ldi	r26, 0x06	; 6
    29b6:	2a 2e       	mov	r2, r26
    29b8:	31 2c       	mov	r3, r1
    29ba:	2c 0e       	add	r2, r28
    29bc:	3d 1e       	adc	r3, r29
    29be:	fe e0       	ldi	r31, 0x0E	; 14
    29c0:	4f 2e       	mov	r4, r31
    29c2:	51 2c       	mov	r5, r1
    29c4:	4c 0e       	add	r4, r28
    29c6:	5d 1e       	adc	r5, r29
    29c8:	6e 01       	movw	r12, r28
    29ca:	08 94       	sec
    29cc:	c1 1c       	adc	r12, r1
    29ce:	d1 1c       	adc	r13, r1
	if(Ploc_u8_ButtuonValue != NULL)
	{
		while(1)
		{
			APP_FAN_void_AppFanReadWithoutWrite();
    29d0:	0e 94 7b 25 	call	0x4af6	; 0x4af6 <APP_FAN_void_AppFanReadWithoutWrite>
    29d4:	e3 e0       	ldi	r30, 0x03	; 3
    29d6:	ee 2e       	mov	r14, r30
    29d8:	aa 24       	eor	r10, r10
    29da:	bb 24       	eor	r11, r11
			c = 3;
			for(column =0; column <= 3; column++)
			{
				r = 4;
				Loc_u8_Retval |= MCAL_DIO_u8SetPinValue(COLUMS_PORT[column],COLUMS_PIN[column],PIN_LOW);
    29dc:	f1 01       	movw	r30, r2
    29de:	ea 0d       	add	r30, r10
    29e0:	fb 1d       	adc	r31, r11
    29e2:	80 80       	ld	r8, Z
    29e4:	f2 01       	movw	r30, r4
    29e6:	ea 0d       	add	r30, r10
    29e8:	fb 1d       	adc	r31, r11
    29ea:	90 80       	ld	r9, Z
    29ec:	88 2d       	mov	r24, r8
    29ee:	69 2d       	mov	r22, r9
    29f0:	40 e0       	ldi	r20, 0x00	; 0
    29f2:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
    29f6:	8a a3       	std	Y+34, r24	; 0x22
				for(row = 4; row <= 7; row++)
				{
					r--;
					Loc_u8_Retval |= MCAL_DIO_u8GetPinValue(ROWS_PORT[row-4],ROWS_PIN[row-4],&value);
    29f8:	fa 80       	ldd	r15, Y+2	; 0x02
    29fa:	0a 85       	ldd	r16, Y+10	; 0x0a
    29fc:	8f 2d       	mov	r24, r15
    29fe:	60 2f       	mov	r22, r16
    2a00:	a6 01       	movw	r20, r12
    2a02:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <MCAL_DIO_u8GetPinValue>
			APP_FAN_void_AppFanReadWithoutWrite();
			c = 3;
			for(column =0; column <= 3; column++)
			{
				r = 4;
				Loc_u8_Retval |= MCAL_DIO_u8SetPinValue(COLUMS_PORT[column],COLUMS_PIN[column],PIN_LOW);
    2a06:	9a a1       	ldd	r25, Y+34	; 0x22
    2a08:	98 2b       	or	r25, r24
				for(row = 4; row <= 7; row++)
				{
					r--;
					Loc_u8_Retval |= MCAL_DIO_u8GetPinValue(ROWS_PORT[row-4],ROWS_PIN[row-4],&value);
    2a0a:	19 2b       	or	r17, r25
					if(value == PIN_LOW)
    2a0c:	89 81       	ldd	r24, Y+1	; 0x01
    2a0e:	88 23       	and	r24, r24
    2a10:	09 f4       	brne	.+2      	; 0x2a14 <HAL_KEYPAD_u8_KaypadButton+0xe8>
    2a12:	53 c0       	rjmp	.+166    	; 0x2aba <HAL_KEYPAD_u8_KaypadButton+0x18e>
				r = 4;
				Loc_u8_Retval |= MCAL_DIO_u8SetPinValue(COLUMS_PORT[column],COLUMS_PIN[column],PIN_LOW);
				for(row = 4; row <= 7; row++)
				{
					r--;
					Loc_u8_Retval |= MCAL_DIO_u8GetPinValue(ROWS_PORT[row-4],ROWS_PIN[row-4],&value);
    2a14:	fb 80       	ldd	r15, Y+3	; 0x03
    2a16:	0b 85       	ldd	r16, Y+11	; 0x0b
    2a18:	8f 2d       	mov	r24, r15
    2a1a:	60 2f       	mov	r22, r16
    2a1c:	a6 01       	movw	r20, r12
    2a1e:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <MCAL_DIO_u8GetPinValue>
    2a22:	18 2b       	or	r17, r24
					if(value == PIN_LOW)
    2a24:	89 81       	ldd	r24, Y+1	; 0x01
    2a26:	88 23       	and	r24, r24
    2a28:	09 f4       	brne	.+2      	; 0x2a2c <HAL_KEYPAD_u8_KaypadButton+0x100>
    2a2a:	62 c0       	rjmp	.+196    	; 0x2af0 <HAL_KEYPAD_u8_KaypadButton+0x1c4>
				r = 4;
				Loc_u8_Retval |= MCAL_DIO_u8SetPinValue(COLUMS_PORT[column],COLUMS_PIN[column],PIN_LOW);
				for(row = 4; row <= 7; row++)
				{
					r--;
					Loc_u8_Retval |= MCAL_DIO_u8GetPinValue(ROWS_PORT[row-4],ROWS_PIN[row-4],&value);
    2a2c:	fc 80       	ldd	r15, Y+4	; 0x04
    2a2e:	0c 85       	ldd	r16, Y+12	; 0x0c
    2a30:	8f 2d       	mov	r24, r15
    2a32:	60 2f       	mov	r22, r16
    2a34:	a6 01       	movw	r20, r12
    2a36:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <MCAL_DIO_u8GetPinValue>
    2a3a:	18 2b       	or	r17, r24
					if(value == PIN_LOW)
    2a3c:	89 81       	ldd	r24, Y+1	; 0x01
    2a3e:	88 23       	and	r24, r24
    2a40:	09 f4       	brne	.+2      	; 0x2a44 <HAL_KEYPAD_u8_KaypadButton+0x118>
    2a42:	59 c0       	rjmp	.+178    	; 0x2af6 <HAL_KEYPAD_u8_KaypadButton+0x1ca>
				r = 4;
				Loc_u8_Retval |= MCAL_DIO_u8SetPinValue(COLUMS_PORT[column],COLUMS_PIN[column],PIN_LOW);
				for(row = 4; row <= 7; row++)
				{
					r--;
					Loc_u8_Retval |= MCAL_DIO_u8GetPinValue(ROWS_PORT[row-4],ROWS_PIN[row-4],&value);
    2a44:	82 e0       	ldi	r24, 0x02	; 2
    2a46:	67 e0       	ldi	r22, 0x07	; 7
    2a48:	a6 01       	movw	r20, r12
    2a4a:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <MCAL_DIO_u8GetPinValue>
    2a4e:	18 2b       	or	r17, r24
					if(value == PIN_LOW)
    2a50:	89 81       	ldd	r24, Y+1	; 0x01
    2a52:	88 23       	and	r24, r24
    2a54:	09 f4       	brne	.+2      	; 0x2a58 <HAL_KEYPAD_u8_KaypadButton+0x12c>
    2a56:	52 c0       	rjmp	.+164    	; 0x2afc <HAL_KEYPAD_u8_KaypadButton+0x1d0>
				if(flag == 1)
				{
					break;
				}
				c--;
				Loc_u8_Retval |= MCAL_DIO_u8SetPinValue(COLUMS_PORT[column],COLUMS_PIN[column],PIN_HIGH);
    2a58:	88 2d       	mov	r24, r8
    2a5a:	69 2d       	mov	r22, r9
    2a5c:	41 e0       	ldi	r20, 0x01	; 1
    2a5e:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
    2a62:	18 2b       	or	r17, r24
    2a64:	08 94       	sec
    2a66:	a1 1c       	adc	r10, r1
    2a68:	b1 1c       	adc	r11, r1
	{
		while(1)
		{
			APP_FAN_void_AppFanReadWithoutWrite();
			c = 3;
			for(column =0; column <= 3; column++)
    2a6a:	ee 20       	and	r14, r14
    2a6c:	11 f0       	breq	.+4      	; 0x2a72 <HAL_KEYPAD_u8_KaypadButton+0x146>
				}
				if(flag == 1)
				{
					break;
				}
				c--;
    2a6e:	ea 94       	dec	r14
    2a70:	b5 cf       	rjmp	.-150    	; 0x29dc <HAL_KEYPAD_u8_KaypadButton+0xb0>
    2a72:	08 94       	sec
    2a74:	61 08       	sbc	r6, r1
    2a76:	71 08       	sbc	r7, r1
			if(flag == 1)
			{
				break;
			}
			Loc_u16_Counter++;
			if(Loc_u16_Counter == 0)
    2a78:	61 14       	cp	r6, r1
    2a7a:	71 04       	cpc	r7, r1
    2a7c:	09 f0       	breq	.+2      	; 0x2a80 <HAL_KEYPAD_u8_KaypadButton+0x154>
    2a7e:	a8 cf       	rjmp	.-176    	; 0x29d0 <HAL_KEYPAD_u8_KaypadButton+0xa4>
			{
				*Ploc_u8_ButtuonValue = 0;
    2a80:	eb a1       	ldd	r30, Y+35	; 0x23
    2a82:	fc a1       	ldd	r31, Y+36	; 0x24
    2a84:	10 82       	st	Z, r1
	else
	{
		//Do Nothing
	}
	return Loc_u8_Retval;
}
    2a86:	81 2f       	mov	r24, r17
    2a88:	a4 96       	adiw	r28, 0x24	; 36
    2a8a:	0f b6       	in	r0, 0x3f	; 63
    2a8c:	f8 94       	cli
    2a8e:	de bf       	out	0x3e, r29	; 62
    2a90:	0f be       	out	0x3f, r0	; 63
    2a92:	cd bf       	out	0x3d, r28	; 61
    2a94:	cf 91       	pop	r28
    2a96:	df 91       	pop	r29
    2a98:	1f 91       	pop	r17
    2a9a:	0f 91       	pop	r16
    2a9c:	ff 90       	pop	r15
    2a9e:	ef 90       	pop	r14
    2aa0:	df 90       	pop	r13
    2aa2:	cf 90       	pop	r12
    2aa4:	bf 90       	pop	r11
    2aa6:	af 90       	pop	r10
    2aa8:	9f 90       	pop	r9
    2aaa:	8f 90       	pop	r8
    2aac:	7f 90       	pop	r7
    2aae:	6f 90       	pop	r6
    2ab0:	5f 90       	pop	r5
    2ab2:	4f 90       	pop	r4
    2ab4:	3f 90       	pop	r3
    2ab6:	2f 90       	pop	r2
    2ab8:	08 95       	ret
				Loc_u8_Retval |= MCAL_DIO_u8SetPinValue(COLUMS_PORT[column],COLUMS_PIN[column],PIN_LOW);
				for(row = 4; row <= 7; row++)
				{
					r--;
					Loc_u8_Retval |= MCAL_DIO_u8GetPinValue(ROWS_PORT[row-4],ROWS_PIN[row-4],&value);
					if(value == PIN_LOW)
    2aba:	73 e0       	ldi	r23, 0x03	; 3
    2abc:	b7 2e       	mov	r11, r23
					{
						flag = 1;
						while(value == PIN_LOW)
						{
							Loc_u8_Retval |= MCAL_DIO_u8GetPinValue(ROWS_PORT[row-4],ROWS_PIN[row-4],&value);
    2abe:	8f 2d       	mov	r24, r15
    2ac0:	60 2f       	mov	r22, r16
    2ac2:	a6 01       	movw	r20, r12
    2ac4:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <MCAL_DIO_u8GetPinValue>
    2ac8:	18 2b       	or	r17, r24
					r--;
					Loc_u8_Retval |= MCAL_DIO_u8GetPinValue(ROWS_PORT[row-4],ROWS_PIN[row-4],&value);
					if(value == PIN_LOW)
					{
						flag = 1;
						while(value == PIN_LOW)
    2aca:	89 81       	ldd	r24, Y+1	; 0x01
    2acc:	88 23       	and	r24, r24
    2ace:	b9 f3       	breq	.-18     	; 0x2abe <HAL_KEYPAD_u8_KaypadButton+0x192>
						{
							Loc_u8_Retval |= MCAL_DIO_u8GetPinValue(ROWS_PORT[row-4],ROWS_PIN[row-4],&value);
						}
						*Ploc_u8_ButtuonValue = ch[r][c];
    2ad0:	8b 2d       	mov	r24, r11
    2ad2:	90 e0       	ldi	r25, 0x00	; 0
    2ad4:	88 0f       	add	r24, r24
    2ad6:	99 1f       	adc	r25, r25
    2ad8:	88 0f       	add	r24, r24
    2ada:	99 1f       	adc	r25, r25
    2adc:	c8 0e       	add	r12, r24
    2ade:	d9 1e       	adc	r13, r25
    2ae0:	ce 0c       	add	r12, r14
    2ae2:	d1 1c       	adc	r13, r1
    2ae4:	f6 01       	movw	r30, r12
    2ae6:	81 89       	ldd	r24, Z+17	; 0x11
    2ae8:	eb a1       	ldd	r30, Y+35	; 0x23
    2aea:	fc a1       	ldd	r31, Y+36	; 0x24
    2aec:	80 83       	st	Z, r24
    2aee:	cb cf       	rjmp	.-106    	; 0x2a86 <HAL_KEYPAD_u8_KaypadButton+0x15a>
				Loc_u8_Retval |= MCAL_DIO_u8SetPinValue(COLUMS_PORT[column],COLUMS_PIN[column],PIN_LOW);
				for(row = 4; row <= 7; row++)
				{
					r--;
					Loc_u8_Retval |= MCAL_DIO_u8GetPinValue(ROWS_PORT[row-4],ROWS_PIN[row-4],&value);
					if(value == PIN_LOW)
    2af0:	62 e0       	ldi	r22, 0x02	; 2
    2af2:	b6 2e       	mov	r11, r22
    2af4:	e4 cf       	rjmp	.-56     	; 0x2abe <HAL_KEYPAD_u8_KaypadButton+0x192>
    2af6:	bb 24       	eor	r11, r11
    2af8:	b3 94       	inc	r11
    2afa:	e1 cf       	rjmp	.-62     	; 0x2abe <HAL_KEYPAD_u8_KaypadButton+0x192>
    2afc:	bb 24       	eor	r11, r11
    2afe:	52 e0       	ldi	r21, 0x02	; 2
    2b00:	f5 2e       	mov	r15, r21
    2b02:	07 e0       	ldi	r16, 0x07	; 7
    2b04:	dc cf       	rjmp	.-72     	; 0x2abe <HAL_KEYPAD_u8_KaypadButton+0x192>
	u8 column = 0;
	u8 r = 0;
	u8 c = 0;
	u8 flag = 0;
	u8 value = 0;
	if(Ploc_u8_ButtuonValue != NULL)
    2b06:	11 e0       	ldi	r17, 0x01	; 1
    2b08:	be cf       	rjmp	.-132    	; 0x2a86 <HAL_KEYPAD_u8_KaypadButton+0x15a>

00002b0a <HAL_KEYPAD_u8_KaypadInit>:
 * INPUT Arg   : No Args
 * RETURN      : Execution Status (OK OR NOT_OK)
 * **********************************************************************
 **/
STD_TYPE HAL_KEYPAD_u8_KaypadInit(void)
{
    2b0a:	3f 92       	push	r3
    2b0c:	4f 92       	push	r4
    2b0e:	5f 92       	push	r5
    2b10:	6f 92       	push	r6
    2b12:	7f 92       	push	r7
    2b14:	8f 92       	push	r8
    2b16:	9f 92       	push	r9
    2b18:	af 92       	push	r10
    2b1a:	bf 92       	push	r11
    2b1c:	cf 92       	push	r12
    2b1e:	df 92       	push	r13
    2b20:	ef 92       	push	r14
    2b22:	ff 92       	push	r15
    2b24:	0f 93       	push	r16
    2b26:	1f 93       	push	r17
	u8 Loc_u8_Retval = E_NOT_OK;
	Loc_u8_Retval  = MCAL_DIO_u8SetPinDirection(KEYPAD_R0_PORT,KEYPAD_R0_PIN,PIN_INPUT);
    2b28:	82 e0       	ldi	r24, 0x02	; 2
    2b2a:	67 e0       	ldi	r22, 0x07	; 7
    2b2c:	40 e0       	ldi	r20, 0x00	; 0
    2b2e:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <MCAL_DIO_u8SetPinDirection>
    2b32:	38 2e       	mov	r3, r24
	Loc_u8_Retval |= MCAL_DIO_u8SetPinDirection(KEYPAD_R1_PORT,KEYPAD_R1_PIN,PIN_INPUT);
    2b34:	80 e0       	ldi	r24, 0x00	; 0
    2b36:	61 e0       	ldi	r22, 0x01	; 1
    2b38:	40 e0       	ldi	r20, 0x00	; 0
    2b3a:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <MCAL_DIO_u8SetPinDirection>
    2b3e:	18 2f       	mov	r17, r24
	Loc_u8_Retval |= MCAL_DIO_u8SetPinDirection(KEYPAD_R2_PORT,KEYPAD_R2_PIN,PIN_INPUT);
    2b40:	80 e0       	ldi	r24, 0x00	; 0
    2b42:	62 e0       	ldi	r22, 0x02	; 2
    2b44:	40 e0       	ldi	r20, 0x00	; 0
    2b46:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <MCAL_DIO_u8SetPinDirection>
    2b4a:	48 2e       	mov	r4, r24
	Loc_u8_Retval |= MCAL_DIO_u8SetPinDirection(KEYPAD_R3_PORT,KEYPAD_R3_PIN,PIN_INPUT);
    2b4c:	82 e0       	ldi	r24, 0x02	; 2
    2b4e:	62 e0       	ldi	r22, 0x02	; 2
    2b50:	40 e0       	ldi	r20, 0x00	; 0
    2b52:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <MCAL_DIO_u8SetPinDirection>
    2b56:	58 2e       	mov	r5, r24
	Loc_u8_Retval |= MCAL_DIO_u8SetPinDirection(KEYPAD_C0_PORT,KEYPAD_C0_PIN,PIN_OUTPUT);
    2b58:	82 e0       	ldi	r24, 0x02	; 2
    2b5a:	65 e0       	ldi	r22, 0x05	; 5
    2b5c:	41 e0       	ldi	r20, 0x01	; 1
    2b5e:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <MCAL_DIO_u8SetPinDirection>
    2b62:	68 2e       	mov	r6, r24
	Loc_u8_Retval |= MCAL_DIO_u8SetPinDirection(KEYPAD_C1_PORT,KEYPAD_C1_PIN,PIN_OUTPUT);
    2b64:	82 e0       	ldi	r24, 0x02	; 2
    2b66:	66 e0       	ldi	r22, 0x06	; 6
    2b68:	41 e0       	ldi	r20, 0x01	; 1
    2b6a:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <MCAL_DIO_u8SetPinDirection>
    2b6e:	78 2e       	mov	r7, r24
	Loc_u8_Retval |= MCAL_DIO_u8SetPinDirection(KEYPAD_C2_PORT,KEYPAD_C2_PIN,PIN_OUTPUT);
    2b70:	83 e0       	ldi	r24, 0x03	; 3
    2b72:	60 e0       	ldi	r22, 0x00	; 0
    2b74:	41 e0       	ldi	r20, 0x01	; 1
    2b76:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <MCAL_DIO_u8SetPinDirection>
    2b7a:	88 2e       	mov	r8, r24
	Loc_u8_Retval |= MCAL_DIO_u8SetPinDirection(KEYPAD_C3_PORT,KEYPAD_C3_PIN,PIN_OUTPUT);
    2b7c:	83 e0       	ldi	r24, 0x03	; 3
    2b7e:	61 e0       	ldi	r22, 0x01	; 1
    2b80:	41 e0       	ldi	r20, 0x01	; 1
    2b82:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <MCAL_DIO_u8SetPinDirection>
    2b86:	98 2e       	mov	r9, r24
	Loc_u8_Retval |= MCAL_DIO_u8SetPinValue(KEYPAD_R0_PORT,KEYPAD_R0_PIN,PIN_HIGH);
    2b88:	82 e0       	ldi	r24, 0x02	; 2
    2b8a:	67 e0       	ldi	r22, 0x07	; 7
    2b8c:	41 e0       	ldi	r20, 0x01	; 1
    2b8e:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
    2b92:	a8 2e       	mov	r10, r24
	Loc_u8_Retval |= MCAL_DIO_u8SetPinValue(KEYPAD_R1_PORT,KEYPAD_R1_PIN,PIN_HIGH);
    2b94:	80 e0       	ldi	r24, 0x00	; 0
    2b96:	61 e0       	ldi	r22, 0x01	; 1
    2b98:	41 e0       	ldi	r20, 0x01	; 1
    2b9a:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
    2b9e:	b8 2e       	mov	r11, r24
	Loc_u8_Retval |= MCAL_DIO_u8SetPinValue(KEYPAD_R2_PORT,KEYPAD_R2_PIN,PIN_HIGH);
    2ba0:	80 e0       	ldi	r24, 0x00	; 0
    2ba2:	62 e0       	ldi	r22, 0x02	; 2
    2ba4:	41 e0       	ldi	r20, 0x01	; 1
    2ba6:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
    2baa:	c8 2e       	mov	r12, r24
	Loc_u8_Retval |= MCAL_DIO_u8SetPinValue(KEYPAD_R3_PORT,KEYPAD_R3_PIN,PIN_HIGH);
    2bac:	82 e0       	ldi	r24, 0x02	; 2
    2bae:	62 e0       	ldi	r22, 0x02	; 2
    2bb0:	41 e0       	ldi	r20, 0x01	; 1
    2bb2:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
    2bb6:	d8 2e       	mov	r13, r24
	Loc_u8_Retval |= MCAL_DIO_u8SetPinValue(KEYPAD_C0_PORT,KEYPAD_C0_PIN,PIN_HIGH);
    2bb8:	82 e0       	ldi	r24, 0x02	; 2
    2bba:	65 e0       	ldi	r22, 0x05	; 5
    2bbc:	41 e0       	ldi	r20, 0x01	; 1
    2bbe:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
    2bc2:	e8 2e       	mov	r14, r24
	Loc_u8_Retval |= MCAL_DIO_u8SetPinValue(KEYPAD_C1_PORT,KEYPAD_C1_PIN,PIN_HIGH);
    2bc4:	82 e0       	ldi	r24, 0x02	; 2
    2bc6:	66 e0       	ldi	r22, 0x06	; 6
    2bc8:	41 e0       	ldi	r20, 0x01	; 1
    2bca:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
    2bce:	f8 2e       	mov	r15, r24
	Loc_u8_Retval |= MCAL_DIO_u8SetPinValue(KEYPAD_C2_PORT,KEYPAD_C2_PIN,PIN_HIGH);
    2bd0:	83 e0       	ldi	r24, 0x03	; 3
    2bd2:	60 e0       	ldi	r22, 0x00	; 0
    2bd4:	41 e0       	ldi	r20, 0x01	; 1
    2bd6:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
    2bda:	08 2f       	mov	r16, r24
	Loc_u8_Retval |= MCAL_DIO_u8SetPinValue(KEYPAD_C3_PORT,KEYPAD_C3_PIN,PIN_HIGH);
    2bdc:	83 e0       	ldi	r24, 0x03	; 3
    2bde:	61 e0       	ldi	r22, 0x01	; 1
    2be0:	41 e0       	ldi	r20, 0x01	; 1
    2be2:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
 **/
STD_TYPE HAL_KEYPAD_u8_KaypadInit(void)
{
	u8 Loc_u8_Retval = E_NOT_OK;
	Loc_u8_Retval  = MCAL_DIO_u8SetPinDirection(KEYPAD_R0_PORT,KEYPAD_R0_PIN,PIN_INPUT);
	Loc_u8_Retval |= MCAL_DIO_u8SetPinDirection(KEYPAD_R1_PORT,KEYPAD_R1_PIN,PIN_INPUT);
    2be6:	13 29       	or	r17, r3
	Loc_u8_Retval |= MCAL_DIO_u8SetPinDirection(KEYPAD_R2_PORT,KEYPAD_R2_PIN,PIN_INPUT);
    2be8:	14 29       	or	r17, r4
	Loc_u8_Retval |= MCAL_DIO_u8SetPinDirection(KEYPAD_R3_PORT,KEYPAD_R3_PIN,PIN_INPUT);
    2bea:	15 29       	or	r17, r5
	Loc_u8_Retval |= MCAL_DIO_u8SetPinDirection(KEYPAD_C0_PORT,KEYPAD_C0_PIN,PIN_OUTPUT);
    2bec:	16 29       	or	r17, r6
	Loc_u8_Retval |= MCAL_DIO_u8SetPinDirection(KEYPAD_C1_PORT,KEYPAD_C1_PIN,PIN_OUTPUT);
    2bee:	17 29       	or	r17, r7
	Loc_u8_Retval |= MCAL_DIO_u8SetPinDirection(KEYPAD_C2_PORT,KEYPAD_C2_PIN,PIN_OUTPUT);
    2bf0:	18 29       	or	r17, r8
	Loc_u8_Retval |= MCAL_DIO_u8SetPinDirection(KEYPAD_C3_PORT,KEYPAD_C3_PIN,PIN_OUTPUT);
    2bf2:	19 29       	or	r17, r9
	Loc_u8_Retval |= MCAL_DIO_u8SetPinValue(KEYPAD_R0_PORT,KEYPAD_R0_PIN,PIN_HIGH);
    2bf4:	1a 29       	or	r17, r10
	Loc_u8_Retval |= MCAL_DIO_u8SetPinValue(KEYPAD_R1_PORT,KEYPAD_R1_PIN,PIN_HIGH);
    2bf6:	1b 29       	or	r17, r11
	Loc_u8_Retval |= MCAL_DIO_u8SetPinValue(KEYPAD_R2_PORT,KEYPAD_R2_PIN,PIN_HIGH);
    2bf8:	1c 29       	or	r17, r12
	Loc_u8_Retval |= MCAL_DIO_u8SetPinValue(KEYPAD_R3_PORT,KEYPAD_R3_PIN,PIN_HIGH);
    2bfa:	1d 29       	or	r17, r13
	Loc_u8_Retval |= MCAL_DIO_u8SetPinValue(KEYPAD_C0_PORT,KEYPAD_C0_PIN,PIN_HIGH);
    2bfc:	1e 29       	or	r17, r14
	Loc_u8_Retval |= MCAL_DIO_u8SetPinValue(KEYPAD_C1_PORT,KEYPAD_C1_PIN,PIN_HIGH);
    2bfe:	1f 29       	or	r17, r15
	Loc_u8_Retval |= MCAL_DIO_u8SetPinValue(KEYPAD_C2_PORT,KEYPAD_C2_PIN,PIN_HIGH);
    2c00:	10 2b       	or	r17, r16
	Loc_u8_Retval |= MCAL_DIO_u8SetPinValue(KEYPAD_C3_PORT,KEYPAD_C3_PIN,PIN_HIGH);
	return Loc_u8_Retval;
}
    2c02:	81 2b       	or	r24, r17
    2c04:	1f 91       	pop	r17
    2c06:	0f 91       	pop	r16
    2c08:	ff 90       	pop	r15
    2c0a:	ef 90       	pop	r14
    2c0c:	df 90       	pop	r13
    2c0e:	cf 90       	pop	r12
    2c10:	bf 90       	pop	r11
    2c12:	af 90       	pop	r10
    2c14:	9f 90       	pop	r9
    2c16:	8f 90       	pop	r8
    2c18:	7f 90       	pop	r7
    2c1a:	6f 90       	pop	r6
    2c1c:	5f 90       	pop	r5
    2c1e:	4f 90       	pop	r4
    2c20:	3f 90       	pop	r3
    2c22:	08 95       	ret

00002c24 <HAL_EEPROM_voidReadData>:
	_delay_ms(10);
}


void HAL_EEPROM_voidReadData(u16 LOC_u16Location,u8* LOC_Pu8Data)
{
    2c24:	0f 93       	push	r16
    2c26:	1f 93       	push	r17
    2c28:	cf 93       	push	r28
    2c2a:	df 93       	push	r29
    2c2c:	9c 01       	movw	r18, r24
    2c2e:	eb 01       	movw	r28, r22
	u8 LOC_u8FixedAddress = 0b01010000,LOC_u8Location;
	if (LOC_u16Location <=255 )
    2c30:	8f 3f       	cpi	r24, 0xFF	; 255
    2c32:	91 05       	cpc	r25, r1
    2c34:	89 f1       	breq	.+98     	; 0x2c98 <HAL_EEPROM_voidReadData+0x74>
    2c36:	80 f1       	brcs	.+96     	; 0x2c98 <HAL_EEPROM_voidReadData+0x74>
	{
		LOC_u8FixedAddress = 0b01010000;
		LOC_u8Location =  (u8) LOC_u16Location;
	}
	else if ((LOC_u16Location >= 256) && (LOC_u16Location <= 511))
    2c38:	80 50       	subi	r24, 0x00	; 0
    2c3a:	91 40       	sbci	r25, 0x01	; 1
    2c3c:	8f 3f       	cpi	r24, 0xFF	; 255
    2c3e:	91 05       	cpc	r25, r1
    2c40:	91 f0       	breq	.+36     	; 0x2c66 <HAL_EEPROM_voidReadData+0x42>
    2c42:	88 f0       	brcs	.+34     	; 0x2c66 <HAL_EEPROM_voidReadData+0x42>
	{
		LOC_u8FixedAddress = 0b01010001;
		LOC_u8Location =  (u8) (LOC_u16Location - 256);
	}
	else if ((LOC_u16Location >= 512) && (LOC_u16Location <= 767))
    2c44:	c9 01       	movw	r24, r18
    2c46:	80 50       	subi	r24, 0x00	; 0
    2c48:	92 40       	sbci	r25, 0x02	; 2
    2c4a:	8f 3f       	cpi	r24, 0xFF	; 255
    2c4c:	91 05       	cpc	r25, r1
    2c4e:	39 f1       	breq	.+78     	; 0x2c9e <HAL_EEPROM_voidReadData+0x7a>
    2c50:	30 f1       	brcs	.+76     	; 0x2c9e <HAL_EEPROM_voidReadData+0x7a>
	{
		LOC_u8FixedAddress = 0b01010010;
		LOC_u8Location =  (u8) (LOC_u16Location - 512);
	}
	else if ((LOC_u16Location >= 768) && (LOC_u16Location <= 1023))
    2c52:	c9 01       	movw	r24, r18
    2c54:	80 50       	subi	r24, 0x00	; 0
    2c56:	93 40       	sbci	r25, 0x03	; 3
    2c58:	8f 3f       	cpi	r24, 0xFF	; 255
    2c5a:	91 05       	cpc	r25, r1
    2c5c:	09 f0       	breq	.+2      	; 0x2c60 <HAL_EEPROM_voidReadData+0x3c>
    2c5e:	10 f5       	brcc	.+68     	; 0x2ca4 <HAL_EEPROM_voidReadData+0x80>
	{
		LOC_u8FixedAddress = 0b01010100;
		LOC_u8Location =  (u8) (LOC_u16Location - 768);
    2c60:	02 2f       	mov	r16, r18
    2c62:	14 e5       	ldi	r17, 0x54	; 84
    2c64:	02 c0       	rjmp	.+4      	; 0x2c6a <HAL_EEPROM_voidReadData+0x46>
		LOC_u8Location =  (u8) LOC_u16Location;
	}
	else if ((LOC_u16Location >= 256) && (LOC_u16Location <= 511))
	{
		LOC_u8FixedAddress = 0b01010001;
		LOC_u8Location =  (u8) (LOC_u16Location - 256);
    2c66:	02 2f       	mov	r16, r18
    2c68:	11 e5       	ldi	r17, 0x51	; 81
		LOC_u8FixedAddress = 0b01010100;
		LOC_u8Location =  (u8) (LOC_u16Location - 768);
	}
	else {/*Do Nothing*/}

	MCAL_TWI_voidStartCondition();
    2c6a:	0e 94 03 07 	call	0xe06	; 0xe06 <MCAL_TWI_voidStartCondition>
	MCAL_TWI_voidSendSlaveAddressWithWrite(LOC_u8FixedAddress);
    2c6e:	81 2f       	mov	r24, r17
    2c70:	0e 94 21 07 	call	0xe42	; 0xe42 <MCAL_TWI_voidSendSlaveAddressWithWrite>
	MCAL_TWI_voidMasterSendData(LOC_u8Location);
    2c74:	80 2f       	mov	r24, r16
    2c76:	0e 94 48 07 	call	0xe90	; 0xe90 <MCAL_TWI_voidMasterSendData>
	MCAL_TWI_voidRepeatedStartCondition();
    2c7a:	0e 94 0d 07 	call	0xe1a	; 0xe1a <MCAL_TWI_voidRepeatedStartCondition>
	MCAL_TWI_voidSendSlaveAddressWithRead(LOC_u8FixedAddress);
    2c7e:	81 2f       	mov	r24, r17
    2c80:	0e 94 2e 07 	call	0xe5c	; 0xe5c <MCAL_TWI_voidSendSlaveAddressWithRead>
	MCAL_TWI_voidMasterReceiveDataNACK(LOC_Pu8Data);
    2c84:	ce 01       	movw	r24, r28
    2c86:	0e 94 54 07 	call	0xea8	; 0xea8 <MCAL_TWI_voidMasterReceiveDataNACK>
	MCAL_TWI_voidStopCondition();
    2c8a:	0e 94 17 07 	call	0xe2e	; 0xe2e <MCAL_TWI_voidStopCondition>

}
    2c8e:	df 91       	pop	r29
    2c90:	cf 91       	pop	r28
    2c92:	1f 91       	pop	r17
    2c94:	0f 91       	pop	r16
    2c96:	08 95       	ret
{
	u8 LOC_u8FixedAddress = 0b01010000,LOC_u8Location;
	if (LOC_u16Location <=255 )
	{
		LOC_u8FixedAddress = 0b01010000;
		LOC_u8Location =  (u8) LOC_u16Location;
    2c98:	08 2f       	mov	r16, r24
    2c9a:	10 e5       	ldi	r17, 0x50	; 80
    2c9c:	e6 cf       	rjmp	.-52     	; 0x2c6a <HAL_EEPROM_voidReadData+0x46>
		LOC_u8Location =  (u8) (LOC_u16Location - 256);
	}
	else if ((LOC_u16Location >= 512) && (LOC_u16Location <= 767))
	{
		LOC_u8FixedAddress = 0b01010010;
		LOC_u8Location =  (u8) (LOC_u16Location - 512);
    2c9e:	02 2f       	mov	r16, r18
    2ca0:	12 e5       	ldi	r17, 0x52	; 82
    2ca2:	e3 cf       	rjmp	.-58     	; 0x2c6a <HAL_EEPROM_voidReadData+0x46>
	}
	else if ((LOC_u16Location >= 768) && (LOC_u16Location <= 1023))
    2ca4:	10 e5       	ldi	r17, 0x50	; 80
    2ca6:	e1 cf       	rjmp	.-62     	; 0x2c6a <HAL_EEPROM_voidReadData+0x46>

00002ca8 <HAL_EEPROM_voidWriteData>:
 *      Author: Abdulrahman Ayman
 */
#include"EEPROM.h"

void HAL_EEPROM_voidWriteData(u16 LOC_u16Location,u8 LOC_u8Data)
{
    2ca8:	ff 92       	push	r15
    2caa:	0f 93       	push	r16
    2cac:	1f 93       	push	r17
    2cae:	9c 01       	movw	r18, r24
    2cb0:	f6 2e       	mov	r15, r22
	u8 LOC_u8FixedAddress = 0b01010000,LOC_u8Location;
	if (LOC_u16Location <=255 )
    2cb2:	8f 3f       	cpi	r24, 0xFF	; 255
    2cb4:	91 05       	cpc	r25, r1
    2cb6:	79 f1       	breq	.+94     	; 0x2d16 <HAL_EEPROM_voidWriteData+0x6e>
    2cb8:	70 f1       	brcs	.+92     	; 0x2d16 <HAL_EEPROM_voidWriteData+0x6e>
	{
		LOC_u8FixedAddress = 0b01010000;
		LOC_u8Location =  (u8) LOC_u16Location;
	}
	else if ((LOC_u16Location >= 256) && (LOC_u16Location <= 511))
    2cba:	80 50       	subi	r24, 0x00	; 0
    2cbc:	91 40       	sbci	r25, 0x01	; 1
    2cbe:	8f 3f       	cpi	r24, 0xFF	; 255
    2cc0:	91 05       	cpc	r25, r1
    2cc2:	91 f0       	breq	.+36     	; 0x2ce8 <HAL_EEPROM_voidWriteData+0x40>
    2cc4:	88 f0       	brcs	.+34     	; 0x2ce8 <HAL_EEPROM_voidWriteData+0x40>
	{
		LOC_u8FixedAddress = 0b01010001;
		LOC_u8Location =  (u8) (LOC_u16Location - 256);
	}
	else if ((LOC_u16Location >= 512) && (LOC_u16Location <= 767))
    2cc6:	c9 01       	movw	r24, r18
    2cc8:	80 50       	subi	r24, 0x00	; 0
    2cca:	92 40       	sbci	r25, 0x02	; 2
    2ccc:	8f 3f       	cpi	r24, 0xFF	; 255
    2cce:	91 05       	cpc	r25, r1
    2cd0:	29 f1       	breq	.+74     	; 0x2d1c <HAL_EEPROM_voidWriteData+0x74>
    2cd2:	20 f1       	brcs	.+72     	; 0x2d1c <HAL_EEPROM_voidWriteData+0x74>
	{
		LOC_u8FixedAddress = 0b01010010;
		LOC_u8Location =  (u8) (LOC_u16Location - 512);
	}
	else if ((LOC_u16Location >= 768) && (LOC_u16Location <= 1023))
    2cd4:	c9 01       	movw	r24, r18
    2cd6:	80 50       	subi	r24, 0x00	; 0
    2cd8:	93 40       	sbci	r25, 0x03	; 3
    2cda:	8f 3f       	cpi	r24, 0xFF	; 255
    2cdc:	91 05       	cpc	r25, r1
    2cde:	09 f0       	breq	.+2      	; 0x2ce2 <HAL_EEPROM_voidWriteData+0x3a>
    2ce0:	00 f5       	brcc	.+64     	; 0x2d22 <HAL_EEPROM_voidWriteData+0x7a>
	{
		LOC_u8FixedAddress = 0b01010100;
		LOC_u8Location =  (u8) (LOC_u16Location - 768);
    2ce2:	02 2f       	mov	r16, r18
    2ce4:	14 e5       	ldi	r17, 0x54	; 84
    2ce6:	02 c0       	rjmp	.+4      	; 0x2cec <HAL_EEPROM_voidWriteData+0x44>
		LOC_u8Location =  (u8) LOC_u16Location;
	}
	else if ((LOC_u16Location >= 256) && (LOC_u16Location <= 511))
	{
		LOC_u8FixedAddress = 0b01010001;
		LOC_u8Location =  (u8) (LOC_u16Location - 256);
    2ce8:	02 2f       	mov	r16, r18
    2cea:	11 e5       	ldi	r17, 0x51	; 81
		LOC_u8FixedAddress = 0b01010100;
		LOC_u8Location =  (u8) (LOC_u16Location - 768);
	}
	else {/*Do Nothing*/}

	MCAL_TWI_voidStartCondition();
    2cec:	0e 94 03 07 	call	0xe06	; 0xe06 <MCAL_TWI_voidStartCondition>
	MCAL_TWI_voidSendSlaveAddressWithWrite(LOC_u8FixedAddress);
    2cf0:	81 2f       	mov	r24, r17
    2cf2:	0e 94 21 07 	call	0xe42	; 0xe42 <MCAL_TWI_voidSendSlaveAddressWithWrite>
	MCAL_TWI_voidMasterSendData(LOC_u8Location);
    2cf6:	80 2f       	mov	r24, r16
    2cf8:	0e 94 48 07 	call	0xe90	; 0xe90 <MCAL_TWI_voidMasterSendData>
	MCAL_TWI_voidMasterSendData(LOC_u8Data);
    2cfc:	8f 2d       	mov	r24, r15
    2cfe:	0e 94 48 07 	call	0xe90	; 0xe90 <MCAL_TWI_voidMasterSendData>
	MCAL_TWI_voidStopCondition();
    2d02:	0e 94 17 07 	call	0xe2e	; 0xe2e <MCAL_TWI_voidStopCondition>
    2d06:	80 e2       	ldi	r24, 0x20	; 32
    2d08:	9e e4       	ldi	r25, 0x4E	; 78
    2d0a:	01 97       	sbiw	r24, 0x01	; 1
    2d0c:	f1 f7       	brne	.-4      	; 0x2d0a <HAL_EEPROM_voidWriteData+0x62>
	_delay_ms(10);
}
    2d0e:	1f 91       	pop	r17
    2d10:	0f 91       	pop	r16
    2d12:	ff 90       	pop	r15
    2d14:	08 95       	ret
{
	u8 LOC_u8FixedAddress = 0b01010000,LOC_u8Location;
	if (LOC_u16Location <=255 )
	{
		LOC_u8FixedAddress = 0b01010000;
		LOC_u8Location =  (u8) LOC_u16Location;
    2d16:	08 2f       	mov	r16, r24
    2d18:	10 e5       	ldi	r17, 0x50	; 80
    2d1a:	e8 cf       	rjmp	.-48     	; 0x2cec <HAL_EEPROM_voidWriteData+0x44>
		LOC_u8Location =  (u8) (LOC_u16Location - 256);
	}
	else if ((LOC_u16Location >= 512) && (LOC_u16Location <= 767))
	{
		LOC_u8FixedAddress = 0b01010010;
		LOC_u8Location =  (u8) (LOC_u16Location - 512);
    2d1c:	02 2f       	mov	r16, r18
    2d1e:	12 e5       	ldi	r17, 0x52	; 82
    2d20:	e5 cf       	rjmp	.-54     	; 0x2cec <HAL_EEPROM_voidWriteData+0x44>
	}
	else if ((LOC_u16Location >= 768) && (LOC_u16Location <= 1023))
    2d22:	10 e5       	ldi	r17, 0x50	; 80
    2d24:	e3 cf       	rjmp	.-58     	; 0x2cec <HAL_EEPROM_voidWriteData+0x44>

00002d26 <HAL_DCMOTOR_void_DcMotorStop>:
	MCAL_DIO_u8SetPinValue(PortC,Pin3,Pin_LOW);
	MCAL_DIO_u8SetPinValue(PortC,Pin4,Pin_HIGH);
}
void HAL_DCMOTOR_void_DcMotorStop(void)
{
	MCAL_DIO_u8SetPinValue(PortC,Pin3,Pin_LOW);
    2d26:	82 e0       	ldi	r24, 0x02	; 2
    2d28:	63 e0       	ldi	r22, 0x03	; 3
    2d2a:	40 e0       	ldi	r20, 0x00	; 0
    2d2c:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPinValue(PortC,Pin4,Pin_LOW);
    2d30:	82 e0       	ldi	r24, 0x02	; 2
    2d32:	64 e0       	ldi	r22, 0x04	; 4
    2d34:	40 e0       	ldi	r20, 0x00	; 0
    2d36:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
}
    2d3a:	08 95       	ret

00002d3c <HAL_DCMOTOR_void_DcMotorAntiClockWise>:
	MCAL_DIO_u8SetPinValue(PortC,Pin3,Pin_HIGH);
	MCAL_DIO_u8SetPinValue(PortC,Pin4,Pin_LOW);
}
void HAL_DCMOTOR_void_DcMotorAntiClockWise(u8 Loc_u8_Speed)
{
	MCAL_Timer_Timer1_voidSetOCR1BValue(Loc_u8_Speed);
    2d3c:	90 e0       	ldi	r25, 0x00	; 0
    2d3e:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <MCAL_Timer_Timer1_voidSetOCR1BValue>
	MCAL_DIO_u8SetPinValue(PortC,Pin3,Pin_LOW);
    2d42:	82 e0       	ldi	r24, 0x02	; 2
    2d44:	63 e0       	ldi	r22, 0x03	; 3
    2d46:	40 e0       	ldi	r20, 0x00	; 0
    2d48:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPinValue(PortC,Pin4,Pin_HIGH);
    2d4c:	82 e0       	ldi	r24, 0x02	; 2
    2d4e:	64 e0       	ldi	r22, 0x04	; 4
    2d50:	41 e0       	ldi	r20, 0x01	; 1
    2d52:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
}
    2d56:	08 95       	ret

00002d58 <HAL_DCMOTOR_void_DcMotorClockWise>:
	MCAL_DIO_u8SetPinDirection(PortC,Pin3,Pin_Output);
	MCAL_DIO_u8SetPinDirection(PortC,Pin4,Pin_Output);
}
void HAL_DCMOTOR_void_DcMotorClockWise(u8 Loc_u8_Speed)
{
	MCAL_Timer_Timer1_voidSetOCR1BValue(Loc_u8_Speed);
    2d58:	90 e0       	ldi	r25, 0x00	; 0
    2d5a:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <MCAL_Timer_Timer1_voidSetOCR1BValue>
	MCAL_DIO_u8SetPinValue(PortC,Pin3,Pin_HIGH);
    2d5e:	82 e0       	ldi	r24, 0x02	; 2
    2d60:	63 e0       	ldi	r22, 0x03	; 3
    2d62:	41 e0       	ldi	r20, 0x01	; 1
    2d64:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
	MCAL_DIO_u8SetPinValue(PortC,Pin4,Pin_LOW);
    2d68:	82 e0       	ldi	r24, 0x02	; 2
    2d6a:	64 e0       	ldi	r22, 0x04	; 4
    2d6c:	40 e0       	ldi	r20, 0x00	; 0
    2d6e:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
}
    2d72:	08 95       	ret

00002d74 <HAL_DCMOTOR_void_DcMotorInit>:
#include "DC_MOTOR_interface.h"
#include "../../MCAL/TIMER/Timer1_interfacing.h"

void HAL_DCMOTOR_void_DcMotorInit(void)
{
	MCAL_DIO_u8SetPinDirection(PortC,Pin3,Pin_Output);
    2d74:	82 e0       	ldi	r24, 0x02	; 2
    2d76:	63 e0       	ldi	r22, 0x03	; 3
    2d78:	41 e0       	ldi	r20, 0x01	; 1
    2d7a:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <MCAL_DIO_u8SetPinDirection>
	MCAL_DIO_u8SetPinDirection(PortC,Pin4,Pin_Output);
    2d7e:	82 e0       	ldi	r24, 0x02	; 2
    2d80:	64 e0       	ldi	r22, 0x04	; 4
    2d82:	41 e0       	ldi	r20, 0x01	; 1
    2d84:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <MCAL_DIO_u8SetPinDirection>
}
    2d88:	08 95       	ret

00002d8a <HAL_Buzzer_u8BuzzerMode>:

//BuzzerMode
STD_TYPE HAL_Buzzer_u8BuzzerMode(u8 LOC_u8BuzzerPortID, u8 LOC_u8BuzzerPinID, u8 LOC_u8BuzzerMode)
{
	u8 LOC_u8Return_Value = E_NOT_OK;
	if( (LOC_u8BuzzerPortID <= PortD) && (LOC_u8BuzzerPinID <= Pin7) && (LOC_u8BuzzerMode <= Buzzer_TOG))
    2d8a:	84 30       	cpi	r24, 0x04	; 4
    2d8c:	50 f4       	brcc	.+20     	; 0x2da2 <HAL_Buzzer_u8BuzzerMode+0x18>
    2d8e:	68 30       	cpi	r22, 0x08	; 8
    2d90:	40 f4       	brcc	.+16     	; 0x2da2 <HAL_Buzzer_u8BuzzerMode+0x18>
    2d92:	43 30       	cpi	r20, 0x03	; 3
    2d94:	30 f4       	brcc	.+12     	; 0x2da2 <HAL_Buzzer_u8BuzzerMode+0x18>
	{
		if (LOC_u8BuzzerMode == Buzzer_ON)
    2d96:	41 30       	cpi	r20, 0x01	; 1
    2d98:	31 f0       	breq	.+12     	; 0x2da6 <HAL_Buzzer_u8BuzzerMode+0x1c>
		{
			LOC_u8Return_Value = MCAL_DIO_u8SetPinValue(LOC_u8BuzzerPortID, LOC_u8BuzzerPinID, Buzzer_ON);
		}
		else if (LOC_u8BuzzerMode == Buzzer_OFF)
    2d9a:	44 23       	and	r20, r20
    2d9c:	21 f0       	breq	.+8      	; 0x2da6 <HAL_Buzzer_u8BuzzerMode+0x1c>
		{
			LOC_u8Return_Value = MCAL_DIO_u8SetPinValue(LOC_u8BuzzerPortID, LOC_u8BuzzerPinID, Buzzer_OFF);
		}
		else if (LOC_u8BuzzerMode == Buzzer_TOG)
    2d9e:	42 30       	cpi	r20, 0x02	; 2
    2da0:	29 f0       	breq	.+10     	; 0x2dac <HAL_Buzzer_u8BuzzerMode+0x22>
		{
			LOC_u8Return_Value = MCAL_DIO_u8TogglePinValue(LOC_u8BuzzerPortID, LOC_u8BuzzerPinID);
    2da2:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		//Do Nothing.
	}
	return LOC_u8Return_Value;
}
    2da4:	08 95       	ret
		{
			LOC_u8Return_Value = MCAL_DIO_u8SetPinValue(LOC_u8BuzzerPortID, LOC_u8BuzzerPinID, Buzzer_ON);
		}
		else if (LOC_u8BuzzerMode == Buzzer_OFF)
		{
			LOC_u8Return_Value = MCAL_DIO_u8SetPinValue(LOC_u8BuzzerPortID, LOC_u8BuzzerPinID, Buzzer_OFF);
    2da6:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
    2daa:	08 95       	ret
		}
		else if (LOC_u8BuzzerMode == Buzzer_TOG)
		{
			LOC_u8Return_Value = MCAL_DIO_u8TogglePinValue(LOC_u8BuzzerPortID, LOC_u8BuzzerPinID);
    2dac:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <MCAL_DIO_u8TogglePinValue>
    2db0:	08 95       	ret

00002db2 <HAL_Buzzer_u8BuzzerInit>:

//BuzzerInit
STD_TYPE HAL_Buzzer_u8BuzzerInit(u8 LOC_u8BuzzerPortID, u8 LOC_u8BuzzerPinID)
{
	u8 LOC_u8Return_Value = E_NOT_OK;
	if( (LOC_u8BuzzerPortID <= PortD) && (LOC_u8BuzzerPinID <= Pin7) )
    2db2:	84 30       	cpi	r24, 0x04	; 4
    2db4:	10 f4       	brcc	.+4      	; 0x2dba <HAL_Buzzer_u8BuzzerInit+0x8>
    2db6:	68 30       	cpi	r22, 0x08	; 8
    2db8:	10 f0       	brcs	.+4      	; 0x2dbe <HAL_Buzzer_u8BuzzerInit+0xc>
	{
		LOC_u8Return_Value = MCAL_DIO_u8SetPinDirection(LOC_u8BuzzerPortID,LOC_u8BuzzerPinID,Pin_Output);
    2dba:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		//Do Nothing.
	}
	return LOC_u8Return_Value;
}
    2dbc:	08 95       	ret
STD_TYPE HAL_Buzzer_u8BuzzerInit(u8 LOC_u8BuzzerPortID, u8 LOC_u8BuzzerPinID)
{
	u8 LOC_u8Return_Value = E_NOT_OK;
	if( (LOC_u8BuzzerPortID <= PortD) && (LOC_u8BuzzerPinID <= Pin7) )
	{
		LOC_u8Return_Value = MCAL_DIO_u8SetPinDirection(LOC_u8BuzzerPortID,LOC_u8BuzzerPinID,Pin_Output);
    2dbe:	41 e0       	ldi	r20, 0x01	; 1
    2dc0:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <MCAL_DIO_u8SetPinDirection>
    2dc4:	08 95       	ret

00002dc6 <INT0_APP_CALLBACK>:
	MCAL_SPI_MASTER_SLAVE_u8_SetMasterSalve_Prescaler_SpiMasterSlaveInit(SPI_MASTER,SPI_PRESCALER_128);
}

void INT0_APP_CALLBACK(void)
{
	MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_LOW);
    2dc6:	81 e0       	ldi	r24, 0x01	; 1
    2dc8:	64 e0       	ldi	r22, 0x04	; 4
    2dca:	40 e0       	ldi	r20, 0x00	; 0
    2dcc:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
	G_u8_Receive = MCAL_SPI_MASTER_u8_SpiMaster_Transceive('x');
    2dd0:	88 e7       	ldi	r24, 0x78	; 120
    2dd2:	0e 94 1d 0b 	call	0x163a	; 0x163a <MCAL_SPI_MASTER_u8_SpiMaster_Transceive>
    2dd6:	80 93 5a 03 	sts	0x035A, r24
	MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_HIGH);
    2dda:	81 e0       	ldi	r24, 0x01	; 1
    2ddc:	64 e0       	ldi	r22, 0x04	; 4
    2dde:	41 e0       	ldi	r20, 0x01	; 1
    2de0:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
    2de4:	20 e0       	ldi	r18, 0x00	; 0
    2de6:	30 e0       	ldi	r19, 0x00	; 0
    2de8:	48 ec       	ldi	r20, 0xC8	; 200
    2dea:	50 e0       	ldi	r21, 0x00	; 0
    2dec:	ca 01       	movw	r24, r20
    2dee:	01 97       	sbiw	r24, 0x01	; 1
    2df0:	f1 f7       	brne	.-4      	; 0x2dee <INT0_APP_CALLBACK+0x28>
    2df2:	2f 5f       	subi	r18, 0xFF	; 255
    2df4:	3f 4f       	sbci	r19, 0xFF	; 255
    2df6:	81 e0       	ldi	r24, 0x01	; 1
    2df8:	24 3f       	cpi	r18, 0xF4	; 244
    2dfa:	38 07       	cpc	r19, r24
    2dfc:	b9 f7       	brne	.-18     	; 0x2dec <INT0_APP_CALLBACK+0x26>
	_delay_ms(50);
	if(G_u8_Receive == '1')
    2dfe:	80 91 5a 03 	lds	r24, 0x035A
    2e02:	81 33       	cpi	r24, 0x31	; 49
    2e04:	09 f4       	brne	.+2      	; 0x2e08 <INT0_APP_CALLBACK+0x42>
    2e06:	68 c0       	rjmp	.+208    	; 0x2ed8 <INT0_APP_CALLBACK+0x112>
			HAL_LED_u8LedMode(LED1_Port,LED1_Pin,LED_TOG);
			TOGGLE_BIT(G_DeviceOneFlag,PIN0);
		}
		G_RunningDevicesIndicator = 1;
	}
	else if(G_u8_Receive == '2')
    2e08:	80 91 5a 03 	lds	r24, 0x035A
    2e0c:	82 33       	cpi	r24, 0x32	; 50
    2e0e:	09 f4       	brne	.+2      	; 0x2e12 <INT0_APP_CALLBACK+0x4c>
    2e10:	8d c0       	rjmp	.+282    	; 0x2f2c <INT0_APP_CALLBACK+0x166>
			HAL_LED_u8LedMode(LED2_Port,LED2_Pin,LED_TOG);
			TOGGLE_BIT(G_DeviceTwoFlag,PIN0);
		}
		G_RunningDevicesIndicator = 1;
	}
	else if(G_u8_Receive == '3')
    2e12:	80 91 5a 03 	lds	r24, 0x035A
    2e16:	83 33       	cpi	r24, 0x33	; 51
    2e18:	09 f4       	brne	.+2      	; 0x2e1c <INT0_APP_CALLBACK+0x56>
    2e1a:	b2 c0       	rjmp	.+356    	; 0x2f80 <INT0_APP_CALLBACK+0x1ba>
			HAL_LED_u8LedMode(LED3_Port,LED3_Pin,LED_TOG);
			TOGGLE_BIT(G_DeviceThreeFlag,PIN0);
		}
		G_RunningDevicesIndicator = 1;
	}
	else if(G_u8_Receive == '4')
    2e1c:	80 91 5a 03 	lds	r24, 0x035A
    2e20:	84 33       	cpi	r24, 0x34	; 52
    2e22:	79 f0       	breq	.+30     	; 0x2e42 <INT0_APP_CALLBACK+0x7c>
			HAL_LED_u8LedMode(LED4_Port,LED4_Pin,LED_TOG);
			TOGGLE_BIT(G_DeviceFourFlag,PIN0);
		}
		G_RunningDevicesIndicator = 1;
	}
	else if(G_u8_Receive == '5')
    2e24:	80 91 5a 03 	lds	r24, 0x035A
    2e28:	85 33       	cpi	r24, 0x35	; 53
    2e2a:	09 f4       	brne	.+2      	; 0x2e2e <INT0_APP_CALLBACK+0x68>
    2e2c:	d3 c0       	rjmp	.+422    	; 0x2fd4 <INT0_APP_CALLBACK+0x20e>
			HAL_LED_u8LedMode(LED5_Port,LED5_Pin,LED_TOG);
			TOGGLE_BIT(G_DeviceFiveFlag,PIN0);
		}
		G_RunningDevicesIndicator = 1;
	}
	else if(G_u8_Receive == 'B')
    2e2e:	80 91 5a 03 	lds	r24, 0x035A
    2e32:	82 34       	cpi	r24, 0x42	; 66
    2e34:	09 f4       	brne	.+2      	; 0x2e38 <INT0_APP_CALLBACK+0x72>
    2e36:	f8 c0       	rjmp	.+496    	; 0x3028 <INT0_APP_CALLBACK+0x262>
		{
			HAL_LED_u8LedMode(LED5_Port,LED5_Pin,LED_TOG);
			TOGGLE_BIT(G_DeviceFiveFlag,PIN0);
		}
	}
	else if(G_u8_Receive == 'F')
    2e38:	80 91 5a 03 	lds	r24, 0x035A
    2e3c:	86 34       	cpi	r24, 0x46	; 70
    2e3e:	19 f1       	breq	.+70     	; 0x2e86 <INT0_APP_CALLBACK+0xc0>
    2e40:	08 95       	ret
		}
		G_RunningDevicesIndicator = 1;
	}
	else if(G_u8_Receive == '4')
	{
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_LOW);
    2e42:	81 e0       	ldi	r24, 0x01	; 1
    2e44:	64 e0       	ldi	r22, 0x04	; 4
    2e46:	40 e0       	ldi	r20, 0x00	; 0
    2e48:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
		G_u8_Receive = MCAL_SPI_MASTER_u8_SpiMaster_Transceive('x');
    2e4c:	88 e7       	ldi	r24, 0x78	; 120
    2e4e:	0e 94 1d 0b 	call	0x163a	; 0x163a <MCAL_SPI_MASTER_u8_SpiMaster_Transceive>
    2e52:	80 93 5a 03 	sts	0x035A, r24
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_HIGH);
    2e56:	81 e0       	ldi	r24, 0x01	; 1
    2e58:	64 e0       	ldi	r22, 0x04	; 4
    2e5a:	41 e0       	ldi	r20, 0x01	; 1
    2e5c:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
		if(G_u8_Receive == 'N')
    2e60:	80 91 5a 03 	lds	r24, 0x035A
    2e64:	8e 34       	cpi	r24, 0x4E	; 78
    2e66:	09 f4       	brne	.+2      	; 0x2e6a <INT0_APP_CALLBACK+0xa4>
    2e68:	1a c1       	rjmp	.+564    	; 0x309e <INT0_APP_CALLBACK+0x2d8>
		{
			HAL_LED_u8LedMode(LED4_Port,LED4_Pin,LED_ON);
			G_DeviceFourFlag = 1;
		}
		else if(G_u8_Receive == 'F')
    2e6a:	80 91 5a 03 	lds	r24, 0x035A
    2e6e:	86 34       	cpi	r24, 0x46	; 70
    2e70:	09 f4       	brne	.+2      	; 0x2e74 <INT0_APP_CALLBACK+0xae>
    2e72:	60 c1       	rjmp	.+704    	; 0x3134 <INT0_APP_CALLBACK+0x36e>
		{
			HAL_LED_u8LedMode(LED4_Port,LED4_Pin,LED_OFF);
			G_DeviceFourFlag = 0;
		}
		else if(G_u8_Receive == 'T')
    2e74:	80 91 5a 03 	lds	r24, 0x035A
    2e78:	84 35       	cpi	r24, 0x54	; 84
    2e7a:	09 f4       	brne	.+2      	; 0x2e7e <INT0_APP_CALLBACK+0xb8>
    2e7c:	4f c1       	rjmp	.+670    	; 0x311c <INT0_APP_CALLBACK+0x356>
		else if(G_u8_Receive == 'T')
		{
			HAL_LED_u8LedMode(LED5_Port,LED5_Pin,LED_TOG);
			TOGGLE_BIT(G_DeviceFiveFlag,PIN0);
		}
		G_RunningDevicesIndicator = 1;
    2e7e:	81 e0       	ldi	r24, 0x01	; 1
    2e80:	80 93 59 03 	sts	0x0359, r24
    2e84:	08 95       	ret
			TOGGLE_BIT(G_DeviceFiveFlag,PIN0);
		}
	}
	else if(G_u8_Receive == 'F')
	{
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_LOW);
    2e86:	81 e0       	ldi	r24, 0x01	; 1
    2e88:	64 e0       	ldi	r22, 0x04	; 4
    2e8a:	40 e0       	ldi	r20, 0x00	; 0
    2e8c:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
		G_u8_Receive = MCAL_SPI_MASTER_u8_SpiMaster_Transceive('x');
    2e90:	88 e7       	ldi	r24, 0x78	; 120
    2e92:	0e 94 1d 0b 	call	0x163a	; 0x163a <MCAL_SPI_MASTER_u8_SpiMaster_Transceive>
    2e96:	80 93 5a 03 	sts	0x035A, r24
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_HIGH);
    2e9a:	81 e0       	ldi	r24, 0x01	; 1
    2e9c:	64 e0       	ldi	r22, 0x04	; 4
    2e9e:	41 e0       	ldi	r20, 0x01	; 1
    2ea0:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
		if(G_u8_Receive == 'N')
    2ea4:	80 91 5a 03 	lds	r24, 0x035A
    2ea8:	8e 34       	cpi	r24, 0x4E	; 78
    2eaa:	09 f4       	brne	.+2      	; 0x2eae <INT0_APP_CALLBACK+0xe8>
    2eac:	4b c1       	rjmp	.+662    	; 0x3144 <INT0_APP_CALLBACK+0x37e>
		{
			HAL_DCMOTOR_void_DcMotorClockWise(motor_speed);
			G_FanFlag = 1;
			G_FanFlagOff = 1;
		}
		else if(G_u8_Receive == 'F')
    2eae:	80 91 5a 03 	lds	r24, 0x035A
    2eb2:	86 34       	cpi	r24, 0x46	; 70
    2eb4:	09 f4       	brne	.+2      	; 0x2eb8 <INT0_APP_CALLBACK+0xf2>
    2eb6:	e2 c0       	rjmp	.+452    	; 0x307c <INT0_APP_CALLBACK+0x2b6>
		{
			HAL_DCMOTOR_void_DcMotorStop();
			G_FanFlag = 0;
			G_FanFlagOn = 1;
		}
		else if(G_u8_Receive == 'T')
    2eb8:	80 91 5a 03 	lds	r24, 0x035A
    2ebc:	84 35       	cpi	r24, 0x54	; 84
    2ebe:	09 f4       	brne	.+2      	; 0x2ec2 <INT0_APP_CALLBACK+0xfc>
    2ec0:	52 c1       	rjmp	.+676    	; 0x3166 <INT0_APP_CALLBACK+0x3a0>
		{
			G_FanFlagOn = 0;
			G_FanFlagOff = 0;
			G_FanControlFlag =0;
		}
		else if(G_u8_Receive == 'M')
    2ec2:	80 91 5a 03 	lds	r24, 0x035A
    2ec6:	8d 34       	cpi	r24, 0x4D	; 77
    2ec8:	19 f4       	brne	.+6      	; 0x2ed0 <INT0_APP_CALLBACK+0x10a>
		{
			/*G_FanFlagOn = 0;
			G_FanFlagOff = 0;*/
		G_FanControlFlag =1;
    2eca:	81 e0       	ldi	r24, 0x01	; 1
    2ecc:	80 93 5d 03 	sts	0x035D, r24
		}
		G_RunningDevicesIndicator = 1;
    2ed0:	81 e0       	ldi	r24, 0x01	; 1
    2ed2:	80 93 59 03 	sts	0x0359, r24
    2ed6:	08 95       	ret
	G_u8_Receive = MCAL_SPI_MASTER_u8_SpiMaster_Transceive('x');
	MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_HIGH);
	_delay_ms(50);
	if(G_u8_Receive == '1')
	{
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_LOW);
    2ed8:	81 e0       	ldi	r24, 0x01	; 1
    2eda:	64 e0       	ldi	r22, 0x04	; 4
    2edc:	40 e0       	ldi	r20, 0x00	; 0
    2ede:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
		G_u8_Receive = MCAL_SPI_MASTER_u8_SpiMaster_Transceive('x');
    2ee2:	88 e7       	ldi	r24, 0x78	; 120
    2ee4:	0e 94 1d 0b 	call	0x163a	; 0x163a <MCAL_SPI_MASTER_u8_SpiMaster_Transceive>
    2ee8:	80 93 5a 03 	sts	0x035A, r24
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_HIGH);
    2eec:	81 e0       	ldi	r24, 0x01	; 1
    2eee:	64 e0       	ldi	r22, 0x04	; 4
    2ef0:	41 e0       	ldi	r20, 0x01	; 1
    2ef2:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
		if(G_u8_Receive == 'N')
    2ef6:	80 91 5a 03 	lds	r24, 0x035A
    2efa:	8e 34       	cpi	r24, 0x4E	; 78
    2efc:	09 f4       	brne	.+2      	; 0x2f00 <INT0_APP_CALLBACK+0x13a>
    2efe:	c6 c0       	rjmp	.+396    	; 0x308c <INT0_APP_CALLBACK+0x2c6>
		{
			HAL_LED_u8LedMode(LED1_Port,LED1_Pin,LED_ON);
			G_DeviceOneFlag = 1;
		}
		else if(G_u8_Receive == 'F')
    2f00:	80 91 5a 03 	lds	r24, 0x035A
    2f04:	86 34       	cpi	r24, 0x46	; 70
    2f06:	09 f4       	brne	.+2      	; 0x2f0a <INT0_APP_CALLBACK+0x144>
    2f08:	d3 c0       	rjmp	.+422    	; 0x30b0 <INT0_APP_CALLBACK+0x2ea>
		{
			HAL_LED_u8LedMode(LED1_Port,LED1_Pin,LED_OFF);
			G_DeviceOneFlag = 0;
		}
		else if(G_u8_Receive == 'T')
    2f0a:	80 91 5a 03 	lds	r24, 0x035A
    2f0e:	84 35       	cpi	r24, 0x54	; 84
    2f10:	09 f0       	breq	.+2      	; 0x2f14 <INT0_APP_CALLBACK+0x14e>
    2f12:	b5 cf       	rjmp	.-150    	; 0x2e7e <INT0_APP_CALLBACK+0xb8>
		{
			HAL_LED_u8LedMode(LED1_Port,LED1_Pin,LED_TOG);
    2f14:	80 e0       	ldi	r24, 0x00	; 0
    2f16:	63 e0       	ldi	r22, 0x03	; 3
    2f18:	42 e0       	ldi	r20, 0x02	; 2
    2f1a:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <HAL_LED_u8LedMode>
			TOGGLE_BIT(G_DeviceOneFlag,PIN0);
    2f1e:	80 91 65 03 	lds	r24, 0x0365
    2f22:	91 e0       	ldi	r25, 0x01	; 1
    2f24:	89 27       	eor	r24, r25
    2f26:	80 93 65 03 	sts	0x0365, r24
    2f2a:	a9 cf       	rjmp	.-174    	; 0x2e7e <INT0_APP_CALLBACK+0xb8>
		}
		G_RunningDevicesIndicator = 1;
	}
	else if(G_u8_Receive == '2')
	{
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_LOW);
    2f2c:	81 e0       	ldi	r24, 0x01	; 1
    2f2e:	64 e0       	ldi	r22, 0x04	; 4
    2f30:	40 e0       	ldi	r20, 0x00	; 0
    2f32:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
		G_u8_Receive = MCAL_SPI_MASTER_u8_SpiMaster_Transceive('x');
    2f36:	88 e7       	ldi	r24, 0x78	; 120
    2f38:	0e 94 1d 0b 	call	0x163a	; 0x163a <MCAL_SPI_MASTER_u8_SpiMaster_Transceive>
    2f3c:	80 93 5a 03 	sts	0x035A, r24
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_HIGH);
    2f40:	81 e0       	ldi	r24, 0x01	; 1
    2f42:	64 e0       	ldi	r22, 0x04	; 4
    2f44:	41 e0       	ldi	r20, 0x01	; 1
    2f46:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
		if(G_u8_Receive == 'N')
    2f4a:	80 91 5a 03 	lds	r24, 0x035A
    2f4e:	8e 34       	cpi	r24, 0x4E	; 78
    2f50:	09 f4       	brne	.+2      	; 0x2f54 <INT0_APP_CALLBACK+0x18e>
    2f52:	be c0       	rjmp	.+380    	; 0x30d0 <INT0_APP_CALLBACK+0x30a>
		{
			HAL_LED_u8LedMode(LED2_Port,LED2_Pin,LED_ON);
			G_DeviceTwoFlag = 1;
		}
		else if(G_u8_Receive == 'F')
    2f54:	80 91 5a 03 	lds	r24, 0x035A
    2f58:	86 34       	cpi	r24, 0x46	; 70
    2f5a:	09 f4       	brne	.+2      	; 0x2f5e <INT0_APP_CALLBACK+0x198>
    2f5c:	b1 c0       	rjmp	.+354    	; 0x30c0 <INT0_APP_CALLBACK+0x2fa>
		{
			HAL_LED_u8LedMode(LED2_Port,LED2_Pin,LED_OFF);
			G_DeviceTwoFlag = 0;
		}
		else if(G_u8_Receive == 'T')
    2f5e:	80 91 5a 03 	lds	r24, 0x035A
    2f62:	84 35       	cpi	r24, 0x54	; 84
    2f64:	09 f0       	breq	.+2      	; 0x2f68 <INT0_APP_CALLBACK+0x1a2>
    2f66:	8b cf       	rjmp	.-234    	; 0x2e7e <INT0_APP_CALLBACK+0xb8>
		{
			HAL_LED_u8LedMode(LED2_Port,LED2_Pin,LED_TOG);
    2f68:	80 e0       	ldi	r24, 0x00	; 0
    2f6a:	64 e0       	ldi	r22, 0x04	; 4
    2f6c:	42 e0       	ldi	r20, 0x02	; 2
    2f6e:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <HAL_LED_u8LedMode>
			TOGGLE_BIT(G_DeviceTwoFlag,PIN0);
    2f72:	80 91 61 03 	lds	r24, 0x0361
    2f76:	91 e0       	ldi	r25, 0x01	; 1
    2f78:	89 27       	eor	r24, r25
    2f7a:	80 93 61 03 	sts	0x0361, r24
    2f7e:	7f cf       	rjmp	.-258    	; 0x2e7e <INT0_APP_CALLBACK+0xb8>
		}
		G_RunningDevicesIndicator = 1;
	}
	else if(G_u8_Receive == '3')
	{
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_LOW);
    2f80:	81 e0       	ldi	r24, 0x01	; 1
    2f82:	64 e0       	ldi	r22, 0x04	; 4
    2f84:	40 e0       	ldi	r20, 0x00	; 0
    2f86:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
		G_u8_Receive = MCAL_SPI_MASTER_u8_SpiMaster_Transceive('x');
    2f8a:	88 e7       	ldi	r24, 0x78	; 120
    2f8c:	0e 94 1d 0b 	call	0x163a	; 0x163a <MCAL_SPI_MASTER_u8_SpiMaster_Transceive>
    2f90:	80 93 5a 03 	sts	0x035A, r24
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_HIGH);
    2f94:	81 e0       	ldi	r24, 0x01	; 1
    2f96:	64 e0       	ldi	r22, 0x04	; 4
    2f98:	41 e0       	ldi	r20, 0x01	; 1
    2f9a:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
		if(G_u8_Receive == 'N')
    2f9e:	80 91 5a 03 	lds	r24, 0x035A
    2fa2:	8e 34       	cpi	r24, 0x4E	; 78
    2fa4:	09 f4       	brne	.+2      	; 0x2fa8 <INT0_APP_CALLBACK+0x1e2>
    2fa6:	a5 c0       	rjmp	.+330    	; 0x30f2 <INT0_APP_CALLBACK+0x32c>
		{
			HAL_LED_u8LedMode(LED3_Port,LED3_Pin,LED_ON);
			G_DeviceThreeFlag = 1;
		}
		else if(G_u8_Receive == 'F')
    2fa8:	80 91 5a 03 	lds	r24, 0x035A
    2fac:	86 34       	cpi	r24, 0x46	; 70
    2fae:	09 f4       	brne	.+2      	; 0x2fb2 <INT0_APP_CALLBACK+0x1ec>
    2fb0:	98 c0       	rjmp	.+304    	; 0x30e2 <INT0_APP_CALLBACK+0x31c>
		{
			HAL_LED_u8LedMode(LED3_Port,LED3_Pin,LED_OFF);
			G_DeviceThreeFlag = 0;
		}
		else if(G_u8_Receive == 'T')
    2fb2:	80 91 5a 03 	lds	r24, 0x035A
    2fb6:	84 35       	cpi	r24, 0x54	; 84
    2fb8:	09 f0       	breq	.+2      	; 0x2fbc <INT0_APP_CALLBACK+0x1f6>
    2fba:	61 cf       	rjmp	.-318    	; 0x2e7e <INT0_APP_CALLBACK+0xb8>
		{
			HAL_LED_u8LedMode(LED3_Port,LED3_Pin,LED_TOG);
    2fbc:	80 e0       	ldi	r24, 0x00	; 0
    2fbe:	65 e0       	ldi	r22, 0x05	; 5
    2fc0:	42 e0       	ldi	r20, 0x02	; 2
    2fc2:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <HAL_LED_u8LedMode>
			TOGGLE_BIT(G_DeviceThreeFlag,PIN0);
    2fc6:	80 91 5f 03 	lds	r24, 0x035F
    2fca:	91 e0       	ldi	r25, 0x01	; 1
    2fcc:	89 27       	eor	r24, r25
    2fce:	80 93 5f 03 	sts	0x035F, r24
    2fd2:	55 cf       	rjmp	.-342    	; 0x2e7e <INT0_APP_CALLBACK+0xb8>
		}
		G_RunningDevicesIndicator = 1;
	}
	else if(G_u8_Receive == '5')
	{
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_LOW);
    2fd4:	81 e0       	ldi	r24, 0x01	; 1
    2fd6:	64 e0       	ldi	r22, 0x04	; 4
    2fd8:	40 e0       	ldi	r20, 0x00	; 0
    2fda:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
		G_u8_Receive = MCAL_SPI_MASTER_u8_SpiMaster_Transceive('x');
    2fde:	88 e7       	ldi	r24, 0x78	; 120
    2fe0:	0e 94 1d 0b 	call	0x163a	; 0x163a <MCAL_SPI_MASTER_u8_SpiMaster_Transceive>
    2fe4:	80 93 5a 03 	sts	0x035A, r24
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_HIGH);
    2fe8:	81 e0       	ldi	r24, 0x01	; 1
    2fea:	64 e0       	ldi	r22, 0x04	; 4
    2fec:	41 e0       	ldi	r20, 0x01	; 1
    2fee:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
		if(G_u8_Receive == 'N')
    2ff2:	80 91 5a 03 	lds	r24, 0x035A
    2ff6:	8e 34       	cpi	r24, 0x4E	; 78
    2ff8:	09 f4       	brne	.+2      	; 0x2ffc <INT0_APP_CALLBACK+0x236>
    2ffa:	bc c0       	rjmp	.+376    	; 0x3174 <INT0_APP_CALLBACK+0x3ae>
		{
			HAL_LED_u8LedMode(LED5_Port,LED5_Pin,LED_ON);
			G_DeviceFiveFlag = 1;
		}
		else if(G_u8_Receive == 'F')
    2ffc:	80 91 5a 03 	lds	r24, 0x035A
    3000:	86 34       	cpi	r24, 0x46	; 70
    3002:	09 f4       	brne	.+2      	; 0x3006 <INT0_APP_CALLBACK+0x240>
    3004:	a8 c0       	rjmp	.+336    	; 0x3156 <INT0_APP_CALLBACK+0x390>
		{
			HAL_LED_u8LedMode(LED5_Port,LED5_Pin,LED_OFF);
			G_DeviceFiveFlag = 0;
		}
		else if(G_u8_Receive == 'T')
    3006:	80 91 5a 03 	lds	r24, 0x035A
    300a:	84 35       	cpi	r24, 0x54	; 84
    300c:	09 f0       	breq	.+2      	; 0x3010 <INT0_APP_CALLBACK+0x24a>
    300e:	37 cf       	rjmp	.-402    	; 0x2e7e <INT0_APP_CALLBACK+0xb8>
		{
			HAL_LED_u8LedMode(LED5_Port,LED5_Pin,LED_TOG);
    3010:	80 e0       	ldi	r24, 0x00	; 0
    3012:	67 e0       	ldi	r22, 0x07	; 7
    3014:	42 e0       	ldi	r20, 0x02	; 2
    3016:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <HAL_LED_u8LedMode>
			TOGGLE_BIT(G_DeviceFiveFlag,PIN0);
    301a:	80 91 5e 03 	lds	r24, 0x035E
    301e:	91 e0       	ldi	r25, 0x01	; 1
    3020:	89 27       	eor	r24, r25
    3022:	80 93 5e 03 	sts	0x035E, r24
    3026:	2b cf       	rjmp	.-426    	; 0x2e7e <INT0_APP_CALLBACK+0xb8>
		}
		G_RunningDevicesIndicator = 1;
	}
	else if(G_u8_Receive == 'B')
	{
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_LOW);
    3028:	81 e0       	ldi	r24, 0x01	; 1
    302a:	64 e0       	ldi	r22, 0x04	; 4
    302c:	40 e0       	ldi	r20, 0x00	; 0
    302e:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
		G_u8_Receive = MCAL_SPI_MASTER_u8_SpiMaster_Transceive('x');
    3032:	88 e7       	ldi	r24, 0x78	; 120
    3034:	0e 94 1d 0b 	call	0x163a	; 0x163a <MCAL_SPI_MASTER_u8_SpiMaster_Transceive>
    3038:	80 93 5a 03 	sts	0x035A, r24
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_HIGH);
    303c:	81 e0       	ldi	r24, 0x01	; 1
    303e:	64 e0       	ldi	r22, 0x04	; 4
    3040:	41 e0       	ldi	r20, 0x01	; 1
    3042:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
		if(G_u8_Receive == 'N')
    3046:	80 91 5a 03 	lds	r24, 0x035A
    304a:	8e 34       	cpi	r24, 0x4E	; 78
    304c:	09 f4       	brne	.+2      	; 0x3050 <INT0_APP_CALLBACK+0x28a>
    304e:	60 c0       	rjmp	.+192    	; 0x3110 <INT0_APP_CALLBACK+0x34a>
		{
			HAL_Buzzer_u8BuzzerMode(Buzzer_Port,Buzzer_Pin,Buzzer_ON);
		}
		else if(G_u8_Receive == 'F')
    3050:	80 91 5a 03 	lds	r24, 0x035A
    3054:	86 34       	cpi	r24, 0x46	; 70
    3056:	09 f4       	brne	.+2      	; 0x305a <INT0_APP_CALLBACK+0x294>
    3058:	55 c0       	rjmp	.+170    	; 0x3104 <INT0_APP_CALLBACK+0x33e>
		{
			HAL_Buzzer_u8BuzzerMode(Buzzer_Port,Buzzer_Pin,Buzzer_OFF);
		}
		else if(G_u8_Receive == 'T')
    305a:	80 91 5a 03 	lds	r24, 0x035A
    305e:	84 35       	cpi	r24, 0x54	; 84
    3060:	09 f0       	breq	.+2      	; 0x3064 <INT0_APP_CALLBACK+0x29e>
    3062:	ee ce       	rjmp	.-548    	; 0x2e40 <INT0_APP_CALLBACK+0x7a>
		{
			HAL_LED_u8LedMode(LED5_Port,LED5_Pin,LED_TOG);
    3064:	80 e0       	ldi	r24, 0x00	; 0
    3066:	67 e0       	ldi	r22, 0x07	; 7
    3068:	42 e0       	ldi	r20, 0x02	; 2
    306a:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <HAL_LED_u8LedMode>
			TOGGLE_BIT(G_DeviceFiveFlag,PIN0);
    306e:	80 91 5e 03 	lds	r24, 0x035E
    3072:	91 e0       	ldi	r25, 0x01	; 1
    3074:	89 27       	eor	r24, r25
    3076:	80 93 5e 03 	sts	0x035E, r24
    307a:	08 95       	ret
			G_FanFlag = 1;
			G_FanFlagOff = 1;
		}
		else if(G_u8_Receive == 'F')
		{
			HAL_DCMOTOR_void_DcMotorStop();
    307c:	0e 94 93 16 	call	0x2d26	; 0x2d26 <HAL_DCMOTOR_void_DcMotorStop>
			G_FanFlag = 0;
    3080:	10 92 63 03 	sts	0x0363, r1
			G_FanFlagOn = 1;
    3084:	81 e0       	ldi	r24, 0x01	; 1
    3086:	80 93 66 03 	sts	0x0366, r24
    308a:	22 cf       	rjmp	.-444    	; 0x2ed0 <INT0_APP_CALLBACK+0x10a>
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_LOW);
		G_u8_Receive = MCAL_SPI_MASTER_u8_SpiMaster_Transceive('x');
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_HIGH);
		if(G_u8_Receive == 'N')
		{
			HAL_LED_u8LedMode(LED1_Port,LED1_Pin,LED_ON);
    308c:	80 e0       	ldi	r24, 0x00	; 0
    308e:	63 e0       	ldi	r22, 0x03	; 3
    3090:	41 e0       	ldi	r20, 0x01	; 1
    3092:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <HAL_LED_u8LedMode>
			G_DeviceOneFlag = 1;
    3096:	81 e0       	ldi	r24, 0x01	; 1
    3098:	80 93 65 03 	sts	0x0365, r24
    309c:	f0 ce       	rjmp	.-544    	; 0x2e7e <INT0_APP_CALLBACK+0xb8>
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_LOW);
		G_u8_Receive = MCAL_SPI_MASTER_u8_SpiMaster_Transceive('x');
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_HIGH);
		if(G_u8_Receive == 'N')
		{
			HAL_LED_u8LedMode(LED4_Port,LED4_Pin,LED_ON);
    309e:	80 e0       	ldi	r24, 0x00	; 0
    30a0:	66 e0       	ldi	r22, 0x06	; 6
    30a2:	41 e0       	ldi	r20, 0x01	; 1
    30a4:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <HAL_LED_u8LedMode>
			G_DeviceFourFlag = 1;
    30a8:	81 e0       	ldi	r24, 0x01	; 1
    30aa:	80 93 68 03 	sts	0x0368, r24
    30ae:	e7 ce       	rjmp	.-562    	; 0x2e7e <INT0_APP_CALLBACK+0xb8>
			HAL_LED_u8LedMode(LED1_Port,LED1_Pin,LED_ON);
			G_DeviceOneFlag = 1;
		}
		else if(G_u8_Receive == 'F')
		{
			HAL_LED_u8LedMode(LED1_Port,LED1_Pin,LED_OFF);
    30b0:	80 e0       	ldi	r24, 0x00	; 0
    30b2:	63 e0       	ldi	r22, 0x03	; 3
    30b4:	40 e0       	ldi	r20, 0x00	; 0
    30b6:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <HAL_LED_u8LedMode>
			G_DeviceOneFlag = 0;
    30ba:	10 92 65 03 	sts	0x0365, r1
    30be:	df ce       	rjmp	.-578    	; 0x2e7e <INT0_APP_CALLBACK+0xb8>
			HAL_LED_u8LedMode(LED2_Port,LED2_Pin,LED_ON);
			G_DeviceTwoFlag = 1;
		}
		else if(G_u8_Receive == 'F')
		{
			HAL_LED_u8LedMode(LED2_Port,LED2_Pin,LED_OFF);
    30c0:	80 e0       	ldi	r24, 0x00	; 0
    30c2:	64 e0       	ldi	r22, 0x04	; 4
    30c4:	40 e0       	ldi	r20, 0x00	; 0
    30c6:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <HAL_LED_u8LedMode>
			G_DeviceTwoFlag = 0;
    30ca:	10 92 61 03 	sts	0x0361, r1
    30ce:	d7 ce       	rjmp	.-594    	; 0x2e7e <INT0_APP_CALLBACK+0xb8>
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_LOW);
		G_u8_Receive = MCAL_SPI_MASTER_u8_SpiMaster_Transceive('x');
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_HIGH);
		if(G_u8_Receive == 'N')
		{
			HAL_LED_u8LedMode(LED2_Port,LED2_Pin,LED_ON);
    30d0:	80 e0       	ldi	r24, 0x00	; 0
    30d2:	64 e0       	ldi	r22, 0x04	; 4
    30d4:	41 e0       	ldi	r20, 0x01	; 1
    30d6:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <HAL_LED_u8LedMode>
			G_DeviceTwoFlag = 1;
    30da:	81 e0       	ldi	r24, 0x01	; 1
    30dc:	80 93 61 03 	sts	0x0361, r24
    30e0:	ce ce       	rjmp	.-612    	; 0x2e7e <INT0_APP_CALLBACK+0xb8>
			HAL_LED_u8LedMode(LED3_Port,LED3_Pin,LED_ON);
			G_DeviceThreeFlag = 1;
		}
		else if(G_u8_Receive == 'F')
		{
			HAL_LED_u8LedMode(LED3_Port,LED3_Pin,LED_OFF);
    30e2:	80 e0       	ldi	r24, 0x00	; 0
    30e4:	65 e0       	ldi	r22, 0x05	; 5
    30e6:	40 e0       	ldi	r20, 0x00	; 0
    30e8:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <HAL_LED_u8LedMode>
			G_DeviceThreeFlag = 0;
    30ec:	10 92 5f 03 	sts	0x035F, r1
    30f0:	c6 ce       	rjmp	.-628    	; 0x2e7e <INT0_APP_CALLBACK+0xb8>
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_LOW);
		G_u8_Receive = MCAL_SPI_MASTER_u8_SpiMaster_Transceive('x');
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_HIGH);
		if(G_u8_Receive == 'N')
		{
			HAL_LED_u8LedMode(LED3_Port,LED3_Pin,LED_ON);
    30f2:	80 e0       	ldi	r24, 0x00	; 0
    30f4:	65 e0       	ldi	r22, 0x05	; 5
    30f6:	41 e0       	ldi	r20, 0x01	; 1
    30f8:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <HAL_LED_u8LedMode>
			G_DeviceThreeFlag = 1;
    30fc:	81 e0       	ldi	r24, 0x01	; 1
    30fe:	80 93 5f 03 	sts	0x035F, r24
    3102:	bd ce       	rjmp	.-646    	; 0x2e7e <INT0_APP_CALLBACK+0xb8>
		{
			HAL_Buzzer_u8BuzzerMode(Buzzer_Port,Buzzer_Pin,Buzzer_ON);
		}
		else if(G_u8_Receive == 'F')
		{
			HAL_Buzzer_u8BuzzerMode(Buzzer_Port,Buzzer_Pin,Buzzer_OFF);
    3104:	81 e0       	ldi	r24, 0x01	; 1
    3106:	60 e0       	ldi	r22, 0x00	; 0
    3108:	40 e0       	ldi	r20, 0x00	; 0
    310a:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <HAL_Buzzer_u8BuzzerMode>
    310e:	08 95       	ret
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_LOW);
		G_u8_Receive = MCAL_SPI_MASTER_u8_SpiMaster_Transceive('x');
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_HIGH);
		if(G_u8_Receive == 'N')
		{
			HAL_Buzzer_u8BuzzerMode(Buzzer_Port,Buzzer_Pin,Buzzer_ON);
    3110:	81 e0       	ldi	r24, 0x01	; 1
    3112:	60 e0       	ldi	r22, 0x00	; 0
    3114:	41 e0       	ldi	r20, 0x01	; 1
    3116:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <HAL_Buzzer_u8BuzzerMode>
    311a:	08 95       	ret
			HAL_LED_u8LedMode(LED4_Port,LED4_Pin,LED_OFF);
			G_DeviceFourFlag = 0;
		}
		else if(G_u8_Receive == 'T')
		{
			HAL_LED_u8LedMode(LED4_Port,LED4_Pin,LED_TOG);
    311c:	80 e0       	ldi	r24, 0x00	; 0
    311e:	66 e0       	ldi	r22, 0x06	; 6
    3120:	42 e0       	ldi	r20, 0x02	; 2
    3122:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <HAL_LED_u8LedMode>
			TOGGLE_BIT(G_DeviceFourFlag,PIN0);
    3126:	80 91 68 03 	lds	r24, 0x0368
    312a:	91 e0       	ldi	r25, 0x01	; 1
    312c:	89 27       	eor	r24, r25
    312e:	80 93 68 03 	sts	0x0368, r24
    3132:	a5 ce       	rjmp	.-694    	; 0x2e7e <INT0_APP_CALLBACK+0xb8>
			HAL_LED_u8LedMode(LED4_Port,LED4_Pin,LED_ON);
			G_DeviceFourFlag = 1;
		}
		else if(G_u8_Receive == 'F')
		{
			HAL_LED_u8LedMode(LED4_Port,LED4_Pin,LED_OFF);
    3134:	80 e0       	ldi	r24, 0x00	; 0
    3136:	66 e0       	ldi	r22, 0x06	; 6
    3138:	40 e0       	ldi	r20, 0x00	; 0
    313a:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <HAL_LED_u8LedMode>
			G_DeviceFourFlag = 0;
    313e:	10 92 68 03 	sts	0x0368, r1
    3142:	9d ce       	rjmp	.-710    	; 0x2e7e <INT0_APP_CALLBACK+0xb8>
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_LOW);
		G_u8_Receive = MCAL_SPI_MASTER_u8_SpiMaster_Transceive('x');
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_HIGH);
		if(G_u8_Receive == 'N')
		{
			HAL_DCMOTOR_void_DcMotorClockWise(motor_speed);
    3144:	87 e0       	ldi	r24, 0x07	; 7
    3146:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <HAL_DCMOTOR_void_DcMotorClockWise>
			G_FanFlag = 1;
    314a:	81 e0       	ldi	r24, 0x01	; 1
    314c:	80 93 63 03 	sts	0x0363, r24
			G_FanFlagOff = 1;
    3150:	80 93 5b 03 	sts	0x035B, r24
    3154:	bd ce       	rjmp	.-646    	; 0x2ed0 <INT0_APP_CALLBACK+0x10a>
			HAL_LED_u8LedMode(LED5_Port,LED5_Pin,LED_ON);
			G_DeviceFiveFlag = 1;
		}
		else if(G_u8_Receive == 'F')
		{
			HAL_LED_u8LedMode(LED5_Port,LED5_Pin,LED_OFF);
    3156:	80 e0       	ldi	r24, 0x00	; 0
    3158:	67 e0       	ldi	r22, 0x07	; 7
    315a:	40 e0       	ldi	r20, 0x00	; 0
    315c:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <HAL_LED_u8LedMode>
			G_DeviceFiveFlag = 0;
    3160:	10 92 5e 03 	sts	0x035E, r1
    3164:	8c ce       	rjmp	.-744    	; 0x2e7e <INT0_APP_CALLBACK+0xb8>
			G_FanFlag = 0;
			G_FanFlagOn = 1;
		}
		else if(G_u8_Receive == 'T')
		{
			G_FanFlagOn = 0;
    3166:	10 92 66 03 	sts	0x0366, r1
			G_FanFlagOff = 0;
    316a:	10 92 5b 03 	sts	0x035B, r1
			G_FanControlFlag =0;
    316e:	10 92 5d 03 	sts	0x035D, r1
    3172:	ae ce       	rjmp	.-676    	; 0x2ed0 <INT0_APP_CALLBACK+0x10a>
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_LOW);
		G_u8_Receive = MCAL_SPI_MASTER_u8_SpiMaster_Transceive('x');
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_HIGH);
		if(G_u8_Receive == 'N')
		{
			HAL_LED_u8LedMode(LED5_Port,LED5_Pin,LED_ON);
    3174:	80 e0       	ldi	r24, 0x00	; 0
    3176:	67 e0       	ldi	r22, 0x07	; 7
    3178:	41 e0       	ldi	r20, 0x01	; 1
    317a:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <HAL_LED_u8LedMode>
			G_DeviceFiveFlag = 1;
    317e:	81 e0       	ldi	r24, 0x01	; 1
    3180:	80 93 5e 03 	sts	0x035E, r24
    3184:	7c ce       	rjmp	.-776    	; 0x2e7e <INT0_APP_CALLBACK+0xb8>

00003186 <APP_STATE_void_AppStateInit>:
#include "State_interface.h"

u8 volatile G_u8_Receive;
void APP_STATE_void_AppStateInit(void)
{
	MCAL_Interrupt_GIE_Enable();
    3186:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <MCAL_Interrupt_GIE_Enable>
	MCAL_EXT_INT_voidEXTInt_Init(INT_0,RISING_EDGE);
    318a:	80 e0       	ldi	r24, 0x00	; 0
    318c:	63 e0       	ldi	r22, 0x03	; 3
    318e:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <MCAL_EXT_INT_voidEXTInt_Init>
	MCAL_EXT_INT_voidEXTInt_CallBack(INT_0,INT0_APP_CALLBACK);
    3192:	80 e0       	ldi	r24, 0x00	; 0
    3194:	63 ee       	ldi	r22, 0xE3	; 227
    3196:	76 e1       	ldi	r23, 0x16	; 22
    3198:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <MCAL_EXT_INT_voidEXTInt_CallBack>
	MCAL_DIO_u8SetPinDirection(PortB,PIN2,PIN_OUTPUT);
    319c:	81 e0       	ldi	r24, 0x01	; 1
    319e:	62 e0       	ldi	r22, 0x02	; 2
    31a0:	41 e0       	ldi	r20, 0x01	; 1
    31a2:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <MCAL_DIO_u8SetPinDirection>
	MCAL_SPI_MASTER_SLAVE_u8_SetMasterSalve_Prescaler_SpiMasterSlaveInit(SPI_MASTER,SPI_PRESCALER_128);
    31a6:	81 e0       	ldi	r24, 0x01	; 1
    31a8:	63 e0       	ldi	r22, 0x03	; 3
    31aa:	0e 94 27 0b 	call	0x164e	; 0x164e <MCAL_SPI_MASTER_SLAVE_u8_SetMasterSalve_Prescaler_SpiMasterSlaveInit>
}
    31ae:	08 95       	ret

000031b0 <APP_LM35WithDCmotor_Void_LM35WithDCmotorOnOff>:
}

void APP_LM35WithDCmotor_Void_LM35WithDCmotorOnOff(void)
{
    //while (1)
	if(G_FanFlag == 0)
    31b0:	80 91 63 03 	lds	r24, 0x0363
    31b4:	81 11       	cpse	r24, r1
    31b6:	08 95       	ret
    {
	    int Tempreture_Sensor_read = LM35_Read();
    31b8:	0e 94 56 0e 	call	0x1cac	; 0x1cac <LM35_Read>
	    static int fan_on_off = fan_off ;
	   // HAL_LCD_u8LCD_DisplayNumber(Tempreture_Sensor_read);
	    
	    if (Tempreture_Sensor_read>TURN_DC_ON_TEMP)
    31bc:	8d 31       	cpi	r24, 0x1D	; 29
    31be:	91 05       	cpc	r25, r1
    31c0:	54 f4       	brge	.+20     	; 0x31d6 <APP_LM35WithDCmotor_Void_LM35WithDCmotorOnOff+0x26>
	    {
		    fan_on_off=fan_on;
	    }
	    else if (Tempreture_Sensor_read<TURN_DC_OFF_TEMP)
    31c2:	85 31       	cpi	r24, 0x15	; 21
    31c4:	91 05       	cpc	r25, r1
    31c6:	8c f4       	brge	.+34     	; 0x31ea <APP_LM35WithDCmotor_Void_LM35WithDCmotorOnOff+0x3a>
	    {
		    fan_on_off=fan_off;
    31c8:	10 92 57 03 	sts	0x0357, r1
    31cc:	10 92 56 03 	sts	0x0356, r1
	    {
		    HAL_DCMOTOR_void_DcMotorClockWise(motor_speed);
	    }
	    else if(fan_on_off==fan_off)
	    {
		    HAL_DCMOTOR_void_DcMotorStop();
    31d0:	0e 94 93 16 	call	0x2d26	; 0x2d26 <HAL_DCMOTOR_void_DcMotorStop>
    31d4:	08 95       	ret
	    static int fan_on_off = fan_off ;
	   // HAL_LCD_u8LCD_DisplayNumber(Tempreture_Sensor_read);
	    
	    if (Tempreture_Sensor_read>TURN_DC_ON_TEMP)
	    {
		    fan_on_off=fan_on;
    31d6:	81 e0       	ldi	r24, 0x01	; 1
    31d8:	90 e0       	ldi	r25, 0x00	; 0
    31da:	90 93 57 03 	sts	0x0357, r25
    31de:	80 93 56 03 	sts	0x0356, r24
		    fan_on_off=fan_off;
	    }
	    
	    if (fan_on_off==fan_on)
	    {
		    HAL_DCMOTOR_void_DcMotorClockWise(motor_speed);
    31e2:	87 e0       	ldi	r24, 0x07	; 7
    31e4:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <HAL_DCMOTOR_void_DcMotorClockWise>
    31e8:	08 95       	ret
	    else if (Tempreture_Sensor_read<TURN_DC_OFF_TEMP)
	    {
		    fan_on_off=fan_off;
	    }
	    
	    if (fan_on_off==fan_on)
    31ea:	80 91 56 03 	lds	r24, 0x0356
    31ee:	90 91 57 03 	lds	r25, 0x0357
    31f2:	81 30       	cpi	r24, 0x01	; 1
    31f4:	91 05       	cpc	r25, r1
    31f6:	a9 f3       	breq	.-22     	; 0x31e2 <APP_LM35WithDCmotor_Void_LM35WithDCmotorOnOff+0x32>
	    {
		    HAL_DCMOTOR_void_DcMotorClockWise(motor_speed);
	    }
	    else if(fan_on_off==fan_off)
    31f8:	89 2b       	or	r24, r25
    31fa:	51 f3       	breq	.-44     	; 0x31d0 <APP_LM35WithDCmotor_Void_LM35WithDCmotorOnOff+0x20>
    31fc:	08 95       	ret

000031fe <APP_LM35WithDCmotor_Void_LM35WithDCmotorinit>:

extern u8 volatile G_FanFlag;
extern void APP_DEVICES_void_AppGetAnyDeviceOn(void);
void APP_LM35WithDCmotor_Void_LM35WithDCmotorinit(void)
{
		LM35_Init();
    31fe:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <LM35_Init>
		HAL_DCMOTOR_void_DcMotorInit();
    3202:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <HAL_DCMOTOR_void_DcMotorInit>
}
    3206:	08 95       	ret

00003208 <APP_Registeration_voidGetNumberOfUsers>:

}


void APP_Registeration_voidGetNumberOfUsers(u8* LOC_Pu8UsersNumber)
{
    3208:	af 92       	push	r10
    320a:	bf 92       	push	r11
    320c:	cf 92       	push	r12
    320e:	df 92       	push	r13
    3210:	ff 92       	push	r15
    3212:	0f 93       	push	r16
    3214:	1f 93       	push	r17
    3216:	df 93       	push	r29
    3218:	cf 93       	push	r28
    321a:	0f 92       	push	r0
    321c:	cd b7       	in	r28, 0x3d	; 61
    321e:	de b7       	in	r29, 0x3e	; 62
    3220:	5c 01       	movw	r10, r24
	u16 LOC_u16LocationVariable = USER_LOCATION_TOP;
	u8 LOC_u8UserNumber = 0,LOC_u8NumberCheck = 0;
    3222:	19 82       	std	Y+1, r1	; 0x01
    3224:	00 e6       	ldi	r16, 0x60	; 96
    3226:	10 e0       	ldi	r17, 0x00	; 0
    3228:	ff 24       	eor	r15, r15
    322a:	6e 01       	movw	r12, r28
    322c:	08 94       	sec
    322e:	c1 1c       	adc	r12, r1
    3230:	d1 1c       	adc	r13, r1
	for(;LOC_u16LocationVariable <= USER_LOCATION_BOT;LOC_u16LocationVariable += STEP)
	{
		HAL_EEPROM_voidReadData(LOC_u16LocationVariable,&LOC_u8NumberCheck);
    3232:	c8 01       	movw	r24, r16
    3234:	b6 01       	movw	r22, r12
    3236:	0e 94 12 16 	call	0x2c24	; 0x2c24 <HAL_EEPROM_voidReadData>
		if(LOC_u8NumberCheck != 255)
    323a:	89 81       	ldd	r24, Y+1	; 0x01
    323c:	8f 3f       	cpi	r24, 0xFF	; 255
    323e:	09 f0       	breq	.+2      	; 0x3242 <APP_Registeration_voidGetNumberOfUsers+0x3a>
		{
			LOC_u8UserNumber++;
    3240:	f3 94       	inc	r15

void APP_Registeration_voidGetNumberOfUsers(u8* LOC_Pu8UsersNumber)
{
	u16 LOC_u16LocationVariable = USER_LOCATION_TOP;
	u8 LOC_u8UserNumber = 0,LOC_u8NumberCheck = 0;
	for(;LOC_u16LocationVariable <= USER_LOCATION_BOT;LOC_u16LocationVariable += STEP)
    3242:	08 5f       	subi	r16, 0xF8	; 248
    3244:	1f 4f       	sbci	r17, 0xFF	; 255
    3246:	81 e0       	ldi	r24, 0x01	; 1
    3248:	00 32       	cpi	r16, 0x20	; 32
    324a:	18 07       	cpc	r17, r24
    324c:	91 f7       	brne	.-28     	; 0x3232 <APP_Registeration_voidGetNumberOfUsers+0x2a>
		else
		{
			/*Do nothing*/
		}
	}
	*LOC_Pu8UsersNumber = LOC_u8UserNumber;
    324e:	f5 01       	movw	r30, r10
    3250:	f0 82       	st	Z, r15

}
    3252:	0f 90       	pop	r0
    3254:	cf 91       	pop	r28
    3256:	df 91       	pop	r29
    3258:	1f 91       	pop	r17
    325a:	0f 91       	pop	r16
    325c:	ff 90       	pop	r15
    325e:	df 90       	pop	r13
    3260:	cf 90       	pop	r12
    3262:	bf 90       	pop	r11
    3264:	af 90       	pop	r10
    3266:	08 95       	ret

00003268 <Check_UserID>:
		return USER_NOT_FOUND;
}


u8 Check_UserID(u16 LOC_u16UserID)
{
    3268:	6f 92       	push	r6
    326a:	7f 92       	push	r7
    326c:	8f 92       	push	r8
    326e:	9f 92       	push	r9
    3270:	af 92       	push	r10
    3272:	bf 92       	push	r11
    3274:	cf 92       	push	r12
    3276:	df 92       	push	r13
    3278:	ff 92       	push	r15
    327a:	0f 93       	push	r16
    327c:	1f 93       	push	r17
    327e:	df 93       	push	r29
    3280:	cf 93       	push	r28
    3282:	cd b7       	in	r28, 0x3d	; 61
    3284:	de b7       	in	r29, 0x3e	; 62
    3286:	28 97       	sbiw	r28, 0x08	; 8
    3288:	0f b6       	in	r0, 0x3f	; 63
    328a:	f8 94       	cli
    328c:	de bf       	out	0x3e, r29	; 62
    328e:	0f be       	out	0x3f, r0	; 63
    3290:	cd bf       	out	0x3d, r28	; 61
    3292:	9c 01       	movw	r18, r24
	u8 i=3,LOC_u8UserNumberFlag = 0, LOC_u8IDMatchedFlag = 0 ,LOC_u8UserID_Read[MAX_DIGITS] , LOC_u8UserIDArray[MAX_DIGITS], LOC_u8DigitCounter = 0;

	u16 LOC_u16UserLocationVariable = USER_LOCATION_TOP,LOC_u16UserLocationVariableDigits ;


	while (LOC_u16UserID != 0)
    3294:	00 97       	sbiw	r24, 0x00	; 0
    3296:	b9 f0       	breq	.+46     	; 0x32c6 <Check_UserID+0x5e>
    3298:	43 e0       	ldi	r20, 0x03	; 3
    329a:	8e 01       	movw	r16, r28
    329c:	0b 5f       	subi	r16, 0xFB	; 251
    329e:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		LOC_u8UserIDArray[i] = (LOC_u16UserID % 10);
    32a0:	f8 01       	movw	r30, r16
    32a2:	e4 0f       	add	r30, r20
    32a4:	f1 1d       	adc	r31, r1
    32a6:	c9 01       	movw	r24, r18
    32a8:	6a e0       	ldi	r22, 0x0A	; 10
    32aa:	70 e0       	ldi	r23, 0x00	; 0
    32ac:	0e 94 9d 30 	call	0x613a	; 0x613a <__udivmodhi4>
    32b0:	80 83       	st	Z, r24
		LOC_u16UserID = (LOC_u16UserID / 10);
    32b2:	c9 01       	movw	r24, r18
    32b4:	6a e0       	ldi	r22, 0x0A	; 10
    32b6:	70 e0       	ldi	r23, 0x00	; 0
    32b8:	0e 94 9d 30 	call	0x613a	; 0x613a <__udivmodhi4>
    32bc:	9b 01       	movw	r18, r22
		i--;
    32be:	41 50       	subi	r20, 0x01	; 1
	u8 i=3,LOC_u8UserNumberFlag = 0, LOC_u8IDMatchedFlag = 0 ,LOC_u8UserID_Read[MAX_DIGITS] , LOC_u8UserIDArray[MAX_DIGITS], LOC_u8DigitCounter = 0;

	u16 LOC_u16UserLocationVariable = USER_LOCATION_TOP,LOC_u16UserLocationVariableDigits ;


	while (LOC_u16UserID != 0)
    32c0:	61 15       	cp	r22, r1
    32c2:	71 05       	cpc	r23, r1
    32c4:	69 f7       	brne	.-38     	; 0x32a0 <Check_UserID+0x38>
    32c6:	ff 24       	eor	r15, r15
    32c8:	00 e6       	ldi	r16, 0x60	; 96
    32ca:	10 e0       	ldi	r17, 0x00	; 0
    32cc:	6e 01       	movw	r12, r28
    32ce:	08 94       	sec
    32d0:	c1 1c       	adc	r12, r1
    32d2:	d1 1c       	adc	r13, r1
		LOC_u8UserNumberFlag++;
		LOC_u16UserLocationVariableDigits = LOC_u16UserLocationVariable;
		for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DIGITS;LOC_u8DigitCounter++)
		{

			HAL_EEPROM_voidReadData(LOC_u16UserLocationVariableDigits,&LOC_u8UserID_Read[LOC_u8DigitCounter]);
    32d4:	32 e0       	ldi	r19, 0x02	; 2
    32d6:	a3 2e       	mov	r10, r19
    32d8:	b1 2c       	mov	r11, r1
    32da:	ac 0e       	add	r10, r28
    32dc:	bd 1e       	adc	r11, r29
    32de:	23 e0       	ldi	r18, 0x03	; 3
    32e0:	82 2e       	mov	r8, r18
    32e2:	91 2c       	mov	r9, r1
    32e4:	8c 0e       	add	r8, r28
    32e6:	9d 1e       	adc	r9, r29
    32e8:	94 e0       	ldi	r25, 0x04	; 4
    32ea:	69 2e       	mov	r6, r25
    32ec:	71 2c       	mov	r7, r1
    32ee:	6c 0e       	add	r6, r28
    32f0:	7d 1e       	adc	r7, r29
	}


	for(;LOC_u16UserLocationVariable <= USER_LOCATION_BOT;LOC_u16UserLocationVariable += STEP)
	{
		LOC_u8UserNumberFlag++;
    32f2:	f3 94       	inc	r15
		LOC_u16UserLocationVariableDigits = LOC_u16UserLocationVariable;
		for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DIGITS;LOC_u8DigitCounter++)
		{

			HAL_EEPROM_voidReadData(LOC_u16UserLocationVariableDigits,&LOC_u8UserID_Read[LOC_u8DigitCounter]);
    32f4:	c8 01       	movw	r24, r16
    32f6:	b6 01       	movw	r22, r12
    32f8:	0e 94 12 16 	call	0x2c24	; 0x2c24 <HAL_EEPROM_voidReadData>
			if (LOC_u8UserID_Read[LOC_u8DigitCounter] == LOC_u8UserIDArray[LOC_u8DigitCounter])
    32fc:	99 81       	ldd	r25, Y+1	; 0x01
    32fe:	8d 81       	ldd	r24, Y+5	; 0x05
    3300:	98 17       	cp	r25, r24
    3302:	81 f5       	brne	.+96     	; 0x3364 <Check_UserID+0xfc>
		LOC_u8UserNumberFlag++;
		LOC_u16UserLocationVariableDigits = LOC_u16UserLocationVariable;
		for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DIGITS;LOC_u8DigitCounter++)
		{

			HAL_EEPROM_voidReadData(LOC_u16UserLocationVariableDigits,&LOC_u8UserID_Read[LOC_u8DigitCounter]);
    3304:	c8 01       	movw	r24, r16
    3306:	01 96       	adiw	r24, 0x01	; 1
    3308:	b5 01       	movw	r22, r10
    330a:	0e 94 12 16 	call	0x2c24	; 0x2c24 <HAL_EEPROM_voidReadData>
			if (LOC_u8UserID_Read[LOC_u8DigitCounter] == LOC_u8UserIDArray[LOC_u8DigitCounter])
    330e:	9a 81       	ldd	r25, Y+2	; 0x02
    3310:	8e 81       	ldd	r24, Y+6	; 0x06
    3312:	98 17       	cp	r25, r24
    3314:	39 f5       	brne	.+78     	; 0x3364 <Check_UserID+0xfc>
		LOC_u8UserNumberFlag++;
		LOC_u16UserLocationVariableDigits = LOC_u16UserLocationVariable;
		for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DIGITS;LOC_u8DigitCounter++)
		{

			HAL_EEPROM_voidReadData(LOC_u16UserLocationVariableDigits,&LOC_u8UserID_Read[LOC_u8DigitCounter]);
    3316:	c8 01       	movw	r24, r16
    3318:	02 96       	adiw	r24, 0x02	; 2
    331a:	b4 01       	movw	r22, r8
    331c:	0e 94 12 16 	call	0x2c24	; 0x2c24 <HAL_EEPROM_voidReadData>
			if (LOC_u8UserID_Read[LOC_u8DigitCounter] == LOC_u8UserIDArray[LOC_u8DigitCounter])
    3320:	9b 81       	ldd	r25, Y+3	; 0x03
    3322:	8f 81       	ldd	r24, Y+7	; 0x07
    3324:	98 17       	cp	r25, r24
    3326:	f1 f4       	brne	.+60     	; 0x3364 <Check_UserID+0xfc>
		LOC_u8UserNumberFlag++;
		LOC_u16UserLocationVariableDigits = LOC_u16UserLocationVariable;
		for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DIGITS;LOC_u8DigitCounter++)
		{

			HAL_EEPROM_voidReadData(LOC_u16UserLocationVariableDigits,&LOC_u8UserID_Read[LOC_u8DigitCounter]);
    3328:	c8 01       	movw	r24, r16
    332a:	03 96       	adiw	r24, 0x03	; 3
    332c:	b3 01       	movw	r22, r6
    332e:	0e 94 12 16 	call	0x2c24	; 0x2c24 <HAL_EEPROM_voidReadData>
			if (LOC_u8UserID_Read[LOC_u8DigitCounter] == LOC_u8UserIDArray[LOC_u8DigitCounter])
    3332:	9c 81       	ldd	r25, Y+4	; 0x04
    3334:	88 85       	ldd	r24, Y+8	; 0x08
    3336:	98 17       	cp	r25, r24
    3338:	a9 f4       	brne	.+42     	; 0x3364 <Check_UserID+0xfc>
			//Remain in the loop.
		}
	}

	return USER_NOT_FOUND;
}
    333a:	8f 2d       	mov	r24, r15
    333c:	28 96       	adiw	r28, 0x08	; 8
    333e:	0f b6       	in	r0, 0x3f	; 63
    3340:	f8 94       	cli
    3342:	de bf       	out	0x3e, r29	; 62
    3344:	0f be       	out	0x3f, r0	; 63
    3346:	cd bf       	out	0x3d, r28	; 61
    3348:	cf 91       	pop	r28
    334a:	df 91       	pop	r29
    334c:	1f 91       	pop	r17
    334e:	0f 91       	pop	r16
    3350:	ff 90       	pop	r15
    3352:	df 90       	pop	r13
    3354:	cf 90       	pop	r12
    3356:	bf 90       	pop	r11
    3358:	af 90       	pop	r10
    335a:	9f 90       	pop	r9
    335c:	8f 90       	pop	r8
    335e:	7f 90       	pop	r7
    3360:	6f 90       	pop	r6
    3362:	08 95       	ret
		LOC_u16UserID = (LOC_u16UserID / 10);
		i--;
	}


	for(;LOC_u16UserLocationVariable <= USER_LOCATION_BOT;LOC_u16UserLocationVariable += STEP)
    3364:	08 5f       	subi	r16, 0xF8	; 248
    3366:	1f 4f       	sbci	r17, 0xFF	; 255
    3368:	88 e1       	ldi	r24, 0x18	; 24
    336a:	f8 16       	cp	r15, r24
    336c:	11 f6       	brne	.-124    	; 0x32f2 <Check_UserID+0x8a>
    336e:	8b eb       	ldi	r24, 0xBB	; 187
    3370:	f8 2e       	mov	r15, r24
    3372:	e3 cf       	rjmp	.-58     	; 0x333a <Check_UserID+0xd2>

00003374 <APP_Registeration_voidGetNumberOfAdmins>:

}


void APP_Registeration_voidGetNumberOfAdmins(u8* LOC_Pu8AdminsNumber)
{
    3374:	cf 92       	push	r12
    3376:	df 92       	push	r13
    3378:	ef 92       	push	r14
    337a:	ff 92       	push	r15
    337c:	1f 93       	push	r17
    337e:	df 93       	push	r29
    3380:	cf 93       	push	r28
    3382:	0f 92       	push	r0
    3384:	cd b7       	in	r28, 0x3d	; 61
    3386:	de b7       	in	r29, 0x3e	; 62
    3388:	6c 01       	movw	r12, r24
	u16 LOC_u16LocationVariable = ADMIN_LOCATION_TOP;
	u8 LOC_u8AdminNumber = 0,LOC_u8NumberCheck = 0;
    338a:	19 82       	std	Y+1, r1	; 0x01
	for(;LOC_u16LocationVariable <= ADMIN_LOCATION_BOT;LOC_u16LocationVariable += STEP)
	{
		HAL_EEPROM_voidReadData(LOC_u16LocationVariable,&LOC_u8NumberCheck);
    338c:	80 e0       	ldi	r24, 0x00	; 0
    338e:	90 e0       	ldi	r25, 0x00	; 0
    3390:	7e 01       	movw	r14, r28
    3392:	08 94       	sec
    3394:	e1 1c       	adc	r14, r1
    3396:	f1 1c       	adc	r15, r1
    3398:	b7 01       	movw	r22, r14
    339a:	0e 94 12 16 	call	0x2c24	; 0x2c24 <HAL_EEPROM_voidReadData>
    339e:	10 e0       	ldi	r17, 0x00	; 0
    33a0:	89 81       	ldd	r24, Y+1	; 0x01
    33a2:	8f 3f       	cpi	r24, 0xFF	; 255
    33a4:	09 f0       	breq	.+2      	; 0x33a8 <APP_Registeration_voidGetNumberOfAdmins+0x34>
    33a6:	11 e0       	ldi	r17, 0x01	; 1
    33a8:	88 e0       	ldi	r24, 0x08	; 8
    33aa:	90 e0       	ldi	r25, 0x00	; 0
    33ac:	b7 01       	movw	r22, r14
    33ae:	0e 94 12 16 	call	0x2c24	; 0x2c24 <HAL_EEPROM_voidReadData>
		if(LOC_u8NumberCheck != 255)
    33b2:	89 81       	ldd	r24, Y+1	; 0x01
    33b4:	8f 3f       	cpi	r24, 0xFF	; 255
    33b6:	09 f0       	breq	.+2      	; 0x33ba <APP_Registeration_voidGetNumberOfAdmins+0x46>
		{
			LOC_u8AdminNumber++;
    33b8:	1f 5f       	subi	r17, 0xFF	; 255
{
	u16 LOC_u16LocationVariable = ADMIN_LOCATION_TOP;
	u8 LOC_u8AdminNumber = 0,LOC_u8NumberCheck = 0;
	for(;LOC_u16LocationVariable <= ADMIN_LOCATION_BOT;LOC_u16LocationVariable += STEP)
	{
		HAL_EEPROM_voidReadData(LOC_u16LocationVariable,&LOC_u8NumberCheck);
    33ba:	80 e1       	ldi	r24, 0x10	; 16
    33bc:	90 e0       	ldi	r25, 0x00	; 0
    33be:	b7 01       	movw	r22, r14
    33c0:	0e 94 12 16 	call	0x2c24	; 0x2c24 <HAL_EEPROM_voidReadData>
		if(LOC_u8NumberCheck != 255)
    33c4:	89 81       	ldd	r24, Y+1	; 0x01
    33c6:	8f 3f       	cpi	r24, 0xFF	; 255
    33c8:	09 f0       	breq	.+2      	; 0x33cc <APP_Registeration_voidGetNumberOfAdmins+0x58>
		{
			LOC_u8AdminNumber++;
    33ca:	1f 5f       	subi	r17, 0xFF	; 255
{
	u16 LOC_u16LocationVariable = ADMIN_LOCATION_TOP;
	u8 LOC_u8AdminNumber = 0,LOC_u8NumberCheck = 0;
	for(;LOC_u16LocationVariable <= ADMIN_LOCATION_BOT;LOC_u16LocationVariable += STEP)
	{
		HAL_EEPROM_voidReadData(LOC_u16LocationVariable,&LOC_u8NumberCheck);
    33cc:	88 e1       	ldi	r24, 0x18	; 24
    33ce:	90 e0       	ldi	r25, 0x00	; 0
    33d0:	b7 01       	movw	r22, r14
    33d2:	0e 94 12 16 	call	0x2c24	; 0x2c24 <HAL_EEPROM_voidReadData>
		if(LOC_u8NumberCheck != 255)
    33d6:	89 81       	ldd	r24, Y+1	; 0x01
    33d8:	8f 3f       	cpi	r24, 0xFF	; 255
    33da:	09 f0       	breq	.+2      	; 0x33de <APP_Registeration_voidGetNumberOfAdmins+0x6a>
		{
			LOC_u8AdminNumber++;
    33dc:	1f 5f       	subi	r17, 0xFF	; 255
{
	u16 LOC_u16LocationVariable = ADMIN_LOCATION_TOP;
	u8 LOC_u8AdminNumber = 0,LOC_u8NumberCheck = 0;
	for(;LOC_u16LocationVariable <= ADMIN_LOCATION_BOT;LOC_u16LocationVariable += STEP)
	{
		HAL_EEPROM_voidReadData(LOC_u16LocationVariable,&LOC_u8NumberCheck);
    33de:	80 e2       	ldi	r24, 0x20	; 32
    33e0:	90 e0       	ldi	r25, 0x00	; 0
    33e2:	b7 01       	movw	r22, r14
    33e4:	0e 94 12 16 	call	0x2c24	; 0x2c24 <HAL_EEPROM_voidReadData>
		if(LOC_u8NumberCheck != 255)
    33e8:	89 81       	ldd	r24, Y+1	; 0x01
    33ea:	8f 3f       	cpi	r24, 0xFF	; 255
    33ec:	09 f0       	breq	.+2      	; 0x33f0 <APP_Registeration_voidGetNumberOfAdmins+0x7c>
		{
			LOC_u8AdminNumber++;
    33ee:	1f 5f       	subi	r17, 0xFF	; 255
{
	u16 LOC_u16LocationVariable = ADMIN_LOCATION_TOP;
	u8 LOC_u8AdminNumber = 0,LOC_u8NumberCheck = 0;
	for(;LOC_u16LocationVariable <= ADMIN_LOCATION_BOT;LOC_u16LocationVariable += STEP)
	{
		HAL_EEPROM_voidReadData(LOC_u16LocationVariable,&LOC_u8NumberCheck);
    33f0:	88 e2       	ldi	r24, 0x28	; 40
    33f2:	90 e0       	ldi	r25, 0x00	; 0
    33f4:	b7 01       	movw	r22, r14
    33f6:	0e 94 12 16 	call	0x2c24	; 0x2c24 <HAL_EEPROM_voidReadData>
		if(LOC_u8NumberCheck != 255)
    33fa:	89 81       	ldd	r24, Y+1	; 0x01
    33fc:	8f 3f       	cpi	r24, 0xFF	; 255
    33fe:	09 f0       	breq	.+2      	; 0x3402 <APP_Registeration_voidGetNumberOfAdmins+0x8e>
		{
			LOC_u8AdminNumber++;
    3400:	1f 5f       	subi	r17, 0xFF	; 255
{
	u16 LOC_u16LocationVariable = ADMIN_LOCATION_TOP;
	u8 LOC_u8AdminNumber = 0,LOC_u8NumberCheck = 0;
	for(;LOC_u16LocationVariable <= ADMIN_LOCATION_BOT;LOC_u16LocationVariable += STEP)
	{
		HAL_EEPROM_voidReadData(LOC_u16LocationVariable,&LOC_u8NumberCheck);
    3402:	80 e3       	ldi	r24, 0x30	; 48
    3404:	90 e0       	ldi	r25, 0x00	; 0
    3406:	b7 01       	movw	r22, r14
    3408:	0e 94 12 16 	call	0x2c24	; 0x2c24 <HAL_EEPROM_voidReadData>
		if(LOC_u8NumberCheck != 255)
    340c:	89 81       	ldd	r24, Y+1	; 0x01
    340e:	8f 3f       	cpi	r24, 0xFF	; 255
    3410:	09 f0       	breq	.+2      	; 0x3414 <APP_Registeration_voidGetNumberOfAdmins+0xa0>
		{
			LOC_u8AdminNumber++;
    3412:	1f 5f       	subi	r17, 0xFF	; 255
{
	u16 LOC_u16LocationVariable = ADMIN_LOCATION_TOP;
	u8 LOC_u8AdminNumber = 0,LOC_u8NumberCheck = 0;
	for(;LOC_u16LocationVariable <= ADMIN_LOCATION_BOT;LOC_u16LocationVariable += STEP)
	{
		HAL_EEPROM_voidReadData(LOC_u16LocationVariable,&LOC_u8NumberCheck);
    3414:	88 e3       	ldi	r24, 0x38	; 56
    3416:	90 e0       	ldi	r25, 0x00	; 0
    3418:	b7 01       	movw	r22, r14
    341a:	0e 94 12 16 	call	0x2c24	; 0x2c24 <HAL_EEPROM_voidReadData>
		if(LOC_u8NumberCheck != 255)
    341e:	89 81       	ldd	r24, Y+1	; 0x01
    3420:	8f 3f       	cpi	r24, 0xFF	; 255
    3422:	09 f0       	breq	.+2      	; 0x3426 <APP_Registeration_voidGetNumberOfAdmins+0xb2>
		{
			LOC_u8AdminNumber++;
    3424:	1f 5f       	subi	r17, 0xFF	; 255
{
	u16 LOC_u16LocationVariable = ADMIN_LOCATION_TOP;
	u8 LOC_u8AdminNumber = 0,LOC_u8NumberCheck = 0;
	for(;LOC_u16LocationVariable <= ADMIN_LOCATION_BOT;LOC_u16LocationVariable += STEP)
	{
		HAL_EEPROM_voidReadData(LOC_u16LocationVariable,&LOC_u8NumberCheck);
    3426:	80 e4       	ldi	r24, 0x40	; 64
    3428:	90 e0       	ldi	r25, 0x00	; 0
    342a:	b7 01       	movw	r22, r14
    342c:	0e 94 12 16 	call	0x2c24	; 0x2c24 <HAL_EEPROM_voidReadData>
		if(LOC_u8NumberCheck != 255)
    3430:	89 81       	ldd	r24, Y+1	; 0x01
    3432:	8f 3f       	cpi	r24, 0xFF	; 255
    3434:	09 f0       	breq	.+2      	; 0x3438 <APP_Registeration_voidGetNumberOfAdmins+0xc4>
		{
			LOC_u8AdminNumber++;
    3436:	1f 5f       	subi	r17, 0xFF	; 255
{
	u16 LOC_u16LocationVariable = ADMIN_LOCATION_TOP;
	u8 LOC_u8AdminNumber = 0,LOC_u8NumberCheck = 0;
	for(;LOC_u16LocationVariable <= ADMIN_LOCATION_BOT;LOC_u16LocationVariable += STEP)
	{
		HAL_EEPROM_voidReadData(LOC_u16LocationVariable,&LOC_u8NumberCheck);
    3438:	88 e4       	ldi	r24, 0x48	; 72
    343a:	90 e0       	ldi	r25, 0x00	; 0
    343c:	b7 01       	movw	r22, r14
    343e:	0e 94 12 16 	call	0x2c24	; 0x2c24 <HAL_EEPROM_voidReadData>
		if(LOC_u8NumberCheck != 255)
    3442:	89 81       	ldd	r24, Y+1	; 0x01
    3444:	8f 3f       	cpi	r24, 0xFF	; 255
    3446:	09 f0       	breq	.+2      	; 0x344a <APP_Registeration_voidGetNumberOfAdmins+0xd6>
		{
			LOC_u8AdminNumber++;
    3448:	1f 5f       	subi	r17, 0xFF	; 255
{
	u16 LOC_u16LocationVariable = ADMIN_LOCATION_TOP;
	u8 LOC_u8AdminNumber = 0,LOC_u8NumberCheck = 0;
	for(;LOC_u16LocationVariable <= ADMIN_LOCATION_BOT;LOC_u16LocationVariable += STEP)
	{
		HAL_EEPROM_voidReadData(LOC_u16LocationVariable,&LOC_u8NumberCheck);
    344a:	80 e5       	ldi	r24, 0x50	; 80
    344c:	90 e0       	ldi	r25, 0x00	; 0
    344e:	b7 01       	movw	r22, r14
    3450:	0e 94 12 16 	call	0x2c24	; 0x2c24 <HAL_EEPROM_voidReadData>
		if(LOC_u8NumberCheck != 255)
    3454:	89 81       	ldd	r24, Y+1	; 0x01
    3456:	8f 3f       	cpi	r24, 0xFF	; 255
    3458:	09 f0       	breq	.+2      	; 0x345c <APP_Registeration_voidGetNumberOfAdmins+0xe8>
		{
			LOC_u8AdminNumber++;
    345a:	1f 5f       	subi	r17, 0xFF	; 255
{
	u16 LOC_u16LocationVariable = ADMIN_LOCATION_TOP;
	u8 LOC_u8AdminNumber = 0,LOC_u8NumberCheck = 0;
	for(;LOC_u16LocationVariable <= ADMIN_LOCATION_BOT;LOC_u16LocationVariable += STEP)
	{
		HAL_EEPROM_voidReadData(LOC_u16LocationVariable,&LOC_u8NumberCheck);
    345c:	88 e5       	ldi	r24, 0x58	; 88
    345e:	90 e0       	ldi	r25, 0x00	; 0
    3460:	b7 01       	movw	r22, r14
    3462:	0e 94 12 16 	call	0x2c24	; 0x2c24 <HAL_EEPROM_voidReadData>
		if(LOC_u8NumberCheck != 255)
    3466:	89 81       	ldd	r24, Y+1	; 0x01
    3468:	8f 3f       	cpi	r24, 0xFF	; 255
    346a:	09 f0       	breq	.+2      	; 0x346e <APP_Registeration_voidGetNumberOfAdmins+0xfa>
		{
			LOC_u8AdminNumber++;
    346c:	1f 5f       	subi	r17, 0xFF	; 255
		else
		{
			/*Do nothing*/
		}
	}
	*LOC_Pu8AdminsNumber = LOC_u8AdminNumber;
    346e:	f6 01       	movw	r30, r12
    3470:	10 83       	st	Z, r17

}
    3472:	0f 90       	pop	r0
    3474:	cf 91       	pop	r28
    3476:	df 91       	pop	r29
    3478:	1f 91       	pop	r17
    347a:	ff 90       	pop	r15
    347c:	ef 90       	pop	r14
    347e:	df 90       	pop	r13
    3480:	cf 90       	pop	r12
    3482:	08 95       	ret

00003484 <Check_AdminID>:
}



u8 Check_AdminID(u16 LOC_u16AdminID)
{
    3484:	6f 92       	push	r6
    3486:	7f 92       	push	r7
    3488:	8f 92       	push	r8
    348a:	9f 92       	push	r9
    348c:	af 92       	push	r10
    348e:	bf 92       	push	r11
    3490:	cf 92       	push	r12
    3492:	df 92       	push	r13
    3494:	ff 92       	push	r15
    3496:	0f 93       	push	r16
    3498:	1f 93       	push	r17
    349a:	df 93       	push	r29
    349c:	cf 93       	push	r28
    349e:	cd b7       	in	r28, 0x3d	; 61
    34a0:	de b7       	in	r29, 0x3e	; 62
    34a2:	28 97       	sbiw	r28, 0x08	; 8
    34a4:	0f b6       	in	r0, 0x3f	; 63
    34a6:	f8 94       	cli
    34a8:	de bf       	out	0x3e, r29	; 62
    34aa:	0f be       	out	0x3f, r0	; 63
    34ac:	cd bf       	out	0x3d, r28	; 61
    34ae:	9c 01       	movw	r18, r24
	u8 i=3,LOC_u8AdminNumberFlag = 0, LOC_u8IDMatchedFlag = 0 ,LOC_u8AdminID_Read[MAX_DIGITS] , LOC_u8AdminIDArray[MAX_DIGITS], LOC_u8DigitCounter = 0;

	u16 LOC_u16AdminLocationVariable = ADMIN_LOCATION_TOP,LOC_u16AdminLocationVariableDigits ;


	while (LOC_u16AdminID != 0)
    34b0:	00 97       	sbiw	r24, 0x00	; 0
    34b2:	b9 f0       	breq	.+46     	; 0x34e2 <Check_AdminID+0x5e>
    34b4:	43 e0       	ldi	r20, 0x03	; 3
    34b6:	8e 01       	movw	r16, r28
    34b8:	0b 5f       	subi	r16, 0xFB	; 251
    34ba:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		LOC_u8AdminIDArray[i] = (LOC_u16AdminID % 10);
    34bc:	f8 01       	movw	r30, r16
    34be:	e4 0f       	add	r30, r20
    34c0:	f1 1d       	adc	r31, r1
    34c2:	c9 01       	movw	r24, r18
    34c4:	6a e0       	ldi	r22, 0x0A	; 10
    34c6:	70 e0       	ldi	r23, 0x00	; 0
    34c8:	0e 94 9d 30 	call	0x613a	; 0x613a <__udivmodhi4>
    34cc:	80 83       	st	Z, r24
		LOC_u16AdminID = (LOC_u16AdminID / 10);
    34ce:	c9 01       	movw	r24, r18
    34d0:	6a e0       	ldi	r22, 0x0A	; 10
    34d2:	70 e0       	ldi	r23, 0x00	; 0
    34d4:	0e 94 9d 30 	call	0x613a	; 0x613a <__udivmodhi4>
    34d8:	9b 01       	movw	r18, r22
		i--;
    34da:	41 50       	subi	r20, 0x01	; 1
	u8 i=3,LOC_u8AdminNumberFlag = 0, LOC_u8IDMatchedFlag = 0 ,LOC_u8AdminID_Read[MAX_DIGITS] , LOC_u8AdminIDArray[MAX_DIGITS], LOC_u8DigitCounter = 0;

	u16 LOC_u16AdminLocationVariable = ADMIN_LOCATION_TOP,LOC_u16AdminLocationVariableDigits ;


	while (LOC_u16AdminID != 0)
    34dc:	61 15       	cp	r22, r1
    34de:	71 05       	cpc	r23, r1
    34e0:	69 f7       	brne	.-38     	; 0x34bc <Check_AdminID+0x38>
    34e2:	ff 24       	eor	r15, r15
    34e4:	00 e0       	ldi	r16, 0x00	; 0
    34e6:	10 e0       	ldi	r17, 0x00	; 0
    34e8:	6e 01       	movw	r12, r28
    34ea:	08 94       	sec
    34ec:	c1 1c       	adc	r12, r1
    34ee:	d1 1c       	adc	r13, r1
		LOC_u8AdminNumberFlag++;
		LOC_u16AdminLocationVariableDigits = LOC_u16AdminLocationVariable;
		for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DIGITS;LOC_u8DigitCounter++)
		{

			HAL_EEPROM_voidReadData(LOC_u16AdminLocationVariableDigits,&LOC_u8AdminID_Read[LOC_u8DigitCounter]);
    34f0:	72 e0       	ldi	r23, 0x02	; 2
    34f2:	a7 2e       	mov	r10, r23
    34f4:	b1 2c       	mov	r11, r1
    34f6:	ac 0e       	add	r10, r28
    34f8:	bd 1e       	adc	r11, r29
    34fa:	63 e0       	ldi	r22, 0x03	; 3
    34fc:	86 2e       	mov	r8, r22
    34fe:	91 2c       	mov	r9, r1
    3500:	8c 0e       	add	r8, r28
    3502:	9d 1e       	adc	r9, r29
    3504:	54 e0       	ldi	r21, 0x04	; 4
    3506:	65 2e       	mov	r6, r21
    3508:	71 2c       	mov	r7, r1
    350a:	6c 0e       	add	r6, r28
    350c:	7d 1e       	adc	r7, r29
	}


	for(;LOC_u16AdminLocationVariable <= ADMIN_LOCATION_BOT;LOC_u16AdminLocationVariable += STEP)
	{
		LOC_u8AdminNumberFlag++;
    350e:	f3 94       	inc	r15
		LOC_u16AdminLocationVariableDigits = LOC_u16AdminLocationVariable;
		for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DIGITS;LOC_u8DigitCounter++)
		{

			HAL_EEPROM_voidReadData(LOC_u16AdminLocationVariableDigits,&LOC_u8AdminID_Read[LOC_u8DigitCounter]);
    3510:	c8 01       	movw	r24, r16
    3512:	b6 01       	movw	r22, r12
    3514:	0e 94 12 16 	call	0x2c24	; 0x2c24 <HAL_EEPROM_voidReadData>
			if (LOC_u8AdminID_Read[LOC_u8DigitCounter] == LOC_u8AdminIDArray[LOC_u8DigitCounter])
    3518:	99 81       	ldd	r25, Y+1	; 0x01
    351a:	8d 81       	ldd	r24, Y+5	; 0x05
    351c:	98 17       	cp	r25, r24
    351e:	81 f5       	brne	.+96     	; 0x3580 <Check_AdminID+0xfc>
		LOC_u8AdminNumberFlag++;
		LOC_u16AdminLocationVariableDigits = LOC_u16AdminLocationVariable;
		for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DIGITS;LOC_u8DigitCounter++)
		{

			HAL_EEPROM_voidReadData(LOC_u16AdminLocationVariableDigits,&LOC_u8AdminID_Read[LOC_u8DigitCounter]);
    3520:	c8 01       	movw	r24, r16
    3522:	01 96       	adiw	r24, 0x01	; 1
    3524:	b5 01       	movw	r22, r10
    3526:	0e 94 12 16 	call	0x2c24	; 0x2c24 <HAL_EEPROM_voidReadData>
			if (LOC_u8AdminID_Read[LOC_u8DigitCounter] == LOC_u8AdminIDArray[LOC_u8DigitCounter])
    352a:	9a 81       	ldd	r25, Y+2	; 0x02
    352c:	8e 81       	ldd	r24, Y+6	; 0x06
    352e:	98 17       	cp	r25, r24
    3530:	39 f5       	brne	.+78     	; 0x3580 <Check_AdminID+0xfc>
		LOC_u8AdminNumberFlag++;
		LOC_u16AdminLocationVariableDigits = LOC_u16AdminLocationVariable;
		for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DIGITS;LOC_u8DigitCounter++)
		{

			HAL_EEPROM_voidReadData(LOC_u16AdminLocationVariableDigits,&LOC_u8AdminID_Read[LOC_u8DigitCounter]);
    3532:	c8 01       	movw	r24, r16
    3534:	02 96       	adiw	r24, 0x02	; 2
    3536:	b4 01       	movw	r22, r8
    3538:	0e 94 12 16 	call	0x2c24	; 0x2c24 <HAL_EEPROM_voidReadData>
			if (LOC_u8AdminID_Read[LOC_u8DigitCounter] == LOC_u8AdminIDArray[LOC_u8DigitCounter])
    353c:	9b 81       	ldd	r25, Y+3	; 0x03
    353e:	8f 81       	ldd	r24, Y+7	; 0x07
    3540:	98 17       	cp	r25, r24
    3542:	f1 f4       	brne	.+60     	; 0x3580 <Check_AdminID+0xfc>
		LOC_u8AdminNumberFlag++;
		LOC_u16AdminLocationVariableDigits = LOC_u16AdminLocationVariable;
		for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DIGITS;LOC_u8DigitCounter++)
		{

			HAL_EEPROM_voidReadData(LOC_u16AdminLocationVariableDigits,&LOC_u8AdminID_Read[LOC_u8DigitCounter]);
    3544:	c8 01       	movw	r24, r16
    3546:	03 96       	adiw	r24, 0x03	; 3
    3548:	b3 01       	movw	r22, r6
    354a:	0e 94 12 16 	call	0x2c24	; 0x2c24 <HAL_EEPROM_voidReadData>
			if (LOC_u8AdminID_Read[LOC_u8DigitCounter] == LOC_u8AdminIDArray[LOC_u8DigitCounter])
    354e:	9c 81       	ldd	r25, Y+4	; 0x04
    3550:	88 85       	ldd	r24, Y+8	; 0x08
    3552:	98 17       	cp	r25, r24
    3554:	a9 f4       	brne	.+42     	; 0x3580 <Check_AdminID+0xfc>
			//Remain in the loop.
		}
	}

	return ADMIN_NOT_FOUND;
}
    3556:	8f 2d       	mov	r24, r15
    3558:	28 96       	adiw	r28, 0x08	; 8
    355a:	0f b6       	in	r0, 0x3f	; 63
    355c:	f8 94       	cli
    355e:	de bf       	out	0x3e, r29	; 62
    3560:	0f be       	out	0x3f, r0	; 63
    3562:	cd bf       	out	0x3d, r28	; 61
    3564:	cf 91       	pop	r28
    3566:	df 91       	pop	r29
    3568:	1f 91       	pop	r17
    356a:	0f 91       	pop	r16
    356c:	ff 90       	pop	r15
    356e:	df 90       	pop	r13
    3570:	cf 90       	pop	r12
    3572:	bf 90       	pop	r11
    3574:	af 90       	pop	r10
    3576:	9f 90       	pop	r9
    3578:	8f 90       	pop	r8
    357a:	7f 90       	pop	r7
    357c:	6f 90       	pop	r6
    357e:	08 95       	ret
		LOC_u16AdminID = (LOC_u16AdminID / 10);
		i--;
	}


	for(;LOC_u16AdminLocationVariable <= ADMIN_LOCATION_BOT;LOC_u16AdminLocationVariable += STEP)
    3580:	08 5f       	subi	r16, 0xF8	; 248
    3582:	1f 4f       	sbci	r17, 0xFF	; 255
    3584:	8c e0       	ldi	r24, 0x0C	; 12
    3586:	f8 16       	cp	r15, r24
    3588:	11 f6       	brne	.-124    	; 0x350e <Check_AdminID+0x8a>
    358a:	4b eb       	ldi	r20, 0xBB	; 187
    358c:	f4 2e       	mov	r15, r20
    358e:	e3 cf       	rjmp	.-58     	; 0x3556 <Check_AdminID+0xd2>

00003590 <APP_Registeration_voidResetMemory>:
		}
	}
}

void APP_Registeration_voidResetMemory(void)
{
    3590:	ef 92       	push	r14
    3592:	ff 92       	push	r15
    3594:	0f 93       	push	r16
    3596:	1f 93       	push	r17
    3598:	cf 93       	push	r28
    359a:	df 93       	push	r29
    359c:	80 e0       	ldi	r24, 0x00	; 0
    359e:	90 e0       	ldi	r25, 0x00	; 0
    35a0:	c0 e0       	ldi	r28, 0x00	; 0
    35a2:	d0 e0       	ldi	r29, 0x00	; 0
	for(;LOC_u16LocationVariable <= MEMORY_BOT;LOC_u16LocationVariable += STEP)
	{
		LOC_u16LocationVariableDigits = LOC_u16LocationVariable;
		for(LOC_u8UserDetails =0;LOC_u8UserDetails<MAX_DETAILS;LOC_u8UserDetails++)
		{
			HAL_EEPROM_voidWriteData(LOC_u16LocationVariableDigits++,CLEAR_DATA);
    35a4:	8c 01       	movw	r16, r24
    35a6:	0f 5f       	subi	r16, 0xFF	; 255
    35a8:	1f 4f       	sbci	r17, 0xFF	; 255
    35aa:	6f ef       	ldi	r22, 0xFF	; 255
    35ac:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <HAL_EEPROM_voidWriteData>
    35b0:	78 01       	movw	r14, r16
    35b2:	08 94       	sec
    35b4:	e1 1c       	adc	r14, r1
    35b6:	f1 1c       	adc	r15, r1
    35b8:	c8 01       	movw	r24, r16
    35ba:	6f ef       	ldi	r22, 0xFF	; 255
    35bc:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <HAL_EEPROM_voidWriteData>
    35c0:	87 01       	movw	r16, r14
    35c2:	0f 5f       	subi	r16, 0xFF	; 255
    35c4:	1f 4f       	sbci	r17, 0xFF	; 255
    35c6:	c7 01       	movw	r24, r14
    35c8:	6f ef       	ldi	r22, 0xFF	; 255
    35ca:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <HAL_EEPROM_voidWriteData>
    35ce:	78 01       	movw	r14, r16
    35d0:	08 94       	sec
    35d2:	e1 1c       	adc	r14, r1
    35d4:	f1 1c       	adc	r15, r1
    35d6:	c8 01       	movw	r24, r16
    35d8:	6f ef       	ldi	r22, 0xFF	; 255
    35da:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <HAL_EEPROM_voidWriteData>
    35de:	87 01       	movw	r16, r14
    35e0:	0f 5f       	subi	r16, 0xFF	; 255
    35e2:	1f 4f       	sbci	r17, 0xFF	; 255
    35e4:	c7 01       	movw	r24, r14
    35e6:	6f ef       	ldi	r22, 0xFF	; 255
    35e8:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <HAL_EEPROM_voidWriteData>
    35ec:	78 01       	movw	r14, r16
    35ee:	08 94       	sec
    35f0:	e1 1c       	adc	r14, r1
    35f2:	f1 1c       	adc	r15, r1
    35f4:	c8 01       	movw	r24, r16
    35f6:	6f ef       	ldi	r22, 0xFF	; 255
    35f8:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <HAL_EEPROM_voidWriteData>
    35fc:	c7 01       	movw	r24, r14
    35fe:	6f ef       	ldi	r22, 0xFF	; 255
    3600:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <HAL_EEPROM_voidWriteData>
    3604:	c7 01       	movw	r24, r14
    3606:	01 96       	adiw	r24, 0x01	; 1
    3608:	6f ef       	ldi	r22, 0xFF	; 255
    360a:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <HAL_EEPROM_voidWriteData>

void APP_Registeration_voidResetMemory(void)
{
	u16 LOC_u16LocationVariable = MEMORY_TOP,LOC_u16LocationVariableDigits;
	u8 LOC_u8UserDetails;
	for(;LOC_u16LocationVariable <= MEMORY_BOT;LOC_u16LocationVariable += STEP)
    360e:	28 96       	adiw	r28, 0x08	; 8
    3610:	ce 01       	movw	r24, r28
    3612:	24 e0       	ldi	r18, 0x04	; 4
    3614:	c0 30       	cpi	r28, 0x00	; 0
    3616:	d2 07       	cpc	r29, r18
    3618:	29 f6       	brne	.-118    	; 0x35a4 <APP_Registeration_voidResetMemory+0x14>
		for(LOC_u8UserDetails =0;LOC_u8UserDetails<MAX_DETAILS;LOC_u8UserDetails++)
		{
			HAL_EEPROM_voidWriteData(LOC_u16LocationVariableDigits++,CLEAR_DATA);
		}
	}
}
    361a:	df 91       	pop	r29
    361c:	cf 91       	pop	r28
    361e:	1f 91       	pop	r17
    3620:	0f 91       	pop	r16
    3622:	ff 90       	pop	r15
    3624:	ef 90       	pop	r14
    3626:	08 95       	ret

00003628 <APP_Registeration_voidDeleteAllUsers>:
	*LOC_Pu8AdminsNumber = LOC_u8AdminNumber;

}

void APP_Registeration_voidDeleteAllUsers(void)
{
    3628:	ef 92       	push	r14
    362a:	ff 92       	push	r15
    362c:	0f 93       	push	r16
    362e:	1f 93       	push	r17
    3630:	cf 93       	push	r28
    3632:	df 93       	push	r29
    3634:	80 e6       	ldi	r24, 0x60	; 96
    3636:	90 e0       	ldi	r25, 0x00	; 0
    3638:	c0 e6       	ldi	r28, 0x60	; 96
    363a:	d0 e0       	ldi	r29, 0x00	; 0
	for(;LOC_u16UserLocationVariable <= USER_LOCATION_BOT;LOC_u16UserLocationVariable += STEP)
	{
		LOC_u16UserLocationVariableDigits = LOC_u16UserLocationVariable;
		for(LOC_u8UserDetails =0;LOC_u8UserDetails<MAX_DETAILS;LOC_u8UserDetails++)
		{
			HAL_EEPROM_voidWriteData(LOC_u16UserLocationVariableDigits++,CLEAR_DATA);
    363c:	8c 01       	movw	r16, r24
    363e:	0f 5f       	subi	r16, 0xFF	; 255
    3640:	1f 4f       	sbci	r17, 0xFF	; 255
    3642:	6f ef       	ldi	r22, 0xFF	; 255
    3644:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <HAL_EEPROM_voidWriteData>
    3648:	78 01       	movw	r14, r16
    364a:	08 94       	sec
    364c:	e1 1c       	adc	r14, r1
    364e:	f1 1c       	adc	r15, r1
    3650:	c8 01       	movw	r24, r16
    3652:	6f ef       	ldi	r22, 0xFF	; 255
    3654:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <HAL_EEPROM_voidWriteData>
    3658:	87 01       	movw	r16, r14
    365a:	0f 5f       	subi	r16, 0xFF	; 255
    365c:	1f 4f       	sbci	r17, 0xFF	; 255
    365e:	c7 01       	movw	r24, r14
    3660:	6f ef       	ldi	r22, 0xFF	; 255
    3662:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <HAL_EEPROM_voidWriteData>
    3666:	78 01       	movw	r14, r16
    3668:	08 94       	sec
    366a:	e1 1c       	adc	r14, r1
    366c:	f1 1c       	adc	r15, r1
    366e:	c8 01       	movw	r24, r16
    3670:	6f ef       	ldi	r22, 0xFF	; 255
    3672:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <HAL_EEPROM_voidWriteData>
    3676:	87 01       	movw	r16, r14
    3678:	0f 5f       	subi	r16, 0xFF	; 255
    367a:	1f 4f       	sbci	r17, 0xFF	; 255
    367c:	c7 01       	movw	r24, r14
    367e:	6f ef       	ldi	r22, 0xFF	; 255
    3680:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <HAL_EEPROM_voidWriteData>
    3684:	78 01       	movw	r14, r16
    3686:	08 94       	sec
    3688:	e1 1c       	adc	r14, r1
    368a:	f1 1c       	adc	r15, r1
    368c:	c8 01       	movw	r24, r16
    368e:	6f ef       	ldi	r22, 0xFF	; 255
    3690:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <HAL_EEPROM_voidWriteData>
    3694:	c7 01       	movw	r24, r14
    3696:	6f ef       	ldi	r22, 0xFF	; 255
    3698:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <HAL_EEPROM_voidWriteData>
    369c:	c7 01       	movw	r24, r14
    369e:	01 96       	adiw	r24, 0x01	; 1
    36a0:	6f ef       	ldi	r22, 0xFF	; 255
    36a2:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <HAL_EEPROM_voidWriteData>

void APP_Registeration_voidDeleteAllUsers(void)
{
	u16 LOC_u16UserLocationVariable = USER_LOCATION_TOP,LOC_u16UserLocationVariableDigits;
	u8 LOC_u8UserDetails;
	for(;LOC_u16UserLocationVariable <= USER_LOCATION_BOT;LOC_u16UserLocationVariable += STEP)
    36a6:	28 96       	adiw	r28, 0x08	; 8
    36a8:	ce 01       	movw	r24, r28
    36aa:	21 e0       	ldi	r18, 0x01	; 1
    36ac:	c0 32       	cpi	r28, 0x20	; 32
    36ae:	d2 07       	cpc	r29, r18
    36b0:	29 f6       	brne	.-118    	; 0x363c <APP_Registeration_voidDeleteAllUsers+0x14>
		for(LOC_u8UserDetails =0;LOC_u8UserDetails<MAX_DETAILS;LOC_u8UserDetails++)
		{
			HAL_EEPROM_voidWriteData(LOC_u16UserLocationVariableDigits++,CLEAR_DATA);
		}
	}
}
    36b2:	df 91       	pop	r29
    36b4:	cf 91       	pop	r28
    36b6:	1f 91       	pop	r17
    36b8:	0f 91       	pop	r16
    36ba:	ff 90       	pop	r15
    36bc:	ef 90       	pop	r14
    36be:	08 95       	ret

000036c0 <Remove_Admin>:
		return FULL;
	}
}

u8 Remove_Admin(u16 LOC_u16AdminID)
{
    36c0:	4f 92       	push	r4
    36c2:	5f 92       	push	r5
    36c4:	6f 92       	push	r6
    36c6:	7f 92       	push	r7
    36c8:	8f 92       	push	r8
    36ca:	9f 92       	push	r9
    36cc:	af 92       	push	r10
    36ce:	bf 92       	push	r11
    36d0:	cf 92       	push	r12
    36d2:	df 92       	push	r13
    36d4:	ef 92       	push	r14
    36d6:	ff 92       	push	r15
    36d8:	0f 93       	push	r16
    36da:	1f 93       	push	r17
    36dc:	df 93       	push	r29
    36de:	cf 93       	push	r28
    36e0:	cd b7       	in	r28, 0x3d	; 61
    36e2:	de b7       	in	r29, 0x3e	; 62
    36e4:	61 97       	sbiw	r28, 0x11	; 17
    36e6:	0f b6       	in	r0, 0x3f	; 63
    36e8:	f8 94       	cli
    36ea:	de bf       	out	0x3e, r29	; 62
    36ec:	0f be       	out	0x3f, r0	; 63
    36ee:	cd bf       	out	0x3d, r28	; 61
    36f0:	9c 01       	movw	r18, r24
	u8 i=3,LOC_u8AdminNumberFlag = 0, LOC_u8IDMatchedFlag = 0 ,LOC_u8AdminID_Read[MAX_DIGITS] , LOC_u8AdminIDArray[MAX_DIGITS], LOC_u8DigitCounter = 0;

	u16 LOC_u16AdminLocationVariable = ADMIN_LOCATION_TOP,LOC_u16AdminLocationVariableDigits ;


	while (LOC_u16AdminID != 0)
    36f2:	00 97       	sbiw	r24, 0x00	; 0
    36f4:	b9 f0       	breq	.+46     	; 0x3724 <Remove_Admin+0x64>
    36f6:	43 e0       	ldi	r20, 0x03	; 3
    36f8:	8e 01       	movw	r16, r28
    36fa:	0a 5f       	subi	r16, 0xFA	; 250
    36fc:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		LOC_u8AdminIDArray[i] = (LOC_u16AdminID % 10);
    36fe:	f8 01       	movw	r30, r16
    3700:	e4 0f       	add	r30, r20
    3702:	f1 1d       	adc	r31, r1
    3704:	c9 01       	movw	r24, r18
    3706:	6a e0       	ldi	r22, 0x0A	; 10
    3708:	70 e0       	ldi	r23, 0x00	; 0
    370a:	0e 94 9d 30 	call	0x613a	; 0x613a <__udivmodhi4>
    370e:	80 83       	st	Z, r24
		LOC_u16AdminID = (LOC_u16AdminID / 10);
    3710:	c9 01       	movw	r24, r18
    3712:	6a e0       	ldi	r22, 0x0A	; 10
    3714:	70 e0       	ldi	r23, 0x00	; 0
    3716:	0e 94 9d 30 	call	0x613a	; 0x613a <__udivmodhi4>
    371a:	9b 01       	movw	r18, r22
		i--;
    371c:	41 50       	subi	r20, 0x01	; 1
	u8 i=3,LOC_u8AdminNumberFlag = 0, LOC_u8IDMatchedFlag = 0 ,LOC_u8AdminID_Read[MAX_DIGITS] , LOC_u8AdminIDArray[MAX_DIGITS], LOC_u8DigitCounter = 0;

	u16 LOC_u16AdminLocationVariable = ADMIN_LOCATION_TOP,LOC_u16AdminLocationVariableDigits ;


	while (LOC_u16AdminID != 0)
    371e:	61 15       	cp	r22, r1
    3720:	71 05       	cpc	r23, r1
    3722:	69 f7       	brne	.-38     	; 0x36fe <Remove_Admin+0x3e>
	}
}

u8 Remove_Admin(u16 LOC_u16AdminID)
{
	u8 LOC_u8DigitCounter,LOC_u8AdminIDArray[MAX_DIGITS],LOC_u8ConfirmClearFlag = 0 ,LOC_u8AdminCheck = 0,LOC_u8GetLastAdmin, LOC_u8AdminDetails_Read[MAX_DETAILS] ,LOC_u8TransferArray[MAX_DETAILS] = {0} ;
    3724:	3a e0       	ldi	r19, 0x0A	; 10
    3726:	43 2e       	mov	r4, r19
    3728:	51 2c       	mov	r5, r1
    372a:	4c 0e       	add	r4, r28
    372c:	5d 1e       	adc	r5, r29
    372e:	88 e0       	ldi	r24, 0x08	; 8
    3730:	f2 01       	movw	r30, r4
    3732:	11 92       	st	Z+, r1
    3734:	8a 95       	dec	r24
    3736:	e9 f7       	brne	.-6      	; 0x3732 <Remove_Admin+0x72>
    3738:	ee 24       	eor	r14, r14
    373a:	00 e0       	ldi	r16, 0x00	; 0
    373c:	10 e0       	ldi	r17, 0x00	; 0
    373e:	22 e0       	ldi	r18, 0x02	; 2
    3740:	a2 2e       	mov	r10, r18
    3742:	b1 2c       	mov	r11, r1
    3744:	ac 0e       	add	r10, r28
    3746:	bd 1e       	adc	r11, r29
		LOC_u8AdminNumberFlag++;
		LOC_u16AdminLocationVariableDigits = LOC_u16AdminLocationVariable;
		for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DIGITS;LOC_u8DigitCounter++)
		{

			HAL_EEPROM_voidReadData(LOC_u16AdminLocationVariableDigits,&LOC_u8AdminID_Read[LOC_u8DigitCounter]);
    3748:	93 e0       	ldi	r25, 0x03	; 3
    374a:	89 2e       	mov	r8, r25
    374c:	91 2c       	mov	r9, r1
    374e:	8c 0e       	add	r8, r28
    3750:	9d 1e       	adc	r9, r29
    3752:	82 e0       	ldi	r24, 0x02	; 2
    3754:	c8 2e       	mov	r12, r24
    3756:	d1 2c       	mov	r13, r1
    3758:	ca 0c       	add	r12, r10
    375a:	db 1c       	adc	r13, r11
    375c:	b5 e0       	ldi	r27, 0x05	; 5
    375e:	6b 2e       	mov	r6, r27
    3760:	71 2c       	mov	r7, r1
    3762:	6c 0e       	add	r6, r28
    3764:	7d 1e       	adc	r7, r29
	}


	for(;LOC_u16AdminLocationVariable <= ADMIN_LOCATION_BOT;LOC_u16AdminLocationVariable += STEP)
	{
		LOC_u8AdminNumberFlag++;
    3766:	e3 94       	inc	r14
		LOC_u16AdminLocationVariableDigits = LOC_u16AdminLocationVariable;
		for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DIGITS;LOC_u8DigitCounter++)
		{

			HAL_EEPROM_voidReadData(LOC_u16AdminLocationVariableDigits,&LOC_u8AdminID_Read[LOC_u8DigitCounter]);
    3768:	c8 01       	movw	r24, r16
    376a:	b5 01       	movw	r22, r10
    376c:	0e 94 12 16 	call	0x2c24	; 0x2c24 <HAL_EEPROM_voidReadData>
			if (LOC_u8AdminID_Read[LOC_u8DigitCounter] == LOC_u8AdminIDArray[LOC_u8DigitCounter])
    3770:	9a 81       	ldd	r25, Y+2	; 0x02
    3772:	8e 81       	ldd	r24, Y+6	; 0x06
    3774:	98 17       	cp	r25, r24
    3776:	09 f0       	breq	.+2      	; 0x377a <Remove_Admin+0xba>
    3778:	38 c1       	rjmp	.+624    	; 0x39ea <Remove_Admin+0x32a>
		LOC_u8AdminNumberFlag++;
		LOC_u16AdminLocationVariableDigits = LOC_u16AdminLocationVariable;
		for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DIGITS;LOC_u8DigitCounter++)
		{

			HAL_EEPROM_voidReadData(LOC_u16AdminLocationVariableDigits,&LOC_u8AdminID_Read[LOC_u8DigitCounter]);
    377a:	c8 01       	movw	r24, r16
    377c:	01 96       	adiw	r24, 0x01	; 1
    377e:	b4 01       	movw	r22, r8
    3780:	0e 94 12 16 	call	0x2c24	; 0x2c24 <HAL_EEPROM_voidReadData>
			if (LOC_u8AdminID_Read[LOC_u8DigitCounter] == LOC_u8AdminIDArray[LOC_u8DigitCounter])
    3784:	9b 81       	ldd	r25, Y+3	; 0x03
    3786:	8f 81       	ldd	r24, Y+7	; 0x07
    3788:	98 17       	cp	r25, r24
    378a:	09 f0       	breq	.+2      	; 0x378e <Remove_Admin+0xce>
    378c:	2e c1       	rjmp	.+604    	; 0x39ea <Remove_Admin+0x32a>
		LOC_u8AdminNumberFlag++;
		LOC_u16AdminLocationVariableDigits = LOC_u16AdminLocationVariable;
		for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DIGITS;LOC_u8DigitCounter++)
		{

			HAL_EEPROM_voidReadData(LOC_u16AdminLocationVariableDigits,&LOC_u8AdminID_Read[LOC_u8DigitCounter]);
    378e:	c8 01       	movw	r24, r16
    3790:	02 96       	adiw	r24, 0x02	; 2
    3792:	b6 01       	movw	r22, r12
    3794:	0e 94 12 16 	call	0x2c24	; 0x2c24 <HAL_EEPROM_voidReadData>
			if (LOC_u8AdminID_Read[LOC_u8DigitCounter] == LOC_u8AdminIDArray[LOC_u8DigitCounter])
    3798:	9c 81       	ldd	r25, Y+4	; 0x04
    379a:	88 85       	ldd	r24, Y+8	; 0x08
    379c:	98 17       	cp	r25, r24
    379e:	09 f0       	breq	.+2      	; 0x37a2 <Remove_Admin+0xe2>
    37a0:	24 c1       	rjmp	.+584    	; 0x39ea <Remove_Admin+0x32a>
		LOC_u8AdminNumberFlag++;
		LOC_u16AdminLocationVariableDigits = LOC_u16AdminLocationVariable;
		for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DIGITS;LOC_u8DigitCounter++)
		{

			HAL_EEPROM_voidReadData(LOC_u16AdminLocationVariableDigits,&LOC_u8AdminID_Read[LOC_u8DigitCounter]);
    37a2:	c8 01       	movw	r24, r16
    37a4:	03 96       	adiw	r24, 0x03	; 3
    37a6:	b3 01       	movw	r22, r6
    37a8:	0e 94 12 16 	call	0x2c24	; 0x2c24 <HAL_EEPROM_voidReadData>
			if (LOC_u8AdminID_Read[LOC_u8DigitCounter] == LOC_u8AdminIDArray[LOC_u8DigitCounter])
    37ac:	9d 81       	ldd	r25, Y+5	; 0x05
    37ae:	89 85       	ldd	r24, Y+9	; 0x09
    37b0:	98 17       	cp	r25, r24
    37b2:	09 f0       	breq	.+2      	; 0x37b6 <Remove_Admin+0xf6>
    37b4:	1a c1       	rjmp	.+564    	; 0x39ea <Remove_Admin+0x32a>


void APP_Registeration_voidGetNumberOfAdmins(u8* LOC_Pu8AdminsNumber)
{
	u16 LOC_u16LocationVariable = ADMIN_LOCATION_TOP;
	u8 LOC_u8AdminNumber = 0,LOC_u8NumberCheck = 0;
    37b6:	19 82       	std	Y+1, r1	; 0x01
	for(;LOC_u16LocationVariable <= ADMIN_LOCATION_BOT;LOC_u16LocationVariable += STEP)
	{
		HAL_EEPROM_voidReadData(LOC_u16LocationVariable,&LOC_u8NumberCheck);
    37b8:	80 e0       	ldi	r24, 0x00	; 0
    37ba:	90 e0       	ldi	r25, 0x00	; 0
    37bc:	8e 01       	movw	r16, r28
    37be:	0f 5f       	subi	r16, 0xFF	; 255
    37c0:	1f 4f       	sbci	r17, 0xFF	; 255
    37c2:	b8 01       	movw	r22, r16
    37c4:	0e 94 12 16 	call	0x2c24	; 0x2c24 <HAL_EEPROM_voidReadData>
    37c8:	ff 24       	eor	r15, r15
    37ca:	89 81       	ldd	r24, Y+1	; 0x01
    37cc:	8f 3f       	cpi	r24, 0xFF	; 255
    37ce:	11 f0       	breq	.+4      	; 0x37d4 <Remove_Admin+0x114>
    37d0:	ff 24       	eor	r15, r15
    37d2:	f3 94       	inc	r15
    37d4:	88 e0       	ldi	r24, 0x08	; 8
    37d6:	90 e0       	ldi	r25, 0x00	; 0
    37d8:	b8 01       	movw	r22, r16
    37da:	0e 94 12 16 	call	0x2c24	; 0x2c24 <HAL_EEPROM_voidReadData>
		if(LOC_u8NumberCheck != 255)
    37de:	89 81       	ldd	r24, Y+1	; 0x01
    37e0:	8f 3f       	cpi	r24, 0xFF	; 255
    37e2:	09 f0       	breq	.+2      	; 0x37e6 <Remove_Admin+0x126>
		{
			LOC_u8AdminNumber++;
    37e4:	f3 94       	inc	r15
{
	u16 LOC_u16LocationVariable = ADMIN_LOCATION_TOP;
	u8 LOC_u8AdminNumber = 0,LOC_u8NumberCheck = 0;
	for(;LOC_u16LocationVariable <= ADMIN_LOCATION_BOT;LOC_u16LocationVariable += STEP)
	{
		HAL_EEPROM_voidReadData(LOC_u16LocationVariable,&LOC_u8NumberCheck);
    37e6:	80 e1       	ldi	r24, 0x10	; 16
    37e8:	90 e0       	ldi	r25, 0x00	; 0
    37ea:	b8 01       	movw	r22, r16
    37ec:	0e 94 12 16 	call	0x2c24	; 0x2c24 <HAL_EEPROM_voidReadData>
		if(LOC_u8NumberCheck != 255)
    37f0:	89 81       	ldd	r24, Y+1	; 0x01
    37f2:	8f 3f       	cpi	r24, 0xFF	; 255
    37f4:	09 f0       	breq	.+2      	; 0x37f8 <Remove_Admin+0x138>
		{
			LOC_u8AdminNumber++;
    37f6:	f3 94       	inc	r15
{
	u16 LOC_u16LocationVariable = ADMIN_LOCATION_TOP;
	u8 LOC_u8AdminNumber = 0,LOC_u8NumberCheck = 0;
	for(;LOC_u16LocationVariable <= ADMIN_LOCATION_BOT;LOC_u16LocationVariable += STEP)
	{
		HAL_EEPROM_voidReadData(LOC_u16LocationVariable,&LOC_u8NumberCheck);
    37f8:	88 e1       	ldi	r24, 0x18	; 24
    37fa:	90 e0       	ldi	r25, 0x00	; 0
    37fc:	b8 01       	movw	r22, r16
    37fe:	0e 94 12 16 	call	0x2c24	; 0x2c24 <HAL_EEPROM_voidReadData>
		if(LOC_u8NumberCheck != 255)
    3802:	89 81       	ldd	r24, Y+1	; 0x01
    3804:	8f 3f       	cpi	r24, 0xFF	; 255
    3806:	09 f0       	breq	.+2      	; 0x380a <Remove_Admin+0x14a>
		{
			LOC_u8AdminNumber++;
    3808:	f3 94       	inc	r15
{
	u16 LOC_u16LocationVariable = ADMIN_LOCATION_TOP;
	u8 LOC_u8AdminNumber = 0,LOC_u8NumberCheck = 0;
	for(;LOC_u16LocationVariable <= ADMIN_LOCATION_BOT;LOC_u16LocationVariable += STEP)
	{
		HAL_EEPROM_voidReadData(LOC_u16LocationVariable,&LOC_u8NumberCheck);
    380a:	80 e2       	ldi	r24, 0x20	; 32
    380c:	90 e0       	ldi	r25, 0x00	; 0
    380e:	b8 01       	movw	r22, r16
    3810:	0e 94 12 16 	call	0x2c24	; 0x2c24 <HAL_EEPROM_voidReadData>
		if(LOC_u8NumberCheck != 255)
    3814:	89 81       	ldd	r24, Y+1	; 0x01
    3816:	8f 3f       	cpi	r24, 0xFF	; 255
    3818:	09 f0       	breq	.+2      	; 0x381c <Remove_Admin+0x15c>
		{
			LOC_u8AdminNumber++;
    381a:	f3 94       	inc	r15
{
	u16 LOC_u16LocationVariable = ADMIN_LOCATION_TOP;
	u8 LOC_u8AdminNumber = 0,LOC_u8NumberCheck = 0;
	for(;LOC_u16LocationVariable <= ADMIN_LOCATION_BOT;LOC_u16LocationVariable += STEP)
	{
		HAL_EEPROM_voidReadData(LOC_u16LocationVariable,&LOC_u8NumberCheck);
    381c:	88 e2       	ldi	r24, 0x28	; 40
    381e:	90 e0       	ldi	r25, 0x00	; 0
    3820:	b8 01       	movw	r22, r16
    3822:	0e 94 12 16 	call	0x2c24	; 0x2c24 <HAL_EEPROM_voidReadData>
		if(LOC_u8NumberCheck != 255)
    3826:	89 81       	ldd	r24, Y+1	; 0x01
    3828:	8f 3f       	cpi	r24, 0xFF	; 255
    382a:	09 f0       	breq	.+2      	; 0x382e <Remove_Admin+0x16e>
		{
			LOC_u8AdminNumber++;
    382c:	f3 94       	inc	r15
{
	u16 LOC_u16LocationVariable = ADMIN_LOCATION_TOP;
	u8 LOC_u8AdminNumber = 0,LOC_u8NumberCheck = 0;
	for(;LOC_u16LocationVariable <= ADMIN_LOCATION_BOT;LOC_u16LocationVariable += STEP)
	{
		HAL_EEPROM_voidReadData(LOC_u16LocationVariable,&LOC_u8NumberCheck);
    382e:	80 e3       	ldi	r24, 0x30	; 48
    3830:	90 e0       	ldi	r25, 0x00	; 0
    3832:	b8 01       	movw	r22, r16
    3834:	0e 94 12 16 	call	0x2c24	; 0x2c24 <HAL_EEPROM_voidReadData>
		if(LOC_u8NumberCheck != 255)
    3838:	89 81       	ldd	r24, Y+1	; 0x01
    383a:	8f 3f       	cpi	r24, 0xFF	; 255
    383c:	09 f0       	breq	.+2      	; 0x3840 <Remove_Admin+0x180>
		{
			LOC_u8AdminNumber++;
    383e:	f3 94       	inc	r15
{
	u16 LOC_u16LocationVariable = ADMIN_LOCATION_TOP;
	u8 LOC_u8AdminNumber = 0,LOC_u8NumberCheck = 0;
	for(;LOC_u16LocationVariable <= ADMIN_LOCATION_BOT;LOC_u16LocationVariable += STEP)
	{
		HAL_EEPROM_voidReadData(LOC_u16LocationVariable,&LOC_u8NumberCheck);
    3840:	88 e3       	ldi	r24, 0x38	; 56
    3842:	90 e0       	ldi	r25, 0x00	; 0
    3844:	b8 01       	movw	r22, r16
    3846:	0e 94 12 16 	call	0x2c24	; 0x2c24 <HAL_EEPROM_voidReadData>
		if(LOC_u8NumberCheck != 255)
    384a:	89 81       	ldd	r24, Y+1	; 0x01
    384c:	8f 3f       	cpi	r24, 0xFF	; 255
    384e:	09 f0       	breq	.+2      	; 0x3852 <Remove_Admin+0x192>
		{
			LOC_u8AdminNumber++;
    3850:	f3 94       	inc	r15
{
	u16 LOC_u16LocationVariable = ADMIN_LOCATION_TOP;
	u8 LOC_u8AdminNumber = 0,LOC_u8NumberCheck = 0;
	for(;LOC_u16LocationVariable <= ADMIN_LOCATION_BOT;LOC_u16LocationVariable += STEP)
	{
		HAL_EEPROM_voidReadData(LOC_u16LocationVariable,&LOC_u8NumberCheck);
    3852:	80 e4       	ldi	r24, 0x40	; 64
    3854:	90 e0       	ldi	r25, 0x00	; 0
    3856:	b8 01       	movw	r22, r16
    3858:	0e 94 12 16 	call	0x2c24	; 0x2c24 <HAL_EEPROM_voidReadData>
		if(LOC_u8NumberCheck != 255)
    385c:	89 81       	ldd	r24, Y+1	; 0x01
    385e:	8f 3f       	cpi	r24, 0xFF	; 255
    3860:	09 f0       	breq	.+2      	; 0x3864 <Remove_Admin+0x1a4>
		{
			LOC_u8AdminNumber++;
    3862:	f3 94       	inc	r15
{
	u16 LOC_u16LocationVariable = ADMIN_LOCATION_TOP;
	u8 LOC_u8AdminNumber = 0,LOC_u8NumberCheck = 0;
	for(;LOC_u16LocationVariable <= ADMIN_LOCATION_BOT;LOC_u16LocationVariable += STEP)
	{
		HAL_EEPROM_voidReadData(LOC_u16LocationVariable,&LOC_u8NumberCheck);
    3864:	88 e4       	ldi	r24, 0x48	; 72
    3866:	90 e0       	ldi	r25, 0x00	; 0
    3868:	b8 01       	movw	r22, r16
    386a:	0e 94 12 16 	call	0x2c24	; 0x2c24 <HAL_EEPROM_voidReadData>
		if(LOC_u8NumberCheck != 255)
    386e:	89 81       	ldd	r24, Y+1	; 0x01
    3870:	8f 3f       	cpi	r24, 0xFF	; 255
    3872:	09 f0       	breq	.+2      	; 0x3876 <Remove_Admin+0x1b6>
		{
			LOC_u8AdminNumber++;
    3874:	f3 94       	inc	r15
{
	u16 LOC_u16LocationVariable = ADMIN_LOCATION_TOP;
	u8 LOC_u8AdminNumber = 0,LOC_u8NumberCheck = 0;
	for(;LOC_u16LocationVariable <= ADMIN_LOCATION_BOT;LOC_u16LocationVariable += STEP)
	{
		HAL_EEPROM_voidReadData(LOC_u16LocationVariable,&LOC_u8NumberCheck);
    3876:	80 e5       	ldi	r24, 0x50	; 80
    3878:	90 e0       	ldi	r25, 0x00	; 0
    387a:	b8 01       	movw	r22, r16
    387c:	0e 94 12 16 	call	0x2c24	; 0x2c24 <HAL_EEPROM_voidReadData>
		if(LOC_u8NumberCheck != 255)
    3880:	89 81       	ldd	r24, Y+1	; 0x01
    3882:	8f 3f       	cpi	r24, 0xFF	; 255
    3884:	09 f0       	breq	.+2      	; 0x3888 <Remove_Admin+0x1c8>
		{
			LOC_u8AdminNumber++;
    3886:	f3 94       	inc	r15
{
	u16 LOC_u16LocationVariable = ADMIN_LOCATION_TOP;
	u8 LOC_u8AdminNumber = 0,LOC_u8NumberCheck = 0;
	for(;LOC_u16LocationVariable <= ADMIN_LOCATION_BOT;LOC_u16LocationVariable += STEP)
	{
		HAL_EEPROM_voidReadData(LOC_u16LocationVariable,&LOC_u8NumberCheck);
    3888:	88 e5       	ldi	r24, 0x58	; 88
    388a:	90 e0       	ldi	r25, 0x00	; 0
    388c:	b8 01       	movw	r22, r16
    388e:	0e 94 12 16 	call	0x2c24	; 0x2c24 <HAL_EEPROM_voidReadData>
		if(LOC_u8NumberCheck != 255)
    3892:	89 81       	ldd	r24, Y+1	; 0x01
    3894:	8f 3f       	cpi	r24, 0xFF	; 255
    3896:	09 f0       	breq	.+2      	; 0x389a <Remove_Admin+0x1da>
		{
			LOC_u8AdminNumber++;
    3898:	f3 94       	inc	r15



	LOC_u16LastAdminStartLocation = (ADMIN_LOCATION_TOP - STEP);

	if ((LOC_u8AdminCheck <= ADMINS_MAX_AMOUNT) && (LOC_u8AdminCheck >= USERS_MIN_AMOUNT))
    389a:	8e 2d       	mov	r24, r14
    389c:	81 50       	subi	r24, 0x01	; 1
    389e:	8c 30       	cpi	r24, 0x0C	; 12
    38a0:	08 f0       	brcs	.+2      	; 0x38a4 <Remove_Admin+0x1e4>
    38a2:	d3 c0       	rjmp	.+422    	; 0x3a4a <Remove_Admin+0x38a>
	{
		LOC_u16LastLocation = (LOC_u16LastAdminStartLocation ) + ( STEP * LOC_u8GetLastAdmin);
    38a4:	cf 2c       	mov	r12, r15
    38a6:	dd 24       	eor	r13, r13
    38a8:	cc 0c       	add	r12, r12
    38aa:	dd 1c       	adc	r13, r13
    38ac:	cc 0c       	add	r12, r12
    38ae:	dd 1c       	adc	r13, r13
    38b0:	cc 0c       	add	r12, r12
    38b2:	dd 1c       	adc	r13, r13
    38b4:	86 01       	movw	r16, r12
    38b6:	08 50       	subi	r16, 0x08	; 8
    38b8:	10 40       	sbci	r17, 0x00	; 0

		if (LOC_u8AdminCheck == LOC_u8GetLastAdmin)
    38ba:	ef 14       	cp	r14, r15
    38bc:	09 f4       	brne	.+2      	; 0x38c0 <Remove_Admin+0x200>
    38be:	9e c0       	rjmp	.+316    	; 0x39fc <Remove_Admin+0x33c>
		{

			for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DETAILS;LOC_u8DigitCounter++)
			{

				HAL_EEPROM_voidReadData(LOC_u16LastLocation,&LOC_u8TransferArray[LOC_u8DigitCounter]);
    38c0:	c8 01       	movw	r24, r16
    38c2:	b2 01       	movw	r22, r4
    38c4:	0e 94 12 16 	call	0x2c24	; 0x2c24 <HAL_EEPROM_voidReadData>
				HAL_EEPROM_voidWriteData(LOC_u16LastLocation,CLEAR_DATA);
    38c8:	c8 01       	movw	r24, r16
    38ca:	6f ef       	ldi	r22, 0xFF	; 255
    38cc:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <HAL_EEPROM_voidWriteData>
				LOC_u8ConfirmClearFlag++;
				LOC_u16LastLocation++;
    38d0:	86 01       	movw	r16, r12
    38d2:	07 50       	subi	r16, 0x07	; 7
    38d4:	10 40       	sbci	r17, 0x00	; 0
		{

			for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DETAILS;LOC_u8DigitCounter++)
			{

				HAL_EEPROM_voidReadData(LOC_u16LastLocation,&LOC_u8TransferArray[LOC_u8DigitCounter]);
    38d6:	c8 01       	movw	r24, r16
    38d8:	be 01       	movw	r22, r28
    38da:	65 5f       	subi	r22, 0xF5	; 245
    38dc:	7f 4f       	sbci	r23, 0xFF	; 255
    38de:	0e 94 12 16 	call	0x2c24	; 0x2c24 <HAL_EEPROM_voidReadData>
				HAL_EEPROM_voidWriteData(LOC_u16LastLocation,CLEAR_DATA);
    38e2:	c8 01       	movw	r24, r16
    38e4:	6f ef       	ldi	r22, 0xFF	; 255
    38e6:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <HAL_EEPROM_voidWriteData>
				LOC_u8ConfirmClearFlag++;
				LOC_u16LastLocation++;
    38ea:	86 01       	movw	r16, r12
    38ec:	06 50       	subi	r16, 0x06	; 6
    38ee:	10 40       	sbci	r17, 0x00	; 0
		{

			for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DETAILS;LOC_u8DigitCounter++)
			{

				HAL_EEPROM_voidReadData(LOC_u16LastLocation,&LOC_u8TransferArray[LOC_u8DigitCounter]);
    38f0:	c8 01       	movw	r24, r16
    38f2:	be 01       	movw	r22, r28
    38f4:	64 5f       	subi	r22, 0xF4	; 244
    38f6:	7f 4f       	sbci	r23, 0xFF	; 255
    38f8:	0e 94 12 16 	call	0x2c24	; 0x2c24 <HAL_EEPROM_voidReadData>
				HAL_EEPROM_voidWriteData(LOC_u16LastLocation,CLEAR_DATA);
    38fc:	c8 01       	movw	r24, r16
    38fe:	6f ef       	ldi	r22, 0xFF	; 255
    3900:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <HAL_EEPROM_voidWriteData>
				LOC_u8ConfirmClearFlag++;
				LOC_u16LastLocation++;
    3904:	86 01       	movw	r16, r12
    3906:	05 50       	subi	r16, 0x05	; 5
    3908:	10 40       	sbci	r17, 0x00	; 0
		{

			for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DETAILS;LOC_u8DigitCounter++)
			{

				HAL_EEPROM_voidReadData(LOC_u16LastLocation,&LOC_u8TransferArray[LOC_u8DigitCounter]);
    390a:	c8 01       	movw	r24, r16
    390c:	be 01       	movw	r22, r28
    390e:	63 5f       	subi	r22, 0xF3	; 243
    3910:	7f 4f       	sbci	r23, 0xFF	; 255
    3912:	0e 94 12 16 	call	0x2c24	; 0x2c24 <HAL_EEPROM_voidReadData>
				HAL_EEPROM_voidWriteData(LOC_u16LastLocation,CLEAR_DATA);
    3916:	c8 01       	movw	r24, r16
    3918:	6f ef       	ldi	r22, 0xFF	; 255
    391a:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <HAL_EEPROM_voidWriteData>
				LOC_u8ConfirmClearFlag++;
				LOC_u16LastLocation++;
    391e:	86 01       	movw	r16, r12
    3920:	04 50       	subi	r16, 0x04	; 4
    3922:	10 40       	sbci	r17, 0x00	; 0
		{

			for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DETAILS;LOC_u8DigitCounter++)
			{

				HAL_EEPROM_voidReadData(LOC_u16LastLocation,&LOC_u8TransferArray[LOC_u8DigitCounter]);
    3924:	c8 01       	movw	r24, r16
    3926:	be 01       	movw	r22, r28
    3928:	62 5f       	subi	r22, 0xF2	; 242
    392a:	7f 4f       	sbci	r23, 0xFF	; 255
    392c:	0e 94 12 16 	call	0x2c24	; 0x2c24 <HAL_EEPROM_voidReadData>
				HAL_EEPROM_voidWriteData(LOC_u16LastLocation,CLEAR_DATA);
    3930:	c8 01       	movw	r24, r16
    3932:	6f ef       	ldi	r22, 0xFF	; 255
    3934:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <HAL_EEPROM_voidWriteData>
				LOC_u8ConfirmClearFlag++;
				LOC_u16LastLocation++;
    3938:	86 01       	movw	r16, r12
    393a:	03 50       	subi	r16, 0x03	; 3
    393c:	10 40       	sbci	r17, 0x00	; 0
		{

			for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DETAILS;LOC_u8DigitCounter++)
			{

				HAL_EEPROM_voidReadData(LOC_u16LastLocation,&LOC_u8TransferArray[LOC_u8DigitCounter]);
    393e:	c8 01       	movw	r24, r16
    3940:	be 01       	movw	r22, r28
    3942:	61 5f       	subi	r22, 0xF1	; 241
    3944:	7f 4f       	sbci	r23, 0xFF	; 255
    3946:	0e 94 12 16 	call	0x2c24	; 0x2c24 <HAL_EEPROM_voidReadData>
				HAL_EEPROM_voidWriteData(LOC_u16LastLocation,CLEAR_DATA);
    394a:	c8 01       	movw	r24, r16
    394c:	6f ef       	ldi	r22, 0xFF	; 255
    394e:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <HAL_EEPROM_voidWriteData>
				LOC_u8ConfirmClearFlag++;
				LOC_u16LastLocation++;
    3952:	86 01       	movw	r16, r12
    3954:	02 50       	subi	r16, 0x02	; 2
    3956:	10 40       	sbci	r17, 0x00	; 0
		{

			for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DETAILS;LOC_u8DigitCounter++)
			{

				HAL_EEPROM_voidReadData(LOC_u16LastLocation,&LOC_u8TransferArray[LOC_u8DigitCounter]);
    3958:	c8 01       	movw	r24, r16
    395a:	be 01       	movw	r22, r28
    395c:	60 5f       	subi	r22, 0xF0	; 240
    395e:	7f 4f       	sbci	r23, 0xFF	; 255
    3960:	0e 94 12 16 	call	0x2c24	; 0x2c24 <HAL_EEPROM_voidReadData>
				HAL_EEPROM_voidWriteData(LOC_u16LastLocation,CLEAR_DATA);
    3964:	c8 01       	movw	r24, r16
    3966:	6f ef       	ldi	r22, 0xFF	; 255
    3968:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <HAL_EEPROM_voidWriteData>
				LOC_u8ConfirmClearFlag++;
				LOC_u16LastLocation++;
    396c:	86 01       	movw	r16, r12
    396e:	01 50       	subi	r16, 0x01	; 1
    3970:	10 40       	sbci	r17, 0x00	; 0
		{

			for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DETAILS;LOC_u8DigitCounter++)
			{

				HAL_EEPROM_voidReadData(LOC_u16LastLocation,&LOC_u8TransferArray[LOC_u8DigitCounter]);
    3972:	c8 01       	movw	r24, r16
    3974:	be 01       	movw	r22, r28
    3976:	6f 5e       	subi	r22, 0xEF	; 239
    3978:	7f 4f       	sbci	r23, 0xFF	; 255
    397a:	0e 94 12 16 	call	0x2c24	; 0x2c24 <HAL_EEPROM_voidReadData>
				HAL_EEPROM_voidWriteData(LOC_u16LastLocation,CLEAR_DATA);
    397e:	c8 01       	movw	r24, r16
    3980:	6f ef       	ldi	r22, 0xFF	; 255
    3982:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <HAL_EEPROM_voidWriteData>
				LOC_u8ConfirmClearFlag++;
				LOC_u16LastLocation++;
			}

			LOC_u16RemovedAdminLocation = (LOC_u16LastAdminStartLocation ) + ( STEP * LOC_u8AdminCheck);
    3986:	0e 2d       	mov	r16, r14
    3988:	10 e0       	ldi	r17, 0x00	; 0
    398a:	00 0f       	add	r16, r16
    398c:	11 1f       	adc	r17, r17
    398e:	00 0f       	add	r16, r16
    3990:	11 1f       	adc	r17, r17
    3992:	00 0f       	add	r16, r16
    3994:	11 1f       	adc	r17, r17

			for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DETAILS;LOC_u8DigitCounter++)
			{

				//			HAL_EEPROM_voidReadData(LOC_u16LastLocation,&LOC_u8TransferArray[LOC_u8DigitCounter]);
				HAL_EEPROM_voidWriteData(LOC_u16RemovedAdminLocation,LOC_u8TransferArray[LOC_u8DigitCounter]);
    3996:	c8 01       	movw	r24, r16
    3998:	08 97       	sbiw	r24, 0x08	; 8
    399a:	6a 85       	ldd	r22, Y+10	; 0x0a
    399c:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <HAL_EEPROM_voidWriteData>
    39a0:	c8 01       	movw	r24, r16
    39a2:	07 97       	sbiw	r24, 0x07	; 7
    39a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    39a6:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <HAL_EEPROM_voidWriteData>
    39aa:	c8 01       	movw	r24, r16
    39ac:	06 97       	sbiw	r24, 0x06	; 6
    39ae:	6c 85       	ldd	r22, Y+12	; 0x0c
    39b0:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <HAL_EEPROM_voidWriteData>
    39b4:	c8 01       	movw	r24, r16
    39b6:	05 97       	sbiw	r24, 0x05	; 5
    39b8:	6d 85       	ldd	r22, Y+13	; 0x0d
    39ba:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <HAL_EEPROM_voidWriteData>
    39be:	c8 01       	movw	r24, r16
    39c0:	04 97       	sbiw	r24, 0x04	; 4
    39c2:	6e 85       	ldd	r22, Y+14	; 0x0e
    39c4:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <HAL_EEPROM_voidWriteData>
    39c8:	c8 01       	movw	r24, r16
    39ca:	03 97       	sbiw	r24, 0x03	; 3
    39cc:	6f 85       	ldd	r22, Y+15	; 0x0f
    39ce:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <HAL_EEPROM_voidWriteData>
    39d2:	c8 01       	movw	r24, r16
    39d4:	02 97       	sbiw	r24, 0x02	; 2
    39d6:	68 89       	ldd	r22, Y+16	; 0x10
    39d8:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <HAL_EEPROM_voidWriteData>
    39dc:	c8 01       	movw	r24, r16
    39de:	01 97       	sbiw	r24, 0x01	; 1
    39e0:	69 89       	ldd	r22, Y+17	; 0x11
    39e2:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <HAL_EEPROM_voidWriteData>
    39e6:	82 e0       	ldi	r24, 0x02	; 2
    39e8:	31 c0       	rjmp	.+98     	; 0x3a4c <Remove_Admin+0x38c>
		LOC_u16AdminID = (LOC_u16AdminID / 10);
		i--;
	}


	for(;LOC_u16AdminLocationVariable <= ADMIN_LOCATION_BOT;LOC_u16AdminLocationVariable += STEP)
    39ea:	08 5f       	subi	r16, 0xF8	; 248
    39ec:	1f 4f       	sbci	r17, 0xFF	; 255
    39ee:	fc e0       	ldi	r31, 0x0C	; 12
    39f0:	ef 16       	cp	r14, r31
    39f2:	09 f0       	breq	.+2      	; 0x39f6 <Remove_Admin+0x336>
    39f4:	b8 ce       	rjmp	.-656    	; 0x3766 <Remove_Admin+0xa6>
    39f6:	ab eb       	ldi	r26, 0xBB	; 187
    39f8:	ea 2e       	mov	r14, r26
    39fa:	dd ce       	rjmp	.-582    	; 0x37b6 <Remove_Admin+0xf6>
		{
			for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DETAILS;LOC_u8DigitCounter++)
			{

//				HAL_EEPROM_voidReadData(LOC_u16LastLocation,&LOC_u8TransferArray[LOC_u8DigitCounter]);
				HAL_EEPROM_voidWriteData(LOC_u16LastLocation,CLEAR_DATA);
    39fc:	c8 01       	movw	r24, r16
    39fe:	6f ef       	ldi	r22, 0xFF	; 255
    3a00:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <HAL_EEPROM_voidWriteData>
    3a04:	c6 01       	movw	r24, r12
    3a06:	07 97       	sbiw	r24, 0x07	; 7
    3a08:	6f ef       	ldi	r22, 0xFF	; 255
    3a0a:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <HAL_EEPROM_voidWriteData>
    3a0e:	c6 01       	movw	r24, r12
    3a10:	06 97       	sbiw	r24, 0x06	; 6
    3a12:	6f ef       	ldi	r22, 0xFF	; 255
    3a14:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <HAL_EEPROM_voidWriteData>
    3a18:	c6 01       	movw	r24, r12
    3a1a:	05 97       	sbiw	r24, 0x05	; 5
    3a1c:	6f ef       	ldi	r22, 0xFF	; 255
    3a1e:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <HAL_EEPROM_voidWriteData>
    3a22:	c6 01       	movw	r24, r12
    3a24:	04 97       	sbiw	r24, 0x04	; 4
    3a26:	6f ef       	ldi	r22, 0xFF	; 255
    3a28:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <HAL_EEPROM_voidWriteData>
    3a2c:	c6 01       	movw	r24, r12
    3a2e:	03 97       	sbiw	r24, 0x03	; 3
    3a30:	6f ef       	ldi	r22, 0xFF	; 255
    3a32:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <HAL_EEPROM_voidWriteData>
    3a36:	c6 01       	movw	r24, r12
    3a38:	02 97       	sbiw	r24, 0x02	; 2
    3a3a:	6f ef       	ldi	r22, 0xFF	; 255
    3a3c:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <HAL_EEPROM_voidWriteData>
    3a40:	c6 01       	movw	r24, r12
    3a42:	01 97       	sbiw	r24, 0x01	; 1
    3a44:	6f ef       	ldi	r22, 0xFF	; 255
    3a46:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <HAL_EEPROM_voidWriteData>
    3a4a:	8b eb       	ldi	r24, 0xBB	; 187
		//Do Nothing. (Meaning that no user found with that ID or Database is empty)
	}


		return ADMIN_NOT_FOUND;
}
    3a4c:	61 96       	adiw	r28, 0x11	; 17
    3a4e:	0f b6       	in	r0, 0x3f	; 63
    3a50:	f8 94       	cli
    3a52:	de bf       	out	0x3e, r29	; 62
    3a54:	0f be       	out	0x3f, r0	; 63
    3a56:	cd bf       	out	0x3d, r28	; 61
    3a58:	cf 91       	pop	r28
    3a5a:	df 91       	pop	r29
    3a5c:	1f 91       	pop	r17
    3a5e:	0f 91       	pop	r16
    3a60:	ff 90       	pop	r15
    3a62:	ef 90       	pop	r14
    3a64:	df 90       	pop	r13
    3a66:	cf 90       	pop	r12
    3a68:	bf 90       	pop	r11
    3a6a:	af 90       	pop	r10
    3a6c:	9f 90       	pop	r9
    3a6e:	8f 90       	pop	r8
    3a70:	7f 90       	pop	r7
    3a72:	6f 90       	pop	r6
    3a74:	5f 90       	pop	r5
    3a76:	4f 90       	pop	r4
    3a78:	08 95       	ret

00003a7a <Add_Admin>:
//static u16 LOC_u16UserLocation = 0;

/*************************	Admin Section	****************************/

u8 Add_Admin(u16 LOC_u16AdminID,u16 LOC_u16AdminPassword)
{
    3a7a:	2f 92       	push	r2
    3a7c:	3f 92       	push	r3
    3a7e:	4f 92       	push	r4
    3a80:	5f 92       	push	r5
    3a82:	6f 92       	push	r6
    3a84:	7f 92       	push	r7
    3a86:	8f 92       	push	r8
    3a88:	9f 92       	push	r9
    3a8a:	af 92       	push	r10
    3a8c:	bf 92       	push	r11
    3a8e:	cf 92       	push	r12
    3a90:	df 92       	push	r13
    3a92:	ef 92       	push	r14
    3a94:	ff 92       	push	r15
    3a96:	0f 93       	push	r16
    3a98:	1f 93       	push	r17
    3a9a:	df 93       	push	r29
    3a9c:	cf 93       	push	r28
    3a9e:	cd b7       	in	r28, 0x3d	; 61
    3aa0:	de b7       	in	r29, 0x3e	; 62
    3aa2:	29 97       	sbiw	r28, 0x09	; 9
    3aa4:	0f b6       	in	r0, 0x3f	; 63
    3aa6:	f8 94       	cli
    3aa8:	de bf       	out	0x3e, r29	; 62
    3aaa:	0f be       	out	0x3f, r0	; 63
    3aac:	cd bf       	out	0x3d, r28	; 61
    3aae:	4c 01       	movw	r8, r24
    3ab0:	1b 01       	movw	r2, r22
	u8 i=3,LOC_u8AdminNumberFlag = 0, LOC_u8IDMatchedFlag = 0 ,LOC_u8AdminID_Read[MAX_DIGITS] , LOC_u8AdminIDArray[MAX_DIGITS], LOC_u8DigitCounter = 0;

	u16 LOC_u16AdminLocationVariable = ADMIN_LOCATION_TOP,LOC_u16AdminLocationVariableDigits ;


	while (LOC_u16AdminID != 0)
    3ab2:	00 97       	sbiw	r24, 0x00	; 0
    3ab4:	c1 f0       	breq	.+48     	; 0x3ae6 <Add_Admin+0x6c>
    3ab6:	9c 01       	movw	r18, r24
    3ab8:	43 e0       	ldi	r20, 0x03	; 3
    3aba:	8e 01       	movw	r16, r28
    3abc:	0a 5f       	subi	r16, 0xFA	; 250
    3abe:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		LOC_u8AdminIDArray[i] = (LOC_u16AdminID % 10);
    3ac0:	f8 01       	movw	r30, r16
    3ac2:	e4 0f       	add	r30, r20
    3ac4:	f1 1d       	adc	r31, r1
    3ac6:	c9 01       	movw	r24, r18
    3ac8:	6a e0       	ldi	r22, 0x0A	; 10
    3aca:	70 e0       	ldi	r23, 0x00	; 0
    3acc:	0e 94 9d 30 	call	0x613a	; 0x613a <__udivmodhi4>
    3ad0:	80 83       	st	Z, r24
		LOC_u16AdminID = (LOC_u16AdminID / 10);
    3ad2:	c9 01       	movw	r24, r18
    3ad4:	6a e0       	ldi	r22, 0x0A	; 10
    3ad6:	70 e0       	ldi	r23, 0x00	; 0
    3ad8:	0e 94 9d 30 	call	0x613a	; 0x613a <__udivmodhi4>
    3adc:	9b 01       	movw	r18, r22
		i--;
    3ade:	41 50       	subi	r20, 0x01	; 1
	u8 i=3,LOC_u8AdminNumberFlag = 0, LOC_u8IDMatchedFlag = 0 ,LOC_u8AdminID_Read[MAX_DIGITS] , LOC_u8AdminIDArray[MAX_DIGITS], LOC_u8DigitCounter = 0;

	u16 LOC_u16AdminLocationVariable = ADMIN_LOCATION_TOP,LOC_u16AdminLocationVariableDigits ;


	while (LOC_u16AdminID != 0)
    3ae0:	61 15       	cp	r22, r1
    3ae2:	71 05       	cpc	r23, r1
    3ae4:	69 f7       	brne	.-38     	; 0x3ac0 <Add_Admin+0x46>
    3ae6:	cc 24       	eor	r12, r12
    3ae8:	00 e0       	ldi	r16, 0x00	; 0
    3aea:	10 e0       	ldi	r17, 0x00	; 0
    3aec:	a2 e0       	ldi	r26, 0x02	; 2
    3aee:	4a 2e       	mov	r4, r26
    3af0:	51 2c       	mov	r5, r1
    3af2:	4c 0e       	add	r4, r28
    3af4:	5d 1e       	adc	r5, r29
		LOC_u8AdminNumberFlag++;
		LOC_u16AdminLocationVariableDigits = LOC_u16AdminLocationVariable;
		for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DIGITS;LOC_u8DigitCounter++)
		{

			HAL_EEPROM_voidReadData(LOC_u16AdminLocationVariableDigits,&LOC_u8AdminID_Read[LOC_u8DigitCounter]);
    3af6:	f3 e0       	ldi	r31, 0x03	; 3
    3af8:	af 2e       	mov	r10, r31
    3afa:	b1 2c       	mov	r11, r1
    3afc:	ac 0e       	add	r10, r28
    3afe:	bd 1e       	adc	r11, r29
    3b00:	e2 e0       	ldi	r30, 0x02	; 2
    3b02:	ee 2e       	mov	r14, r30
    3b04:	f1 2c       	mov	r15, r1
    3b06:	e4 0c       	add	r14, r4
    3b08:	f5 1c       	adc	r15, r5
    3b0a:	75 e0       	ldi	r23, 0x05	; 5
    3b0c:	67 2e       	mov	r6, r23
    3b0e:	71 2c       	mov	r7, r1
    3b10:	6c 0e       	add	r6, r28
    3b12:	7d 1e       	adc	r7, r29
	}


	for(;LOC_u16AdminLocationVariable <= ADMIN_LOCATION_BOT;LOC_u16AdminLocationVariable += STEP)
	{
		LOC_u8AdminNumberFlag++;
    3b14:	c3 94       	inc	r12
		LOC_u16AdminLocationVariableDigits = LOC_u16AdminLocationVariable;
		for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DIGITS;LOC_u8DigitCounter++)
		{

			HAL_EEPROM_voidReadData(LOC_u16AdminLocationVariableDigits,&LOC_u8AdminID_Read[LOC_u8DigitCounter]);
    3b16:	c8 01       	movw	r24, r16
    3b18:	b2 01       	movw	r22, r4
    3b1a:	0e 94 12 16 	call	0x2c24	; 0x2c24 <HAL_EEPROM_voidReadData>
			if (LOC_u8AdminID_Read[LOC_u8DigitCounter] == LOC_u8AdminIDArray[LOC_u8DigitCounter])
    3b1e:	9a 81       	ldd	r25, Y+2	; 0x02
    3b20:	8e 81       	ldd	r24, Y+6	; 0x06
    3b22:	98 17       	cp	r25, r24
    3b24:	09 f0       	breq	.+2      	; 0x3b28 <Add_Admin+0xae>
    3b26:	bc c0       	rjmp	.+376    	; 0x3ca0 <Add_Admin+0x226>
		LOC_u8AdminNumberFlag++;
		LOC_u16AdminLocationVariableDigits = LOC_u16AdminLocationVariable;
		for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DIGITS;LOC_u8DigitCounter++)
		{

			HAL_EEPROM_voidReadData(LOC_u16AdminLocationVariableDigits,&LOC_u8AdminID_Read[LOC_u8DigitCounter]);
    3b28:	c8 01       	movw	r24, r16
    3b2a:	01 96       	adiw	r24, 0x01	; 1
    3b2c:	b5 01       	movw	r22, r10
    3b2e:	0e 94 12 16 	call	0x2c24	; 0x2c24 <HAL_EEPROM_voidReadData>
			if (LOC_u8AdminID_Read[LOC_u8DigitCounter] == LOC_u8AdminIDArray[LOC_u8DigitCounter])
    3b32:	9b 81       	ldd	r25, Y+3	; 0x03
    3b34:	8f 81       	ldd	r24, Y+7	; 0x07
    3b36:	98 17       	cp	r25, r24
    3b38:	09 f0       	breq	.+2      	; 0x3b3c <Add_Admin+0xc2>
    3b3a:	b2 c0       	rjmp	.+356    	; 0x3ca0 <Add_Admin+0x226>
		LOC_u8AdminNumberFlag++;
		LOC_u16AdminLocationVariableDigits = LOC_u16AdminLocationVariable;
		for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DIGITS;LOC_u8DigitCounter++)
		{

			HAL_EEPROM_voidReadData(LOC_u16AdminLocationVariableDigits,&LOC_u8AdminID_Read[LOC_u8DigitCounter]);
    3b3c:	c8 01       	movw	r24, r16
    3b3e:	02 96       	adiw	r24, 0x02	; 2
    3b40:	b7 01       	movw	r22, r14
    3b42:	0e 94 12 16 	call	0x2c24	; 0x2c24 <HAL_EEPROM_voidReadData>
			if (LOC_u8AdminID_Read[LOC_u8DigitCounter] == LOC_u8AdminIDArray[LOC_u8DigitCounter])
    3b46:	9c 81       	ldd	r25, Y+4	; 0x04
    3b48:	88 85       	ldd	r24, Y+8	; 0x08
    3b4a:	98 17       	cp	r25, r24
    3b4c:	09 f0       	breq	.+2      	; 0x3b50 <Add_Admin+0xd6>
    3b4e:	a8 c0       	rjmp	.+336    	; 0x3ca0 <Add_Admin+0x226>
		LOC_u8AdminNumberFlag++;
		LOC_u16AdminLocationVariableDigits = LOC_u16AdminLocationVariable;
		for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DIGITS;LOC_u8DigitCounter++)
		{

			HAL_EEPROM_voidReadData(LOC_u16AdminLocationVariableDigits,&LOC_u8AdminID_Read[LOC_u8DigitCounter]);
    3b50:	c8 01       	movw	r24, r16
    3b52:	03 96       	adiw	r24, 0x03	; 3
    3b54:	b3 01       	movw	r22, r6
    3b56:	0e 94 12 16 	call	0x2c24	; 0x2c24 <HAL_EEPROM_voidReadData>
			if (LOC_u8AdminID_Read[LOC_u8DigitCounter] == LOC_u8AdminIDArray[LOC_u8DigitCounter])
    3b5a:	9d 81       	ldd	r25, Y+5	; 0x05
    3b5c:	89 85       	ldd	r24, Y+9	; 0x09
    3b5e:	98 17       	cp	r25, r24
    3b60:	09 f0       	breq	.+2      	; 0x3b64 <Add_Admin+0xea>
    3b62:	9e c0       	rjmp	.+316    	; 0x3ca0 <Add_Admin+0x226>


void APP_Registeration_voidGetNumberOfAdmins(u8* LOC_Pu8AdminsNumber)
{
	u16 LOC_u16LocationVariable = ADMIN_LOCATION_TOP;
	u8 LOC_u8AdminNumber = 0,LOC_u8NumberCheck = 0;
    3b64:	19 82       	std	Y+1, r1	; 0x01
	for(;LOC_u16LocationVariable <= ADMIN_LOCATION_BOT;LOC_u16LocationVariable += STEP)
	{
		HAL_EEPROM_voidReadData(LOC_u16LocationVariable,&LOC_u8NumberCheck);
    3b66:	80 e0       	ldi	r24, 0x00	; 0
    3b68:	90 e0       	ldi	r25, 0x00	; 0
    3b6a:	8e 01       	movw	r16, r28
    3b6c:	0f 5f       	subi	r16, 0xFF	; 255
    3b6e:	1f 4f       	sbci	r17, 0xFF	; 255
    3b70:	b8 01       	movw	r22, r16
    3b72:	0e 94 12 16 	call	0x2c24	; 0x2c24 <HAL_EEPROM_voidReadData>
    3b76:	bb 24       	eor	r11, r11
    3b78:	89 81       	ldd	r24, Y+1	; 0x01
    3b7a:	8f 3f       	cpi	r24, 0xFF	; 255
    3b7c:	11 f0       	breq	.+4      	; 0x3b82 <Add_Admin+0x108>
    3b7e:	bb 24       	eor	r11, r11
    3b80:	b3 94       	inc	r11
    3b82:	88 e0       	ldi	r24, 0x08	; 8
    3b84:	90 e0       	ldi	r25, 0x00	; 0
    3b86:	b8 01       	movw	r22, r16
    3b88:	0e 94 12 16 	call	0x2c24	; 0x2c24 <HAL_EEPROM_voidReadData>
		if(LOC_u8NumberCheck != 255)
    3b8c:	89 81       	ldd	r24, Y+1	; 0x01
    3b8e:	8f 3f       	cpi	r24, 0xFF	; 255
    3b90:	09 f0       	breq	.+2      	; 0x3b94 <Add_Admin+0x11a>
		{
			LOC_u8AdminNumber++;
    3b92:	b3 94       	inc	r11
{
	u16 LOC_u16LocationVariable = ADMIN_LOCATION_TOP;
	u8 LOC_u8AdminNumber = 0,LOC_u8NumberCheck = 0;
	for(;LOC_u16LocationVariable <= ADMIN_LOCATION_BOT;LOC_u16LocationVariable += STEP)
	{
		HAL_EEPROM_voidReadData(LOC_u16LocationVariable,&LOC_u8NumberCheck);
    3b94:	80 e1       	ldi	r24, 0x10	; 16
    3b96:	90 e0       	ldi	r25, 0x00	; 0
    3b98:	b8 01       	movw	r22, r16
    3b9a:	0e 94 12 16 	call	0x2c24	; 0x2c24 <HAL_EEPROM_voidReadData>
		if(LOC_u8NumberCheck != 255)
    3b9e:	89 81       	ldd	r24, Y+1	; 0x01
    3ba0:	8f 3f       	cpi	r24, 0xFF	; 255
    3ba2:	09 f0       	breq	.+2      	; 0x3ba6 <Add_Admin+0x12c>
		{
			LOC_u8AdminNumber++;
    3ba4:	b3 94       	inc	r11
{
	u16 LOC_u16LocationVariable = ADMIN_LOCATION_TOP;
	u8 LOC_u8AdminNumber = 0,LOC_u8NumberCheck = 0;
	for(;LOC_u16LocationVariable <= ADMIN_LOCATION_BOT;LOC_u16LocationVariable += STEP)
	{
		HAL_EEPROM_voidReadData(LOC_u16LocationVariable,&LOC_u8NumberCheck);
    3ba6:	88 e1       	ldi	r24, 0x18	; 24
    3ba8:	90 e0       	ldi	r25, 0x00	; 0
    3baa:	b8 01       	movw	r22, r16
    3bac:	0e 94 12 16 	call	0x2c24	; 0x2c24 <HAL_EEPROM_voidReadData>
		if(LOC_u8NumberCheck != 255)
    3bb0:	89 81       	ldd	r24, Y+1	; 0x01
    3bb2:	8f 3f       	cpi	r24, 0xFF	; 255
    3bb4:	09 f0       	breq	.+2      	; 0x3bb8 <Add_Admin+0x13e>
		{
			LOC_u8AdminNumber++;
    3bb6:	b3 94       	inc	r11
{
	u16 LOC_u16LocationVariable = ADMIN_LOCATION_TOP;
	u8 LOC_u8AdminNumber = 0,LOC_u8NumberCheck = 0;
	for(;LOC_u16LocationVariable <= ADMIN_LOCATION_BOT;LOC_u16LocationVariable += STEP)
	{
		HAL_EEPROM_voidReadData(LOC_u16LocationVariable,&LOC_u8NumberCheck);
    3bb8:	80 e2       	ldi	r24, 0x20	; 32
    3bba:	90 e0       	ldi	r25, 0x00	; 0
    3bbc:	b8 01       	movw	r22, r16
    3bbe:	0e 94 12 16 	call	0x2c24	; 0x2c24 <HAL_EEPROM_voidReadData>
		if(LOC_u8NumberCheck != 255)
    3bc2:	89 81       	ldd	r24, Y+1	; 0x01
    3bc4:	8f 3f       	cpi	r24, 0xFF	; 255
    3bc6:	09 f0       	breq	.+2      	; 0x3bca <Add_Admin+0x150>
		{
			LOC_u8AdminNumber++;
    3bc8:	b3 94       	inc	r11
{
	u16 LOC_u16LocationVariable = ADMIN_LOCATION_TOP;
	u8 LOC_u8AdminNumber = 0,LOC_u8NumberCheck = 0;
	for(;LOC_u16LocationVariable <= ADMIN_LOCATION_BOT;LOC_u16LocationVariable += STEP)
	{
		HAL_EEPROM_voidReadData(LOC_u16LocationVariable,&LOC_u8NumberCheck);
    3bca:	88 e2       	ldi	r24, 0x28	; 40
    3bcc:	90 e0       	ldi	r25, 0x00	; 0
    3bce:	b8 01       	movw	r22, r16
    3bd0:	0e 94 12 16 	call	0x2c24	; 0x2c24 <HAL_EEPROM_voidReadData>
		if(LOC_u8NumberCheck != 255)
    3bd4:	89 81       	ldd	r24, Y+1	; 0x01
    3bd6:	8f 3f       	cpi	r24, 0xFF	; 255
    3bd8:	09 f0       	breq	.+2      	; 0x3bdc <Add_Admin+0x162>
		{
			LOC_u8AdminNumber++;
    3bda:	b3 94       	inc	r11
{
	u16 LOC_u16LocationVariable = ADMIN_LOCATION_TOP;
	u8 LOC_u8AdminNumber = 0,LOC_u8NumberCheck = 0;
	for(;LOC_u16LocationVariable <= ADMIN_LOCATION_BOT;LOC_u16LocationVariable += STEP)
	{
		HAL_EEPROM_voidReadData(LOC_u16LocationVariable,&LOC_u8NumberCheck);
    3bdc:	80 e3       	ldi	r24, 0x30	; 48
    3bde:	90 e0       	ldi	r25, 0x00	; 0
    3be0:	b8 01       	movw	r22, r16
    3be2:	0e 94 12 16 	call	0x2c24	; 0x2c24 <HAL_EEPROM_voidReadData>
		if(LOC_u8NumberCheck != 255)
    3be6:	89 81       	ldd	r24, Y+1	; 0x01
    3be8:	8f 3f       	cpi	r24, 0xFF	; 255
    3bea:	09 f0       	breq	.+2      	; 0x3bee <Add_Admin+0x174>
		{
			LOC_u8AdminNumber++;
    3bec:	b3 94       	inc	r11
{
	u16 LOC_u16LocationVariable = ADMIN_LOCATION_TOP;
	u8 LOC_u8AdminNumber = 0,LOC_u8NumberCheck = 0;
	for(;LOC_u16LocationVariable <= ADMIN_LOCATION_BOT;LOC_u16LocationVariable += STEP)
	{
		HAL_EEPROM_voidReadData(LOC_u16LocationVariable,&LOC_u8NumberCheck);
    3bee:	88 e3       	ldi	r24, 0x38	; 56
    3bf0:	90 e0       	ldi	r25, 0x00	; 0
    3bf2:	b8 01       	movw	r22, r16
    3bf4:	0e 94 12 16 	call	0x2c24	; 0x2c24 <HAL_EEPROM_voidReadData>
		if(LOC_u8NumberCheck != 255)
    3bf8:	89 81       	ldd	r24, Y+1	; 0x01
    3bfa:	8f 3f       	cpi	r24, 0xFF	; 255
    3bfc:	09 f0       	breq	.+2      	; 0x3c00 <Add_Admin+0x186>
		{
			LOC_u8AdminNumber++;
    3bfe:	b3 94       	inc	r11
{
	u16 LOC_u16LocationVariable = ADMIN_LOCATION_TOP;
	u8 LOC_u8AdminNumber = 0,LOC_u8NumberCheck = 0;
	for(;LOC_u16LocationVariable <= ADMIN_LOCATION_BOT;LOC_u16LocationVariable += STEP)
	{
		HAL_EEPROM_voidReadData(LOC_u16LocationVariable,&LOC_u8NumberCheck);
    3c00:	80 e4       	ldi	r24, 0x40	; 64
    3c02:	90 e0       	ldi	r25, 0x00	; 0
    3c04:	b8 01       	movw	r22, r16
    3c06:	0e 94 12 16 	call	0x2c24	; 0x2c24 <HAL_EEPROM_voidReadData>
		if(LOC_u8NumberCheck != 255)
    3c0a:	89 81       	ldd	r24, Y+1	; 0x01
    3c0c:	8f 3f       	cpi	r24, 0xFF	; 255
    3c0e:	09 f0       	breq	.+2      	; 0x3c12 <Add_Admin+0x198>
		{
			LOC_u8AdminNumber++;
    3c10:	b3 94       	inc	r11
{
	u16 LOC_u16LocationVariable = ADMIN_LOCATION_TOP;
	u8 LOC_u8AdminNumber = 0,LOC_u8NumberCheck = 0;
	for(;LOC_u16LocationVariable <= ADMIN_LOCATION_BOT;LOC_u16LocationVariable += STEP)
	{
		HAL_EEPROM_voidReadData(LOC_u16LocationVariable,&LOC_u8NumberCheck);
    3c12:	88 e4       	ldi	r24, 0x48	; 72
    3c14:	90 e0       	ldi	r25, 0x00	; 0
    3c16:	b8 01       	movw	r22, r16
    3c18:	0e 94 12 16 	call	0x2c24	; 0x2c24 <HAL_EEPROM_voidReadData>
		if(LOC_u8NumberCheck != 255)
    3c1c:	89 81       	ldd	r24, Y+1	; 0x01
    3c1e:	8f 3f       	cpi	r24, 0xFF	; 255
    3c20:	09 f0       	breq	.+2      	; 0x3c24 <Add_Admin+0x1aa>
		{
			LOC_u8AdminNumber++;
    3c22:	b3 94       	inc	r11
{
	u16 LOC_u16LocationVariable = ADMIN_LOCATION_TOP;
	u8 LOC_u8AdminNumber = 0,LOC_u8NumberCheck = 0;
	for(;LOC_u16LocationVariable <= ADMIN_LOCATION_BOT;LOC_u16LocationVariable += STEP)
	{
		HAL_EEPROM_voidReadData(LOC_u16LocationVariable,&LOC_u8NumberCheck);
    3c24:	80 e5       	ldi	r24, 0x50	; 80
    3c26:	90 e0       	ldi	r25, 0x00	; 0
    3c28:	b8 01       	movw	r22, r16
    3c2a:	0e 94 12 16 	call	0x2c24	; 0x2c24 <HAL_EEPROM_voidReadData>
		if(LOC_u8NumberCheck != 255)
    3c2e:	89 81       	ldd	r24, Y+1	; 0x01
    3c30:	8f 3f       	cpi	r24, 0xFF	; 255
    3c32:	09 f0       	breq	.+2      	; 0x3c36 <Add_Admin+0x1bc>
		{
			LOC_u8AdminNumber++;
    3c34:	b3 94       	inc	r11
{
	u16 LOC_u16LocationVariable = ADMIN_LOCATION_TOP;
	u8 LOC_u8AdminNumber = 0,LOC_u8NumberCheck = 0;
	for(;LOC_u16LocationVariable <= ADMIN_LOCATION_BOT;LOC_u16LocationVariable += STEP)
	{
		HAL_EEPROM_voidReadData(LOC_u16LocationVariable,&LOC_u8NumberCheck);
    3c36:	88 e5       	ldi	r24, 0x58	; 88
    3c38:	90 e0       	ldi	r25, 0x00	; 0
    3c3a:	b8 01       	movw	r22, r16
    3c3c:	0e 94 12 16 	call	0x2c24	; 0x2c24 <HAL_EEPROM_voidReadData>
		if(LOC_u8NumberCheck != 255)
    3c40:	89 81       	ldd	r24, Y+1	; 0x01
    3c42:	8f 3f       	cpi	r24, 0xFF	; 255
    3c44:	21 f0       	breq	.+8      	; 0x3c4e <Add_Admin+0x1d4>
		{
			LOC_u8AdminNumber++;
    3c46:	b3 94       	inc	r11
	u16 LOC_u16LastLocation;

	LOC_u8CheckAdminIDExistance = Check_AdminID(LOC_u16AdminID);
	APP_Registeration_voidGetNumberOfAdmins(&LOC_u8GetAdminsCount);

	if ((LOC_u8GetAdminsCount < ADMINS_MAX_AMOUNT) && (LOC_u8GetAdminsCount >= ADMIN_DATABASE_EMPTY))
    3c48:	8c e0       	ldi	r24, 0x0C	; 12
    3c4a:	b8 16       	cp	r11, r24
    3c4c:	91 f1       	breq	.+100    	; 0x3cb2 <Add_Admin+0x238>
	{
		if((LOC_u16AdminID <= 9999 && LOC_u16AdminID >= 1000) && (LOC_u16AdminPassword <= 9999 && LOC_u16AdminPassword >= 1000))
    3c4e:	c4 01       	movw	r24, r8
    3c50:	88 5e       	subi	r24, 0xE8	; 232
    3c52:	93 40       	sbci	r25, 0x03	; 3
    3c54:	88 52       	subi	r24, 0x28	; 40
    3c56:	93 42       	sbci	r25, 0x23	; 35
    3c58:	70 f5       	brcc	.+92     	; 0x3cb6 <Add_Admin+0x23c>
    3c5a:	c1 01       	movw	r24, r2
    3c5c:	88 5e       	subi	r24, 0xE8	; 232
    3c5e:	93 40       	sbci	r25, 0x03	; 3
    3c60:	88 52       	subi	r24, 0x28	; 40
    3c62:	93 42       	sbci	r25, 0x23	; 35
    3c64:	40 f5       	brcc	.+80     	; 0x3cb6 <Add_Admin+0x23c>
		{
			if (LOC_u8CheckAdminIDExistance == ADMIN_NOT_FOUND)
    3c66:	8b eb       	ldi	r24, 0xBB	; 187
    3c68:	c8 16       	cp	r12, r24
    3c6a:	39 f1       	breq	.+78     	; 0x3cba <Add_Admin+0x240>
    3c6c:	8c ec       	ldi	r24, 0xCC	; 204
	}
	else
	{
		return FULL;
	}
}
    3c6e:	29 96       	adiw	r28, 0x09	; 9
    3c70:	0f b6       	in	r0, 0x3f	; 63
    3c72:	f8 94       	cli
    3c74:	de bf       	out	0x3e, r29	; 62
    3c76:	0f be       	out	0x3f, r0	; 63
    3c78:	cd bf       	out	0x3d, r28	; 61
    3c7a:	cf 91       	pop	r28
    3c7c:	df 91       	pop	r29
    3c7e:	1f 91       	pop	r17
    3c80:	0f 91       	pop	r16
    3c82:	ff 90       	pop	r15
    3c84:	ef 90       	pop	r14
    3c86:	df 90       	pop	r13
    3c88:	cf 90       	pop	r12
    3c8a:	bf 90       	pop	r11
    3c8c:	af 90       	pop	r10
    3c8e:	9f 90       	pop	r9
    3c90:	8f 90       	pop	r8
    3c92:	7f 90       	pop	r7
    3c94:	6f 90       	pop	r6
    3c96:	5f 90       	pop	r5
    3c98:	4f 90       	pop	r4
    3c9a:	3f 90       	pop	r3
    3c9c:	2f 90       	pop	r2
    3c9e:	08 95       	ret
		LOC_u16AdminID = (LOC_u16AdminID / 10);
		i--;
	}


	for(;LOC_u16AdminLocationVariable <= ADMIN_LOCATION_BOT;LOC_u16AdminLocationVariable += STEP)
    3ca0:	08 5f       	subi	r16, 0xF8	; 248
    3ca2:	1f 4f       	sbci	r17, 0xFF	; 255
    3ca4:	2c e0       	ldi	r18, 0x0C	; 12
    3ca6:	c2 16       	cp	r12, r18
    3ca8:	09 f0       	breq	.+2      	; 0x3cac <Add_Admin+0x232>
    3caa:	34 cf       	rjmp	.-408    	; 0x3b14 <Add_Admin+0x9a>
    3cac:	6b eb       	ldi	r22, 0xBB	; 187
    3cae:	c6 2e       	mov	r12, r22
    3cb0:	59 cf       	rjmp	.-334    	; 0x3b64 <Add_Admin+0xea>
	u16 LOC_u16LastLocation;

	LOC_u8CheckAdminIDExistance = Check_AdminID(LOC_u16AdminID);
	APP_Registeration_voidGetNumberOfAdmins(&LOC_u8GetAdminsCount);

	if ((LOC_u8GetAdminsCount < ADMINS_MAX_AMOUNT) && (LOC_u8GetAdminsCount >= ADMIN_DATABASE_EMPTY))
    3cb2:	8e ed       	ldi	r24, 0xDE	; 222
    3cb4:	dc cf       	rjmp	.-72     	; 0x3c6e <Add_Admin+0x1f4>
					HAL_EEPROM_voidWriteData(LOC_u16LastLocation++,Pass[j]);
				}

				//			GLOB_u8UserCount++;
				//LOC_u8GetUsersCount++;
				return ++LOC_u8GetAdminsCount;		//returning number of Admins add till now.
    3cb6:	8f ef       	ldi	r24, 0xFF	; 255
    3cb8:	da cf       	rjmp	.-76     	; 0x3c6e <Add_Admin+0x1f4>
			{

				u8 i=3,j=3, Admin[MAX_DIGITS] , Pass[MAX_DIGITS];
				//			static u16 LOC_u16CurrentLocation;

				while (LOC_u16AdminID != 0)
    3cba:	81 14       	cp	r8, r1
    3cbc:	91 04       	cpc	r9, r1
    3cbe:	b9 f0       	breq	.+46     	; 0x3cee <Add_Admin+0x274>
    3cc0:	43 e0       	ldi	r20, 0x03	; 3
    3cc2:	8e 01       	movw	r16, r28
    3cc4:	0a 5f       	subi	r16, 0xFA	; 250
    3cc6:	1f 4f       	sbci	r17, 0xFF	; 255
				{
					Admin[i] = (LOC_u16AdminID % 10);
    3cc8:	f8 01       	movw	r30, r16
    3cca:	e4 0f       	add	r30, r20
    3ccc:	f1 1d       	adc	r31, r1
    3cce:	c4 01       	movw	r24, r8
    3cd0:	6a e0       	ldi	r22, 0x0A	; 10
    3cd2:	70 e0       	ldi	r23, 0x00	; 0
    3cd4:	0e 94 9d 30 	call	0x613a	; 0x613a <__udivmodhi4>
    3cd8:	80 83       	st	Z, r24
					LOC_u16AdminID = (LOC_u16AdminID / 10);
    3cda:	c4 01       	movw	r24, r8
    3cdc:	6a e0       	ldi	r22, 0x0A	; 10
    3cde:	70 e0       	ldi	r23, 0x00	; 0
    3ce0:	0e 94 9d 30 	call	0x613a	; 0x613a <__udivmodhi4>
    3ce4:	4b 01       	movw	r8, r22
					i--;
    3ce6:	41 50       	subi	r20, 0x01	; 1
			{

				u8 i=3,j=3, Admin[MAX_DIGITS] , Pass[MAX_DIGITS];
				//			static u16 LOC_u16CurrentLocation;

				while (LOC_u16AdminID != 0)
    3ce8:	61 15       	cp	r22, r1
    3cea:	71 05       	cpc	r23, r1
    3cec:	69 f7       	brne	.-38     	; 0x3cc8 <Add_Admin+0x24e>
				{
					Admin[i] = (LOC_u16AdminID % 10);
					LOC_u16AdminID = (LOC_u16AdminID / 10);
					i--;
				}
				while (LOC_u16AdminPassword != 0)
    3cee:	21 14       	cp	r2, r1
    3cf0:	31 04       	cpc	r3, r1
    3cf2:	a1 f0       	breq	.+40     	; 0x3d1c <Add_Admin+0x2a2>
    3cf4:	43 e0       	ldi	r20, 0x03	; 3
				{
					Pass[j] = (LOC_u16AdminPassword % 10);
    3cf6:	f2 01       	movw	r30, r4
    3cf8:	e4 0f       	add	r30, r20
    3cfa:	f1 1d       	adc	r31, r1
    3cfc:	c1 01       	movw	r24, r2
    3cfe:	6a e0       	ldi	r22, 0x0A	; 10
    3d00:	70 e0       	ldi	r23, 0x00	; 0
    3d02:	0e 94 9d 30 	call	0x613a	; 0x613a <__udivmodhi4>
    3d06:	80 83       	st	Z, r24
					LOC_u16AdminPassword = (LOC_u16AdminPassword / 10);
    3d08:	c1 01       	movw	r24, r2
    3d0a:	6a e0       	ldi	r22, 0x0A	; 10
    3d0c:	70 e0       	ldi	r23, 0x00	; 0
    3d0e:	0e 94 9d 30 	call	0x613a	; 0x613a <__udivmodhi4>
    3d12:	1b 01       	movw	r2, r22
					j--;
    3d14:	41 50       	subi	r20, 0x01	; 1
				{
					Admin[i] = (LOC_u16AdminID % 10);
					LOC_u16AdminID = (LOC_u16AdminID / 10);
					i--;
				}
				while (LOC_u16AdminPassword != 0)
    3d16:	61 15       	cp	r22, r1
    3d18:	71 05       	cpc	r23, r1
    3d1a:	69 f7       	brne	.-38     	; 0x3cf6 <Add_Admin+0x27c>


				//			LOC_u16UserLocation = (USER_LOCATION_TOP) + (LOC_u16CurrentLocation*8) ;

//				LOC_u16LastUserStartLocation = (USER_LOCATION_TOP - STEP);
				LOC_u16LastLocation = (ADMIN_LOCATION_TOP) + ( STEP * LOC_u8GetAdminsCount);
    3d1c:	0b 2d       	mov	r16, r11
    3d1e:	10 e0       	ldi	r17, 0x00	; 0
    3d20:	00 0f       	add	r16, r16
    3d22:	11 1f       	adc	r17, r17
    3d24:	00 0f       	add	r16, r16
    3d26:	11 1f       	adc	r17, r17
    3d28:	00 0f       	add	r16, r16
    3d2a:	11 1f       	adc	r17, r17

				for(i=0;i<4;i++)
				{
					//			HAL_EEPROM_voidWriteData(GLOB_u8Location++,User[i]);
					HAL_EEPROM_voidWriteData(LOC_u16LastLocation++,Admin[i]);
    3d2c:	78 01       	movw	r14, r16
    3d2e:	08 94       	sec
    3d30:	e1 1c       	adc	r14, r1
    3d32:	f1 1c       	adc	r15, r1
    3d34:	c8 01       	movw	r24, r16
    3d36:	6e 81       	ldd	r22, Y+6	; 0x06
    3d38:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <HAL_EEPROM_voidWriteData>
    3d3c:	67 01       	movw	r12, r14
    3d3e:	08 94       	sec
    3d40:	c1 1c       	adc	r12, r1
    3d42:	d1 1c       	adc	r13, r1
    3d44:	c7 01       	movw	r24, r14
    3d46:	6f 81       	ldd	r22, Y+7	; 0x07
    3d48:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <HAL_EEPROM_voidWriteData>
    3d4c:	c6 01       	movw	r24, r12
    3d4e:	68 85       	ldd	r22, Y+8	; 0x08
    3d50:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <HAL_EEPROM_voidWriteData>
    3d54:	c6 01       	movw	r24, r12
    3d56:	01 96       	adiw	r24, 0x01	; 1
    3d58:	69 85       	ldd	r22, Y+9	; 0x09
    3d5a:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <HAL_EEPROM_voidWriteData>
				}
				for(j=0;j<4;j++)
				{
					//			HAL_EEPROM_voidWriteData(GLOB_u8Location++,Pass[j]);
					HAL_EEPROM_voidWriteData(LOC_u16LastLocation++,Pass[j]);
    3d5e:	c8 01       	movw	r24, r16
    3d60:	04 96       	adiw	r24, 0x04	; 4
    3d62:	6a 81       	ldd	r22, Y+2	; 0x02
    3d64:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <HAL_EEPROM_voidWriteData>
    3d68:	46 e0       	ldi	r20, 0x06	; 6
    3d6a:	e4 2e       	mov	r14, r20
    3d6c:	f1 2c       	mov	r15, r1
    3d6e:	e0 0e       	add	r14, r16
    3d70:	f1 1e       	adc	r15, r17
    3d72:	0b 5f       	subi	r16, 0xFB	; 251
    3d74:	1f 4f       	sbci	r17, 0xFF	; 255
    3d76:	c8 01       	movw	r24, r16
    3d78:	6b 81       	ldd	r22, Y+3	; 0x03
    3d7a:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <HAL_EEPROM_voidWriteData>
    3d7e:	c7 01       	movw	r24, r14
    3d80:	6c 81       	ldd	r22, Y+4	; 0x04
    3d82:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <HAL_EEPROM_voidWriteData>
    3d86:	c8 01       	movw	r24, r16
    3d88:	02 96       	adiw	r24, 0x02	; 2
    3d8a:	6d 81       	ldd	r22, Y+5	; 0x05
    3d8c:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <HAL_EEPROM_voidWriteData>
				}

				//			GLOB_u8UserCount++;
				//LOC_u8GetUsersCount++;
				return ++LOC_u8GetAdminsCount;		//returning number of Admins add till now.
    3d90:	8b 2d       	mov	r24, r11
    3d92:	8f 5f       	subi	r24, 0xFF	; 255
    3d94:	6c cf       	rjmp	.-296    	; 0x3c6e <Add_Admin+0x1f4>

00003d96 <Check_AdminPassword>:
	return ADMIN_NOT_FOUND;
}


u8 Check_AdminPassword(u16 LOC_u16AdminID,u16 LOC_u16AdminPassword)
{
    3d96:	4f 92       	push	r4
    3d98:	5f 92       	push	r5
    3d9a:	6f 92       	push	r6
    3d9c:	7f 92       	push	r7
    3d9e:	8f 92       	push	r8
    3da0:	9f 92       	push	r9
    3da2:	af 92       	push	r10
    3da4:	bf 92       	push	r11
    3da6:	df 92       	push	r13
    3da8:	ef 92       	push	r14
    3daa:	ff 92       	push	r15
    3dac:	0f 93       	push	r16
    3dae:	1f 93       	push	r17
    3db0:	df 93       	push	r29
    3db2:	cf 93       	push	r28
    3db4:	cd b7       	in	r28, 0x3d	; 61
    3db6:	de b7       	in	r29, 0x3e	; 62
    3db8:	60 97       	sbiw	r28, 0x10	; 16
    3dba:	0f b6       	in	r0, 0x3f	; 63
    3dbc:	f8 94       	cli
    3dbe:	de bf       	out	0x3e, r29	; 62
    3dc0:	0f be       	out	0x3f, r0	; 63
    3dc2:	cd bf       	out	0x3d, r28	; 61
    3dc4:	9c 01       	movw	r18, r24
    3dc6:	7b 01       	movw	r14, r22
	u8 i=3,LOC_u8AdminNumberFlag = 0, LOC_u8IDMatchedFlag = 0 ,LOC_u8AdminID_Read[MAX_DIGITS] , LOC_u8AdminIDArray[MAX_DIGITS], LOC_u8DigitCounter = 0;

	u16 LOC_u16AdminLocationVariable = ADMIN_LOCATION_TOP,LOC_u16AdminLocationVariableDigits ;


	while (LOC_u16AdminID != 0)
    3dc8:	00 97       	sbiw	r24, 0x00	; 0
    3dca:	b9 f0       	breq	.+46     	; 0x3dfa <Check_AdminPassword+0x64>
    3dcc:	43 e0       	ldi	r20, 0x03	; 3
    3dce:	8e 01       	movw	r16, r28
    3dd0:	03 5f       	subi	r16, 0xF3	; 243
    3dd2:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		LOC_u8AdminIDArray[i] = (LOC_u16AdminID % 10);
    3dd4:	f8 01       	movw	r30, r16
    3dd6:	e4 0f       	add	r30, r20
    3dd8:	f1 1d       	adc	r31, r1
    3dda:	c9 01       	movw	r24, r18
    3ddc:	6a e0       	ldi	r22, 0x0A	; 10
    3dde:	70 e0       	ldi	r23, 0x00	; 0
    3de0:	0e 94 9d 30 	call	0x613a	; 0x613a <__udivmodhi4>
    3de4:	80 83       	st	Z, r24
		LOC_u16AdminID = (LOC_u16AdminID / 10);
    3de6:	c9 01       	movw	r24, r18
    3de8:	6a e0       	ldi	r22, 0x0A	; 10
    3dea:	70 e0       	ldi	r23, 0x00	; 0
    3dec:	0e 94 9d 30 	call	0x613a	; 0x613a <__udivmodhi4>
    3df0:	9b 01       	movw	r18, r22
		i--;
    3df2:	41 50       	subi	r20, 0x01	; 1
	u8 i=3,LOC_u8AdminNumberFlag = 0, LOC_u8IDMatchedFlag = 0 ,LOC_u8AdminID_Read[MAX_DIGITS] , LOC_u8AdminIDArray[MAX_DIGITS], LOC_u8DigitCounter = 0;

	u16 LOC_u16AdminLocationVariable = ADMIN_LOCATION_TOP,LOC_u16AdminLocationVariableDigits ;


	while (LOC_u16AdminID != 0)
    3df4:	61 15       	cp	r22, r1
    3df6:	71 05       	cpc	r23, r1
    3df8:	69 f7       	brne	.-38     	; 0x3dd4 <Check_AdminPassword+0x3e>
    3dfa:	dd 24       	eor	r13, r13
    3dfc:	00 e0       	ldi	r16, 0x00	; 0
    3dfe:	10 e0       	ldi	r17, 0x00	; 0
    3e00:	39 e0       	ldi	r19, 0x09	; 9
    3e02:	a3 2e       	mov	r10, r19
    3e04:	b1 2c       	mov	r11, r1
    3e06:	ac 0e       	add	r10, r28
    3e08:	bd 1e       	adc	r11, r29
		LOC_u8AdminNumberFlag++;
		LOC_u16AdminLocationVariableDigits = LOC_u16AdminLocationVariable;
		for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DIGITS;LOC_u8DigitCounter++)
		{

			HAL_EEPROM_voidReadData(LOC_u16AdminLocationVariableDigits,&LOC_u8AdminID_Read[LOC_u8DigitCounter]);
    3e0a:	2a e0       	ldi	r18, 0x0A	; 10
    3e0c:	82 2e       	mov	r8, r18
    3e0e:	91 2c       	mov	r9, r1
    3e10:	8c 0e       	add	r8, r28
    3e12:	9d 1e       	adc	r9, r29
    3e14:	9b e0       	ldi	r25, 0x0B	; 11
    3e16:	69 2e       	mov	r6, r25
    3e18:	71 2c       	mov	r7, r1
    3e1a:	6c 0e       	add	r6, r28
    3e1c:	7d 1e       	adc	r7, r29
    3e1e:	8c e0       	ldi	r24, 0x0C	; 12
    3e20:	48 2e       	mov	r4, r24
    3e22:	51 2c       	mov	r5, r1
    3e24:	4c 0e       	add	r4, r28
    3e26:	5d 1e       	adc	r5, r29
	}


	for(;LOC_u16AdminLocationVariable <= ADMIN_LOCATION_BOT;LOC_u16AdminLocationVariable += STEP)
	{
		LOC_u8AdminNumberFlag++;
    3e28:	d3 94       	inc	r13
		LOC_u16AdminLocationVariableDigits = LOC_u16AdminLocationVariable;
		for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DIGITS;LOC_u8DigitCounter++)
		{

			HAL_EEPROM_voidReadData(LOC_u16AdminLocationVariableDigits,&LOC_u8AdminID_Read[LOC_u8DigitCounter]);
    3e2a:	c8 01       	movw	r24, r16
    3e2c:	b5 01       	movw	r22, r10
    3e2e:	0e 94 12 16 	call	0x2c24	; 0x2c24 <HAL_EEPROM_voidReadData>
			if (LOC_u8AdminID_Read[LOC_u8DigitCounter] == LOC_u8AdminIDArray[LOC_u8DigitCounter])
    3e32:	99 85       	ldd	r25, Y+9	; 0x09
    3e34:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e36:	98 17       	cp	r25, r24
    3e38:	09 f0       	breq	.+2      	; 0x3e3c <Check_AdminPassword+0xa6>
    3e3a:	89 c0       	rjmp	.+274    	; 0x3f4e <Check_AdminPassword+0x1b8>
		LOC_u8AdminNumberFlag++;
		LOC_u16AdminLocationVariableDigits = LOC_u16AdminLocationVariable;
		for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DIGITS;LOC_u8DigitCounter++)
		{

			HAL_EEPROM_voidReadData(LOC_u16AdminLocationVariableDigits,&LOC_u8AdminID_Read[LOC_u8DigitCounter]);
    3e3c:	c8 01       	movw	r24, r16
    3e3e:	01 96       	adiw	r24, 0x01	; 1
    3e40:	b4 01       	movw	r22, r8
    3e42:	0e 94 12 16 	call	0x2c24	; 0x2c24 <HAL_EEPROM_voidReadData>
			if (LOC_u8AdminID_Read[LOC_u8DigitCounter] == LOC_u8AdminIDArray[LOC_u8DigitCounter])
    3e46:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e48:	8e 85       	ldd	r24, Y+14	; 0x0e
    3e4a:	98 17       	cp	r25, r24
    3e4c:	09 f0       	breq	.+2      	; 0x3e50 <Check_AdminPassword+0xba>
    3e4e:	7f c0       	rjmp	.+254    	; 0x3f4e <Check_AdminPassword+0x1b8>
		LOC_u8AdminNumberFlag++;
		LOC_u16AdminLocationVariableDigits = LOC_u16AdminLocationVariable;
		for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DIGITS;LOC_u8DigitCounter++)
		{

			HAL_EEPROM_voidReadData(LOC_u16AdminLocationVariableDigits,&LOC_u8AdminID_Read[LOC_u8DigitCounter]);
    3e50:	c8 01       	movw	r24, r16
    3e52:	02 96       	adiw	r24, 0x02	; 2
    3e54:	b3 01       	movw	r22, r6
    3e56:	0e 94 12 16 	call	0x2c24	; 0x2c24 <HAL_EEPROM_voidReadData>
			if (LOC_u8AdminID_Read[LOC_u8DigitCounter] == LOC_u8AdminIDArray[LOC_u8DigitCounter])
    3e5a:	9b 85       	ldd	r25, Y+11	; 0x0b
    3e5c:	8f 85       	ldd	r24, Y+15	; 0x0f
    3e5e:	98 17       	cp	r25, r24
    3e60:	09 f0       	breq	.+2      	; 0x3e64 <Check_AdminPassword+0xce>
    3e62:	75 c0       	rjmp	.+234    	; 0x3f4e <Check_AdminPassword+0x1b8>
		LOC_u8AdminNumberFlag++;
		LOC_u16AdminLocationVariableDigits = LOC_u16AdminLocationVariable;
		for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DIGITS;LOC_u8DigitCounter++)
		{

			HAL_EEPROM_voidReadData(LOC_u16AdminLocationVariableDigits,&LOC_u8AdminID_Read[LOC_u8DigitCounter]);
    3e64:	c8 01       	movw	r24, r16
    3e66:	03 96       	adiw	r24, 0x03	; 3
    3e68:	b2 01       	movw	r22, r4
    3e6a:	0e 94 12 16 	call	0x2c24	; 0x2c24 <HAL_EEPROM_voidReadData>
			if (LOC_u8AdminID_Read[LOC_u8DigitCounter] == LOC_u8AdminIDArray[LOC_u8DigitCounter])
    3e6e:	9c 85       	ldd	r25, Y+12	; 0x0c
    3e70:	88 89       	ldd	r24, Y+16	; 0x10
    3e72:	98 17       	cp	r25, r24
    3e74:	09 f0       	breq	.+2      	; 0x3e78 <Check_AdminPassword+0xe2>
    3e76:	6b c0       	rjmp	.+214    	; 0x3f4e <Check_AdminPassword+0x1b8>
	u8 i=3,LOC_u8AdminCheck = 0,LOC_u8PassMatchedFlag = 0,LOC_u8DigitCounter,LOC_u8AdminPasswordArray[MAX_DIGITS], LOC_u8AdminPass_Read[MAX_DIGITS];
	u16 LOC_u16AdminStartLocation = (ADMIN_LOCATION_TOP-MAX_DIGITS),LOC_u16PassLocationVariableDigits;
	LOC_u8AdminCheck = Check_AdminID(LOC_u16AdminID);

	//Save password in an array to save time when checking.
	while (LOC_u16AdminPassword != 0)
    3e78:	e1 14       	cp	r14, r1
    3e7a:	f1 04       	cpc	r15, r1
    3e7c:	b9 f0       	breq	.+46     	; 0x3eac <Check_AdminPassword+0x116>
    3e7e:	43 e0       	ldi	r20, 0x03	; 3
    3e80:	8e 01       	movw	r16, r28
    3e82:	0f 5f       	subi	r16, 0xFF	; 255
    3e84:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		LOC_u8AdminPasswordArray[i] = (LOC_u16AdminPassword % 10);
    3e86:	f8 01       	movw	r30, r16
    3e88:	e4 0f       	add	r30, r20
    3e8a:	f1 1d       	adc	r31, r1
    3e8c:	c7 01       	movw	r24, r14
    3e8e:	6a e0       	ldi	r22, 0x0A	; 10
    3e90:	70 e0       	ldi	r23, 0x00	; 0
    3e92:	0e 94 9d 30 	call	0x613a	; 0x613a <__udivmodhi4>
    3e96:	80 83       	st	Z, r24
		LOC_u16AdminPassword = (LOC_u16AdminPassword / 10);
    3e98:	c7 01       	movw	r24, r14
    3e9a:	6a e0       	ldi	r22, 0x0A	; 10
    3e9c:	70 e0       	ldi	r23, 0x00	; 0
    3e9e:	0e 94 9d 30 	call	0x613a	; 0x613a <__udivmodhi4>
    3ea2:	7b 01       	movw	r14, r22
		i--;
    3ea4:	41 50       	subi	r20, 0x01	; 1
	u8 i=3,LOC_u8AdminCheck = 0,LOC_u8PassMatchedFlag = 0,LOC_u8DigitCounter,LOC_u8AdminPasswordArray[MAX_DIGITS], LOC_u8AdminPass_Read[MAX_DIGITS];
	u16 LOC_u16AdminStartLocation = (ADMIN_LOCATION_TOP-MAX_DIGITS),LOC_u16PassLocationVariableDigits;
	LOC_u8AdminCheck = Check_AdminID(LOC_u16AdminID);

	//Save password in an array to save time when checking.
	while (LOC_u16AdminPassword != 0)
    3ea6:	61 15       	cp	r22, r1
    3ea8:	71 05       	cpc	r23, r1
    3eaa:	69 f7       	brne	.-38     	; 0x3e86 <Check_AdminPassword+0xf0>
		LOC_u16AdminPassword = (LOC_u16AdminPassword / 10);
		i--;
	}


	if ((LOC_u8AdminCheck <= ADMINS_MAX_AMOUNT) && (LOC_u8AdminCheck >= ADMINS_MIN_AMOUNT))
    3eac:	8d 2d       	mov	r24, r13
    3eae:	81 50       	subi	r24, 0x01	; 1
    3eb0:	8c 30       	cpi	r24, 0x0C	; 12
    3eb2:	08 f0       	brcs	.+2      	; 0x3eb6 <Check_AdminPassword+0x120>
    3eb4:	55 c0       	rjmp	.+170    	; 0x3f60 <Check_AdminPassword+0x1ca>
	{
		LOC_u16PassLocationVariableDigits = (LOC_u16AdminStartLocation ) + (2 * MAX_DIGITS * LOC_u8AdminCheck);
    3eb6:	0d 2d       	mov	r16, r13
    3eb8:	10 e0       	ldi	r17, 0x00	; 0
    3eba:	00 0f       	add	r16, r16
    3ebc:	11 1f       	adc	r17, r17
    3ebe:	00 0f       	add	r16, r16
    3ec0:	11 1f       	adc	r17, r17
    3ec2:	00 0f       	add	r16, r16
    3ec4:	11 1f       	adc	r17, r17
			for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DIGITS;LOC_u8DigitCounter++)
			{

				HAL_EEPROM_voidReadData(LOC_u16PassLocationVariableDigits,&LOC_u8AdminPass_Read[LOC_u8DigitCounter]);
    3ec6:	c8 01       	movw	r24, r16
    3ec8:	04 97       	sbiw	r24, 0x04	; 4
    3eca:	be 01       	movw	r22, r28
    3ecc:	6b 5f       	subi	r22, 0xFB	; 251
    3ece:	7f 4f       	sbci	r23, 0xFF	; 255
    3ed0:	0e 94 12 16 	call	0x2c24	; 0x2c24 <HAL_EEPROM_voidReadData>
				if (LOC_u8AdminPass_Read[LOC_u8DigitCounter] == LOC_u8AdminPasswordArray[LOC_u8DigitCounter])
    3ed4:	9d 81       	ldd	r25, Y+5	; 0x05
    3ed6:	89 81       	ldd	r24, Y+1	; 0x01
    3ed8:	98 17       	cp	r25, r24
    3eda:	09 f0       	breq	.+2      	; 0x3ede <Check_AdminPassword+0x148>
    3edc:	43 c0       	rjmp	.+134    	; 0x3f64 <Check_AdminPassword+0x1ce>
	{
		LOC_u16PassLocationVariableDigits = (LOC_u16AdminStartLocation ) + (2 * MAX_DIGITS * LOC_u8AdminCheck);
			for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DIGITS;LOC_u8DigitCounter++)
			{

				HAL_EEPROM_voidReadData(LOC_u16PassLocationVariableDigits,&LOC_u8AdminPass_Read[LOC_u8DigitCounter]);
    3ede:	c8 01       	movw	r24, r16
    3ee0:	03 97       	sbiw	r24, 0x03	; 3
    3ee2:	be 01       	movw	r22, r28
    3ee4:	6a 5f       	subi	r22, 0xFA	; 250
    3ee6:	7f 4f       	sbci	r23, 0xFF	; 255
    3ee8:	0e 94 12 16 	call	0x2c24	; 0x2c24 <HAL_EEPROM_voidReadData>
				if (LOC_u8AdminPass_Read[LOC_u8DigitCounter] == LOC_u8AdminPasswordArray[LOC_u8DigitCounter])
    3eec:	9e 81       	ldd	r25, Y+6	; 0x06
    3eee:	8a 81       	ldd	r24, Y+2	; 0x02
    3ef0:	98 17       	cp	r25, r24
    3ef2:	c1 f5       	brne	.+112    	; 0x3f64 <Check_AdminPassword+0x1ce>
	{
		LOC_u16PassLocationVariableDigits = (LOC_u16AdminStartLocation ) + (2 * MAX_DIGITS * LOC_u8AdminCheck);
			for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DIGITS;LOC_u8DigitCounter++)
			{

				HAL_EEPROM_voidReadData(LOC_u16PassLocationVariableDigits,&LOC_u8AdminPass_Read[LOC_u8DigitCounter]);
    3ef4:	c8 01       	movw	r24, r16
    3ef6:	02 97       	sbiw	r24, 0x02	; 2
    3ef8:	be 01       	movw	r22, r28
    3efa:	69 5f       	subi	r22, 0xF9	; 249
    3efc:	7f 4f       	sbci	r23, 0xFF	; 255
    3efe:	0e 94 12 16 	call	0x2c24	; 0x2c24 <HAL_EEPROM_voidReadData>
				if (LOC_u8AdminPass_Read[LOC_u8DigitCounter] == LOC_u8AdminPasswordArray[LOC_u8DigitCounter])
    3f02:	9f 81       	ldd	r25, Y+7	; 0x07
    3f04:	8b 81       	ldd	r24, Y+3	; 0x03
    3f06:	98 17       	cp	r25, r24
    3f08:	69 f5       	brne	.+90     	; 0x3f64 <Check_AdminPassword+0x1ce>
	{
		LOC_u16PassLocationVariableDigits = (LOC_u16AdminStartLocation ) + (2 * MAX_DIGITS * LOC_u8AdminCheck);
			for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DIGITS;LOC_u8DigitCounter++)
			{

				HAL_EEPROM_voidReadData(LOC_u16PassLocationVariableDigits,&LOC_u8AdminPass_Read[LOC_u8DigitCounter]);
    3f0a:	c8 01       	movw	r24, r16
    3f0c:	01 97       	sbiw	r24, 0x01	; 1
    3f0e:	be 01       	movw	r22, r28
    3f10:	68 5f       	subi	r22, 0xF8	; 248
    3f12:	7f 4f       	sbci	r23, 0xFF	; 255
    3f14:	0e 94 12 16 	call	0x2c24	; 0x2c24 <HAL_EEPROM_voidReadData>
				if (LOC_u8AdminPass_Read[LOC_u8DigitCounter] == LOC_u8AdminPasswordArray[LOC_u8DigitCounter])
    3f18:	98 85       	ldd	r25, Y+8	; 0x08
    3f1a:	8c 81       	ldd	r24, Y+4	; 0x04
    3f1c:	98 17       	cp	r25, r24
    3f1e:	11 f5       	brne	.+68     	; 0x3f64 <Check_AdminPassword+0x1ce>
    3f20:	8d e4       	ldi	r24, 0x4D	; 77
	{
		return ADMIN_NOT_FOUND;
	}


}
    3f22:	60 96       	adiw	r28, 0x10	; 16
    3f24:	0f b6       	in	r0, 0x3f	; 63
    3f26:	f8 94       	cli
    3f28:	de bf       	out	0x3e, r29	; 62
    3f2a:	0f be       	out	0x3f, r0	; 63
    3f2c:	cd bf       	out	0x3d, r28	; 61
    3f2e:	cf 91       	pop	r28
    3f30:	df 91       	pop	r29
    3f32:	1f 91       	pop	r17
    3f34:	0f 91       	pop	r16
    3f36:	ff 90       	pop	r15
    3f38:	ef 90       	pop	r14
    3f3a:	df 90       	pop	r13
    3f3c:	bf 90       	pop	r11
    3f3e:	af 90       	pop	r10
    3f40:	9f 90       	pop	r9
    3f42:	8f 90       	pop	r8
    3f44:	7f 90       	pop	r7
    3f46:	6f 90       	pop	r6
    3f48:	5f 90       	pop	r5
    3f4a:	4f 90       	pop	r4
    3f4c:	08 95       	ret
		LOC_u16AdminID = (LOC_u16AdminID / 10);
		i--;
	}


	for(;LOC_u16AdminLocationVariable <= ADMIN_LOCATION_BOT;LOC_u16AdminLocationVariable += STEP)
    3f4e:	08 5f       	subi	r16, 0xF8	; 248
    3f50:	1f 4f       	sbci	r17, 0xFF	; 255
    3f52:	8c e0       	ldi	r24, 0x0C	; 12
    3f54:	d8 16       	cp	r13, r24
    3f56:	09 f0       	breq	.+2      	; 0x3f5a <Check_AdminPassword+0x1c4>
    3f58:	67 cf       	rjmp	.-306    	; 0x3e28 <Check_AdminPassword+0x92>
    3f5a:	1b eb       	ldi	r17, 0xBB	; 187
    3f5c:	d1 2e       	mov	r13, r17
    3f5e:	8c cf       	rjmp	.-232    	; 0x3e78 <Check_AdminPassword+0xe2>
		LOC_u16AdminPassword = (LOC_u16AdminPassword / 10);
		i--;
	}


	if ((LOC_u8AdminCheck <= ADMINS_MAX_AMOUNT) && (LOC_u8AdminCheck >= ADMINS_MIN_AMOUNT))
    3f60:	8b eb       	ldi	r24, 0xBB	; 187
    3f62:	df cf       	rjmp	.-66     	; 0x3f22 <Check_AdminPassword+0x18c>
		LOC_u16PassLocationVariableDigits = (LOC_u16AdminStartLocation ) + (2 * MAX_DIGITS * LOC_u8AdminCheck);
			for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DIGITS;LOC_u8DigitCounter++)
			{

				HAL_EEPROM_voidReadData(LOC_u16PassLocationVariableDigits,&LOC_u8AdminPass_Read[LOC_u8DigitCounter]);
				if (LOC_u8AdminPass_Read[LOC_u8DigitCounter] == LOC_u8AdminPasswordArray[LOC_u8DigitCounter])
    3f64:	88 e5       	ldi	r24, 0x58	; 88
    3f66:	dd cf       	rjmp	.-70     	; 0x3f22 <Check_AdminPassword+0x18c>

00003f68 <Add_User>:
}


/*************************	User Section	****************************/
u8 Add_User(u16 LOC_u16UserID,u16 LOC_u16UserPassword)
{
    3f68:	2f 92       	push	r2
    3f6a:	3f 92       	push	r3
    3f6c:	4f 92       	push	r4
    3f6e:	5f 92       	push	r5
    3f70:	6f 92       	push	r6
    3f72:	7f 92       	push	r7
    3f74:	8f 92       	push	r8
    3f76:	9f 92       	push	r9
    3f78:	af 92       	push	r10
    3f7a:	bf 92       	push	r11
    3f7c:	cf 92       	push	r12
    3f7e:	df 92       	push	r13
    3f80:	ef 92       	push	r14
    3f82:	ff 92       	push	r15
    3f84:	0f 93       	push	r16
    3f86:	1f 93       	push	r17
    3f88:	df 93       	push	r29
    3f8a:	cf 93       	push	r28
    3f8c:	cd b7       	in	r28, 0x3d	; 61
    3f8e:	de b7       	in	r29, 0x3e	; 62
    3f90:	29 97       	sbiw	r28, 0x09	; 9
    3f92:	0f b6       	in	r0, 0x3f	; 63
    3f94:	f8 94       	cli
    3f96:	de bf       	out	0x3e, r29	; 62
    3f98:	0f be       	out	0x3f, r0	; 63
    3f9a:	cd bf       	out	0x3d, r28	; 61
    3f9c:	4c 01       	movw	r8, r24
    3f9e:	1b 01       	movw	r2, r22
	u8 i=3,LOC_u8UserNumberFlag = 0, LOC_u8IDMatchedFlag = 0 ,LOC_u8UserID_Read[MAX_DIGITS] , LOC_u8UserIDArray[MAX_DIGITS], LOC_u8DigitCounter = 0;

	u16 LOC_u16UserLocationVariable = USER_LOCATION_TOP,LOC_u16UserLocationVariableDigits ;


	while (LOC_u16UserID != 0)
    3fa0:	00 97       	sbiw	r24, 0x00	; 0
    3fa2:	c1 f0       	breq	.+48     	; 0x3fd4 <Add_User+0x6c>
    3fa4:	9c 01       	movw	r18, r24
    3fa6:	43 e0       	ldi	r20, 0x03	; 3
    3fa8:	8e 01       	movw	r16, r28
    3faa:	0a 5f       	subi	r16, 0xFA	; 250
    3fac:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		LOC_u8UserIDArray[i] = (LOC_u16UserID % 10);
    3fae:	f8 01       	movw	r30, r16
    3fb0:	e4 0f       	add	r30, r20
    3fb2:	f1 1d       	adc	r31, r1
    3fb4:	c9 01       	movw	r24, r18
    3fb6:	6a e0       	ldi	r22, 0x0A	; 10
    3fb8:	70 e0       	ldi	r23, 0x00	; 0
    3fba:	0e 94 9d 30 	call	0x613a	; 0x613a <__udivmodhi4>
    3fbe:	80 83       	st	Z, r24
		LOC_u16UserID = (LOC_u16UserID / 10);
    3fc0:	c9 01       	movw	r24, r18
    3fc2:	6a e0       	ldi	r22, 0x0A	; 10
    3fc4:	70 e0       	ldi	r23, 0x00	; 0
    3fc6:	0e 94 9d 30 	call	0x613a	; 0x613a <__udivmodhi4>
    3fca:	9b 01       	movw	r18, r22
		i--;
    3fcc:	41 50       	subi	r20, 0x01	; 1
	u8 i=3,LOC_u8UserNumberFlag = 0, LOC_u8IDMatchedFlag = 0 ,LOC_u8UserID_Read[MAX_DIGITS] , LOC_u8UserIDArray[MAX_DIGITS], LOC_u8DigitCounter = 0;

	u16 LOC_u16UserLocationVariable = USER_LOCATION_TOP,LOC_u16UserLocationVariableDigits ;


	while (LOC_u16UserID != 0)
    3fce:	61 15       	cp	r22, r1
    3fd0:	71 05       	cpc	r23, r1
    3fd2:	69 f7       	brne	.-38     	; 0x3fae <Add_User+0x46>
    3fd4:	cc 24       	eor	r12, r12
    3fd6:	00 e6       	ldi	r16, 0x60	; 96
    3fd8:	10 e0       	ldi	r17, 0x00	; 0
    3fda:	a2 e0       	ldi	r26, 0x02	; 2
    3fdc:	4a 2e       	mov	r4, r26
    3fde:	51 2c       	mov	r5, r1
    3fe0:	4c 0e       	add	r4, r28
    3fe2:	5d 1e       	adc	r5, r29
		LOC_u8UserNumberFlag++;
		LOC_u16UserLocationVariableDigits = LOC_u16UserLocationVariable;
		for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DIGITS;LOC_u8DigitCounter++)
		{

			HAL_EEPROM_voidReadData(LOC_u16UserLocationVariableDigits,&LOC_u8UserID_Read[LOC_u8DigitCounter]);
    3fe4:	f3 e0       	ldi	r31, 0x03	; 3
    3fe6:	af 2e       	mov	r10, r31
    3fe8:	b1 2c       	mov	r11, r1
    3fea:	ac 0e       	add	r10, r28
    3fec:	bd 1e       	adc	r11, r29
    3fee:	e2 e0       	ldi	r30, 0x02	; 2
    3ff0:	ee 2e       	mov	r14, r30
    3ff2:	f1 2c       	mov	r15, r1
    3ff4:	e4 0c       	add	r14, r4
    3ff6:	f5 1c       	adc	r15, r5
    3ff8:	75 e0       	ldi	r23, 0x05	; 5
    3ffa:	67 2e       	mov	r6, r23
    3ffc:	71 2c       	mov	r7, r1
    3ffe:	6c 0e       	add	r6, r28
    4000:	7d 1e       	adc	r7, r29
	}


	for(;LOC_u16UserLocationVariable <= USER_LOCATION_BOT;LOC_u16UserLocationVariable += STEP)
	{
		LOC_u8UserNumberFlag++;
    4002:	c3 94       	inc	r12
		LOC_u16UserLocationVariableDigits = LOC_u16UserLocationVariable;
		for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DIGITS;LOC_u8DigitCounter++)
		{

			HAL_EEPROM_voidReadData(LOC_u16UserLocationVariableDigits,&LOC_u8UserID_Read[LOC_u8DigitCounter]);
    4004:	c8 01       	movw	r24, r16
    4006:	b2 01       	movw	r22, r4
    4008:	0e 94 12 16 	call	0x2c24	; 0x2c24 <HAL_EEPROM_voidReadData>
			if (LOC_u8UserID_Read[LOC_u8DigitCounter] == LOC_u8UserIDArray[LOC_u8DigitCounter])
    400c:	9a 81       	ldd	r25, Y+2	; 0x02
    400e:	8e 81       	ldd	r24, Y+6	; 0x06
    4010:	98 17       	cp	r25, r24
    4012:	09 f0       	breq	.+2      	; 0x4016 <Add_User+0xae>
    4014:	60 c0       	rjmp	.+192    	; 0x40d6 <Add_User+0x16e>
		LOC_u8UserNumberFlag++;
		LOC_u16UserLocationVariableDigits = LOC_u16UserLocationVariable;
		for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DIGITS;LOC_u8DigitCounter++)
		{

			HAL_EEPROM_voidReadData(LOC_u16UserLocationVariableDigits,&LOC_u8UserID_Read[LOC_u8DigitCounter]);
    4016:	c8 01       	movw	r24, r16
    4018:	01 96       	adiw	r24, 0x01	; 1
    401a:	b5 01       	movw	r22, r10
    401c:	0e 94 12 16 	call	0x2c24	; 0x2c24 <HAL_EEPROM_voidReadData>
			if (LOC_u8UserID_Read[LOC_u8DigitCounter] == LOC_u8UserIDArray[LOC_u8DigitCounter])
    4020:	9b 81       	ldd	r25, Y+3	; 0x03
    4022:	8f 81       	ldd	r24, Y+7	; 0x07
    4024:	98 17       	cp	r25, r24
    4026:	09 f0       	breq	.+2      	; 0x402a <Add_User+0xc2>
    4028:	56 c0       	rjmp	.+172    	; 0x40d6 <Add_User+0x16e>
		LOC_u8UserNumberFlag++;
		LOC_u16UserLocationVariableDigits = LOC_u16UserLocationVariable;
		for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DIGITS;LOC_u8DigitCounter++)
		{

			HAL_EEPROM_voidReadData(LOC_u16UserLocationVariableDigits,&LOC_u8UserID_Read[LOC_u8DigitCounter]);
    402a:	c8 01       	movw	r24, r16
    402c:	02 96       	adiw	r24, 0x02	; 2
    402e:	b7 01       	movw	r22, r14
    4030:	0e 94 12 16 	call	0x2c24	; 0x2c24 <HAL_EEPROM_voidReadData>
			if (LOC_u8UserID_Read[LOC_u8DigitCounter] == LOC_u8UserIDArray[LOC_u8DigitCounter])
    4034:	9c 81       	ldd	r25, Y+4	; 0x04
    4036:	88 85       	ldd	r24, Y+8	; 0x08
    4038:	98 17       	cp	r25, r24
    403a:	09 f0       	breq	.+2      	; 0x403e <Add_User+0xd6>
    403c:	4c c0       	rjmp	.+152    	; 0x40d6 <Add_User+0x16e>
		LOC_u8UserNumberFlag++;
		LOC_u16UserLocationVariableDigits = LOC_u16UserLocationVariable;
		for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DIGITS;LOC_u8DigitCounter++)
		{

			HAL_EEPROM_voidReadData(LOC_u16UserLocationVariableDigits,&LOC_u8UserID_Read[LOC_u8DigitCounter]);
    403e:	c8 01       	movw	r24, r16
    4040:	03 96       	adiw	r24, 0x03	; 3
    4042:	b3 01       	movw	r22, r6
    4044:	0e 94 12 16 	call	0x2c24	; 0x2c24 <HAL_EEPROM_voidReadData>
			if (LOC_u8UserID_Read[LOC_u8DigitCounter] == LOC_u8UserIDArray[LOC_u8DigitCounter])
    4048:	9d 81       	ldd	r25, Y+5	; 0x05
    404a:	89 85       	ldd	r24, Y+9	; 0x09
    404c:	98 17       	cp	r25, r24
    404e:	09 f0       	breq	.+2      	; 0x4052 <Add_User+0xea>
    4050:	42 c0       	rjmp	.+132    	; 0x40d6 <Add_User+0x16e>


void APP_Registeration_voidGetNumberOfUsers(u8* LOC_Pu8UsersNumber)
{
	u16 LOC_u16LocationVariable = USER_LOCATION_TOP;
	u8 LOC_u8UserNumber = 0,LOC_u8NumberCheck = 0;
    4052:	19 82       	std	Y+1, r1	; 0x01
    4054:	00 e6       	ldi	r16, 0x60	; 96
    4056:	10 e0       	ldi	r17, 0x00	; 0
    4058:	bb 24       	eor	r11, r11
    405a:	7e 01       	movw	r14, r28
    405c:	08 94       	sec
    405e:	e1 1c       	adc	r14, r1
    4060:	f1 1c       	adc	r15, r1
	for(;LOC_u16LocationVariable <= USER_LOCATION_BOT;LOC_u16LocationVariable += STEP)
	{
		HAL_EEPROM_voidReadData(LOC_u16LocationVariable,&LOC_u8NumberCheck);
    4062:	c8 01       	movw	r24, r16
    4064:	b7 01       	movw	r22, r14
    4066:	0e 94 12 16 	call	0x2c24	; 0x2c24 <HAL_EEPROM_voidReadData>
		if(LOC_u8NumberCheck != 255)
    406a:	89 81       	ldd	r24, Y+1	; 0x01
    406c:	8f 3f       	cpi	r24, 0xFF	; 255
    406e:	09 f0       	breq	.+2      	; 0x4072 <Add_User+0x10a>
		{
			LOC_u8UserNumber++;
    4070:	b3 94       	inc	r11

void APP_Registeration_voidGetNumberOfUsers(u8* LOC_Pu8UsersNumber)
{
	u16 LOC_u16LocationVariable = USER_LOCATION_TOP;
	u8 LOC_u8UserNumber = 0,LOC_u8NumberCheck = 0;
	for(;LOC_u16LocationVariable <= USER_LOCATION_BOT;LOC_u16LocationVariable += STEP)
    4072:	08 5f       	subi	r16, 0xF8	; 248
    4074:	1f 4f       	sbci	r17, 0xFF	; 255
    4076:	81 e0       	ldi	r24, 0x01	; 1
    4078:	00 32       	cpi	r16, 0x20	; 32
    407a:	18 07       	cpc	r17, r24
    407c:	91 f7       	brne	.-28     	; 0x4062 <Add_User+0xfa>
	u16 LOC_u16LastLocation;

	LOC_u8CheckUserIDExistance = Check_UserID(LOC_u16UserID);
	APP_Registeration_voidGetNumberOfUsers(&LOC_u8GetUsersCount);

	if ((LOC_u8GetUsersCount < USERS_MAX_AMOUNT) && (LOC_u8GetUsersCount >= USER_DATABASE_EMPTY))
    407e:	27 e1       	ldi	r18, 0x17	; 23
    4080:	2b 15       	cp	r18, r11
    4082:	a0 f1       	brcs	.+104    	; 0x40ec <Add_User+0x184>
	{
		if((LOC_u16UserID <= 9999 && LOC_u16UserID >= 1000) && (LOC_u16UserPassword <= 9999 && LOC_u16UserPassword >= 1000))
    4084:	c4 01       	movw	r24, r8
    4086:	88 5e       	subi	r24, 0xE8	; 232
    4088:	93 40       	sbci	r25, 0x03	; 3
    408a:	88 52       	subi	r24, 0x28	; 40
    408c:	93 42       	sbci	r25, 0x23	; 35
    408e:	60 f5       	brcc	.+88     	; 0x40e8 <Add_User+0x180>
    4090:	c1 01       	movw	r24, r2
    4092:	88 5e       	subi	r24, 0xE8	; 232
    4094:	93 40       	sbci	r25, 0x03	; 3
    4096:	88 52       	subi	r24, 0x28	; 40
    4098:	93 42       	sbci	r25, 0x23	; 35
    409a:	30 f5       	brcc	.+76     	; 0x40e8 <Add_User+0x180>
		{
			if (LOC_u8CheckUserIDExistance == USER_NOT_FOUND)
    409c:	8b eb       	ldi	r24, 0xBB	; 187
    409e:	c8 16       	cp	r12, r24
    40a0:	39 f1       	breq	.+78     	; 0x40f0 <Add_User+0x188>
    40a2:	8c ec       	ldi	r24, 0xCC	; 204
	}
	else
	{
		return FULL;
	}
}
    40a4:	29 96       	adiw	r28, 0x09	; 9
    40a6:	0f b6       	in	r0, 0x3f	; 63
    40a8:	f8 94       	cli
    40aa:	de bf       	out	0x3e, r29	; 62
    40ac:	0f be       	out	0x3f, r0	; 63
    40ae:	cd bf       	out	0x3d, r28	; 61
    40b0:	cf 91       	pop	r28
    40b2:	df 91       	pop	r29
    40b4:	1f 91       	pop	r17
    40b6:	0f 91       	pop	r16
    40b8:	ff 90       	pop	r15
    40ba:	ef 90       	pop	r14
    40bc:	df 90       	pop	r13
    40be:	cf 90       	pop	r12
    40c0:	bf 90       	pop	r11
    40c2:	af 90       	pop	r10
    40c4:	9f 90       	pop	r9
    40c6:	8f 90       	pop	r8
    40c8:	7f 90       	pop	r7
    40ca:	6f 90       	pop	r6
    40cc:	5f 90       	pop	r5
    40ce:	4f 90       	pop	r4
    40d0:	3f 90       	pop	r3
    40d2:	2f 90       	pop	r2
    40d4:	08 95       	ret
		LOC_u16UserID = (LOC_u16UserID / 10);
		i--;
	}


	for(;LOC_u16UserLocationVariable <= USER_LOCATION_BOT;LOC_u16UserLocationVariable += STEP)
    40d6:	08 5f       	subi	r16, 0xF8	; 248
    40d8:	1f 4f       	sbci	r17, 0xFF	; 255
    40da:	28 e1       	ldi	r18, 0x18	; 24
    40dc:	c2 16       	cp	r12, r18
    40de:	09 f0       	breq	.+2      	; 0x40e2 <Add_User+0x17a>
    40e0:	90 cf       	rjmp	.-224    	; 0x4002 <Add_User+0x9a>
    40e2:	6b eb       	ldi	r22, 0xBB	; 187
    40e4:	c6 2e       	mov	r12, r22
    40e6:	b5 cf       	rjmp	.-150    	; 0x4052 <Add_User+0xea>
					HAL_EEPROM_voidWriteData(LOC_u16LastLocation++,Pass[j]);
				}

				//			GLOB_u8UserCount++;
				//LOC_u8GetUsersCount++;
				return ++LOC_u8GetUsersCount;		//returning number of users add till now.
    40e8:	8f ef       	ldi	r24, 0xFF	; 255
    40ea:	dc cf       	rjmp	.-72     	; 0x40a4 <Add_User+0x13c>
	u16 LOC_u16LastLocation;

	LOC_u8CheckUserIDExistance = Check_UserID(LOC_u16UserID);
	APP_Registeration_voidGetNumberOfUsers(&LOC_u8GetUsersCount);

	if ((LOC_u8GetUsersCount < USERS_MAX_AMOUNT) && (LOC_u8GetUsersCount >= USER_DATABASE_EMPTY))
    40ec:	8e ed       	ldi	r24, 0xDE	; 222
    40ee:	da cf       	rjmp	.-76     	; 0x40a4 <Add_User+0x13c>
			{

				u8 i=3,j=3, User[MAX_DIGITS] , Pass[MAX_DIGITS];
				//			static u16 LOC_u16CurrentLocation;

				while (LOC_u16UserID != 0)
    40f0:	81 14       	cp	r8, r1
    40f2:	91 04       	cpc	r9, r1
    40f4:	b9 f0       	breq	.+46     	; 0x4124 <Add_User+0x1bc>
    40f6:	43 e0       	ldi	r20, 0x03	; 3
    40f8:	8e 01       	movw	r16, r28
    40fa:	0a 5f       	subi	r16, 0xFA	; 250
    40fc:	1f 4f       	sbci	r17, 0xFF	; 255
				{
					User[i] = (LOC_u16UserID % 10);
    40fe:	f8 01       	movw	r30, r16
    4100:	e4 0f       	add	r30, r20
    4102:	f1 1d       	adc	r31, r1
    4104:	c4 01       	movw	r24, r8
    4106:	6a e0       	ldi	r22, 0x0A	; 10
    4108:	70 e0       	ldi	r23, 0x00	; 0
    410a:	0e 94 9d 30 	call	0x613a	; 0x613a <__udivmodhi4>
    410e:	80 83       	st	Z, r24
					LOC_u16UserID = (LOC_u16UserID / 10);
    4110:	c4 01       	movw	r24, r8
    4112:	6a e0       	ldi	r22, 0x0A	; 10
    4114:	70 e0       	ldi	r23, 0x00	; 0
    4116:	0e 94 9d 30 	call	0x613a	; 0x613a <__udivmodhi4>
    411a:	4b 01       	movw	r8, r22
					i--;
    411c:	41 50       	subi	r20, 0x01	; 1
			{

				u8 i=3,j=3, User[MAX_DIGITS] , Pass[MAX_DIGITS];
				//			static u16 LOC_u16CurrentLocation;

				while (LOC_u16UserID != 0)
    411e:	61 15       	cp	r22, r1
    4120:	71 05       	cpc	r23, r1
    4122:	69 f7       	brne	.-38     	; 0x40fe <Add_User+0x196>
				{
					User[i] = (LOC_u16UserID % 10);
					LOC_u16UserID = (LOC_u16UserID / 10);
					i--;
				}
				while (LOC_u16UserPassword != 0)
    4124:	21 14       	cp	r2, r1
    4126:	31 04       	cpc	r3, r1
    4128:	a1 f0       	breq	.+40     	; 0x4152 <Add_User+0x1ea>
    412a:	43 e0       	ldi	r20, 0x03	; 3
				{
					Pass[j] = (LOC_u16UserPassword % 10);
    412c:	f2 01       	movw	r30, r4
    412e:	e4 0f       	add	r30, r20
    4130:	f1 1d       	adc	r31, r1
    4132:	c1 01       	movw	r24, r2
    4134:	6a e0       	ldi	r22, 0x0A	; 10
    4136:	70 e0       	ldi	r23, 0x00	; 0
    4138:	0e 94 9d 30 	call	0x613a	; 0x613a <__udivmodhi4>
    413c:	80 83       	st	Z, r24
					LOC_u16UserPassword = (LOC_u16UserPassword / 10);
    413e:	c1 01       	movw	r24, r2
    4140:	6a e0       	ldi	r22, 0x0A	; 10
    4142:	70 e0       	ldi	r23, 0x00	; 0
    4144:	0e 94 9d 30 	call	0x613a	; 0x613a <__udivmodhi4>
    4148:	1b 01       	movw	r2, r22
					j--;
    414a:	41 50       	subi	r20, 0x01	; 1
				{
					User[i] = (LOC_u16UserID % 10);
					LOC_u16UserID = (LOC_u16UserID / 10);
					i--;
				}
				while (LOC_u16UserPassword != 0)
    414c:	61 15       	cp	r22, r1
    414e:	71 05       	cpc	r23, r1
    4150:	69 f7       	brne	.-38     	; 0x412c <Add_User+0x1c4>


				//			LOC_u16UserLocation = (USER_LOCATION_TOP) + (LOC_u16CurrentLocation*8) ;

//				LOC_u16LastUserStartLocation = (USER_LOCATION_TOP - STEP);
				LOC_u16LastLocation = (USER_LOCATION_TOP) + ( STEP * LOC_u8GetUsersCount);
    4152:	0b 2d       	mov	r16, r11
    4154:	10 e0       	ldi	r17, 0x00	; 0
    4156:	04 5f       	subi	r16, 0xF4	; 244
    4158:	1f 4f       	sbci	r17, 0xFF	; 255
    415a:	00 0f       	add	r16, r16
    415c:	11 1f       	adc	r17, r17
    415e:	00 0f       	add	r16, r16
    4160:	11 1f       	adc	r17, r17
    4162:	00 0f       	add	r16, r16
    4164:	11 1f       	adc	r17, r17

				for(i=0;i<4;i++)
				{
					//			HAL_EEPROM_voidWriteData(GLOB_u8Location++,User[i]);
					HAL_EEPROM_voidWriteData(LOC_u16LastLocation++,User[i]);
    4166:	78 01       	movw	r14, r16
    4168:	08 94       	sec
    416a:	e1 1c       	adc	r14, r1
    416c:	f1 1c       	adc	r15, r1
    416e:	c8 01       	movw	r24, r16
    4170:	6e 81       	ldd	r22, Y+6	; 0x06
    4172:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <HAL_EEPROM_voidWriteData>
    4176:	67 01       	movw	r12, r14
    4178:	08 94       	sec
    417a:	c1 1c       	adc	r12, r1
    417c:	d1 1c       	adc	r13, r1
    417e:	c7 01       	movw	r24, r14
    4180:	6f 81       	ldd	r22, Y+7	; 0x07
    4182:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <HAL_EEPROM_voidWriteData>
    4186:	c6 01       	movw	r24, r12
    4188:	68 85       	ldd	r22, Y+8	; 0x08
    418a:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <HAL_EEPROM_voidWriteData>
    418e:	c6 01       	movw	r24, r12
    4190:	01 96       	adiw	r24, 0x01	; 1
    4192:	69 85       	ldd	r22, Y+9	; 0x09
    4194:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <HAL_EEPROM_voidWriteData>
				}
				for(j=0;j<4;j++)
				{
					//			HAL_EEPROM_voidWriteData(GLOB_u8Location++,Pass[j]);
					HAL_EEPROM_voidWriteData(LOC_u16LastLocation++,Pass[j]);
    4198:	c8 01       	movw	r24, r16
    419a:	04 96       	adiw	r24, 0x04	; 4
    419c:	6a 81       	ldd	r22, Y+2	; 0x02
    419e:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <HAL_EEPROM_voidWriteData>
    41a2:	46 e0       	ldi	r20, 0x06	; 6
    41a4:	e4 2e       	mov	r14, r20
    41a6:	f1 2c       	mov	r15, r1
    41a8:	e0 0e       	add	r14, r16
    41aa:	f1 1e       	adc	r15, r17
    41ac:	0b 5f       	subi	r16, 0xFB	; 251
    41ae:	1f 4f       	sbci	r17, 0xFF	; 255
    41b0:	c8 01       	movw	r24, r16
    41b2:	6b 81       	ldd	r22, Y+3	; 0x03
    41b4:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <HAL_EEPROM_voidWriteData>
    41b8:	c7 01       	movw	r24, r14
    41ba:	6c 81       	ldd	r22, Y+4	; 0x04
    41bc:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <HAL_EEPROM_voidWriteData>
    41c0:	c8 01       	movw	r24, r16
    41c2:	02 96       	adiw	r24, 0x02	; 2
    41c4:	6d 81       	ldd	r22, Y+5	; 0x05
    41c6:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <HAL_EEPROM_voidWriteData>
				}

				//			GLOB_u8UserCount++;
				//LOC_u8GetUsersCount++;
				return ++LOC_u8GetUsersCount;		//returning number of users add till now.
    41ca:	8b 2d       	mov	r24, r11
    41cc:	8f 5f       	subi	r24, 0xFF	; 255
    41ce:	6a cf       	rjmp	.-300    	; 0x40a4 <Add_User+0x13c>

000041d0 <Check_UserPassword>:

	return USER_NOT_FOUND;
}

u8 Check_UserPassword(u16 LOC_u16UserID,u16 LOC_u16UserPassword)
{
    41d0:	4f 92       	push	r4
    41d2:	5f 92       	push	r5
    41d4:	6f 92       	push	r6
    41d6:	7f 92       	push	r7
    41d8:	8f 92       	push	r8
    41da:	9f 92       	push	r9
    41dc:	af 92       	push	r10
    41de:	bf 92       	push	r11
    41e0:	df 92       	push	r13
    41e2:	ef 92       	push	r14
    41e4:	ff 92       	push	r15
    41e6:	0f 93       	push	r16
    41e8:	1f 93       	push	r17
    41ea:	df 93       	push	r29
    41ec:	cf 93       	push	r28
    41ee:	cd b7       	in	r28, 0x3d	; 61
    41f0:	de b7       	in	r29, 0x3e	; 62
    41f2:	60 97       	sbiw	r28, 0x10	; 16
    41f4:	0f b6       	in	r0, 0x3f	; 63
    41f6:	f8 94       	cli
    41f8:	de bf       	out	0x3e, r29	; 62
    41fa:	0f be       	out	0x3f, r0	; 63
    41fc:	cd bf       	out	0x3d, r28	; 61
    41fe:	9c 01       	movw	r18, r24
    4200:	7b 01       	movw	r14, r22
	u8 i=3,LOC_u8UserNumberFlag = 0, LOC_u8IDMatchedFlag = 0 ,LOC_u8UserID_Read[MAX_DIGITS] , LOC_u8UserIDArray[MAX_DIGITS], LOC_u8DigitCounter = 0;

	u16 LOC_u16UserLocationVariable = USER_LOCATION_TOP,LOC_u16UserLocationVariableDigits ;


	while (LOC_u16UserID != 0)
    4202:	00 97       	sbiw	r24, 0x00	; 0
    4204:	b9 f0       	breq	.+46     	; 0x4234 <Check_UserPassword+0x64>
    4206:	43 e0       	ldi	r20, 0x03	; 3
    4208:	8e 01       	movw	r16, r28
    420a:	03 5f       	subi	r16, 0xF3	; 243
    420c:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		LOC_u8UserIDArray[i] = (LOC_u16UserID % 10);
    420e:	f8 01       	movw	r30, r16
    4210:	e4 0f       	add	r30, r20
    4212:	f1 1d       	adc	r31, r1
    4214:	c9 01       	movw	r24, r18
    4216:	6a e0       	ldi	r22, 0x0A	; 10
    4218:	70 e0       	ldi	r23, 0x00	; 0
    421a:	0e 94 9d 30 	call	0x613a	; 0x613a <__udivmodhi4>
    421e:	80 83       	st	Z, r24
		LOC_u16UserID = (LOC_u16UserID / 10);
    4220:	c9 01       	movw	r24, r18
    4222:	6a e0       	ldi	r22, 0x0A	; 10
    4224:	70 e0       	ldi	r23, 0x00	; 0
    4226:	0e 94 9d 30 	call	0x613a	; 0x613a <__udivmodhi4>
    422a:	9b 01       	movw	r18, r22
		i--;
    422c:	41 50       	subi	r20, 0x01	; 1
	u8 i=3,LOC_u8UserNumberFlag = 0, LOC_u8IDMatchedFlag = 0 ,LOC_u8UserID_Read[MAX_DIGITS] , LOC_u8UserIDArray[MAX_DIGITS], LOC_u8DigitCounter = 0;

	u16 LOC_u16UserLocationVariable = USER_LOCATION_TOP,LOC_u16UserLocationVariableDigits ;


	while (LOC_u16UserID != 0)
    422e:	61 15       	cp	r22, r1
    4230:	71 05       	cpc	r23, r1
    4232:	69 f7       	brne	.-38     	; 0x420e <Check_UserPassword+0x3e>
    4234:	dd 24       	eor	r13, r13
    4236:	00 e6       	ldi	r16, 0x60	; 96
    4238:	10 e0       	ldi	r17, 0x00	; 0
    423a:	39 e0       	ldi	r19, 0x09	; 9
    423c:	a3 2e       	mov	r10, r19
    423e:	b1 2c       	mov	r11, r1
    4240:	ac 0e       	add	r10, r28
    4242:	bd 1e       	adc	r11, r29
		LOC_u8UserNumberFlag++;
		LOC_u16UserLocationVariableDigits = LOC_u16UserLocationVariable;
		for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DIGITS;LOC_u8DigitCounter++)
		{

			HAL_EEPROM_voidReadData(LOC_u16UserLocationVariableDigits,&LOC_u8UserID_Read[LOC_u8DigitCounter]);
    4244:	2a e0       	ldi	r18, 0x0A	; 10
    4246:	82 2e       	mov	r8, r18
    4248:	91 2c       	mov	r9, r1
    424a:	8c 0e       	add	r8, r28
    424c:	9d 1e       	adc	r9, r29
    424e:	9b e0       	ldi	r25, 0x0B	; 11
    4250:	69 2e       	mov	r6, r25
    4252:	71 2c       	mov	r7, r1
    4254:	6c 0e       	add	r6, r28
    4256:	7d 1e       	adc	r7, r29
    4258:	8c e0       	ldi	r24, 0x0C	; 12
    425a:	48 2e       	mov	r4, r24
    425c:	51 2c       	mov	r5, r1
    425e:	4c 0e       	add	r4, r28
    4260:	5d 1e       	adc	r5, r29
	}


	for(;LOC_u16UserLocationVariable <= USER_LOCATION_BOT;LOC_u16UserLocationVariable += STEP)
	{
		LOC_u8UserNumberFlag++;
    4262:	d3 94       	inc	r13
		LOC_u16UserLocationVariableDigits = LOC_u16UserLocationVariable;
		for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DIGITS;LOC_u8DigitCounter++)
		{

			HAL_EEPROM_voidReadData(LOC_u16UserLocationVariableDigits,&LOC_u8UserID_Read[LOC_u8DigitCounter]);
    4264:	c8 01       	movw	r24, r16
    4266:	b5 01       	movw	r22, r10
    4268:	0e 94 12 16 	call	0x2c24	; 0x2c24 <HAL_EEPROM_voidReadData>
			if (LOC_u8UserID_Read[LOC_u8DigitCounter] == LOC_u8UserIDArray[LOC_u8DigitCounter])
    426c:	99 85       	ldd	r25, Y+9	; 0x09
    426e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4270:	98 17       	cp	r25, r24
    4272:	09 f0       	breq	.+2      	; 0x4276 <Check_UserPassword+0xa6>
    4274:	8c c0       	rjmp	.+280    	; 0x438e <Check_UserPassword+0x1be>
		LOC_u8UserNumberFlag++;
		LOC_u16UserLocationVariableDigits = LOC_u16UserLocationVariable;
		for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DIGITS;LOC_u8DigitCounter++)
		{

			HAL_EEPROM_voidReadData(LOC_u16UserLocationVariableDigits,&LOC_u8UserID_Read[LOC_u8DigitCounter]);
    4276:	c8 01       	movw	r24, r16
    4278:	01 96       	adiw	r24, 0x01	; 1
    427a:	b4 01       	movw	r22, r8
    427c:	0e 94 12 16 	call	0x2c24	; 0x2c24 <HAL_EEPROM_voidReadData>
			if (LOC_u8UserID_Read[LOC_u8DigitCounter] == LOC_u8UserIDArray[LOC_u8DigitCounter])
    4280:	9a 85       	ldd	r25, Y+10	; 0x0a
    4282:	8e 85       	ldd	r24, Y+14	; 0x0e
    4284:	98 17       	cp	r25, r24
    4286:	09 f0       	breq	.+2      	; 0x428a <Check_UserPassword+0xba>
    4288:	82 c0       	rjmp	.+260    	; 0x438e <Check_UserPassword+0x1be>
		LOC_u8UserNumberFlag++;
		LOC_u16UserLocationVariableDigits = LOC_u16UserLocationVariable;
		for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DIGITS;LOC_u8DigitCounter++)
		{

			HAL_EEPROM_voidReadData(LOC_u16UserLocationVariableDigits,&LOC_u8UserID_Read[LOC_u8DigitCounter]);
    428a:	c8 01       	movw	r24, r16
    428c:	02 96       	adiw	r24, 0x02	; 2
    428e:	b3 01       	movw	r22, r6
    4290:	0e 94 12 16 	call	0x2c24	; 0x2c24 <HAL_EEPROM_voidReadData>
			if (LOC_u8UserID_Read[LOC_u8DigitCounter] == LOC_u8UserIDArray[LOC_u8DigitCounter])
    4294:	9b 85       	ldd	r25, Y+11	; 0x0b
    4296:	8f 85       	ldd	r24, Y+15	; 0x0f
    4298:	98 17       	cp	r25, r24
    429a:	09 f0       	breq	.+2      	; 0x429e <Check_UserPassword+0xce>
    429c:	78 c0       	rjmp	.+240    	; 0x438e <Check_UserPassword+0x1be>
		LOC_u8UserNumberFlag++;
		LOC_u16UserLocationVariableDigits = LOC_u16UserLocationVariable;
		for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DIGITS;LOC_u8DigitCounter++)
		{

			HAL_EEPROM_voidReadData(LOC_u16UserLocationVariableDigits,&LOC_u8UserID_Read[LOC_u8DigitCounter]);
    429e:	c8 01       	movw	r24, r16
    42a0:	03 96       	adiw	r24, 0x03	; 3
    42a2:	b2 01       	movw	r22, r4
    42a4:	0e 94 12 16 	call	0x2c24	; 0x2c24 <HAL_EEPROM_voidReadData>
			if (LOC_u8UserID_Read[LOC_u8DigitCounter] == LOC_u8UserIDArray[LOC_u8DigitCounter])
    42a8:	9c 85       	ldd	r25, Y+12	; 0x0c
    42aa:	88 89       	ldd	r24, Y+16	; 0x10
    42ac:	98 17       	cp	r25, r24
    42ae:	09 f0       	breq	.+2      	; 0x42b2 <Check_UserPassword+0xe2>
    42b0:	6e c0       	rjmp	.+220    	; 0x438e <Check_UserPassword+0x1be>
	u8 i=3,LOC_u8UserCheck = 0,LOC_u8PassMatchedFlag = 0,LOC_u8DigitCounter,LOC_u8UserPasswordArray[MAX_DIGITS], LOC_u8UserPass_Read[MAX_DIGITS];
	u16 LOC_u16UserStartLocation = (USER_LOCATION_TOP-MAX_DIGITS),LOC_u16PassLocationVariableDigits;
	LOC_u8UserCheck = Check_UserID(LOC_u16UserID);

	//Save password in an array to save time when checking.
	while (LOC_u16UserPassword != 0)
    42b2:	e1 14       	cp	r14, r1
    42b4:	f1 04       	cpc	r15, r1
    42b6:	b9 f0       	breq	.+46     	; 0x42e6 <Check_UserPassword+0x116>
    42b8:	43 e0       	ldi	r20, 0x03	; 3
    42ba:	8e 01       	movw	r16, r28
    42bc:	0f 5f       	subi	r16, 0xFF	; 255
    42be:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		LOC_u8UserPasswordArray[i] = (LOC_u16UserPassword % 10);
    42c0:	f8 01       	movw	r30, r16
    42c2:	e4 0f       	add	r30, r20
    42c4:	f1 1d       	adc	r31, r1
    42c6:	c7 01       	movw	r24, r14
    42c8:	6a e0       	ldi	r22, 0x0A	; 10
    42ca:	70 e0       	ldi	r23, 0x00	; 0
    42cc:	0e 94 9d 30 	call	0x613a	; 0x613a <__udivmodhi4>
    42d0:	80 83       	st	Z, r24
		LOC_u16UserPassword = (LOC_u16UserPassword / 10);
    42d2:	c7 01       	movw	r24, r14
    42d4:	6a e0       	ldi	r22, 0x0A	; 10
    42d6:	70 e0       	ldi	r23, 0x00	; 0
    42d8:	0e 94 9d 30 	call	0x613a	; 0x613a <__udivmodhi4>
    42dc:	7b 01       	movw	r14, r22
		i--;
    42de:	41 50       	subi	r20, 0x01	; 1
	u8 i=3,LOC_u8UserCheck = 0,LOC_u8PassMatchedFlag = 0,LOC_u8DigitCounter,LOC_u8UserPasswordArray[MAX_DIGITS], LOC_u8UserPass_Read[MAX_DIGITS];
	u16 LOC_u16UserStartLocation = (USER_LOCATION_TOP-MAX_DIGITS),LOC_u16PassLocationVariableDigits;
	LOC_u8UserCheck = Check_UserID(LOC_u16UserID);

	//Save password in an array to save time when checking.
	while (LOC_u16UserPassword != 0)
    42e0:	61 15       	cp	r22, r1
    42e2:	71 05       	cpc	r23, r1
    42e4:	69 f7       	brne	.-38     	; 0x42c0 <Check_UserPassword+0xf0>
		LOC_u16UserPassword = (LOC_u16UserPassword / 10);
		i--;
	}


	if ((LOC_u8UserCheck <= USERS_MAX_AMOUNT) && (LOC_u8UserCheck >= USERS_MIN_AMOUNT))
    42e6:	8d 2d       	mov	r24, r13
    42e8:	81 50       	subi	r24, 0x01	; 1
    42ea:	88 31       	cpi	r24, 0x18	; 24
    42ec:	08 f0       	brcs	.+2      	; 0x42f0 <Check_UserPassword+0x120>
    42ee:	58 c0       	rjmp	.+176    	; 0x43a0 <Check_UserPassword+0x1d0>
	{
		LOC_u16PassLocationVariableDigits = (LOC_u16UserStartLocation ) + (2 * MAX_DIGITS * LOC_u8UserCheck);
    42f0:	0d 2d       	mov	r16, r13
    42f2:	10 e0       	ldi	r17, 0x00	; 0
    42f4:	00 0f       	add	r16, r16
    42f6:	11 1f       	adc	r17, r17
    42f8:	00 0f       	add	r16, r16
    42fa:	11 1f       	adc	r17, r17
    42fc:	00 0f       	add	r16, r16
    42fe:	11 1f       	adc	r17, r17
    4300:	04 5a       	subi	r16, 0xA4	; 164
    4302:	1f 4f       	sbci	r17, 0xFF	; 255
			for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DIGITS;LOC_u8DigitCounter++)
			{

				HAL_EEPROM_voidReadData(LOC_u16PassLocationVariableDigits,&LOC_u8UserPass_Read[LOC_u8DigitCounter]);
    4304:	c8 01       	movw	r24, r16
    4306:	be 01       	movw	r22, r28
    4308:	6b 5f       	subi	r22, 0xFB	; 251
    430a:	7f 4f       	sbci	r23, 0xFF	; 255
    430c:	0e 94 12 16 	call	0x2c24	; 0x2c24 <HAL_EEPROM_voidReadData>
				if (LOC_u8UserPass_Read[LOC_u8DigitCounter] == LOC_u8UserPasswordArray[LOC_u8DigitCounter])
    4310:	9d 81       	ldd	r25, Y+5	; 0x05
    4312:	89 81       	ldd	r24, Y+1	; 0x01
    4314:	98 17       	cp	r25, r24
    4316:	09 f0       	breq	.+2      	; 0x431a <Check_UserPassword+0x14a>
    4318:	45 c0       	rjmp	.+138    	; 0x43a4 <Check_UserPassword+0x1d4>
				{
					LOC_u8PassMatchedFlag++;
					LOC_u16PassLocationVariableDigits++;
    431a:	0f 5f       	subi	r16, 0xFF	; 255
    431c:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		LOC_u16PassLocationVariableDigits = (LOC_u16UserStartLocation ) + (2 * MAX_DIGITS * LOC_u8UserCheck);
			for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DIGITS;LOC_u8DigitCounter++)
			{

				HAL_EEPROM_voidReadData(LOC_u16PassLocationVariableDigits,&LOC_u8UserPass_Read[LOC_u8DigitCounter]);
    431e:	c8 01       	movw	r24, r16
    4320:	be 01       	movw	r22, r28
    4322:	6a 5f       	subi	r22, 0xFA	; 250
    4324:	7f 4f       	sbci	r23, 0xFF	; 255
    4326:	0e 94 12 16 	call	0x2c24	; 0x2c24 <HAL_EEPROM_voidReadData>
				if (LOC_u8UserPass_Read[LOC_u8DigitCounter] == LOC_u8UserPasswordArray[LOC_u8DigitCounter])
    432a:	9e 81       	ldd	r25, Y+6	; 0x06
    432c:	8a 81       	ldd	r24, Y+2	; 0x02
    432e:	98 17       	cp	r25, r24
    4330:	c9 f5       	brne	.+114    	; 0x43a4 <Check_UserPassword+0x1d4>
				{
					LOC_u8PassMatchedFlag++;
					LOC_u16PassLocationVariableDigits++;
    4332:	0f 5f       	subi	r16, 0xFF	; 255
    4334:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		LOC_u16PassLocationVariableDigits = (LOC_u16UserStartLocation ) + (2 * MAX_DIGITS * LOC_u8UserCheck);
			for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DIGITS;LOC_u8DigitCounter++)
			{

				HAL_EEPROM_voidReadData(LOC_u16PassLocationVariableDigits,&LOC_u8UserPass_Read[LOC_u8DigitCounter]);
    4336:	c8 01       	movw	r24, r16
    4338:	be 01       	movw	r22, r28
    433a:	69 5f       	subi	r22, 0xF9	; 249
    433c:	7f 4f       	sbci	r23, 0xFF	; 255
    433e:	0e 94 12 16 	call	0x2c24	; 0x2c24 <HAL_EEPROM_voidReadData>
				if (LOC_u8UserPass_Read[LOC_u8DigitCounter] == LOC_u8UserPasswordArray[LOC_u8DigitCounter])
    4342:	9f 81       	ldd	r25, Y+7	; 0x07
    4344:	8b 81       	ldd	r24, Y+3	; 0x03
    4346:	98 17       	cp	r25, r24
    4348:	69 f5       	brne	.+90     	; 0x43a4 <Check_UserPassword+0x1d4>
	{
		LOC_u16PassLocationVariableDigits = (LOC_u16UserStartLocation ) + (2 * MAX_DIGITS * LOC_u8UserCheck);
			for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DIGITS;LOC_u8DigitCounter++)
			{

				HAL_EEPROM_voidReadData(LOC_u16PassLocationVariableDigits,&LOC_u8UserPass_Read[LOC_u8DigitCounter]);
    434a:	c8 01       	movw	r24, r16
    434c:	01 96       	adiw	r24, 0x01	; 1
    434e:	be 01       	movw	r22, r28
    4350:	68 5f       	subi	r22, 0xF8	; 248
    4352:	7f 4f       	sbci	r23, 0xFF	; 255
    4354:	0e 94 12 16 	call	0x2c24	; 0x2c24 <HAL_EEPROM_voidReadData>
				if (LOC_u8UserPass_Read[LOC_u8DigitCounter] == LOC_u8UserPasswordArray[LOC_u8DigitCounter])
    4358:	98 85       	ldd	r25, Y+8	; 0x08
    435a:	8c 81       	ldd	r24, Y+4	; 0x04
    435c:	98 17       	cp	r25, r24
    435e:	11 f5       	brne	.+68     	; 0x43a4 <Check_UserPassword+0x1d4>
    4360:	8d e4       	ldi	r24, 0x4D	; 77
	{
		return USER_NOT_FOUND;
	}


}
    4362:	60 96       	adiw	r28, 0x10	; 16
    4364:	0f b6       	in	r0, 0x3f	; 63
    4366:	f8 94       	cli
    4368:	de bf       	out	0x3e, r29	; 62
    436a:	0f be       	out	0x3f, r0	; 63
    436c:	cd bf       	out	0x3d, r28	; 61
    436e:	cf 91       	pop	r28
    4370:	df 91       	pop	r29
    4372:	1f 91       	pop	r17
    4374:	0f 91       	pop	r16
    4376:	ff 90       	pop	r15
    4378:	ef 90       	pop	r14
    437a:	df 90       	pop	r13
    437c:	bf 90       	pop	r11
    437e:	af 90       	pop	r10
    4380:	9f 90       	pop	r9
    4382:	8f 90       	pop	r8
    4384:	7f 90       	pop	r7
    4386:	6f 90       	pop	r6
    4388:	5f 90       	pop	r5
    438a:	4f 90       	pop	r4
    438c:	08 95       	ret
		LOC_u16UserID = (LOC_u16UserID / 10);
		i--;
	}


	for(;LOC_u16UserLocationVariable <= USER_LOCATION_BOT;LOC_u16UserLocationVariable += STEP)
    438e:	08 5f       	subi	r16, 0xF8	; 248
    4390:	1f 4f       	sbci	r17, 0xFF	; 255
    4392:	88 e1       	ldi	r24, 0x18	; 24
    4394:	d8 16       	cp	r13, r24
    4396:	09 f0       	breq	.+2      	; 0x439a <Check_UserPassword+0x1ca>
    4398:	64 cf       	rjmp	.-312    	; 0x4262 <Check_UserPassword+0x92>
    439a:	1b eb       	ldi	r17, 0xBB	; 187
    439c:	d1 2e       	mov	r13, r17
    439e:	89 cf       	rjmp	.-238    	; 0x42b2 <Check_UserPassword+0xe2>
		LOC_u16UserPassword = (LOC_u16UserPassword / 10);
		i--;
	}


	if ((LOC_u8UserCheck <= USERS_MAX_AMOUNT) && (LOC_u8UserCheck >= USERS_MIN_AMOUNT))
    43a0:	8b eb       	ldi	r24, 0xBB	; 187
    43a2:	df cf       	rjmp	.-66     	; 0x4362 <Check_UserPassword+0x192>
		LOC_u16PassLocationVariableDigits = (LOC_u16UserStartLocation ) + (2 * MAX_DIGITS * LOC_u8UserCheck);
			for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DIGITS;LOC_u8DigitCounter++)
			{

				HAL_EEPROM_voidReadData(LOC_u16PassLocationVariableDigits,&LOC_u8UserPass_Read[LOC_u8DigitCounter]);
				if (LOC_u8UserPass_Read[LOC_u8DigitCounter] == LOC_u8UserPasswordArray[LOC_u8DigitCounter])
    43a4:	88 e5       	ldi	r24, 0x58	; 88
    43a6:	dd cf       	rjmp	.-70     	; 0x4362 <Check_UserPassword+0x192>

000043a8 <Remove_User>:
	}
}


u8 Remove_User(u16 LOC_u16UserID)
{
    43a8:	4f 92       	push	r4
    43aa:	5f 92       	push	r5
    43ac:	6f 92       	push	r6
    43ae:	7f 92       	push	r7
    43b0:	8f 92       	push	r8
    43b2:	9f 92       	push	r9
    43b4:	af 92       	push	r10
    43b6:	bf 92       	push	r11
    43b8:	cf 92       	push	r12
    43ba:	df 92       	push	r13
    43bc:	ef 92       	push	r14
    43be:	ff 92       	push	r15
    43c0:	0f 93       	push	r16
    43c2:	1f 93       	push	r17
    43c4:	df 93       	push	r29
    43c6:	cf 93       	push	r28
    43c8:	cd b7       	in	r28, 0x3d	; 61
    43ca:	de b7       	in	r29, 0x3e	; 62
    43cc:	61 97       	sbiw	r28, 0x11	; 17
    43ce:	0f b6       	in	r0, 0x3f	; 63
    43d0:	f8 94       	cli
    43d2:	de bf       	out	0x3e, r29	; 62
    43d4:	0f be       	out	0x3f, r0	; 63
    43d6:	cd bf       	out	0x3d, r28	; 61
    43d8:	9c 01       	movw	r18, r24
	u8 i=3,LOC_u8UserNumberFlag = 0, LOC_u8IDMatchedFlag = 0 ,LOC_u8UserID_Read[MAX_DIGITS] , LOC_u8UserIDArray[MAX_DIGITS], LOC_u8DigitCounter = 0;

	u16 LOC_u16UserLocationVariable = USER_LOCATION_TOP,LOC_u16UserLocationVariableDigits ;


	while (LOC_u16UserID != 0)
    43da:	00 97       	sbiw	r24, 0x00	; 0
    43dc:	b9 f0       	breq	.+46     	; 0x440c <Remove_User+0x64>
    43de:	43 e0       	ldi	r20, 0x03	; 3
    43e0:	8e 01       	movw	r16, r28
    43e2:	0a 5f       	subi	r16, 0xFA	; 250
    43e4:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		LOC_u8UserIDArray[i] = (LOC_u16UserID % 10);
    43e6:	f8 01       	movw	r30, r16
    43e8:	e4 0f       	add	r30, r20
    43ea:	f1 1d       	adc	r31, r1
    43ec:	c9 01       	movw	r24, r18
    43ee:	6a e0       	ldi	r22, 0x0A	; 10
    43f0:	70 e0       	ldi	r23, 0x00	; 0
    43f2:	0e 94 9d 30 	call	0x613a	; 0x613a <__udivmodhi4>
    43f6:	80 83       	st	Z, r24
		LOC_u16UserID = (LOC_u16UserID / 10);
    43f8:	c9 01       	movw	r24, r18
    43fa:	6a e0       	ldi	r22, 0x0A	; 10
    43fc:	70 e0       	ldi	r23, 0x00	; 0
    43fe:	0e 94 9d 30 	call	0x613a	; 0x613a <__udivmodhi4>
    4402:	9b 01       	movw	r18, r22
		i--;
    4404:	41 50       	subi	r20, 0x01	; 1
	u8 i=3,LOC_u8UserNumberFlag = 0, LOC_u8IDMatchedFlag = 0 ,LOC_u8UserID_Read[MAX_DIGITS] , LOC_u8UserIDArray[MAX_DIGITS], LOC_u8DigitCounter = 0;

	u16 LOC_u16UserLocationVariable = USER_LOCATION_TOP,LOC_u16UserLocationVariableDigits ;


	while (LOC_u16UserID != 0)
    4406:	61 15       	cp	r22, r1
    4408:	71 05       	cpc	r23, r1
    440a:	69 f7       	brne	.-38     	; 0x43e6 <Remove_User+0x3e>
}


u8 Remove_User(u16 LOC_u16UserID)
{
	u8 LOC_u8DigitCounter,LOC_u8UserIDArray[MAX_DIGITS],LOC_u8ConfirmClearFlag = 0 ,LOC_u8UserCheck = 0,LOC_u8GetLastUser, LOC_u8UserDetails_Read[MAX_DETAILS] ,LOC_u8TransferArray[MAX_DETAILS] = {0} ;
    440c:	ba e0       	ldi	r27, 0x0A	; 10
    440e:	4b 2e       	mov	r4, r27
    4410:	51 2c       	mov	r5, r1
    4412:	4c 0e       	add	r4, r28
    4414:	5d 1e       	adc	r5, r29
    4416:	88 e0       	ldi	r24, 0x08	; 8
    4418:	f2 01       	movw	r30, r4
    441a:	11 92       	st	Z+, r1
    441c:	8a 95       	dec	r24
    441e:	e9 f7       	brne	.-6      	; 0x441a <Remove_User+0x72>
    4420:	ee 24       	eor	r14, r14
    4422:	00 e6       	ldi	r16, 0x60	; 96
    4424:	10 e0       	ldi	r17, 0x00	; 0
    4426:	a2 e0       	ldi	r26, 0x02	; 2
    4428:	aa 2e       	mov	r10, r26
    442a:	b1 2c       	mov	r11, r1
    442c:	ac 0e       	add	r10, r28
    442e:	bd 1e       	adc	r11, r29
		LOC_u8UserNumberFlag++;
		LOC_u16UserLocationVariableDigits = LOC_u16UserLocationVariable;
		for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DIGITS;LOC_u8DigitCounter++)
		{

			HAL_EEPROM_voidReadData(LOC_u16UserLocationVariableDigits,&LOC_u8UserID_Read[LOC_u8DigitCounter]);
    4430:	f3 e0       	ldi	r31, 0x03	; 3
    4432:	8f 2e       	mov	r8, r31
    4434:	91 2c       	mov	r9, r1
    4436:	8c 0e       	add	r8, r28
    4438:	9d 1e       	adc	r9, r29
    443a:	e2 e0       	ldi	r30, 0x02	; 2
    443c:	ce 2e       	mov	r12, r30
    443e:	d1 2c       	mov	r13, r1
    4440:	ca 0c       	add	r12, r10
    4442:	db 1c       	adc	r13, r11
    4444:	75 e0       	ldi	r23, 0x05	; 5
    4446:	67 2e       	mov	r6, r23
    4448:	71 2c       	mov	r7, r1
    444a:	6c 0e       	add	r6, r28
    444c:	7d 1e       	adc	r7, r29
	}


	for(;LOC_u16UserLocationVariable <= USER_LOCATION_BOT;LOC_u16UserLocationVariable += STEP)
	{
		LOC_u8UserNumberFlag++;
    444e:	e3 94       	inc	r14
		LOC_u16UserLocationVariableDigits = LOC_u16UserLocationVariable;
		for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DIGITS;LOC_u8DigitCounter++)
		{

			HAL_EEPROM_voidReadData(LOC_u16UserLocationVariableDigits,&LOC_u8UserID_Read[LOC_u8DigitCounter]);
    4450:	c8 01       	movw	r24, r16
    4452:	b5 01       	movw	r22, r10
    4454:	0e 94 12 16 	call	0x2c24	; 0x2c24 <HAL_EEPROM_voidReadData>
			if (LOC_u8UserID_Read[LOC_u8DigitCounter] == LOC_u8UserIDArray[LOC_u8DigitCounter])
    4458:	9a 81       	ldd	r25, Y+2	; 0x02
    445a:	8e 81       	ldd	r24, Y+6	; 0x06
    445c:	98 17       	cp	r25, r24
    445e:	09 f0       	breq	.+2      	; 0x4462 <Remove_User+0xba>
    4460:	f1 c0       	rjmp	.+482    	; 0x4644 <Remove_User+0x29c>
		LOC_u8UserNumberFlag++;
		LOC_u16UserLocationVariableDigits = LOC_u16UserLocationVariable;
		for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DIGITS;LOC_u8DigitCounter++)
		{

			HAL_EEPROM_voidReadData(LOC_u16UserLocationVariableDigits,&LOC_u8UserID_Read[LOC_u8DigitCounter]);
    4462:	c8 01       	movw	r24, r16
    4464:	01 96       	adiw	r24, 0x01	; 1
    4466:	b4 01       	movw	r22, r8
    4468:	0e 94 12 16 	call	0x2c24	; 0x2c24 <HAL_EEPROM_voidReadData>
			if (LOC_u8UserID_Read[LOC_u8DigitCounter] == LOC_u8UserIDArray[LOC_u8DigitCounter])
    446c:	9b 81       	ldd	r25, Y+3	; 0x03
    446e:	8f 81       	ldd	r24, Y+7	; 0x07
    4470:	98 17       	cp	r25, r24
    4472:	09 f0       	breq	.+2      	; 0x4476 <Remove_User+0xce>
    4474:	e7 c0       	rjmp	.+462    	; 0x4644 <Remove_User+0x29c>
		LOC_u8UserNumberFlag++;
		LOC_u16UserLocationVariableDigits = LOC_u16UserLocationVariable;
		for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DIGITS;LOC_u8DigitCounter++)
		{

			HAL_EEPROM_voidReadData(LOC_u16UserLocationVariableDigits,&LOC_u8UserID_Read[LOC_u8DigitCounter]);
    4476:	c8 01       	movw	r24, r16
    4478:	02 96       	adiw	r24, 0x02	; 2
    447a:	b6 01       	movw	r22, r12
    447c:	0e 94 12 16 	call	0x2c24	; 0x2c24 <HAL_EEPROM_voidReadData>
			if (LOC_u8UserID_Read[LOC_u8DigitCounter] == LOC_u8UserIDArray[LOC_u8DigitCounter])
    4480:	9c 81       	ldd	r25, Y+4	; 0x04
    4482:	88 85       	ldd	r24, Y+8	; 0x08
    4484:	98 17       	cp	r25, r24
    4486:	09 f0       	breq	.+2      	; 0x448a <Remove_User+0xe2>
    4488:	dd c0       	rjmp	.+442    	; 0x4644 <Remove_User+0x29c>
		LOC_u8UserNumberFlag++;
		LOC_u16UserLocationVariableDigits = LOC_u16UserLocationVariable;
		for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DIGITS;LOC_u8DigitCounter++)
		{

			HAL_EEPROM_voidReadData(LOC_u16UserLocationVariableDigits,&LOC_u8UserID_Read[LOC_u8DigitCounter]);
    448a:	c8 01       	movw	r24, r16
    448c:	03 96       	adiw	r24, 0x03	; 3
    448e:	b3 01       	movw	r22, r6
    4490:	0e 94 12 16 	call	0x2c24	; 0x2c24 <HAL_EEPROM_voidReadData>
			if (LOC_u8UserID_Read[LOC_u8DigitCounter] == LOC_u8UserIDArray[LOC_u8DigitCounter])
    4494:	9d 81       	ldd	r25, Y+5	; 0x05
    4496:	89 85       	ldd	r24, Y+9	; 0x09
    4498:	98 17       	cp	r25, r24
    449a:	09 f0       	breq	.+2      	; 0x449e <Remove_User+0xf6>
    449c:	d3 c0       	rjmp	.+422    	; 0x4644 <Remove_User+0x29c>


void APP_Registeration_voidGetNumberOfUsers(u8* LOC_Pu8UsersNumber)
{
	u16 LOC_u16LocationVariable = USER_LOCATION_TOP;
	u8 LOC_u8UserNumber = 0,LOC_u8NumberCheck = 0;
    449e:	19 82       	std	Y+1, r1	; 0x01
    44a0:	00 e6       	ldi	r16, 0x60	; 96
    44a2:	10 e0       	ldi	r17, 0x00	; 0
    44a4:	ff 24       	eor	r15, r15
    44a6:	6e 01       	movw	r12, r28
    44a8:	08 94       	sec
    44aa:	c1 1c       	adc	r12, r1
    44ac:	d1 1c       	adc	r13, r1
	for(;LOC_u16LocationVariable <= USER_LOCATION_BOT;LOC_u16LocationVariable += STEP)
	{
		HAL_EEPROM_voidReadData(LOC_u16LocationVariable,&LOC_u8NumberCheck);
    44ae:	c8 01       	movw	r24, r16
    44b0:	b6 01       	movw	r22, r12
    44b2:	0e 94 12 16 	call	0x2c24	; 0x2c24 <HAL_EEPROM_voidReadData>
		if(LOC_u8NumberCheck != 255)
    44b6:	89 81       	ldd	r24, Y+1	; 0x01
    44b8:	8f 3f       	cpi	r24, 0xFF	; 255
    44ba:	09 f0       	breq	.+2      	; 0x44be <Remove_User+0x116>
		{
			LOC_u8UserNumber++;
    44bc:	f3 94       	inc	r15

void APP_Registeration_voidGetNumberOfUsers(u8* LOC_Pu8UsersNumber)
{
	u16 LOC_u16LocationVariable = USER_LOCATION_TOP;
	u8 LOC_u8UserNumber = 0,LOC_u8NumberCheck = 0;
	for(;LOC_u16LocationVariable <= USER_LOCATION_BOT;LOC_u16LocationVariable += STEP)
    44be:	08 5f       	subi	r16, 0xF8	; 248
    44c0:	1f 4f       	sbci	r17, 0xFF	; 255
    44c2:	81 e0       	ldi	r24, 0x01	; 1
    44c4:	00 32       	cpi	r16, 0x20	; 32
    44c6:	18 07       	cpc	r17, r24
    44c8:	91 f7       	brne	.-28     	; 0x44ae <Remove_User+0x106>



	LOC_u16LastUserStartLocation = (USER_LOCATION_TOP - STEP);

	if ((LOC_u8UserCheck <= USERS_MAX_AMOUNT) && (LOC_u8UserCheck >= USERS_MIN_AMOUNT))
    44ca:	8e 2d       	mov	r24, r14
    44cc:	81 50       	subi	r24, 0x01	; 1
    44ce:	88 31       	cpi	r24, 0x18	; 24
    44d0:	08 f0       	brcs	.+2      	; 0x44d4 <Remove_User+0x12c>
    44d2:	c1 c0       	rjmp	.+386    	; 0x4656 <Remove_User+0x2ae>
	{
		LOC_u16LastLocation = (LOC_u16LastUserStartLocation ) + ( STEP * LOC_u8GetLastUser);
    44d4:	0f 2d       	mov	r16, r15
    44d6:	10 e0       	ldi	r17, 0x00	; 0
    44d8:	00 0f       	add	r16, r16
    44da:	11 1f       	adc	r17, r17
    44dc:	00 0f       	add	r16, r16
    44de:	11 1f       	adc	r17, r17
    44e0:	00 0f       	add	r16, r16
    44e2:	11 1f       	adc	r17, r17
    44e4:	08 5a       	subi	r16, 0xA8	; 168
    44e6:	1f 4f       	sbci	r17, 0xFF	; 255

		if (LOC_u8UserCheck == LOC_u8GetLastUser)
    44e8:	ef 14       	cp	r14, r15
    44ea:	09 f4       	brne	.+2      	; 0x44ee <Remove_User+0x146>
    44ec:	b6 c0       	rjmp	.+364    	; 0x465a <Remove_User+0x2b2>
		{

			for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DETAILS;LOC_u8DigitCounter++)
			{

				HAL_EEPROM_voidReadData(LOC_u16LastLocation,&LOC_u8TransferArray[LOC_u8DigitCounter]);
    44ee:	c8 01       	movw	r24, r16
    44f0:	b2 01       	movw	r22, r4
    44f2:	0e 94 12 16 	call	0x2c24	; 0x2c24 <HAL_EEPROM_voidReadData>
				HAL_EEPROM_voidWriteData(LOC_u16LastLocation,CLEAR_DATA);
    44f6:	c8 01       	movw	r24, r16
    44f8:	6f ef       	ldi	r22, 0xFF	; 255
    44fa:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <HAL_EEPROM_voidWriteData>
				LOC_u8ConfirmClearFlag++;
				LOC_u16LastLocation++;
    44fe:	0f 5f       	subi	r16, 0xFF	; 255
    4500:	1f 4f       	sbci	r17, 0xFF	; 255
		{

			for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DETAILS;LOC_u8DigitCounter++)
			{

				HAL_EEPROM_voidReadData(LOC_u16LastLocation,&LOC_u8TransferArray[LOC_u8DigitCounter]);
    4502:	c8 01       	movw	r24, r16
    4504:	be 01       	movw	r22, r28
    4506:	65 5f       	subi	r22, 0xF5	; 245
    4508:	7f 4f       	sbci	r23, 0xFF	; 255
    450a:	0e 94 12 16 	call	0x2c24	; 0x2c24 <HAL_EEPROM_voidReadData>
				HAL_EEPROM_voidWriteData(LOC_u16LastLocation,CLEAR_DATA);
    450e:	c8 01       	movw	r24, r16
    4510:	6f ef       	ldi	r22, 0xFF	; 255
    4512:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <HAL_EEPROM_voidWriteData>
				LOC_u8ConfirmClearFlag++;
				LOC_u16LastLocation++;
    4516:	0f 5f       	subi	r16, 0xFF	; 255
    4518:	1f 4f       	sbci	r17, 0xFF	; 255
		{

			for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DETAILS;LOC_u8DigitCounter++)
			{

				HAL_EEPROM_voidReadData(LOC_u16LastLocation,&LOC_u8TransferArray[LOC_u8DigitCounter]);
    451a:	c8 01       	movw	r24, r16
    451c:	be 01       	movw	r22, r28
    451e:	64 5f       	subi	r22, 0xF4	; 244
    4520:	7f 4f       	sbci	r23, 0xFF	; 255
    4522:	0e 94 12 16 	call	0x2c24	; 0x2c24 <HAL_EEPROM_voidReadData>
				HAL_EEPROM_voidWriteData(LOC_u16LastLocation,CLEAR_DATA);
    4526:	c8 01       	movw	r24, r16
    4528:	6f ef       	ldi	r22, 0xFF	; 255
    452a:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <HAL_EEPROM_voidWriteData>
				LOC_u8ConfirmClearFlag++;
				LOC_u16LastLocation++;
    452e:	0f 5f       	subi	r16, 0xFF	; 255
    4530:	1f 4f       	sbci	r17, 0xFF	; 255
		{

			for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DETAILS;LOC_u8DigitCounter++)
			{

				HAL_EEPROM_voidReadData(LOC_u16LastLocation,&LOC_u8TransferArray[LOC_u8DigitCounter]);
    4532:	c8 01       	movw	r24, r16
    4534:	be 01       	movw	r22, r28
    4536:	63 5f       	subi	r22, 0xF3	; 243
    4538:	7f 4f       	sbci	r23, 0xFF	; 255
    453a:	0e 94 12 16 	call	0x2c24	; 0x2c24 <HAL_EEPROM_voidReadData>
				HAL_EEPROM_voidWriteData(LOC_u16LastLocation,CLEAR_DATA);
    453e:	c8 01       	movw	r24, r16
    4540:	6f ef       	ldi	r22, 0xFF	; 255
    4542:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <HAL_EEPROM_voidWriteData>
				LOC_u8ConfirmClearFlag++;
				LOC_u16LastLocation++;
    4546:	0f 5f       	subi	r16, 0xFF	; 255
    4548:	1f 4f       	sbci	r17, 0xFF	; 255
		{

			for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DETAILS;LOC_u8DigitCounter++)
			{

				HAL_EEPROM_voidReadData(LOC_u16LastLocation,&LOC_u8TransferArray[LOC_u8DigitCounter]);
    454a:	c8 01       	movw	r24, r16
    454c:	be 01       	movw	r22, r28
    454e:	62 5f       	subi	r22, 0xF2	; 242
    4550:	7f 4f       	sbci	r23, 0xFF	; 255
    4552:	0e 94 12 16 	call	0x2c24	; 0x2c24 <HAL_EEPROM_voidReadData>
				HAL_EEPROM_voidWriteData(LOC_u16LastLocation,CLEAR_DATA);
    4556:	c8 01       	movw	r24, r16
    4558:	6f ef       	ldi	r22, 0xFF	; 255
    455a:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <HAL_EEPROM_voidWriteData>
				LOC_u8ConfirmClearFlag++;
				LOC_u16LastLocation++;
    455e:	0f 5f       	subi	r16, 0xFF	; 255
    4560:	1f 4f       	sbci	r17, 0xFF	; 255
		{

			for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DETAILS;LOC_u8DigitCounter++)
			{

				HAL_EEPROM_voidReadData(LOC_u16LastLocation,&LOC_u8TransferArray[LOC_u8DigitCounter]);
    4562:	c8 01       	movw	r24, r16
    4564:	be 01       	movw	r22, r28
    4566:	61 5f       	subi	r22, 0xF1	; 241
    4568:	7f 4f       	sbci	r23, 0xFF	; 255
    456a:	0e 94 12 16 	call	0x2c24	; 0x2c24 <HAL_EEPROM_voidReadData>
				HAL_EEPROM_voidWriteData(LOC_u16LastLocation,CLEAR_DATA);
    456e:	c8 01       	movw	r24, r16
    4570:	6f ef       	ldi	r22, 0xFF	; 255
    4572:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <HAL_EEPROM_voidWriteData>
				LOC_u8ConfirmClearFlag++;
				LOC_u16LastLocation++;
    4576:	0f 5f       	subi	r16, 0xFF	; 255
    4578:	1f 4f       	sbci	r17, 0xFF	; 255
		{

			for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DETAILS;LOC_u8DigitCounter++)
			{

				HAL_EEPROM_voidReadData(LOC_u16LastLocation,&LOC_u8TransferArray[LOC_u8DigitCounter]);
    457a:	c8 01       	movw	r24, r16
    457c:	be 01       	movw	r22, r28
    457e:	60 5f       	subi	r22, 0xF0	; 240
    4580:	7f 4f       	sbci	r23, 0xFF	; 255
    4582:	0e 94 12 16 	call	0x2c24	; 0x2c24 <HAL_EEPROM_voidReadData>
				HAL_EEPROM_voidWriteData(LOC_u16LastLocation,CLEAR_DATA);
    4586:	c8 01       	movw	r24, r16
    4588:	6f ef       	ldi	r22, 0xFF	; 255
    458a:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <HAL_EEPROM_voidWriteData>
				LOC_u8ConfirmClearFlag++;
				LOC_u16LastLocation++;
    458e:	0f 5f       	subi	r16, 0xFF	; 255
    4590:	1f 4f       	sbci	r17, 0xFF	; 255
		{

			for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DETAILS;LOC_u8DigitCounter++)
			{

				HAL_EEPROM_voidReadData(LOC_u16LastLocation,&LOC_u8TransferArray[LOC_u8DigitCounter]);
    4592:	c8 01       	movw	r24, r16
    4594:	be 01       	movw	r22, r28
    4596:	6f 5e       	subi	r22, 0xEF	; 239
    4598:	7f 4f       	sbci	r23, 0xFF	; 255
    459a:	0e 94 12 16 	call	0x2c24	; 0x2c24 <HAL_EEPROM_voidReadData>
				HAL_EEPROM_voidWriteData(LOC_u16LastLocation,CLEAR_DATA);
    459e:	c8 01       	movw	r24, r16
    45a0:	6f ef       	ldi	r22, 0xFF	; 255
    45a2:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <HAL_EEPROM_voidWriteData>
				LOC_u8ConfirmClearFlag++;
				LOC_u16LastLocation++;
			}

			LOC_u16RemovedUserLocation = (LOC_u16LastUserStartLocation ) + ( STEP * LOC_u8UserCheck);
    45a6:	0e 2d       	mov	r16, r14
    45a8:	10 e0       	ldi	r17, 0x00	; 0
    45aa:	00 0f       	add	r16, r16
    45ac:	11 1f       	adc	r17, r17
    45ae:	00 0f       	add	r16, r16
    45b0:	11 1f       	adc	r17, r17
    45b2:	00 0f       	add	r16, r16
    45b4:	11 1f       	adc	r17, r17
    45b6:	08 5a       	subi	r16, 0xA8	; 168
    45b8:	1f 4f       	sbci	r17, 0xFF	; 255

			for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DETAILS;LOC_u8DigitCounter++)
			{

				//			HAL_EEPROM_voidReadData(LOC_u16LastLocation,&LOC_u8TransferArray[LOC_u8DigitCounter]);
				HAL_EEPROM_voidWriteData(LOC_u16RemovedUserLocation,LOC_u8TransferArray[LOC_u8DigitCounter]);
    45ba:	c8 01       	movw	r24, r16
    45bc:	6a 85       	ldd	r22, Y+10	; 0x0a
    45be:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <HAL_EEPROM_voidWriteData>
				//			LOC_u8ConfirmClearFlag++;
				LOC_u16RemovedUserLocation++;
    45c2:	0f 5f       	subi	r16, 0xFF	; 255
    45c4:	1f 4f       	sbci	r17, 0xFF	; 255

			for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DETAILS;LOC_u8DigitCounter++)
			{

				//			HAL_EEPROM_voidReadData(LOC_u16LastLocation,&LOC_u8TransferArray[LOC_u8DigitCounter]);
				HAL_EEPROM_voidWriteData(LOC_u16RemovedUserLocation,LOC_u8TransferArray[LOC_u8DigitCounter]);
    45c6:	c8 01       	movw	r24, r16
    45c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    45ca:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <HAL_EEPROM_voidWriteData>
				//			LOC_u8ConfirmClearFlag++;
				LOC_u16RemovedUserLocation++;
    45ce:	0f 5f       	subi	r16, 0xFF	; 255
    45d0:	1f 4f       	sbci	r17, 0xFF	; 255

			for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DETAILS;LOC_u8DigitCounter++)
			{

				//			HAL_EEPROM_voidReadData(LOC_u16LastLocation,&LOC_u8TransferArray[LOC_u8DigitCounter]);
				HAL_EEPROM_voidWriteData(LOC_u16RemovedUserLocation,LOC_u8TransferArray[LOC_u8DigitCounter]);
    45d2:	c8 01       	movw	r24, r16
    45d4:	6c 85       	ldd	r22, Y+12	; 0x0c
    45d6:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <HAL_EEPROM_voidWriteData>
				//			LOC_u8ConfirmClearFlag++;
				LOC_u16RemovedUserLocation++;
    45da:	0f 5f       	subi	r16, 0xFF	; 255
    45dc:	1f 4f       	sbci	r17, 0xFF	; 255

			for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DETAILS;LOC_u8DigitCounter++)
			{

				//			HAL_EEPROM_voidReadData(LOC_u16LastLocation,&LOC_u8TransferArray[LOC_u8DigitCounter]);
				HAL_EEPROM_voidWriteData(LOC_u16RemovedUserLocation,LOC_u8TransferArray[LOC_u8DigitCounter]);
    45de:	c8 01       	movw	r24, r16
    45e0:	6d 85       	ldd	r22, Y+13	; 0x0d
    45e2:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <HAL_EEPROM_voidWriteData>
				//			LOC_u8ConfirmClearFlag++;
				LOC_u16RemovedUserLocation++;
    45e6:	0f 5f       	subi	r16, 0xFF	; 255
    45e8:	1f 4f       	sbci	r17, 0xFF	; 255

			for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DETAILS;LOC_u8DigitCounter++)
			{

				//			HAL_EEPROM_voidReadData(LOC_u16LastLocation,&LOC_u8TransferArray[LOC_u8DigitCounter]);
				HAL_EEPROM_voidWriteData(LOC_u16RemovedUserLocation,LOC_u8TransferArray[LOC_u8DigitCounter]);
    45ea:	c8 01       	movw	r24, r16
    45ec:	6e 85       	ldd	r22, Y+14	; 0x0e
    45ee:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <HAL_EEPROM_voidWriteData>
				//			LOC_u8ConfirmClearFlag++;
				LOC_u16RemovedUserLocation++;
    45f2:	0f 5f       	subi	r16, 0xFF	; 255
    45f4:	1f 4f       	sbci	r17, 0xFF	; 255

			for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DETAILS;LOC_u8DigitCounter++)
			{

				//			HAL_EEPROM_voidReadData(LOC_u16LastLocation,&LOC_u8TransferArray[LOC_u8DigitCounter]);
				HAL_EEPROM_voidWriteData(LOC_u16RemovedUserLocation,LOC_u8TransferArray[LOC_u8DigitCounter]);
    45f6:	c8 01       	movw	r24, r16
    45f8:	6f 85       	ldd	r22, Y+15	; 0x0f
    45fa:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <HAL_EEPROM_voidWriteData>
				//			LOC_u8ConfirmClearFlag++;
				LOC_u16RemovedUserLocation++;
    45fe:	0f 5f       	subi	r16, 0xFF	; 255
    4600:	1f 4f       	sbci	r17, 0xFF	; 255

			for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DETAILS;LOC_u8DigitCounter++)
			{

				//			HAL_EEPROM_voidReadData(LOC_u16LastLocation,&LOC_u8TransferArray[LOC_u8DigitCounter]);
				HAL_EEPROM_voidWriteData(LOC_u16RemovedUserLocation,LOC_u8TransferArray[LOC_u8DigitCounter]);
    4602:	c8 01       	movw	r24, r16
    4604:	68 89       	ldd	r22, Y+16	; 0x10
    4606:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <HAL_EEPROM_voidWriteData>
    460a:	c8 01       	movw	r24, r16
    460c:	01 96       	adiw	r24, 0x01	; 1
    460e:	69 89       	ldd	r22, Y+17	; 0x11
    4610:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <HAL_EEPROM_voidWriteData>
    4614:	82 e0       	ldi	r24, 0x02	; 2
		//Do Nothing. (Meaning that no user found with that ID or Database is empty)
	}


		return USER_NOT_FOUND;
}
    4616:	61 96       	adiw	r28, 0x11	; 17
    4618:	0f b6       	in	r0, 0x3f	; 63
    461a:	f8 94       	cli
    461c:	de bf       	out	0x3e, r29	; 62
    461e:	0f be       	out	0x3f, r0	; 63
    4620:	cd bf       	out	0x3d, r28	; 61
    4622:	cf 91       	pop	r28
    4624:	df 91       	pop	r29
    4626:	1f 91       	pop	r17
    4628:	0f 91       	pop	r16
    462a:	ff 90       	pop	r15
    462c:	ef 90       	pop	r14
    462e:	df 90       	pop	r13
    4630:	cf 90       	pop	r12
    4632:	bf 90       	pop	r11
    4634:	af 90       	pop	r10
    4636:	9f 90       	pop	r9
    4638:	8f 90       	pop	r8
    463a:	7f 90       	pop	r7
    463c:	6f 90       	pop	r6
    463e:	5f 90       	pop	r5
    4640:	4f 90       	pop	r4
    4642:	08 95       	ret
		LOC_u16UserID = (LOC_u16UserID / 10);
		i--;
	}


	for(;LOC_u16UserLocationVariable <= USER_LOCATION_BOT;LOC_u16UserLocationVariable += STEP)
    4644:	08 5f       	subi	r16, 0xF8	; 248
    4646:	1f 4f       	sbci	r17, 0xFF	; 255
    4648:	f8 e1       	ldi	r31, 0x18	; 24
    464a:	ef 16       	cp	r14, r31
    464c:	09 f0       	breq	.+2      	; 0x4650 <Remove_User+0x2a8>
    464e:	ff ce       	rjmp	.-514    	; 0x444e <Remove_User+0xa6>
    4650:	6b eb       	ldi	r22, 0xBB	; 187
    4652:	e6 2e       	mov	r14, r22
    4654:	24 cf       	rjmp	.-440    	; 0x449e <Remove_User+0xf6>



	LOC_u16LastUserStartLocation = (USER_LOCATION_TOP - STEP);

	if ((LOC_u8UserCheck <= USERS_MAX_AMOUNT) && (LOC_u8UserCheck >= USERS_MIN_AMOUNT))
    4656:	8b eb       	ldi	r24, 0xBB	; 187
    4658:	de cf       	rjmp	.-68     	; 0x4616 <Remove_User+0x26e>
		{
			for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DETAILS;LOC_u8DigitCounter++)
			{

//				HAL_EEPROM_voidReadData(LOC_u16LastLocation,&LOC_u8TransferArray[LOC_u8DigitCounter]);
				HAL_EEPROM_voidWriteData(LOC_u16LastLocation,CLEAR_DATA);
    465a:	c8 01       	movw	r24, r16
    465c:	6f ef       	ldi	r22, 0xFF	; 255
    465e:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <HAL_EEPROM_voidWriteData>
				LOC_u8ConfirmClearFlag++;
				LOC_u16LastLocation++;
    4662:	0f 5f       	subi	r16, 0xFF	; 255
    4664:	1f 4f       	sbci	r17, 0xFF	; 255
		{
			for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DETAILS;LOC_u8DigitCounter++)
			{

//				HAL_EEPROM_voidReadData(LOC_u16LastLocation,&LOC_u8TransferArray[LOC_u8DigitCounter]);
				HAL_EEPROM_voidWriteData(LOC_u16LastLocation,CLEAR_DATA);
    4666:	c8 01       	movw	r24, r16
    4668:	6f ef       	ldi	r22, 0xFF	; 255
    466a:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <HAL_EEPROM_voidWriteData>
				LOC_u8ConfirmClearFlag++;
				LOC_u16LastLocation++;
    466e:	0f 5f       	subi	r16, 0xFF	; 255
    4670:	1f 4f       	sbci	r17, 0xFF	; 255
		{
			for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DETAILS;LOC_u8DigitCounter++)
			{

//				HAL_EEPROM_voidReadData(LOC_u16LastLocation,&LOC_u8TransferArray[LOC_u8DigitCounter]);
				HAL_EEPROM_voidWriteData(LOC_u16LastLocation,CLEAR_DATA);
    4672:	c8 01       	movw	r24, r16
    4674:	6f ef       	ldi	r22, 0xFF	; 255
    4676:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <HAL_EEPROM_voidWriteData>
				LOC_u8ConfirmClearFlag++;
				LOC_u16LastLocation++;
    467a:	0f 5f       	subi	r16, 0xFF	; 255
    467c:	1f 4f       	sbci	r17, 0xFF	; 255
		{
			for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DETAILS;LOC_u8DigitCounter++)
			{

//				HAL_EEPROM_voidReadData(LOC_u16LastLocation,&LOC_u8TransferArray[LOC_u8DigitCounter]);
				HAL_EEPROM_voidWriteData(LOC_u16LastLocation,CLEAR_DATA);
    467e:	c8 01       	movw	r24, r16
    4680:	6f ef       	ldi	r22, 0xFF	; 255
    4682:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <HAL_EEPROM_voidWriteData>
				LOC_u8ConfirmClearFlag++;
				LOC_u16LastLocation++;
    4686:	0f 5f       	subi	r16, 0xFF	; 255
    4688:	1f 4f       	sbci	r17, 0xFF	; 255
		{
			for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DETAILS;LOC_u8DigitCounter++)
			{

//				HAL_EEPROM_voidReadData(LOC_u16LastLocation,&LOC_u8TransferArray[LOC_u8DigitCounter]);
				HAL_EEPROM_voidWriteData(LOC_u16LastLocation,CLEAR_DATA);
    468a:	c8 01       	movw	r24, r16
    468c:	6f ef       	ldi	r22, 0xFF	; 255
    468e:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <HAL_EEPROM_voidWriteData>
				LOC_u8ConfirmClearFlag++;
				LOC_u16LastLocation++;
    4692:	0f 5f       	subi	r16, 0xFF	; 255
    4694:	1f 4f       	sbci	r17, 0xFF	; 255
		{
			for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DETAILS;LOC_u8DigitCounter++)
			{

//				HAL_EEPROM_voidReadData(LOC_u16LastLocation,&LOC_u8TransferArray[LOC_u8DigitCounter]);
				HAL_EEPROM_voidWriteData(LOC_u16LastLocation,CLEAR_DATA);
    4696:	c8 01       	movw	r24, r16
    4698:	6f ef       	ldi	r22, 0xFF	; 255
    469a:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <HAL_EEPROM_voidWriteData>
				LOC_u8ConfirmClearFlag++;
				LOC_u16LastLocation++;
    469e:	0f 5f       	subi	r16, 0xFF	; 255
    46a0:	1f 4f       	sbci	r17, 0xFF	; 255
		{
			for(LOC_u8DigitCounter =0;LOC_u8DigitCounter<MAX_DETAILS;LOC_u8DigitCounter++)
			{

//				HAL_EEPROM_voidReadData(LOC_u16LastLocation,&LOC_u8TransferArray[LOC_u8DigitCounter]);
				HAL_EEPROM_voidWriteData(LOC_u16LastLocation,CLEAR_DATA);
    46a2:	c8 01       	movw	r24, r16
    46a4:	6f ef       	ldi	r22, 0xFF	; 255
    46a6:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <HAL_EEPROM_voidWriteData>
    46aa:	c8 01       	movw	r24, r16
    46ac:	01 96       	adiw	r24, 0x01	; 1
    46ae:	6f ef       	ldi	r22, 0xFF	; 255
    46b0:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <HAL_EEPROM_voidWriteData>
    46b4:	82 e0       	ldi	r24, 0x02	; 2
    46b6:	af cf       	rjmp	.-162    	; 0x4616 <Remove_User+0x26e>

000046b8 <APP_PASSWORD_u8_AppGetPassword>:
			_delay_ms(1000);
		}
	}
}
void APP_PASSWORD_u8_AppGetPassword(u16 Loc_32_CheckID)
{
    46b8:	8f 92       	push	r8
    46ba:	9f 92       	push	r9
    46bc:	af 92       	push	r10
    46be:	bf 92       	push	r11
    46c0:	cf 92       	push	r12
    46c2:	df 92       	push	r13
    46c4:	ef 92       	push	r14
    46c6:	ff 92       	push	r15
    46c8:	0f 93       	push	r16
    46ca:	1f 93       	push	r17
    46cc:	df 93       	push	r29
    46ce:	cf 93       	push	r28
    46d0:	00 d0       	rcall	.+0      	; 0x46d2 <APP_PASSWORD_u8_AppGetPassword+0x1a>
    46d2:	00 d0       	rcall	.+0      	; 0x46d4 <APP_PASSWORD_u8_AppGetPassword+0x1c>
    46d4:	00 d0       	rcall	.+0      	; 0x46d6 <APP_PASSWORD_u8_AppGetPassword+0x1e>
    46d6:	cd b7       	in	r28, 0x3d	; 61
    46d8:	de b7       	in	r29, 0x3e	; 62
    46da:	4c 01       	movw	r8, r24
	u8 Loc_u8_Pass[4] = {0};
    46dc:	19 82       	std	Y+1, r1	; 0x01
    46de:	1a 82       	std	Y+2, r1	; 0x02
    46e0:	1b 82       	std	Y+3, r1	; 0x03
    46e2:	1c 82       	std	Y+4, r1	; 0x04
	u8 index = 0;
	u16 Loc_32_CheckPass = 0;
	u8 Loc_u8_Flag = 0;
	HAL_LCD_u8_ClearFullScreen();
    46e4:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <HAL_LCD_u8_ClearFullScreen>
    46e8:	bb 24       	eor	r11, r11
    46ea:	6e 01       	movw	r12, r28
    46ec:	08 94       	sec
    46ee:	c1 1c       	adc	r12, r1
    46f0:	d1 1c       	adc	r13, r1
					HAL_LCD_u8_WriteNumber(Loc_u8_Pass[index]);
				}
			}
		}
		Loc_32_CheckPass = Loc_u8_Pass[0]*10 + Loc_u8_Pass[1];
		Loc_32_CheckPass = Loc_32_CheckPass*10 + Loc_u8_Pass[2];
    46f2:	7a e0       	ldi	r23, 0x0A	; 10
    46f4:	a7 2e       	mov	r10, r23
    46f6:	68 ec       	ldi	r22, 0xC8	; 200
    46f8:	e6 2e       	mov	r14, r22
    46fa:	f1 2c       	mov	r15, r1
	u16 Loc_32_CheckPass = 0;
	u8 Loc_u8_Flag = 0;
	HAL_LCD_u8_ClearFullScreen();
	while(1)
	{
		HAL_LCD_u8_ClearFullScreen();
    46fc:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <HAL_LCD_u8_ClearFullScreen>
		HAL_LCD_u8_WriteString("Enter Password :");
    4700:	89 e6       	ldi	r24, 0x69	; 105
    4702:	90 e0       	ldi	r25, 0x00	; 0
    4704:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <HAL_LCD_u8_WriteString>
		HAL_LCD_u8_GoTo(1,0);
    4708:	81 e0       	ldi	r24, 0x01	; 1
    470a:	60 e0       	ldi	r22, 0x00	; 0
    470c:	0e 94 b3 11 	call	0x2366	; 0x2366 <HAL_LCD_u8_GoTo>
    4710:	10 e0       	ldi	r17, 0x00	; 0
    4712:	04 c0       	rjmp	.+8      	; 0x471c <APP_PASSWORD_u8_AppGetPassword+0x64>
			}
			else
			{
				if(Loc_u8_Pass[index] > NINE)
				{
					index--;
    4714:	11 50       	subi	r17, 0x01	; 1
	while(1)
	{
		HAL_LCD_u8_ClearFullScreen();
		HAL_LCD_u8_WriteString("Enter Password :");
		HAL_LCD_u8_GoTo(1,0);
		for(index = 0; index <= 3; index++)
    4716:	1f 5f       	subi	r17, 0xFF	; 255
    4718:	14 30       	cpi	r17, 0x04	; 4
    471a:	c0 f4       	brcc	.+48     	; 0x474c <APP_PASSWORD_u8_AppGetPassword+0x94>
		{
			HAL_KEYPAD_u8_KaypadButton1(&Loc_u8_Pass[index]);
    471c:	c6 01       	movw	r24, r12
    471e:	81 0f       	add	r24, r17
    4720:	91 1d       	adc	r25, r1
    4722:	9e 83       	std	Y+6, r25	; 0x06
    4724:	8d 83       	std	Y+5, r24	; 0x05
    4726:	0e 94 b5 13 	call	0x276a	; 0x276a <HAL_KEYPAD_u8_KaypadButton1>
			if(Loc_u8_Pass[index] == 'N')
    472a:	ed 81       	ldd	r30, Y+5	; 0x05
    472c:	fe 81       	ldd	r31, Y+6	; 0x06
    472e:	00 81       	ld	r16, Z
    4730:	0e 34       	cpi	r16, 0x4E	; 78
    4732:	09 f4       	brne	.+2      	; 0x4736 <APP_PASSWORD_u8_AppGetPassword+0x7e>
    4734:	4e c0       	rjmp	.+156    	; 0x47d2 <APP_PASSWORD_u8_AppGetPassword+0x11a>
				HAL_LCD_u8_GoTo(1,index);
				index--;
			}
			else
			{
				if(Loc_u8_Pass[index] > NINE)
    4736:	0a 30       	cpi	r16, 0x0A	; 10
    4738:	68 f7       	brcc	.-38     	; 0x4714 <APP_PASSWORD_u8_AppGetPassword+0x5c>
				{
					index--;
				}
				else
				{
					HAL_LCD_u8_WriteNumber(Loc_u8_Pass[index]);
    473a:	60 2f       	mov	r22, r16
    473c:	70 e0       	ldi	r23, 0x00	; 0
    473e:	80 e0       	ldi	r24, 0x00	; 0
    4740:	90 e0       	ldi	r25, 0x00	; 0
    4742:	0e 94 78 10 	call	0x20f0	; 0x20f0 <HAL_LCD_u8_WriteNumber>
	while(1)
	{
		HAL_LCD_u8_ClearFullScreen();
		HAL_LCD_u8_WriteString("Enter Password :");
		HAL_LCD_u8_GoTo(1,0);
		for(index = 0; index <= 3; index++)
    4746:	1f 5f       	subi	r17, 0xFF	; 255
    4748:	14 30       	cpi	r17, 0x04	; 4
    474a:	40 f3       	brcs	.-48     	; 0x471c <APP_PASSWORD_u8_AppGetPassword+0x64>
					HAL_LCD_u8_WriteNumber(Loc_u8_Pass[index]);
				}
			}
		}
		Loc_32_CheckPass = Loc_u8_Pass[0]*10 + Loc_u8_Pass[1];
		Loc_32_CheckPass = Loc_32_CheckPass*10 + Loc_u8_Pass[2];
    474c:	89 81       	ldd	r24, Y+1	; 0x01
    474e:	8a 9d       	mul	r24, r10
    4750:	c0 01       	movw	r24, r0
    4752:	11 24       	eor	r1, r1
    4754:	2a 81       	ldd	r18, Y+2	; 0x02
    4756:	82 0f       	add	r24, r18
    4758:	91 1d       	adc	r25, r1
    475a:	9c 01       	movw	r18, r24
    475c:	22 0f       	add	r18, r18
    475e:	33 1f       	adc	r19, r19
    4760:	22 0f       	add	r18, r18
    4762:	33 1f       	adc	r19, r19
    4764:	22 0f       	add	r18, r18
    4766:	33 1f       	adc	r19, r19
    4768:	88 0f       	add	r24, r24
    476a:	99 1f       	adc	r25, r25
    476c:	28 0f       	add	r18, r24
    476e:	39 1f       	adc	r19, r25
    4770:	8b 81       	ldd	r24, Y+3	; 0x03
    4772:	28 0f       	add	r18, r24
    4774:	31 1d       	adc	r19, r1
		Loc_32_CheckPass = Loc_32_CheckPass*10 + Loc_u8_Pass[3];
    4776:	b9 01       	movw	r22, r18
    4778:	66 0f       	add	r22, r22
    477a:	77 1f       	adc	r23, r23
    477c:	66 0f       	add	r22, r22
    477e:	77 1f       	adc	r23, r23
    4780:	66 0f       	add	r22, r22
    4782:	77 1f       	adc	r23, r23
    4784:	22 0f       	add	r18, r18
    4786:	33 1f       	adc	r19, r19
    4788:	62 0f       	add	r22, r18
    478a:	73 1f       	adc	r23, r19
		if(Check_UserPassword(Loc_32_CheckID,(u16)Loc_32_CheckPass) == PASSWORD_MATCHED)
    478c:	8c 81       	ldd	r24, Y+4	; 0x04
    478e:	68 0f       	add	r22, r24
    4790:	71 1d       	adc	r23, r1
    4792:	c4 01       	movw	r24, r8
    4794:	0e 94 e8 20 	call	0x41d0	; 0x41d0 <Check_UserPassword>
    4798:	8d 34       	cpi	r24, 0x4D	; 77
    479a:	09 f4       	brne	.+2      	; 0x479e <APP_PASSWORD_u8_AppGetPassword+0xe6>
    479c:	54 c0       	rjmp	.+168    	; 0x4846 <APP_PASSWORD_u8_AppGetPassword+0x18e>
			MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_LOW);
			break;
		}
		else
		{
			HAL_LCD_u8_ClearFullScreen();
    479e:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <HAL_LCD_u8_ClearFullScreen>
			HAL_LCD_u8_GoTo(1,0);
    47a2:	81 e0       	ldi	r24, 0x01	; 1
    47a4:	60 e0       	ldi	r22, 0x00	; 0
    47a6:	0e 94 b3 11 	call	0x2366	; 0x2366 <HAL_LCD_u8_GoTo>
			HAL_LCD_u8_WriteString("Wrong Password");
    47aa:	86 e8       	ldi	r24, 0x86	; 134
    47ac:	90 e0       	ldi	r25, 0x00	; 0
    47ae:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <HAL_LCD_u8_WriteString>
			Loc_u8_Flag++;
    47b2:	b3 94       	inc	r11
			if(Loc_u8_Flag == 3)
    47b4:	f3 e0       	ldi	r31, 0x03	; 3
    47b6:	bf 16       	cp	r11, r31
    47b8:	c1 f0       	breq	.+48     	; 0x47ea <APP_PASSWORD_u8_AppGetPassword+0x132>
				G_RecieveValue = MCAL_SPI_MASTER_u8_SpiMaster_Transceive('B');
				MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_HIGH);
				MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_LOW);
				G_RecieveValue = MCAL_SPI_MASTER_u8_SpiMaster_Transceive('N');
				MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_HIGH);
				MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_LOW);
    47ba:	20 e0       	ldi	r18, 0x00	; 0
    47bc:	30 e0       	ldi	r19, 0x00	; 0
    47be:	c7 01       	movw	r24, r14
    47c0:	01 97       	sbiw	r24, 0x01	; 1
    47c2:	f1 f7       	brne	.-4      	; 0x47c0 <APP_PASSWORD_u8_AppGetPassword+0x108>
    47c4:	2f 5f       	subi	r18, 0xFF	; 255
    47c6:	3f 4f       	sbci	r19, 0xFF	; 255
    47c8:	87 e2       	ldi	r24, 0x27	; 39
    47ca:	20 31       	cpi	r18, 0x10	; 16
    47cc:	38 07       	cpc	r19, r24
    47ce:	b9 f7       	brne	.-18     	; 0x47be <APP_PASSWORD_u8_AppGetPassword+0x106>
    47d0:	95 cf       	rjmp	.-214    	; 0x46fc <APP_PASSWORD_u8_AppGetPassword+0x44>
		for(index = 0; index <= 3; index++)
		{
			HAL_KEYPAD_u8_KaypadButton1(&Loc_u8_Pass[index]);
			if(Loc_u8_Pass[index] == 'N')
			{
				index--;
    47d2:	01 2f       	mov	r16, r17
    47d4:	01 50       	subi	r16, 0x01	; 1
				HAL_LCD_u8_ClearCharacter(1,index);
    47d6:	81 e0       	ldi	r24, 0x01	; 1
    47d8:	60 2f       	mov	r22, r16
    47da:	0e 94 f3 11 	call	0x23e6	; 0x23e6 <HAL_LCD_u8_ClearCharacter>
				HAL_LCD_u8_GoTo(1,index);
    47de:	81 e0       	ldi	r24, 0x01	; 1
    47e0:	60 2f       	mov	r22, r16
    47e2:	0e 94 b3 11 	call	0x2366	; 0x2366 <HAL_LCD_u8_GoTo>
				index--;
    47e6:	12 50       	subi	r17, 0x02	; 2
    47e8:	96 cf       	rjmp	.-212    	; 0x4716 <APP_PASSWORD_u8_AppGetPassword+0x5e>
			HAL_LCD_u8_GoTo(1,0);
			HAL_LCD_u8_WriteString("Wrong Password");
			Loc_u8_Flag++;
			if(Loc_u8_Flag == 3)
			{
				HAL_Buzzer_u8BuzzerMode(Buzzer_Port,Buzzer_Pin,Buzzer_ON);
    47ea:	81 e0       	ldi	r24, 0x01	; 1
    47ec:	60 e0       	ldi	r22, 0x00	; 0
    47ee:	41 e0       	ldi	r20, 0x01	; 1
    47f0:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <HAL_Buzzer_u8BuzzerMode>
				MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_HIGH);
    47f4:	81 e0       	ldi	r24, 0x01	; 1
    47f6:	62 e0       	ldi	r22, 0x02	; 2
    47f8:	41 e0       	ldi	r20, 0x01	; 1
    47fa:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
				MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_LOW);
    47fe:	81 e0       	ldi	r24, 0x01	; 1
    4800:	64 e0       	ldi	r22, 0x04	; 4
    4802:	40 e0       	ldi	r20, 0x00	; 0
    4804:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
				G_RecieveValue = MCAL_SPI_MASTER_u8_SpiMaster_Transceive('B');
    4808:	82 e4       	ldi	r24, 0x42	; 66
    480a:	0e 94 1d 0b 	call	0x163a	; 0x163a <MCAL_SPI_MASTER_u8_SpiMaster_Transceive>
    480e:	80 93 5c 03 	sts	0x035C, r24
				MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_HIGH);
    4812:	81 e0       	ldi	r24, 0x01	; 1
    4814:	64 e0       	ldi	r22, 0x04	; 4
    4816:	41 e0       	ldi	r20, 0x01	; 1
    4818:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
				MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_LOW);
    481c:	81 e0       	ldi	r24, 0x01	; 1
    481e:	64 e0       	ldi	r22, 0x04	; 4
    4820:	40 e0       	ldi	r20, 0x00	; 0
    4822:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
				G_RecieveValue = MCAL_SPI_MASTER_u8_SpiMaster_Transceive('N');
    4826:	8e e4       	ldi	r24, 0x4E	; 78
    4828:	0e 94 1d 0b 	call	0x163a	; 0x163a <MCAL_SPI_MASTER_u8_SpiMaster_Transceive>
    482c:	80 93 5c 03 	sts	0x035C, r24
				MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_HIGH);
    4830:	81 e0       	ldi	r24, 0x01	; 1
    4832:	64 e0       	ldi	r22, 0x04	; 4
    4834:	41 e0       	ldi	r20, 0x01	; 1
    4836:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
				MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_LOW);
    483a:	81 e0       	ldi	r24, 0x01	; 1
    483c:	62 e0       	ldi	r22, 0x02	; 2
    483e:	40 e0       	ldi	r20, 0x00	; 0
    4840:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
    4844:	ba cf       	rjmp	.-140    	; 0x47ba <APP_PASSWORD_u8_AppGetPassword+0x102>
		Loc_32_CheckPass = Loc_u8_Pass[0]*10 + Loc_u8_Pass[1];
		Loc_32_CheckPass = Loc_32_CheckPass*10 + Loc_u8_Pass[2];
		Loc_32_CheckPass = Loc_32_CheckPass*10 + Loc_u8_Pass[3];
		if(Check_UserPassword(Loc_32_CheckID,(u16)Loc_32_CheckPass) == PASSWORD_MATCHED)
		{
			HAL_LCD_u8_ClearFullScreen();
    4846:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <HAL_LCD_u8_ClearFullScreen>
			HAL_LCD_u8_GoTo(1,0);
    484a:	81 e0       	ldi	r24, 0x01	; 1
    484c:	60 e0       	ldi	r22, 0x00	; 0
    484e:	0e 94 b3 11 	call	0x2366	; 0x2366 <HAL_LCD_u8_GoTo>
			HAL_LCD_u8_WriteString("Welcome !!!");
    4852:	8a e7       	ldi	r24, 0x7A	; 122
    4854:	90 e0       	ldi	r25, 0x00	; 0
    4856:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <HAL_LCD_u8_WriteString>
			HAL_Buzzer_u8BuzzerMode(Buzzer_Port,Buzzer_Pin,Buzzer_OFF);
    485a:	81 e0       	ldi	r24, 0x01	; 1
    485c:	60 e0       	ldi	r22, 0x00	; 0
    485e:	40 e0       	ldi	r20, 0x00	; 0
    4860:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <HAL_Buzzer_u8BuzzerMode>
			MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_HIGH);
    4864:	81 e0       	ldi	r24, 0x01	; 1
    4866:	62 e0       	ldi	r22, 0x02	; 2
    4868:	41 e0       	ldi	r20, 0x01	; 1
    486a:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
			MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_LOW);
    486e:	81 e0       	ldi	r24, 0x01	; 1
    4870:	64 e0       	ldi	r22, 0x04	; 4
    4872:	40 e0       	ldi	r20, 0x00	; 0
    4874:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
			G_RecieveValue = MCAL_SPI_MASTER_u8_SpiMaster_Transceive('B');
    4878:	82 e4       	ldi	r24, 0x42	; 66
    487a:	0e 94 1d 0b 	call	0x163a	; 0x163a <MCAL_SPI_MASTER_u8_SpiMaster_Transceive>
    487e:	80 93 5c 03 	sts	0x035C, r24
			MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_HIGH);
    4882:	81 e0       	ldi	r24, 0x01	; 1
    4884:	64 e0       	ldi	r22, 0x04	; 4
    4886:	41 e0       	ldi	r20, 0x01	; 1
    4888:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
			MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_LOW);
    488c:	81 e0       	ldi	r24, 0x01	; 1
    488e:	64 e0       	ldi	r22, 0x04	; 4
    4890:	40 e0       	ldi	r20, 0x00	; 0
    4892:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
			G_RecieveValue = MCAL_SPI_MASTER_u8_SpiMaster_Transceive('F');
    4896:	86 e4       	ldi	r24, 0x46	; 70
    4898:	0e 94 1d 0b 	call	0x163a	; 0x163a <MCAL_SPI_MASTER_u8_SpiMaster_Transceive>
    489c:	80 93 5c 03 	sts	0x035C, r24
			MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_HIGH);
    48a0:	81 e0       	ldi	r24, 0x01	; 1
    48a2:	64 e0       	ldi	r22, 0x04	; 4
    48a4:	41 e0       	ldi	r20, 0x01	; 1
    48a6:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
			MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_LOW);
    48aa:	81 e0       	ldi	r24, 0x01	; 1
    48ac:	62 e0       	ldi	r22, 0x02	; 2
    48ae:	40 e0       	ldi	r20, 0x00	; 0
    48b0:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
				MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_LOW);
			}
			_delay_ms(1000);
		}
	}
}
    48b4:	26 96       	adiw	r28, 0x06	; 6
    48b6:	0f b6       	in	r0, 0x3f	; 63
    48b8:	f8 94       	cli
    48ba:	de bf       	out	0x3e, r29	; 62
    48bc:	0f be       	out	0x3f, r0	; 63
    48be:	cd bf       	out	0x3d, r28	; 61
    48c0:	cf 91       	pop	r28
    48c2:	df 91       	pop	r29
    48c4:	1f 91       	pop	r17
    48c6:	0f 91       	pop	r16
    48c8:	ff 90       	pop	r15
    48ca:	ef 90       	pop	r14
    48cc:	df 90       	pop	r13
    48ce:	cf 90       	pop	r12
    48d0:	bf 90       	pop	r11
    48d2:	af 90       	pop	r10
    48d4:	9f 90       	pop	r9
    48d6:	8f 90       	pop	r8
    48d8:	08 95       	ret

000048da <APP_USERID_u8_AppUserID>:
		}
	}
}*/

u16 APP_USERID_u8_AppUserID(void)
{
    48da:	af 92       	push	r10
    48dc:	bf 92       	push	r11
    48de:	cf 92       	push	r12
    48e0:	df 92       	push	r13
    48e2:	ef 92       	push	r14
    48e4:	ff 92       	push	r15
    48e6:	0f 93       	push	r16
    48e8:	1f 93       	push	r17
    48ea:	df 93       	push	r29
    48ec:	cf 93       	push	r28
    48ee:	00 d0       	rcall	.+0      	; 0x48f0 <APP_USERID_u8_AppUserID+0x16>
    48f0:	00 d0       	rcall	.+0      	; 0x48f2 <APP_USERID_u8_AppUserID+0x18>
    48f2:	00 d0       	rcall	.+0      	; 0x48f4 <APP_USERID_u8_AppUserID+0x1a>
    48f4:	cd b7       	in	r28, 0x3d	; 61
    48f6:	de b7       	in	r29, 0x3e	; 62
	u8 Loc_u8_Pass[4] = {0};
    48f8:	19 82       	std	Y+1, r1	; 0x01
    48fa:	1a 82       	std	Y+2, r1	; 0x02
    48fc:	1b 82       	std	Y+3, r1	; 0x03
    48fe:	1c 82       	std	Y+4, r1	; 0x04
	u8 index = 0;
	u16 Loc_32_CheckPass = 0;
	u8 Loc_u8_Flag = 0;
	HAL_LCD_u8_ClearFullScreen();
    4900:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <HAL_LCD_u8_ClearFullScreen>
    4904:	bb 24       	eor	r11, r11
    4906:	6e 01       	movw	r12, r28
    4908:	08 94       	sec
    490a:	c1 1c       	adc	r12, r1
    490c:	d1 1c       	adc	r13, r1
					HAL_LCD_u8_WriteNumber(Loc_u8_Pass[index]);
				}
			}
		}
		Loc_32_CheckPass = Loc_u8_Pass[0]*10 + Loc_u8_Pass[1];
		Loc_32_CheckPass = Loc_32_CheckPass*10 + Loc_u8_Pass[2];
    490e:	0a e0       	ldi	r16, 0x0A	; 10
    4910:	a0 2e       	mov	r10, r16
    4912:	18 ec       	ldi	r17, 0xC8	; 200
    4914:	e1 2e       	mov	r14, r17
    4916:	f1 2c       	mov	r15, r1
	u16 Loc_32_CheckPass = 0;
	u8 Loc_u8_Flag = 0;
	HAL_LCD_u8_ClearFullScreen();
	while(1)
	{
		HAL_LCD_u8_ClearFullScreen();
    4918:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <HAL_LCD_u8_ClearFullScreen>
		HAL_LCD_u8_WriteString("Enter User ID :");
    491c:	85 e9       	ldi	r24, 0x95	; 149
    491e:	90 e0       	ldi	r25, 0x00	; 0
    4920:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <HAL_LCD_u8_WriteString>
		HAL_LCD_u8_GoTo(1,0);
    4924:	81 e0       	ldi	r24, 0x01	; 1
    4926:	60 e0       	ldi	r22, 0x00	; 0
    4928:	0e 94 b3 11 	call	0x2366	; 0x2366 <HAL_LCD_u8_GoTo>
    492c:	10 e0       	ldi	r17, 0x00	; 0
    492e:	04 c0       	rjmp	.+8      	; 0x4938 <APP_USERID_u8_AppUserID+0x5e>
			}
			else
			{
				if(Loc_u8_Pass[index] > NINE)
				{
					index--;
    4930:	11 50       	subi	r17, 0x01	; 1
	while(1)
	{
		HAL_LCD_u8_ClearFullScreen();
		HAL_LCD_u8_WriteString("Enter User ID :");
		HAL_LCD_u8_GoTo(1,0);
		for(index = 0; index <= 3; index++)
    4932:	1f 5f       	subi	r17, 0xFF	; 255
    4934:	14 30       	cpi	r17, 0x04	; 4
    4936:	c0 f4       	brcc	.+48     	; 0x4968 <APP_USERID_u8_AppUserID+0x8e>
		{
			HAL_KEYPAD_u8_KaypadButton1(&Loc_u8_Pass[index]);
    4938:	c6 01       	movw	r24, r12
    493a:	81 0f       	add	r24, r17
    493c:	91 1d       	adc	r25, r1
    493e:	9e 83       	std	Y+6, r25	; 0x06
    4940:	8d 83       	std	Y+5, r24	; 0x05
    4942:	0e 94 b5 13 	call	0x276a	; 0x276a <HAL_KEYPAD_u8_KaypadButton1>
			if(Loc_u8_Pass[index] == 'N')
    4946:	ed 81       	ldd	r30, Y+5	; 0x05
    4948:	fe 81       	ldd	r31, Y+6	; 0x06
    494a:	00 81       	ld	r16, Z
    494c:	0e 34       	cpi	r16, 0x4E	; 78
    494e:	09 f4       	brne	.+2      	; 0x4952 <APP_USERID_u8_AppUserID+0x78>
    4950:	4e c0       	rjmp	.+156    	; 0x49ee <APP_USERID_u8_AppUserID+0x114>
				HAL_LCD_u8_GoTo(1,index);
				index--;
			}
			else
			{
				if(Loc_u8_Pass[index] > NINE)
    4952:	0a 30       	cpi	r16, 0x0A	; 10
    4954:	68 f7       	brcc	.-38     	; 0x4930 <APP_USERID_u8_AppUserID+0x56>
				{
					index--;
				}
				else
				{
					HAL_LCD_u8_WriteNumber(Loc_u8_Pass[index]);
    4956:	60 2f       	mov	r22, r16
    4958:	70 e0       	ldi	r23, 0x00	; 0
    495a:	80 e0       	ldi	r24, 0x00	; 0
    495c:	90 e0       	ldi	r25, 0x00	; 0
    495e:	0e 94 78 10 	call	0x20f0	; 0x20f0 <HAL_LCD_u8_WriteNumber>
	while(1)
	{
		HAL_LCD_u8_ClearFullScreen();
		HAL_LCD_u8_WriteString("Enter User ID :");
		HAL_LCD_u8_GoTo(1,0);
		for(index = 0; index <= 3; index++)
    4962:	1f 5f       	subi	r17, 0xFF	; 255
    4964:	14 30       	cpi	r17, 0x04	; 4
    4966:	40 f3       	brcs	.-48     	; 0x4938 <APP_USERID_u8_AppUserID+0x5e>
					HAL_LCD_u8_WriteNumber(Loc_u8_Pass[index]);
				}
			}
		}
		Loc_32_CheckPass = Loc_u8_Pass[0]*10 + Loc_u8_Pass[1];
		Loc_32_CheckPass = Loc_32_CheckPass*10 + Loc_u8_Pass[2];
    4968:	89 81       	ldd	r24, Y+1	; 0x01
    496a:	8a 9d       	mul	r24, r10
    496c:	c0 01       	movw	r24, r0
    496e:	11 24       	eor	r1, r1
    4970:	2a 81       	ldd	r18, Y+2	; 0x02
    4972:	82 0f       	add	r24, r18
    4974:	91 1d       	adc	r25, r1
    4976:	9c 01       	movw	r18, r24
    4978:	22 0f       	add	r18, r18
    497a:	33 1f       	adc	r19, r19
    497c:	22 0f       	add	r18, r18
    497e:	33 1f       	adc	r19, r19
    4980:	22 0f       	add	r18, r18
    4982:	33 1f       	adc	r19, r19
    4984:	88 0f       	add	r24, r24
    4986:	99 1f       	adc	r25, r25
    4988:	28 0f       	add	r18, r24
    498a:	39 1f       	adc	r19, r25
    498c:	8b 81       	ldd	r24, Y+3	; 0x03
    498e:	28 0f       	add	r18, r24
    4990:	31 1d       	adc	r19, r1
		Loc_32_CheckPass = Loc_32_CheckPass*10 + Loc_u8_Pass[3];
    4992:	89 01       	movw	r16, r18
    4994:	00 0f       	add	r16, r16
    4996:	11 1f       	adc	r17, r17
    4998:	00 0f       	add	r16, r16
    499a:	11 1f       	adc	r17, r17
    499c:	00 0f       	add	r16, r16
    499e:	11 1f       	adc	r17, r17
    49a0:	22 0f       	add	r18, r18
    49a2:	33 1f       	adc	r19, r19
    49a4:	02 0f       	add	r16, r18
    49a6:	13 1f       	adc	r17, r19
    49a8:	8c 81       	ldd	r24, Y+4	; 0x04
    49aa:	08 0f       	add	r16, r24
    49ac:	11 1d       	adc	r17, r1
		if(Check_UserID((u16)Loc_32_CheckPass) != USER_NOT_FOUND)
    49ae:	c8 01       	movw	r24, r16
    49b0:	0e 94 34 19 	call	0x3268	; 0x3268 <Check_UserID>
    49b4:	8b 3b       	cpi	r24, 0xBB	; 187
    49b6:	09 f0       	breq	.+2      	; 0x49ba <APP_USERID_u8_AppUserID+0xe0>
    49b8:	54 c0       	rjmp	.+168    	; 0x4a62 <APP_USERID_u8_AppUserID+0x188>
			MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_LOW);
			return Loc_32_CheckPass;
		}
		else
		{
			HAL_LCD_u8_ClearFullScreen();
    49ba:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <HAL_LCD_u8_ClearFullScreen>
			HAL_LCD_u8_GoTo(1,0);
    49be:	81 e0       	ldi	r24, 0x01	; 1
    49c0:	60 e0       	ldi	r22, 0x00	; 0
    49c2:	0e 94 b3 11 	call	0x2366	; 0x2366 <HAL_LCD_u8_GoTo>
			HAL_LCD_u8_WriteString("Wrong ID");
    49c6:	85 ea       	ldi	r24, 0xA5	; 165
    49c8:	90 e0       	ldi	r25, 0x00	; 0
    49ca:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <HAL_LCD_u8_WriteString>
			Loc_u8_Flag++;
    49ce:	b3 94       	inc	r11
			if(Loc_u8_Flag == 3)
    49d0:	f3 e0       	ldi	r31, 0x03	; 3
    49d2:	bf 16       	cp	r11, r31
    49d4:	c1 f0       	breq	.+48     	; 0x4a06 <APP_USERID_u8_AppUserID+0x12c>
				G_RecieveValue = MCAL_SPI_MASTER_u8_SpiMaster_Transceive('B');
				MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_HIGH);
				MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_LOW);
				G_RecieveValue = MCAL_SPI_MASTER_u8_SpiMaster_Transceive('N');
				MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_HIGH);
				MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_LOW);
    49d6:	20 e0       	ldi	r18, 0x00	; 0
    49d8:	30 e0       	ldi	r19, 0x00	; 0
    49da:	c7 01       	movw	r24, r14
    49dc:	01 97       	sbiw	r24, 0x01	; 1
    49de:	f1 f7       	brne	.-4      	; 0x49dc <APP_USERID_u8_AppUserID+0x102>
    49e0:	2f 5f       	subi	r18, 0xFF	; 255
    49e2:	3f 4f       	sbci	r19, 0xFF	; 255
    49e4:	87 e2       	ldi	r24, 0x27	; 39
    49e6:	20 31       	cpi	r18, 0x10	; 16
    49e8:	38 07       	cpc	r19, r24
    49ea:	b9 f7       	brne	.-18     	; 0x49da <APP_USERID_u8_AppUserID+0x100>
    49ec:	95 cf       	rjmp	.-214    	; 0x4918 <APP_USERID_u8_AppUserID+0x3e>
		for(index = 0; index <= 3; index++)
		{
			HAL_KEYPAD_u8_KaypadButton1(&Loc_u8_Pass[index]);
			if(Loc_u8_Pass[index] == 'N')
			{
				index--;
    49ee:	01 2f       	mov	r16, r17
    49f0:	01 50       	subi	r16, 0x01	; 1
				HAL_LCD_u8_ClearCharacter(1,index);
    49f2:	81 e0       	ldi	r24, 0x01	; 1
    49f4:	60 2f       	mov	r22, r16
    49f6:	0e 94 f3 11 	call	0x23e6	; 0x23e6 <HAL_LCD_u8_ClearCharacter>
				HAL_LCD_u8_GoTo(1,index);
    49fa:	81 e0       	ldi	r24, 0x01	; 1
    49fc:	60 2f       	mov	r22, r16
    49fe:	0e 94 b3 11 	call	0x2366	; 0x2366 <HAL_LCD_u8_GoTo>
				index--;
    4a02:	12 50       	subi	r17, 0x02	; 2
    4a04:	96 cf       	rjmp	.-212    	; 0x4932 <APP_USERID_u8_AppUserID+0x58>
			HAL_LCD_u8_GoTo(1,0);
			HAL_LCD_u8_WriteString("Wrong ID");
			Loc_u8_Flag++;
			if(Loc_u8_Flag == 3)
			{
				HAL_Buzzer_u8BuzzerMode(Buzzer_Port,Buzzer_Pin,Buzzer_ON);
    4a06:	81 e0       	ldi	r24, 0x01	; 1
    4a08:	60 e0       	ldi	r22, 0x00	; 0
    4a0a:	41 e0       	ldi	r20, 0x01	; 1
    4a0c:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <HAL_Buzzer_u8BuzzerMode>
				MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_HIGH);
    4a10:	81 e0       	ldi	r24, 0x01	; 1
    4a12:	62 e0       	ldi	r22, 0x02	; 2
    4a14:	41 e0       	ldi	r20, 0x01	; 1
    4a16:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
				MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_LOW);
    4a1a:	81 e0       	ldi	r24, 0x01	; 1
    4a1c:	64 e0       	ldi	r22, 0x04	; 4
    4a1e:	40 e0       	ldi	r20, 0x00	; 0
    4a20:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
				G_RecieveValue = MCAL_SPI_MASTER_u8_SpiMaster_Transceive('B');
    4a24:	82 e4       	ldi	r24, 0x42	; 66
    4a26:	0e 94 1d 0b 	call	0x163a	; 0x163a <MCAL_SPI_MASTER_u8_SpiMaster_Transceive>
    4a2a:	80 93 5c 03 	sts	0x035C, r24
				MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_HIGH);
    4a2e:	81 e0       	ldi	r24, 0x01	; 1
    4a30:	64 e0       	ldi	r22, 0x04	; 4
    4a32:	41 e0       	ldi	r20, 0x01	; 1
    4a34:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
				MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_LOW);
    4a38:	81 e0       	ldi	r24, 0x01	; 1
    4a3a:	64 e0       	ldi	r22, 0x04	; 4
    4a3c:	40 e0       	ldi	r20, 0x00	; 0
    4a3e:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
				G_RecieveValue = MCAL_SPI_MASTER_u8_SpiMaster_Transceive('N');
    4a42:	8e e4       	ldi	r24, 0x4E	; 78
    4a44:	0e 94 1d 0b 	call	0x163a	; 0x163a <MCAL_SPI_MASTER_u8_SpiMaster_Transceive>
    4a48:	80 93 5c 03 	sts	0x035C, r24
				MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_HIGH);
    4a4c:	81 e0       	ldi	r24, 0x01	; 1
    4a4e:	64 e0       	ldi	r22, 0x04	; 4
    4a50:	41 e0       	ldi	r20, 0x01	; 1
    4a52:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
				MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_LOW);
    4a56:	81 e0       	ldi	r24, 0x01	; 1
    4a58:	62 e0       	ldi	r22, 0x02	; 2
    4a5a:	40 e0       	ldi	r20, 0x00	; 0
    4a5c:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
    4a60:	ba cf       	rjmp	.-140    	; 0x49d6 <APP_USERID_u8_AppUserID+0xfc>
		Loc_32_CheckPass = Loc_u8_Pass[0]*10 + Loc_u8_Pass[1];
		Loc_32_CheckPass = Loc_32_CheckPass*10 + Loc_u8_Pass[2];
		Loc_32_CheckPass = Loc_32_CheckPass*10 + Loc_u8_Pass[3];
		if(Check_UserID((u16)Loc_32_CheckPass) != USER_NOT_FOUND)
		{
			HAL_LCD_u8_ClearFullScreen();
    4a62:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <HAL_LCD_u8_ClearFullScreen>
			HAL_LCD_u8_GoTo(1,0);
    4a66:	81 e0       	ldi	r24, 0x01	; 1
    4a68:	60 e0       	ldi	r22, 0x00	; 0
    4a6a:	0e 94 b3 11 	call	0x2366	; 0x2366 <HAL_LCD_u8_GoTo>
			HAL_Buzzer_u8BuzzerMode(Buzzer_Port,Buzzer_Pin,Buzzer_OFF);
    4a6e:	81 e0       	ldi	r24, 0x01	; 1
    4a70:	60 e0       	ldi	r22, 0x00	; 0
    4a72:	40 e0       	ldi	r20, 0x00	; 0
    4a74:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <HAL_Buzzer_u8BuzzerMode>
			MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_HIGH);
    4a78:	81 e0       	ldi	r24, 0x01	; 1
    4a7a:	62 e0       	ldi	r22, 0x02	; 2
    4a7c:	41 e0       	ldi	r20, 0x01	; 1
    4a7e:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
			MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_LOW);
    4a82:	81 e0       	ldi	r24, 0x01	; 1
    4a84:	64 e0       	ldi	r22, 0x04	; 4
    4a86:	40 e0       	ldi	r20, 0x00	; 0
    4a88:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
			G_RecieveValue = MCAL_SPI_MASTER_u8_SpiMaster_Transceive('B');
    4a8c:	82 e4       	ldi	r24, 0x42	; 66
    4a8e:	0e 94 1d 0b 	call	0x163a	; 0x163a <MCAL_SPI_MASTER_u8_SpiMaster_Transceive>
    4a92:	80 93 5c 03 	sts	0x035C, r24
			MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_HIGH);
    4a96:	81 e0       	ldi	r24, 0x01	; 1
    4a98:	64 e0       	ldi	r22, 0x04	; 4
    4a9a:	41 e0       	ldi	r20, 0x01	; 1
    4a9c:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
			MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_LOW);
    4aa0:	81 e0       	ldi	r24, 0x01	; 1
    4aa2:	64 e0       	ldi	r22, 0x04	; 4
    4aa4:	40 e0       	ldi	r20, 0x00	; 0
    4aa6:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
			G_RecieveValue = MCAL_SPI_MASTER_u8_SpiMaster_Transceive('F');
    4aaa:	86 e4       	ldi	r24, 0x46	; 70
    4aac:	0e 94 1d 0b 	call	0x163a	; 0x163a <MCAL_SPI_MASTER_u8_SpiMaster_Transceive>
    4ab0:	80 93 5c 03 	sts	0x035C, r24
			MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_HIGH);
    4ab4:	81 e0       	ldi	r24, 0x01	; 1
    4ab6:	64 e0       	ldi	r22, 0x04	; 4
    4ab8:	41 e0       	ldi	r20, 0x01	; 1
    4aba:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
			MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_LOW);
    4abe:	81 e0       	ldi	r24, 0x01	; 1
    4ac0:	62 e0       	ldi	r22, 0x02	; 2
    4ac2:	40 e0       	ldi	r20, 0x00	; 0
    4ac4:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
				MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_LOW);
			}
			_delay_ms(1000);
		}
	}
}
    4ac8:	c8 01       	movw	r24, r16
    4aca:	26 96       	adiw	r28, 0x06	; 6
    4acc:	0f b6       	in	r0, 0x3f	; 63
    4ace:	f8 94       	cli
    4ad0:	de bf       	out	0x3e, r29	; 62
    4ad2:	0f be       	out	0x3f, r0	; 63
    4ad4:	cd bf       	out	0x3d, r28	; 61
    4ad6:	cf 91       	pop	r28
    4ad8:	df 91       	pop	r29
    4ada:	1f 91       	pop	r17
    4adc:	0f 91       	pop	r16
    4ade:	ff 90       	pop	r15
    4ae0:	ef 90       	pop	r14
    4ae2:	df 90       	pop	r13
    4ae4:	cf 90       	pop	r12
    4ae6:	bf 90       	pop	r11
    4ae8:	af 90       	pop	r10
    4aea:	08 95       	ret

00004aec <APP_PASSWORD_u8_AppGetPasswordInit>:
 * **********************************************************************
 **/
STD_TYPE APP_PASSWORD_u8_AppGetPasswordInit(void)
{
	u8 Loc_u8_Retval = E_NOT_OK;
	Loc_u8_Retval = HAL_KEYPAD_u8_KaypadInit();
    4aec:	0e 94 85 15 	call	0x2b0a	; 0x2b0a <HAL_KEYPAD_u8_KaypadInit>
	Loc_u8_Retval = HAL_LCD_u8_LcdInit();
    4af0:	0e 94 54 11 	call	0x22a8	; 0x22a8 <HAL_LCD_u8_LcdInit>
	return Loc_u8_Retval;
}
    4af4:	08 95       	ret

00004af6 <APP_FAN_void_AppFanReadWithoutWrite>:
 * INPUT Arg   : No Args
 * RETURN      : No Return
 * **********************************************************************
 **/
void APP_FAN_void_AppFanReadWithoutWrite(void)
{
    4af6:	1f 93       	push	r17
	G_LM35 = LM35_Read();
    4af8:	0e 94 56 0e 	call	0x1cac	; 0x1cac <LM35_Read>
    4afc:	80 93 64 03 	sts	0x0364, r24
	if(G_FanControlFlag == 0)
    4b00:	80 91 5d 03 	lds	r24, 0x035D
    4b04:	88 23       	and	r24, r24
    4b06:	c9 f4       	brne	.+50     	; 0x4b3a <APP_FAN_void_AppFanReadWithoutWrite+0x44>
	{
		if((G_LM35 > TURN_DC_ON_TEMP) && (G_FanFlagOn == 0))
    4b08:	80 91 64 03 	lds	r24, 0x0364
    4b0c:	8d 31       	cpi	r24, 0x1D	; 29
    4b0e:	b8 f4       	brcc	.+46     	; 0x4b3e <APP_FAN_void_AppFanReadWithoutWrite+0x48>
			MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_LOW);
			G_RecieveValue = MCAL_SPI_MASTER_u8_SpiMaster_Transceive('N');
			MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_HIGH);
			MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_LOW);
		}
		else if((G_LM35 < TURN_DC_OFF_TEMP) && (G_FanFlagOff == 0))
    4b10:	80 91 64 03 	lds	r24, 0x0364
    4b14:	85 31       	cpi	r24, 0x15	; 21
    4b16:	28 f4       	brcc	.+10     	; 0x4b22 <APP_FAN_void_AppFanReadWithoutWrite+0x2c>
    4b18:	80 91 5b 03 	lds	r24, 0x035B
    4b1c:	88 23       	and	r24, r24
    4b1e:	09 f4       	brne	.+2      	; 0x4b22 <APP_FAN_void_AppFanReadWithoutWrite+0x2c>
    4b20:	48 c0       	rjmp	.+144    	; 0x4bb2 <APP_FAN_void_AppFanReadWithoutWrite+0xbc>
			MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_LOW);
			G_RecieveValue = MCAL_SPI_MASTER_u8_SpiMaster_Transceive('F');
			MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_HIGH);
			MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_LOW);
		}
		else if((G_LM35 > TURN_DC_OFF_TEMP) && (G_LM35 < TURN_DC_ON_TEMP))
    4b22:	80 91 64 03 	lds	r24, 0x0364
    4b26:	86 31       	cpi	r24, 0x16	; 22
    4b28:	40 f0       	brcs	.+16     	; 0x4b3a <APP_FAN_void_AppFanReadWithoutWrite+0x44>
    4b2a:	80 91 64 03 	lds	r24, 0x0364
    4b2e:	8c 31       	cpi	r24, 0x1C	; 28
    4b30:	20 f4       	brcc	.+8      	; 0x4b3a <APP_FAN_void_AppFanReadWithoutWrite+0x44>
		{
			G_FanFlagOn = 0;
    4b32:	10 92 66 03 	sts	0x0366, r1
			G_FanFlagOff = 0;
    4b36:	10 92 5b 03 	sts	0x035B, r1
		}
	}
}
    4b3a:	1f 91       	pop	r17
    4b3c:	08 95       	ret
void APP_FAN_void_AppFanReadWithoutWrite(void)
{
	G_LM35 = LM35_Read();
	if(G_FanControlFlag == 0)
	{
		if((G_LM35 > TURN_DC_ON_TEMP) && (G_FanFlagOn == 0))
    4b3e:	80 91 66 03 	lds	r24, 0x0366
    4b42:	88 23       	and	r24, r24
    4b44:	29 f7       	brne	.-54     	; 0x4b10 <APP_FAN_void_AppFanReadWithoutWrite+0x1a>
		{
			G_FanFlagOn = 1;
    4b46:	11 e0       	ldi	r17, 0x01	; 1
    4b48:	10 93 66 03 	sts	0x0366, r17
			G_FanFlag = 1;
    4b4c:	10 93 63 03 	sts	0x0363, r17
			G_FanFlagOff = 0;
    4b50:	10 92 5b 03 	sts	0x035B, r1
			HAL_DCMOTOR_void_DcMotorClockWise(motor_speed);
    4b54:	87 e0       	ldi	r24, 0x07	; 7
    4b56:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <HAL_DCMOTOR_void_DcMotorClockWise>
			G_RunningDevicesIndicator = 1;
    4b5a:	10 93 59 03 	sts	0x0359, r17
			MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_HIGH);
    4b5e:	81 e0       	ldi	r24, 0x01	; 1
    4b60:	62 e0       	ldi	r22, 0x02	; 2
    4b62:	41 e0       	ldi	r20, 0x01	; 1
    4b64:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
			MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_LOW);
    4b68:	81 e0       	ldi	r24, 0x01	; 1
    4b6a:	64 e0       	ldi	r22, 0x04	; 4
    4b6c:	40 e0       	ldi	r20, 0x00	; 0
    4b6e:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
			G_RecieveValue = MCAL_SPI_MASTER_u8_SpiMaster_Transceive('F');
    4b72:	86 e4       	ldi	r24, 0x46	; 70
    4b74:	0e 94 1d 0b 	call	0x163a	; 0x163a <MCAL_SPI_MASTER_u8_SpiMaster_Transceive>
    4b78:	80 93 5c 03 	sts	0x035C, r24
			MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_HIGH);
    4b7c:	81 e0       	ldi	r24, 0x01	; 1
    4b7e:	64 e0       	ldi	r22, 0x04	; 4
    4b80:	41 e0       	ldi	r20, 0x01	; 1
    4b82:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
			MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_LOW);
    4b86:	81 e0       	ldi	r24, 0x01	; 1
    4b88:	64 e0       	ldi	r22, 0x04	; 4
    4b8a:	40 e0       	ldi	r20, 0x00	; 0
    4b8c:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
			G_RecieveValue = MCAL_SPI_MASTER_u8_SpiMaster_Transceive('N');
    4b90:	8e e4       	ldi	r24, 0x4E	; 78
			MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_HIGH);
			MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_LOW);
			G_RecieveValue = MCAL_SPI_MASTER_u8_SpiMaster_Transceive('F');
			MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_HIGH);
			MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_LOW);
			G_RecieveValue = MCAL_SPI_MASTER_u8_SpiMaster_Transceive('F');
    4b92:	0e 94 1d 0b 	call	0x163a	; 0x163a <MCAL_SPI_MASTER_u8_SpiMaster_Transceive>
    4b96:	80 93 5c 03 	sts	0x035C, r24
			MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_HIGH);
    4b9a:	81 e0       	ldi	r24, 0x01	; 1
    4b9c:	64 e0       	ldi	r22, 0x04	; 4
    4b9e:	41 e0       	ldi	r20, 0x01	; 1
    4ba0:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
			MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_LOW);
    4ba4:	81 e0       	ldi	r24, 0x01	; 1
    4ba6:	62 e0       	ldi	r22, 0x02	; 2
    4ba8:	40 e0       	ldi	r20, 0x00	; 0
    4baa:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
		{
			G_FanFlagOn = 0;
			G_FanFlagOff = 0;
		}
	}
}
    4bae:	1f 91       	pop	r17
    4bb0:	08 95       	ret
			MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_HIGH);
			MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_LOW);
		}
		else if((G_LM35 < TURN_DC_OFF_TEMP) && (G_FanFlagOff == 0))
		{
			G_FanFlagOff = 1;
    4bb2:	11 e0       	ldi	r17, 0x01	; 1
    4bb4:	10 93 5b 03 	sts	0x035B, r17
			G_FanFlag = 0;
    4bb8:	10 92 63 03 	sts	0x0363, r1
			G_FanFlagOn = 0;
    4bbc:	10 92 66 03 	sts	0x0366, r1
			HAL_DCMOTOR_void_DcMotorStop();
    4bc0:	0e 94 93 16 	call	0x2d26	; 0x2d26 <HAL_DCMOTOR_void_DcMotorStop>
			G_RunningDevicesIndicator = 1;
    4bc4:	10 93 59 03 	sts	0x0359, r17
			MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_HIGH);
    4bc8:	81 e0       	ldi	r24, 0x01	; 1
    4bca:	62 e0       	ldi	r22, 0x02	; 2
    4bcc:	41 e0       	ldi	r20, 0x01	; 1
    4bce:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
			MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_LOW);
    4bd2:	81 e0       	ldi	r24, 0x01	; 1
    4bd4:	64 e0       	ldi	r22, 0x04	; 4
    4bd6:	40 e0       	ldi	r20, 0x00	; 0
    4bd8:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
			G_RecieveValue = MCAL_SPI_MASTER_u8_SpiMaster_Transceive('F');
    4bdc:	86 e4       	ldi	r24, 0x46	; 70
    4bde:	0e 94 1d 0b 	call	0x163a	; 0x163a <MCAL_SPI_MASTER_u8_SpiMaster_Transceive>
    4be2:	80 93 5c 03 	sts	0x035C, r24
			MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_HIGH);
    4be6:	81 e0       	ldi	r24, 0x01	; 1
    4be8:	64 e0       	ldi	r22, 0x04	; 4
    4bea:	41 e0       	ldi	r20, 0x01	; 1
    4bec:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
			MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_LOW);
    4bf0:	81 e0       	ldi	r24, 0x01	; 1
    4bf2:	64 e0       	ldi	r22, 0x04	; 4
    4bf4:	40 e0       	ldi	r20, 0x00	; 0
    4bf6:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
			G_RecieveValue = MCAL_SPI_MASTER_u8_SpiMaster_Transceive('F');
    4bfa:	86 e4       	ldi	r24, 0x46	; 70
    4bfc:	ca cf       	rjmp	.-108    	; 0x4b92 <APP_FAN_void_AppFanReadWithoutWrite+0x9c>

00004bfe <APP_DEVICES_void_AppGetAnyDeviceOn>:
 * RETURN      : No Return
 * **********************************************************************
 **/
void APP_DEVICES_void_AppGetAnyDeviceOn(void)
{
	HAL_LCD_u8_ClearFullScreen();
    4bfe:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <HAL_LCD_u8_ClearFullScreen>
	HAL_LCD_u8_GoTo(0,0);
    4c02:	80 e0       	ldi	r24, 0x00	; 0
    4c04:	60 e0       	ldi	r22, 0x00	; 0
    4c06:	0e 94 b3 11 	call	0x2366	; 0x2366 <HAL_LCD_u8_GoTo>
	if(G_DeviceOneFlag == ON)
    4c0a:	80 91 65 03 	lds	r24, 0x0365
    4c0e:	81 30       	cpi	r24, 0x01	; 1
    4c10:	09 f4       	brne	.+2      	; 0x4c14 <APP_DEVICES_void_AppGetAnyDeviceOn+0x16>
    4c12:	c6 c0       	rjmp	.+396    	; 0x4da0 <APP_DEVICES_void_AppGetAnyDeviceOn+0x1a2>
	{
		HAL_LCD_u8_WriteString("Device 1");
		G_flag++;
	}
	if(G_DeviceTwoFlag == ON)
    4c14:	80 91 61 03 	lds	r24, 0x0361
    4c18:	81 30       	cpi	r24, 0x01	; 1
    4c1a:	09 f4       	brne	.+2      	; 0x4c1e <APP_DEVICES_void_AppGetAnyDeviceOn+0x20>
    4c1c:	81 c0       	rjmp	.+258    	; 0x4d20 <APP_DEVICES_void_AppGetAnyDeviceOn+0x122>
		{
			HAL_LCD_u8_WriteString("&2");
			G_flag++;
		}
	}
	if(G_DeviceThreeFlag == ON)
    4c1e:	80 91 5f 03 	lds	r24, 0x035F
    4c22:	81 30       	cpi	r24, 0x01	; 1
    4c24:	09 f4       	brne	.+2      	; 0x4c28 <APP_DEVICES_void_AppGetAnyDeviceOn+0x2a>
    4c26:	6e c0       	rjmp	.+220    	; 0x4d04 <APP_DEVICES_void_AppGetAnyDeviceOn+0x106>
		{
			HAL_LCD_u8_WriteString("&3");
			G_flag++;
		}
	}
	if(G_DeviceFourFlag == ON)
    4c28:	80 91 68 03 	lds	r24, 0x0368
    4c2c:	81 30       	cpi	r24, 0x01	; 1
    4c2e:	09 f4       	brne	.+2      	; 0x4c32 <APP_DEVICES_void_AppGetAnyDeviceOn+0x34>
    4c30:	5b c0       	rjmp	.+182    	; 0x4ce8 <APP_DEVICES_void_AppGetAnyDeviceOn+0xea>
		{
			HAL_LCD_u8_WriteString("&4");
			G_flag++;
		}
	}
	if(G_DeviceFiveFlag == ON)
    4c32:	80 91 5e 03 	lds	r24, 0x035E
    4c36:	81 30       	cpi	r24, 0x01	; 1
    4c38:	09 f4       	brne	.+2      	; 0x4c3c <APP_DEVICES_void_AppGetAnyDeviceOn+0x3e>
    4c3a:	47 c0       	rjmp	.+142    	; 0x4cca <APP_DEVICES_void_AppGetAnyDeviceOn+0xcc>
		{
			HAL_LCD_u8_WriteString("&5");
			G_flag++;
		}
	}
	if(G_FanFlag == ON)
    4c3c:	80 91 63 03 	lds	r24, 0x0363
    4c40:	81 30       	cpi	r24, 0x01	; 1
    4c42:	09 f1       	breq	.+66     	; 0x4c86 <APP_DEVICES_void_AppGetAnyDeviceOn+0x88>
		{
			HAL_LCD_u8_WriteString("&Fan");
			G_flag++;
		}
	}
	if(G_flag == OFF)
    4c44:	80 91 67 03 	lds	r24, 0x0367
    4c48:	88 23       	and	r24, r24
    4c4a:	79 f1       	breq	.+94     	; 0x4caa <APP_DEVICES_void_AppGetAnyDeviceOn+0xac>
		HAL_LCD_u8_GoTo(0,0);
		HAL_LCD_u8_WriteString("All Devices");
		HAL_LCD_u8_GoTo(1,0);
		HAL_LCD_u8_WriteString("are OFF");
	}
	else if(G_flag == ON)
    4c4c:	80 91 67 03 	lds	r24, 0x0367
    4c50:	81 30       	cpi	r24, 0x01	; 1
    4c52:	09 f4       	brne	.+2      	; 0x4c56 <APP_DEVICES_void_AppGetAnyDeviceOn+0x58>
    4c54:	af c0       	rjmp	.+350    	; 0x4db4 <APP_DEVICES_void_AppGetAnyDeviceOn+0x1b6>
	{
		HAL_LCD_u8_GoTo(1,0);
		HAL_LCD_u8_WriteString("is ON");
		G_flag = OFF;
	}
	else if(G_flag <= SIX)
    4c56:	80 91 67 03 	lds	r24, 0x0367
    4c5a:	87 30       	cpi	r24, 0x07	; 7
    4c5c:	48 f0       	brcs	.+18     	; 0x4c70 <APP_DEVICES_void_AppGetAnyDeviceOn+0x72>
	{
		HAL_LCD_u8_GoTo(1,0);
		HAL_LCD_u8_WriteString("are ON");
		G_flag = OFF;
	}
	HAL_LCD_u8_GoTo(3,0);
    4c5e:	83 e0       	ldi	r24, 0x03	; 3
    4c60:	60 e0       	ldi	r22, 0x00	; 0
    4c62:	0e 94 b3 11 	call	0x2366	; 0x2366 <HAL_LCD_u8_GoTo>
	HAL_LCD_u8_WriteString("0.Logout");
    4c66:	81 e1       	ldi	r24, 0x11	; 17
    4c68:	91 e0       	ldi	r25, 0x01	; 1
    4c6a:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <HAL_LCD_u8_WriteString>
}
    4c6e:	08 95       	ret
		HAL_LCD_u8_WriteString("is ON");
		G_flag = OFF;
	}
	else if(G_flag <= SIX)
	{
		HAL_LCD_u8_GoTo(1,0);
    4c70:	81 e0       	ldi	r24, 0x01	; 1
    4c72:	60 e0       	ldi	r22, 0x00	; 0
    4c74:	0e 94 b3 11 	call	0x2366	; 0x2366 <HAL_LCD_u8_GoTo>
		HAL_LCD_u8_WriteString("are ON");
    4c78:	8a e0       	ldi	r24, 0x0A	; 10
    4c7a:	91 e0       	ldi	r25, 0x01	; 1
    4c7c:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <HAL_LCD_u8_WriteString>
		G_flag = OFF;
    4c80:	10 92 67 03 	sts	0x0367, r1
    4c84:	ec cf       	rjmp	.-40     	; 0x4c5e <APP_DEVICES_void_AppGetAnyDeviceOn+0x60>
			G_flag++;
		}
	}
	if(G_FanFlag == ON)
	{
		if(G_flag == OFF)
    4c86:	80 91 67 03 	lds	r24, 0x0367
    4c8a:	88 23       	and	r24, r24
    4c8c:	09 f0       	breq	.+2      	; 0x4c90 <APP_DEVICES_void_AppGetAnyDeviceOn+0x92>
    4c8e:	7e c0       	rjmp	.+252    	; 0x4d8c <APP_DEVICES_void_AppGetAnyDeviceOn+0x18e>
		{
			HAL_LCD_u8_WriteString("Fan");
    4c90:	87 ee       	ldi	r24, 0xE7	; 231
    4c92:	90 e0       	ldi	r25, 0x00	; 0
    4c94:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <HAL_LCD_u8_WriteString>
			G_flag++;
    4c98:	80 91 67 03 	lds	r24, 0x0367
    4c9c:	8f 5f       	subi	r24, 0xFF	; 255
    4c9e:	80 93 67 03 	sts	0x0367, r24
		{
			HAL_LCD_u8_WriteString("&Fan");
			G_flag++;
		}
	}
	if(G_flag == OFF)
    4ca2:	80 91 67 03 	lds	r24, 0x0367
    4ca6:	88 23       	and	r24, r24
    4ca8:	89 f6       	brne	.-94     	; 0x4c4c <APP_DEVICES_void_AppGetAnyDeviceOn+0x4e>
	{
		HAL_LCD_u8_GoTo(0,0);
    4caa:	60 e0       	ldi	r22, 0x00	; 0
    4cac:	0e 94 b3 11 	call	0x2366	; 0x2366 <HAL_LCD_u8_GoTo>
		HAL_LCD_u8_WriteString("All Devices");
    4cb0:	80 ef       	ldi	r24, 0xF0	; 240
    4cb2:	90 e0       	ldi	r25, 0x00	; 0
    4cb4:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <HAL_LCD_u8_WriteString>
		HAL_LCD_u8_GoTo(1,0);
    4cb8:	81 e0       	ldi	r24, 0x01	; 1
    4cba:	60 e0       	ldi	r22, 0x00	; 0
    4cbc:	0e 94 b3 11 	call	0x2366	; 0x2366 <HAL_LCD_u8_GoTo>
		HAL_LCD_u8_WriteString("are OFF");
    4cc0:	8c ef       	ldi	r24, 0xFC	; 252
    4cc2:	90 e0       	ldi	r25, 0x00	; 0
    4cc4:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <HAL_LCD_u8_WriteString>
    4cc8:	ca cf       	rjmp	.-108    	; 0x4c5e <APP_DEVICES_void_AppGetAnyDeviceOn+0x60>
			G_flag++;
		}
	}
	if(G_DeviceFiveFlag == ON)
	{
		if(G_flag == OFF)
    4cca:	80 91 67 03 	lds	r24, 0x0367
    4cce:	88 23       	and	r24, r24
    4cd0:	09 f0       	breq	.+2      	; 0x4cd4 <APP_DEVICES_void_AppGetAnyDeviceOn+0xd6>
    4cd2:	52 c0       	rjmp	.+164    	; 0x4d78 <APP_DEVICES_void_AppGetAnyDeviceOn+0x17a>
		{
			HAL_LCD_u8_WriteString("Device 5");
    4cd4:	8b ed       	ldi	r24, 0xDB	; 219
    4cd6:	90 e0       	ldi	r25, 0x00	; 0
    4cd8:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <HAL_LCD_u8_WriteString>
			G_flag++;
    4cdc:	80 91 67 03 	lds	r24, 0x0367
    4ce0:	8f 5f       	subi	r24, 0xFF	; 255
    4ce2:	80 93 67 03 	sts	0x0367, r24
    4ce6:	aa cf       	rjmp	.-172    	; 0x4c3c <APP_DEVICES_void_AppGetAnyDeviceOn+0x3e>
			G_flag++;
		}
	}
	if(G_DeviceFourFlag == ON)
	{
		if(G_flag == OFF)
    4ce8:	80 91 67 03 	lds	r24, 0x0367
    4cec:	88 23       	and	r24, r24
    4cee:	d1 f5       	brne	.+116    	; 0x4d64 <APP_DEVICES_void_AppGetAnyDeviceOn+0x166>
		{
			HAL_LCD_u8_WriteString("Device 4");
    4cf0:	8f ec       	ldi	r24, 0xCF	; 207
    4cf2:	90 e0       	ldi	r25, 0x00	; 0
    4cf4:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <HAL_LCD_u8_WriteString>
			G_flag++;
    4cf8:	80 91 67 03 	lds	r24, 0x0367
    4cfc:	8f 5f       	subi	r24, 0xFF	; 255
    4cfe:	80 93 67 03 	sts	0x0367, r24
    4d02:	97 cf       	rjmp	.-210    	; 0x4c32 <APP_DEVICES_void_AppGetAnyDeviceOn+0x34>
			G_flag++;
		}
	}
	if(G_DeviceThreeFlag == ON)
	{
		if(G_flag == OFF)
    4d04:	80 91 67 03 	lds	r24, 0x0367
    4d08:	88 23       	and	r24, r24
    4d0a:	11 f5       	brne	.+68     	; 0x4d50 <APP_DEVICES_void_AppGetAnyDeviceOn+0x152>
		{
			HAL_LCD_u8_WriteString("Device 3");
    4d0c:	83 ec       	ldi	r24, 0xC3	; 195
    4d0e:	90 e0       	ldi	r25, 0x00	; 0
    4d10:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <HAL_LCD_u8_WriteString>
			G_flag++;
    4d14:	80 91 67 03 	lds	r24, 0x0367
    4d18:	8f 5f       	subi	r24, 0xFF	; 255
    4d1a:	80 93 67 03 	sts	0x0367, r24
    4d1e:	84 cf       	rjmp	.-248    	; 0x4c28 <APP_DEVICES_void_AppGetAnyDeviceOn+0x2a>
		HAL_LCD_u8_WriteString("Device 1");
		G_flag++;
	}
	if(G_DeviceTwoFlag == ON)
	{
		if(G_flag == OFF)
    4d20:	80 91 67 03 	lds	r24, 0x0367
    4d24:	88 23       	and	r24, r24
    4d26:	51 f4       	brne	.+20     	; 0x4d3c <APP_DEVICES_void_AppGetAnyDeviceOn+0x13e>
		{
			HAL_LCD_u8_WriteString("Device 2");
    4d28:	87 eb       	ldi	r24, 0xB7	; 183
    4d2a:	90 e0       	ldi	r25, 0x00	; 0
    4d2c:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <HAL_LCD_u8_WriteString>
			G_flag++;
    4d30:	80 91 67 03 	lds	r24, 0x0367
    4d34:	8f 5f       	subi	r24, 0xFF	; 255
    4d36:	80 93 67 03 	sts	0x0367, r24
    4d3a:	71 cf       	rjmp	.-286    	; 0x4c1e <APP_DEVICES_void_AppGetAnyDeviceOn+0x20>
		}
		else
		{
			HAL_LCD_u8_WriteString("&2");
    4d3c:	80 ec       	ldi	r24, 0xC0	; 192
    4d3e:	90 e0       	ldi	r25, 0x00	; 0
    4d40:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <HAL_LCD_u8_WriteString>
			G_flag++;
    4d44:	80 91 67 03 	lds	r24, 0x0367
    4d48:	8f 5f       	subi	r24, 0xFF	; 255
    4d4a:	80 93 67 03 	sts	0x0367, r24
    4d4e:	67 cf       	rjmp	.-306    	; 0x4c1e <APP_DEVICES_void_AppGetAnyDeviceOn+0x20>
			HAL_LCD_u8_WriteString("Device 3");
			G_flag++;
		}
		else
		{
			HAL_LCD_u8_WriteString("&3");
    4d50:	8c ec       	ldi	r24, 0xCC	; 204
    4d52:	90 e0       	ldi	r25, 0x00	; 0
    4d54:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <HAL_LCD_u8_WriteString>
			G_flag++;
    4d58:	80 91 67 03 	lds	r24, 0x0367
    4d5c:	8f 5f       	subi	r24, 0xFF	; 255
    4d5e:	80 93 67 03 	sts	0x0367, r24
    4d62:	62 cf       	rjmp	.-316    	; 0x4c28 <APP_DEVICES_void_AppGetAnyDeviceOn+0x2a>
			HAL_LCD_u8_WriteString("Device 4");
			G_flag++;
		}
		else
		{
			HAL_LCD_u8_WriteString("&4");
    4d64:	88 ed       	ldi	r24, 0xD8	; 216
    4d66:	90 e0       	ldi	r25, 0x00	; 0
    4d68:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <HAL_LCD_u8_WriteString>
			G_flag++;
    4d6c:	80 91 67 03 	lds	r24, 0x0367
    4d70:	8f 5f       	subi	r24, 0xFF	; 255
    4d72:	80 93 67 03 	sts	0x0367, r24
    4d76:	5d cf       	rjmp	.-326    	; 0x4c32 <APP_DEVICES_void_AppGetAnyDeviceOn+0x34>
			HAL_LCD_u8_WriteString("Device 5");
			G_flag++;
		}
		else
		{
			HAL_LCD_u8_WriteString("&5");
    4d78:	84 ee       	ldi	r24, 0xE4	; 228
    4d7a:	90 e0       	ldi	r25, 0x00	; 0
    4d7c:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <HAL_LCD_u8_WriteString>
			G_flag++;
    4d80:	80 91 67 03 	lds	r24, 0x0367
    4d84:	8f 5f       	subi	r24, 0xFF	; 255
    4d86:	80 93 67 03 	sts	0x0367, r24
    4d8a:	58 cf       	rjmp	.-336    	; 0x4c3c <APP_DEVICES_void_AppGetAnyDeviceOn+0x3e>
			HAL_LCD_u8_WriteString("Fan");
			G_flag++;
		}
		else
		{
			HAL_LCD_u8_WriteString("&Fan");
    4d8c:	8b ee       	ldi	r24, 0xEB	; 235
    4d8e:	90 e0       	ldi	r25, 0x00	; 0
    4d90:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <HAL_LCD_u8_WriteString>
			G_flag++;
    4d94:	80 91 67 03 	lds	r24, 0x0367
    4d98:	8f 5f       	subi	r24, 0xFF	; 255
    4d9a:	80 93 67 03 	sts	0x0367, r24
    4d9e:	52 cf       	rjmp	.-348    	; 0x4c44 <APP_DEVICES_void_AppGetAnyDeviceOn+0x46>
{
	HAL_LCD_u8_ClearFullScreen();
	HAL_LCD_u8_GoTo(0,0);
	if(G_DeviceOneFlag == ON)
	{
		HAL_LCD_u8_WriteString("Device 1");
    4da0:	8e ea       	ldi	r24, 0xAE	; 174
    4da2:	90 e0       	ldi	r25, 0x00	; 0
    4da4:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <HAL_LCD_u8_WriteString>
		G_flag++;
    4da8:	80 91 67 03 	lds	r24, 0x0367
    4dac:	8f 5f       	subi	r24, 0xFF	; 255
    4dae:	80 93 67 03 	sts	0x0367, r24
    4db2:	30 cf       	rjmp	.-416    	; 0x4c14 <APP_DEVICES_void_AppGetAnyDeviceOn+0x16>
		HAL_LCD_u8_GoTo(1,0);
		HAL_LCD_u8_WriteString("are OFF");
	}
	else if(G_flag == ON)
	{
		HAL_LCD_u8_GoTo(1,0);
    4db4:	60 e0       	ldi	r22, 0x00	; 0
    4db6:	0e 94 b3 11 	call	0x2366	; 0x2366 <HAL_LCD_u8_GoTo>
		HAL_LCD_u8_WriteString("is ON");
    4dba:	84 e0       	ldi	r24, 0x04	; 4
    4dbc:	91 e0       	ldi	r25, 0x01	; 1
    4dbe:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <HAL_LCD_u8_WriteString>
		G_flag = OFF;
    4dc2:	10 92 67 03 	sts	0x0367, r1
    4dc6:	4b cf       	rjmp	.-362    	; 0x4c5e <APP_DEVICES_void_AppGetAnyDeviceOn+0x60>

00004dc8 <APP_void_AppHomePage>:
 * INPUT Arg   : No Args
 * RETURN      : No Return
 * **********************************************************************
 **/
void APP_void_AppHomePage(void)
{
    4dc8:	ff 92       	push	r15
    4dca:	0f 93       	push	r16
    4dcc:	1f 93       	push	r17
    4dce:	cf 93       	push	r28
    4dd0:	df 93       	push	r29
    4dd2:	c8 ec       	ldi	r28, 0xC8	; 200
    4dd4:	d0 e0       	ldi	r29, 0x00	; 0
	u8 Loc_u8_counter = 0;
	while(1)
	{
		if((G_Keypad_Value == 0) && (G_LogoutFlag == 0))
    4dd6:	80 91 60 03 	lds	r24, 0x0360
    4dda:	88 23       	and	r24, r24
    4ddc:	29 f4       	brne	.+10     	; 0x4de8 <APP_void_AppHomePage+0x20>
    4dde:	80 91 62 03 	lds	r24, 0x0362
    4de2:	88 23       	and	r24, r24
    4de4:	09 f4       	brne	.+2      	; 0x4de8 <APP_void_AppHomePage+0x20>
    4de6:	4d c0       	rjmp	.+154    	; 0x4e82 <APP_void_AppHomePage+0xba>
				_delay_ms(5);
			}
			G_RunningDevicesIndicator = 1;
			break;
		}
		else if (G_Keypad_Value == 0)
    4de8:	80 91 60 03 	lds	r24, 0x0360
    4dec:	88 23       	and	r24, r24
    4dee:	09 f4       	brne	.+2      	; 0x4df2 <APP_void_AppHomePage+0x2a>
    4df0:	72 c0       	rjmp	.+228    	; 0x4ed6 <APP_void_AppHomePage+0x10e>
		{
			break;
		}
		HAL_LCD_u8_ClearFullScreen();
    4df2:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <HAL_LCD_u8_ClearFullScreen>
		HAL_LCD_u8_GoTo(0,0);
    4df6:	80 e0       	ldi	r24, 0x00	; 0
    4df8:	60 e0       	ldi	r22, 0x00	; 0
    4dfa:	0e 94 b3 11 	call	0x2366	; 0x2366 <HAL_LCD_u8_GoTo>
		HAL_LCD_u8_WriteString("1.Devices");
    4dfe:	86 e2       	ldi	r24, 0x26	; 38
    4e00:	91 e0       	ldi	r25, 0x01	; 1
    4e02:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <HAL_LCD_u8_WriteString>
		HAL_LCD_u8_GoTo(1,0);
    4e06:	81 e0       	ldi	r24, 0x01	; 1
    4e08:	60 e0       	ldi	r22, 0x00	; 0
    4e0a:	0e 94 b3 11 	call	0x2366	; 0x2366 <HAL_LCD_u8_GoTo>
		HAL_LCD_u8_WriteString("2.Temperature");
    4e0e:	80 e3       	ldi	r24, 0x30	; 48
    4e10:	91 e0       	ldi	r25, 0x01	; 1
    4e12:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <HAL_LCD_u8_WriteString>
		HAL_LCD_u8_GoTo(3,0);
    4e16:	83 e0       	ldi	r24, 0x03	; 3
    4e18:	60 e0       	ldi	r22, 0x00	; 0
    4e1a:	0e 94 b3 11 	call	0x2366	; 0x2366 <HAL_LCD_u8_GoTo>
		HAL_LCD_u8_WriteString("0.Logout");
    4e1e:	81 e1       	ldi	r24, 0x11	; 17
    4e20:	91 e0       	ldi	r25, 0x01	; 1
    4e22:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <HAL_LCD_u8_WriteString>
		HAL_KEYPAD_u8_KaypadButton(&G_Keypad_Value);
    4e26:	80 e6       	ldi	r24, 0x60	; 96
    4e28:	93 e0       	ldi	r25, 0x03	; 3
    4e2a:	0e 94 96 14 	call	0x292c	; 0x292c <HAL_KEYPAD_u8_KaypadButton>
		if(G_Keypad_Value == 1)
    4e2e:	80 91 60 03 	lds	r24, 0x0360
    4e32:	81 30       	cpi	r24, 0x01	; 1
    4e34:	01 f1       	breq	.+64     	; 0x4e76 <APP_void_AppHomePage+0xae>
		{
			APP_void_AppGetDeviceID();
		}
		else if(G_Keypad_Value == 2)
    4e36:	80 91 60 03 	lds	r24, 0x0360
    4e3a:	82 30       	cpi	r24, 0x02	; 2
    4e3c:	f9 f0       	breq	.+62     	; 0x4e7c <APP_void_AppHomePage+0xb4>
		{
			APP_TEMP_void_ApptemperaturePage();
		}
		else if(G_Keypad_Value == 0)
    4e3e:	80 91 60 03 	lds	r24, 0x0360
    4e42:	88 23       	and	r24, r24
    4e44:	f1 f0       	breq	.+60     	; 0x4e82 <APP_void_AppHomePage+0xba>
			G_RunningDevicesIndicator = 1;
			break;
		}
		else
		{
			HAL_LCD_u8_ClearFullScreen();
    4e46:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <HAL_LCD_u8_ClearFullScreen>
			HAL_LCD_u8_GoTo(0,0);
    4e4a:	80 e0       	ldi	r24, 0x00	; 0
    4e4c:	60 e0       	ldi	r22, 0x00	; 0
    4e4e:	0e 94 b3 11 	call	0x2366	; 0x2366 <HAL_LCD_u8_GoTo>
			HAL_LCD_u8_WriteString("Wrong Choice");
    4e52:	8e e3       	ldi	r24, 0x3E	; 62
    4e54:	91 e0       	ldi	r25, 0x01	; 1
    4e56:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <HAL_LCD_u8_WriteString>
    4e5a:	20 e0       	ldi	r18, 0x00	; 0
    4e5c:	30 e0       	ldi	r19, 0x00	; 0
    4e5e:	ce 01       	movw	r24, r28
    4e60:	01 97       	sbiw	r24, 0x01	; 1
    4e62:	f1 f7       	brne	.-4      	; 0x4e60 <APP_void_AppHomePage+0x98>
    4e64:	2f 5f       	subi	r18, 0xFF	; 255
    4e66:	3f 4f       	sbci	r19, 0xFF	; 255
    4e68:	87 e2       	ldi	r24, 0x27	; 39
    4e6a:	20 31       	cpi	r18, 0x10	; 16
    4e6c:	38 07       	cpc	r19, r24
    4e6e:	b9 f7       	brne	.-18     	; 0x4e5e <APP_void_AppHomePage+0x96>
			_delay_ms(1000);
			APP_void_AppHomePage();
    4e70:	0e 94 e4 26 	call	0x4dc8	; 0x4dc8 <APP_void_AppHomePage>
    4e74:	b0 cf       	rjmp	.-160    	; 0x4dd6 <APP_void_AppHomePage+0xe>
		HAL_LCD_u8_GoTo(3,0);
		HAL_LCD_u8_WriteString("0.Logout");
		HAL_KEYPAD_u8_KaypadButton(&G_Keypad_Value);
		if(G_Keypad_Value == 1)
		{
			APP_void_AppGetDeviceID();
    4e76:	0e 94 95 2b 	call	0x572a	; 0x572a <APP_void_AppGetDeviceID>
    4e7a:	ad cf       	rjmp	.-166    	; 0x4dd6 <APP_void_AppHomePage+0xe>
		}
		else if(G_Keypad_Value == 2)
		{
			APP_TEMP_void_ApptemperaturePage();
    4e7c:	0e 94 d9 27 	call	0x4fb2	; 0x4fb2 <APP_TEMP_void_ApptemperaturePage>
    4e80:	aa cf       	rjmp	.-172    	; 0x4dd6 <APP_void_AppHomePage+0xe>
		}
		else if(G_Keypad_Value == 0)
		{
			G_LogoutFlag = 1;
    4e82:	ff 24       	eor	r15, r15
    4e84:	f3 94       	inc	r15
    4e86:	f0 92 62 03 	sts	0x0362, r15
			HAL_LCD_u8_ClearFullScreen();
    4e8a:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <HAL_LCD_u8_ClearFullScreen>
			HAL_LCD_u8_GoTo(0,0);
    4e8e:	80 e0       	ldi	r24, 0x00	; 0
    4e90:	60 e0       	ldi	r22, 0x00	; 0
    4e92:	0e 94 b3 11 	call	0x2366	; 0x2366 <HAL_LCD_u8_GoTo>
			HAL_LCD_u8_WriteString("Logging Out");
    4e96:	8a e1       	ldi	r24, 0x1A	; 26
    4e98:	91 e0       	ldi	r25, 0x01	; 1
    4e9a:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <HAL_LCD_u8_WriteString>
			for(Loc_u8_counter = 0; Loc_u8_counter <= 3; Loc_u8_counter++)
			{
				HAL_LCD_u8_WriteCharacter('.');
    4e9e:	8e e2       	ldi	r24, 0x2E	; 46
    4ea0:	0e 94 75 10 	call	0x20ea	; 0x20ea <HAL_LCD_u8_WriteCharacter>
    4ea4:	00 e1       	ldi	r16, 0x10	; 16
    4ea6:	17 e2       	ldi	r17, 0x27	; 39
    4ea8:	c8 01       	movw	r24, r16
    4eaa:	01 97       	sbiw	r24, 0x01	; 1
    4eac:	f1 f7       	brne	.-4      	; 0x4eaa <APP_void_AppHomePage+0xe2>
    4eae:	8e e2       	ldi	r24, 0x2E	; 46
    4eb0:	0e 94 75 10 	call	0x20ea	; 0x20ea <HAL_LCD_u8_WriteCharacter>
    4eb4:	c8 01       	movw	r24, r16
    4eb6:	01 97       	sbiw	r24, 0x01	; 1
    4eb8:	f1 f7       	brne	.-4      	; 0x4eb6 <APP_void_AppHomePage+0xee>
    4eba:	8e e2       	ldi	r24, 0x2E	; 46
    4ebc:	0e 94 75 10 	call	0x20ea	; 0x20ea <HAL_LCD_u8_WriteCharacter>
    4ec0:	c8 01       	movw	r24, r16
    4ec2:	01 97       	sbiw	r24, 0x01	; 1
    4ec4:	f1 f7       	brne	.-4      	; 0x4ec2 <APP_void_AppHomePage+0xfa>
    4ec6:	8e e2       	ldi	r24, 0x2E	; 46
    4ec8:	0e 94 75 10 	call	0x20ea	; 0x20ea <HAL_LCD_u8_WriteCharacter>
    4ecc:	c8 01       	movw	r24, r16
    4ece:	01 97       	sbiw	r24, 0x01	; 1
    4ed0:	f1 f7       	brne	.-4      	; 0x4ece <APP_void_AppHomePage+0x106>
				_delay_ms(5);
			}
			G_RunningDevicesIndicator = 1;
    4ed2:	f0 92 59 03 	sts	0x0359, r15
			HAL_LCD_u8_WriteString("Wrong Choice");
			_delay_ms(1000);
			APP_void_AppHomePage();
		}
	}
}
    4ed6:	df 91       	pop	r29
    4ed8:	cf 91       	pop	r28
    4eda:	1f 91       	pop	r17
    4edc:	0f 91       	pop	r16
    4ede:	ff 90       	pop	r15
    4ee0:	08 95       	ret

00004ee2 <APP_TEMP_void_AppDisplayTemperature>:
		APP_TEMP_void_ApptemperaturePage();
	}
}

void APP_TEMP_void_AppDisplayTemperature()
{
    4ee2:	ef 92       	push	r14
    4ee4:	ff 92       	push	r15
    4ee6:	0f 93       	push	r16
    4ee8:	1f 93       	push	r17
    4eea:	cf 93       	push	r28
    4eec:	df 93       	push	r29
    4eee:	c8 ec       	ldi	r28, 0xC8	; 200
    4ef0:	d0 e0       	ldi	r29, 0x00	; 0
	u8 Value = LM35_Read();
    4ef2:	0e 94 56 0e 	call	0x1cac	; 0x1cac <LM35_Read>
    4ef6:	e8 2e       	mov	r14, r24
	HAL_LCD_u8_ClearFullScreen();
    4ef8:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <HAL_LCD_u8_ClearFullScreen>
	HAL_LCD_u8_WriteString("Temperature is:");
    4efc:	8b e4       	ldi	r24, 0x4B	; 75
    4efe:	91 e0       	ldi	r25, 0x01	; 1
    4f00:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <HAL_LCD_u8_WriteString>
	HAL_LCD_u8_WriteNumber(Value);
    4f04:	ff 24       	eor	r15, r15
    4f06:	00 e0       	ldi	r16, 0x00	; 0
    4f08:	10 e0       	ldi	r17, 0x00	; 0
    4f0a:	c8 01       	movw	r24, r16
    4f0c:	b7 01       	movw	r22, r14
    4f0e:	0e 94 78 10 	call	0x20f0	; 0x20f0 <HAL_LCD_u8_WriteNumber>
	HAL_LCD_u8_GoTo(2,0);
    4f12:	82 e0       	ldi	r24, 0x02	; 2
    4f14:	60 e0       	ldi	r22, 0x00	; 0
    4f16:	0e 94 b3 11 	call	0x2366	; 0x2366 <HAL_LCD_u8_GoTo>
	HAL_LCD_u8_WriteString("0.Logout");
    4f1a:	81 e1       	ldi	r24, 0x11	; 17
    4f1c:	91 e0       	ldi	r25, 0x01	; 1
    4f1e:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <HAL_LCD_u8_WriteString>
	HAL_LCD_u8_GoTo(2,10);
    4f22:	82 e0       	ldi	r24, 0x02	; 2
    4f24:	6a e0       	ldi	r22, 0x0A	; 10
    4f26:	0e 94 b3 11 	call	0x2366	; 0x2366 <HAL_LCD_u8_GoTo>
	HAL_LCD_u8_WriteString("7.BACK");
    4f2a:	8b e5       	ldi	r24, 0x5B	; 91
    4f2c:	91 e0       	ldi	r25, 0x01	; 1
    4f2e:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <HAL_LCD_u8_WriteString>
	HAL_LCD_u8_GoTo(3,0);
    4f32:	83 e0       	ldi	r24, 0x03	; 3
    4f34:	60 e0       	ldi	r22, 0x00	; 0
    4f36:	0e 94 b3 11 	call	0x2366	; 0x2366 <HAL_LCD_u8_GoTo>
	HAL_LCD_u8_WriteString("8.HOME");
    4f3a:	82 e6       	ldi	r24, 0x62	; 98
    4f3c:	91 e0       	ldi	r25, 0x01	; 1
    4f3e:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <HAL_LCD_u8_WriteString>
	HAL_KEYPAD_u8_KaypadButton(&G_Keypad_Value);
    4f42:	80 e6       	ldi	r24, 0x60	; 96
    4f44:	93 e0       	ldi	r25, 0x03	; 3
    4f46:	0e 94 96 14 	call	0x292c	; 0x292c <HAL_KEYPAD_u8_KaypadButton>
	if(G_Keypad_Value == 8)
    4f4a:	80 91 60 03 	lds	r24, 0x0360
    4f4e:	88 30       	cpi	r24, 0x08	; 8
    4f50:	f1 f0       	breq	.+60     	; 0x4f8e <APP_TEMP_void_AppDisplayTemperature+0xac>
	{
		APP_void_AppHomePage();
	}
	else if (G_Keypad_Value == 7)
    4f52:	80 91 60 03 	lds	r24, 0x0360
    4f56:	87 30       	cpi	r24, 0x07	; 7
    4f58:	19 f1       	breq	.+70     	; 0x4fa0 <APP_TEMP_void_AppDisplayTemperature+0xbe>
	{
		APP_TEMP_void_ApptemperaturePage();
	}
	else if (G_Keypad_Value == 0)
    4f5a:	80 91 60 03 	lds	r24, 0x0360
    4f5e:	88 23       	and	r24, r24
    4f60:	c1 f0       	breq	.+48     	; 0x4f92 <APP_TEMP_void_AppDisplayTemperature+0xb0>
	{
		return;
	}
	else
	{
		HAL_LCD_u8_ClearFullScreen();
    4f62:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <HAL_LCD_u8_ClearFullScreen>
		HAL_LCD_u8_GoTo(0,0);
    4f66:	80 e0       	ldi	r24, 0x00	; 0
    4f68:	60 e0       	ldi	r22, 0x00	; 0
    4f6a:	0e 94 b3 11 	call	0x2366	; 0x2366 <HAL_LCD_u8_GoTo>
		HAL_LCD_u8_WriteString("Wrong Choice");
    4f6e:	8e e3       	ldi	r24, 0x3E	; 62
    4f70:	91 e0       	ldi	r25, 0x01	; 1
    4f72:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <HAL_LCD_u8_WriteString>
    4f76:	20 e0       	ldi	r18, 0x00	; 0
    4f78:	30 e0       	ldi	r19, 0x00	; 0
    4f7a:	ce 01       	movw	r24, r28
    4f7c:	01 97       	sbiw	r24, 0x01	; 1
    4f7e:	f1 f7       	brne	.-4      	; 0x4f7c <APP_TEMP_void_AppDisplayTemperature+0x9a>
    4f80:	2f 5f       	subi	r18, 0xFF	; 255
    4f82:	3f 4f       	sbci	r19, 0xFF	; 255
    4f84:	87 e2       	ldi	r24, 0x27	; 39
    4f86:	20 31       	cpi	r18, 0x10	; 16
    4f88:	38 07       	cpc	r19, r24
    4f8a:	b9 f7       	brne	.-18     	; 0x4f7a <APP_TEMP_void_AppDisplayTemperature+0x98>
    4f8c:	b2 cf       	rjmp	.-156    	; 0x4ef2 <APP_TEMP_void_AppDisplayTemperature+0x10>
	HAL_LCD_u8_GoTo(3,0);
	HAL_LCD_u8_WriteString("8.HOME");
	HAL_KEYPAD_u8_KaypadButton(&G_Keypad_Value);
	if(G_Keypad_Value == 8)
	{
		APP_void_AppHomePage();
    4f8e:	0e 94 e4 26 	call	0x4dc8	; 0x4dc8 <APP_void_AppHomePage>
		HAL_LCD_u8_GoTo(0,0);
		HAL_LCD_u8_WriteString("Wrong Choice");
		_delay_ms(1000);
		APP_TEMP_void_AppDisplayTemperature();
	}
}
    4f92:	df 91       	pop	r29
    4f94:	cf 91       	pop	r28
    4f96:	1f 91       	pop	r17
    4f98:	0f 91       	pop	r16
    4f9a:	ff 90       	pop	r15
    4f9c:	ef 90       	pop	r14
    4f9e:	08 95       	ret
	{
		APP_void_AppHomePage();
	}
	else if (G_Keypad_Value == 7)
	{
		APP_TEMP_void_ApptemperaturePage();
    4fa0:	0e 94 d9 27 	call	0x4fb2	; 0x4fb2 <APP_TEMP_void_ApptemperaturePage>
		HAL_LCD_u8_GoTo(0,0);
		HAL_LCD_u8_WriteString("Wrong Choice");
		_delay_ms(1000);
		APP_TEMP_void_AppDisplayTemperature();
	}
}
    4fa4:	df 91       	pop	r29
    4fa6:	cf 91       	pop	r28
    4fa8:	1f 91       	pop	r17
    4faa:	0f 91       	pop	r16
    4fac:	ff 90       	pop	r15
    4fae:	ef 90       	pop	r14
    4fb0:	08 95       	ret

00004fb2 <APP_TEMP_void_ApptemperaturePage>:
 * INPUT Arg   : No Args
 * RETURN      : No Return
 * **********************************************************************
 **/
void APP_TEMP_void_ApptemperaturePage()
{
    4fb2:	cf 93       	push	r28
    4fb4:	df 93       	push	r29
    4fb6:	c8 ec       	ldi	r28, 0xC8	; 200
    4fb8:	d0 e0       	ldi	r29, 0x00	; 0
	HAL_LCD_u8_ClearFullScreen();
    4fba:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <HAL_LCD_u8_ClearFullScreen>
	HAL_LCD_u8_GoTo(0,0);
    4fbe:	80 e0       	ldi	r24, 0x00	; 0
    4fc0:	60 e0       	ldi	r22, 0x00	; 0
    4fc2:	0e 94 b3 11 	call	0x2366	; 0x2366 <HAL_LCD_u8_GoTo>
	HAL_LCD_u8_WriteString("1.Temperature");
    4fc6:	89 e6       	ldi	r24, 0x69	; 105
    4fc8:	91 e0       	ldi	r25, 0x01	; 1
    4fca:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <HAL_LCD_u8_WriteString>
	HAL_LCD_u8_GoTo(1,0);
    4fce:	81 e0       	ldi	r24, 0x01	; 1
    4fd0:	60 e0       	ldi	r22, 0x00	; 0
    4fd2:	0e 94 b3 11 	call	0x2366	; 0x2366 <HAL_LCD_u8_GoTo>
	HAL_LCD_u8_WriteString("2.Fan");
    4fd6:	87 e7       	ldi	r24, 0x77	; 119
    4fd8:	91 e0       	ldi	r25, 0x01	; 1
    4fda:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <HAL_LCD_u8_WriteString>
	HAL_LCD_u8_GoTo(2,0);
    4fde:	82 e0       	ldi	r24, 0x02	; 2
    4fe0:	60 e0       	ldi	r22, 0x00	; 0
    4fe2:	0e 94 b3 11 	call	0x2366	; 0x2366 <HAL_LCD_u8_GoTo>
	HAL_LCD_u8_WriteString("0.Logout");
    4fe6:	81 e1       	ldi	r24, 0x11	; 17
    4fe8:	91 e0       	ldi	r25, 0x01	; 1
    4fea:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <HAL_LCD_u8_WriteString>
	HAL_LCD_u8_GoTo(2,10);
    4fee:	82 e0       	ldi	r24, 0x02	; 2
    4ff0:	6a e0       	ldi	r22, 0x0A	; 10
    4ff2:	0e 94 b3 11 	call	0x2366	; 0x2366 <HAL_LCD_u8_GoTo>
	HAL_LCD_u8_WriteString("7.BACK");
    4ff6:	8b e5       	ldi	r24, 0x5B	; 91
    4ff8:	91 e0       	ldi	r25, 0x01	; 1
    4ffa:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <HAL_LCD_u8_WriteString>
	HAL_LCD_u8_GoTo(3,0);
    4ffe:	83 e0       	ldi	r24, 0x03	; 3
    5000:	60 e0       	ldi	r22, 0x00	; 0
    5002:	0e 94 b3 11 	call	0x2366	; 0x2366 <HAL_LCD_u8_GoTo>
	HAL_LCD_u8_WriteString("8.HOME");
    5006:	82 e6       	ldi	r24, 0x62	; 98
    5008:	91 e0       	ldi	r25, 0x01	; 1
    500a:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <HAL_LCD_u8_WriteString>
	HAL_KEYPAD_u8_KaypadButton(&G_Keypad_Value);
    500e:	80 e6       	ldi	r24, 0x60	; 96
    5010:	93 e0       	ldi	r25, 0x03	; 3
    5012:	0e 94 96 14 	call	0x292c	; 0x292c <HAL_KEYPAD_u8_KaypadButton>
	if(G_Keypad_Value == 1)
    5016:	80 91 60 03 	lds	r24, 0x0360
    501a:	81 30       	cpi	r24, 0x01	; 1
    501c:	81 f1       	breq	.+96     	; 0x507e <APP_TEMP_void_ApptemperaturePage+0xcc>
	{
		APP_TEMP_void_AppDisplayTemperature();
	}
	else if(G_Keypad_Value == 2)
    501e:	80 91 60 03 	lds	r24, 0x0360
    5022:	82 30       	cpi	r24, 0x02	; 2
    5024:	39 f1       	breq	.+78     	; 0x5074 <APP_TEMP_void_ApptemperaturePage+0xc2>
	{
		APP_FAN_void_AppSetFan();
	}
	else if(G_Keypad_Value == 8)
    5026:	80 91 60 03 	lds	r24, 0x0360
    502a:	88 30       	cpi	r24, 0x08	; 8
    502c:	f1 f0       	breq	.+60     	; 0x506a <APP_TEMP_void_ApptemperaturePage+0xb8>
	{
		APP_void_AppHomePage();
	}
	else if (G_Keypad_Value == 7)
    502e:	80 91 60 03 	lds	r24, 0x0360
    5032:	87 30       	cpi	r24, 0x07	; 7
    5034:	d1 f0       	breq	.+52     	; 0x506a <APP_TEMP_void_ApptemperaturePage+0xb8>
	{
		APP_void_AppHomePage();
	}
	else if (G_Keypad_Value == 0)
    5036:	80 91 60 03 	lds	r24, 0x0360
    503a:	88 23       	and	r24, r24
    503c:	c1 f0       	breq	.+48     	; 0x506e <APP_TEMP_void_ApptemperaturePage+0xbc>
	{
		return;
	}
	else
	{
		HAL_LCD_u8_ClearFullScreen();
    503e:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <HAL_LCD_u8_ClearFullScreen>
		HAL_LCD_u8_GoTo(0,0);
    5042:	80 e0       	ldi	r24, 0x00	; 0
    5044:	60 e0       	ldi	r22, 0x00	; 0
    5046:	0e 94 b3 11 	call	0x2366	; 0x2366 <HAL_LCD_u8_GoTo>
		HAL_LCD_u8_WriteString("Wrong Choice");
    504a:	8e e3       	ldi	r24, 0x3E	; 62
    504c:	91 e0       	ldi	r25, 0x01	; 1
    504e:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <HAL_LCD_u8_WriteString>
    5052:	20 e0       	ldi	r18, 0x00	; 0
    5054:	30 e0       	ldi	r19, 0x00	; 0
    5056:	ce 01       	movw	r24, r28
    5058:	01 97       	sbiw	r24, 0x01	; 1
    505a:	f1 f7       	brne	.-4      	; 0x5058 <APP_TEMP_void_ApptemperaturePage+0xa6>
    505c:	2f 5f       	subi	r18, 0xFF	; 255
    505e:	3f 4f       	sbci	r19, 0xFF	; 255
    5060:	87 e2       	ldi	r24, 0x27	; 39
    5062:	20 31       	cpi	r18, 0x10	; 16
    5064:	38 07       	cpc	r19, r24
    5066:	b9 f7       	brne	.-18     	; 0x5056 <APP_TEMP_void_ApptemperaturePage+0xa4>
    5068:	a8 cf       	rjmp	.-176    	; 0x4fba <APP_TEMP_void_ApptemperaturePage+0x8>
	{
		APP_void_AppHomePage();
	}
	else if (G_Keypad_Value == 7)
	{
		APP_void_AppHomePage();
    506a:	0e 94 e4 26 	call	0x4dc8	; 0x4dc8 <APP_void_AppHomePage>
		HAL_LCD_u8_GoTo(0,0);
		HAL_LCD_u8_WriteString("Wrong Choice");
		_delay_ms(1000);
		APP_TEMP_void_ApptemperaturePage();
	}
}
    506e:	df 91       	pop	r29
    5070:	cf 91       	pop	r28
    5072:	08 95       	ret
	{
		APP_TEMP_void_AppDisplayTemperature();
	}
	else if(G_Keypad_Value == 2)
	{
		APP_FAN_void_AppSetFan();
    5074:	0e 94 42 28 	call	0x5084	; 0x5084 <APP_FAN_void_AppSetFan>
		HAL_LCD_u8_GoTo(0,0);
		HAL_LCD_u8_WriteString("Wrong Choice");
		_delay_ms(1000);
		APP_TEMP_void_ApptemperaturePage();
	}
}
    5078:	df 91       	pop	r29
    507a:	cf 91       	pop	r28
    507c:	08 95       	ret
	HAL_LCD_u8_GoTo(3,0);
	HAL_LCD_u8_WriteString("8.HOME");
	HAL_KEYPAD_u8_KaypadButton(&G_Keypad_Value);
	if(G_Keypad_Value == 1)
	{
		APP_TEMP_void_AppDisplayTemperature();
    507e:	0e 94 71 27 	call	0x4ee2	; 0x4ee2 <APP_TEMP_void_AppDisplayTemperature>
    5082:	f5 cf       	rjmp	.-22     	; 0x506e <APP_TEMP_void_ApptemperaturePage+0xbc>

00005084 <APP_FAN_void_AppSetFan>:
 * INPUT Arg   : No Args
 * RETURN      : No Return
 * **********************************************************************
 **/
void APP_FAN_void_AppSetFan(void)
{
    5084:	1f 93       	push	r17
    5086:	cf 93       	push	r28
    5088:	df 93       	push	r29
    508a:	c8 ec       	ldi	r28, 0xC8	; 200
    508c:	d0 e0       	ldi	r29, 0x00	; 0
	HAL_LCD_u8_ClearFullScreen();
    508e:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <HAL_LCD_u8_ClearFullScreen>
	HAL_LCD_u8_GoTo(0,0);
    5092:	80 e0       	ldi	r24, 0x00	; 0
    5094:	60 e0       	ldi	r22, 0x00	; 0
    5096:	0e 94 b3 11 	call	0x2366	; 0x2366 <HAL_LCD_u8_GoTo>
	HAL_LCD_u8_WriteString("1.ON");
    509a:	8d e7       	ldi	r24, 0x7D	; 125
    509c:	91 e0       	ldi	r25, 0x01	; 1
    509e:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <HAL_LCD_u8_WriteString>
	HAL_LCD_u8_GoTo(0,6);
    50a2:	80 e0       	ldi	r24, 0x00	; 0
    50a4:	66 e0       	ldi	r22, 0x06	; 6
    50a6:	0e 94 b3 11 	call	0x2366	; 0x2366 <HAL_LCD_u8_GoTo>
	HAL_LCD_u8_WriteString("2.OFF");
    50aa:	82 e8       	ldi	r24, 0x82	; 130
    50ac:	91 e0       	ldi	r25, 0x01	; 1
    50ae:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <HAL_LCD_u8_WriteString>
	HAL_LCD_u8_GoTo(0,12);
    50b2:	80 e0       	ldi	r24, 0x00	; 0
    50b4:	6c e0       	ldi	r22, 0x0C	; 12
    50b6:	0e 94 b3 11 	call	0x2366	; 0x2366 <HAL_LCD_u8_GoTo>
	HAL_LCD_u8_WriteString("3.TOGGLE");
    50ba:	88 e8       	ldi	r24, 0x88	; 136
    50bc:	91 e0       	ldi	r25, 0x01	; 1
    50be:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <HAL_LCD_u8_WriteString>
	HAL_LCD_u8_GoTo(1,0);
    50c2:	81 e0       	ldi	r24, 0x01	; 1
    50c4:	60 e0       	ldi	r22, 0x00	; 0
    50c6:	0e 94 b3 11 	call	0x2366	; 0x2366 <HAL_LCD_u8_GoTo>
	HAL_LCD_u8_WriteString("4.Control Options");
    50ca:	81 e9       	ldi	r24, 0x91	; 145
    50cc:	91 e0       	ldi	r25, 0x01	; 1
    50ce:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <HAL_LCD_u8_WriteString>
	HAL_LCD_u8_GoTo(2,0);
    50d2:	82 e0       	ldi	r24, 0x02	; 2
    50d4:	60 e0       	ldi	r22, 0x00	; 0
    50d6:	0e 94 b3 11 	call	0x2366	; 0x2366 <HAL_LCD_u8_GoTo>
	HAL_LCD_u8_WriteString("0.Logout");
    50da:	81 e1       	ldi	r24, 0x11	; 17
    50dc:	91 e0       	ldi	r25, 0x01	; 1
    50de:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <HAL_LCD_u8_WriteString>
	HAL_LCD_u8_GoTo(2,10);
    50e2:	82 e0       	ldi	r24, 0x02	; 2
    50e4:	6a e0       	ldi	r22, 0x0A	; 10
    50e6:	0e 94 b3 11 	call	0x2366	; 0x2366 <HAL_LCD_u8_GoTo>
	HAL_LCD_u8_WriteString("7.BACK");
    50ea:	8b e5       	ldi	r24, 0x5B	; 91
    50ec:	91 e0       	ldi	r25, 0x01	; 1
    50ee:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <HAL_LCD_u8_WriteString>
	HAL_LCD_u8_GoTo(3,0);
    50f2:	83 e0       	ldi	r24, 0x03	; 3
    50f4:	60 e0       	ldi	r22, 0x00	; 0
    50f6:	0e 94 b3 11 	call	0x2366	; 0x2366 <HAL_LCD_u8_GoTo>
	HAL_LCD_u8_WriteString("8.HOME");
    50fa:	82 e6       	ldi	r24, 0x62	; 98
    50fc:	91 e0       	ldi	r25, 0x01	; 1
    50fe:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <HAL_LCD_u8_WriteString>
	HAL_KEYPAD_u8_KaypadButton(&G_Keypad_Value);
    5102:	80 e6       	ldi	r24, 0x60	; 96
    5104:	93 e0       	ldi	r25, 0x03	; 3
    5106:	0e 94 96 14 	call	0x292c	; 0x292c <HAL_KEYPAD_u8_KaypadButton>
	if(G_Keypad_Value == 1)
    510a:	10 91 60 03 	lds	r17, 0x0360
    510e:	11 30       	cpi	r17, 0x01	; 1
    5110:	a1 f1       	breq	.+104    	; 0x517a <APP_FAN_void_AppSetFan+0xf6>
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_LOW);
		G_RecieveValue = MCAL_SPI_MASTER_u8_SpiMaster_Transceive('N');
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_HIGH);
		MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_LOW);
	}
	else if(G_Keypad_Value == 2)
    5112:	80 91 60 03 	lds	r24, 0x0360
    5116:	82 30       	cpi	r24, 0x02	; 2
    5118:	09 f4       	brne	.+2      	; 0x511c <APP_FAN_void_AppSetFan+0x98>
    511a:	62 c0       	rjmp	.+196    	; 0x51e0 <APP_FAN_void_AppSetFan+0x15c>
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_LOW);
		G_RecieveValue = MCAL_SPI_MASTER_u8_SpiMaster_Transceive('F');
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_HIGH);
		MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_LOW);
	}
	else if(G_Keypad_Value == 3)
    511c:	80 91 60 03 	lds	r24, 0x0360
    5120:	83 30       	cpi	r24, 0x03	; 3
    5122:	09 f4       	brne	.+2      	; 0x5126 <APP_FAN_void_AppSetFan+0xa2>
    5124:	7e c0       	rjmp	.+252    	; 0x5222 <APP_FAN_void_AppSetFan+0x19e>
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_LOW);
		G_RecieveValue = MCAL_SPI_MASTER_u8_SpiMaster_Transceive('T');
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_HIGH);
		MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_LOW);
	}
	else if(G_Keypad_Value == 4)
    5126:	80 91 60 03 	lds	r24, 0x0360
    512a:	84 30       	cpi	r24, 0x04	; 4
    512c:	09 f4       	brne	.+2      	; 0x5130 <APP_FAN_void_AppSetFan+0xac>
    512e:	9c c0       	rjmp	.+312    	; 0x5268 <APP_FAN_void_AppSetFan+0x1e4>
	{
		APP_FAN_void_AppFanControlOptions();
	}
	else if(G_Keypad_Value == 8)
    5130:	80 91 60 03 	lds	r24, 0x0360
    5134:	88 30       	cpi	r24, 0x08	; 8
    5136:	09 f4       	brne	.+2      	; 0x513a <APP_FAN_void_AppSetFan+0xb6>
    5138:	9d c0       	rjmp	.+314    	; 0x5274 <APP_FAN_void_AppSetFan+0x1f0>
	{
		APP_void_AppHomePage();
	}

	else if (G_Keypad_Value == 7)
    513a:	80 91 60 03 	lds	r24, 0x0360
    513e:	87 30       	cpi	r24, 0x07	; 7
    5140:	09 f4       	brne	.+2      	; 0x5144 <APP_FAN_void_AppSetFan+0xc0>
    5142:	9e c0       	rjmp	.+316    	; 0x5280 <APP_FAN_void_AppSetFan+0x1fc>
	{
		APP_TEMP_void_ApptemperaturePage();
	}
	else if (G_Keypad_Value == 0)
    5144:	80 91 60 03 	lds	r24, 0x0360
    5148:	88 23       	and	r24, r24
    514a:	09 f4       	brne	.+2      	; 0x514e <APP_FAN_void_AppSetFan+0xca>
    514c:	45 c0       	rjmp	.+138    	; 0x51d8 <APP_FAN_void_AppSetFan+0x154>
	{
		return;
	}
	else
	{
		HAL_LCD_u8_ClearFullScreen();
    514e:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <HAL_LCD_u8_ClearFullScreen>
		HAL_LCD_u8_GoTo(0,0);
    5152:	80 e0       	ldi	r24, 0x00	; 0
    5154:	60 e0       	ldi	r22, 0x00	; 0
    5156:	0e 94 b3 11 	call	0x2366	; 0x2366 <HAL_LCD_u8_GoTo>
		HAL_LCD_u8_WriteString("Wrong Choice");
    515a:	8e e3       	ldi	r24, 0x3E	; 62
    515c:	91 e0       	ldi	r25, 0x01	; 1
    515e:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <HAL_LCD_u8_WriteString>
    5162:	20 e0       	ldi	r18, 0x00	; 0
    5164:	30 e0       	ldi	r19, 0x00	; 0
    5166:	ce 01       	movw	r24, r28
    5168:	01 97       	sbiw	r24, 0x01	; 1
    516a:	f1 f7       	brne	.-4      	; 0x5168 <APP_FAN_void_AppSetFan+0xe4>
    516c:	2f 5f       	subi	r18, 0xFF	; 255
    516e:	3f 4f       	sbci	r19, 0xFF	; 255
    5170:	87 e2       	ldi	r24, 0x27	; 39
    5172:	20 31       	cpi	r18, 0x10	; 16
    5174:	38 07       	cpc	r19, r24
    5176:	b9 f7       	brne	.-18     	; 0x5166 <APP_FAN_void_AppSetFan+0xe2>
    5178:	8a cf       	rjmp	.-236    	; 0x508e <APP_FAN_void_AppSetFan+0xa>
	HAL_LCD_u8_GoTo(3,0);
	HAL_LCD_u8_WriteString("8.HOME");
	HAL_KEYPAD_u8_KaypadButton(&G_Keypad_Value);
	if(G_Keypad_Value == 1)
	{
		HAL_DCMOTOR_void_DcMotorClockWise(motor_speed);
    517a:	87 e0       	ldi	r24, 0x07	; 7
    517c:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <HAL_DCMOTOR_void_DcMotorClockWise>
		G_FanFlag = 1;
    5180:	10 93 63 03 	sts	0x0363, r17
		G_FanFlagOff = 1;
    5184:	10 93 5b 03 	sts	0x035B, r17
		MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_HIGH);
    5188:	81 e0       	ldi	r24, 0x01	; 1
    518a:	62 e0       	ldi	r22, 0x02	; 2
    518c:	41 e0       	ldi	r20, 0x01	; 1
    518e:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_LOW);
    5192:	81 e0       	ldi	r24, 0x01	; 1
    5194:	64 e0       	ldi	r22, 0x04	; 4
    5196:	40 e0       	ldi	r20, 0x00	; 0
    5198:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
		G_RecieveValue = MCAL_SPI_MASTER_u8_SpiMaster_Transceive('F');
    519c:	86 e4       	ldi	r24, 0x46	; 70
    519e:	0e 94 1d 0b 	call	0x163a	; 0x163a <MCAL_SPI_MASTER_u8_SpiMaster_Transceive>
    51a2:	80 93 5c 03 	sts	0x035C, r24
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_HIGH);
    51a6:	81 e0       	ldi	r24, 0x01	; 1
    51a8:	64 e0       	ldi	r22, 0x04	; 4
    51aa:	41 e0       	ldi	r20, 0x01	; 1
    51ac:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_LOW);
    51b0:	81 e0       	ldi	r24, 0x01	; 1
    51b2:	64 e0       	ldi	r22, 0x04	; 4
    51b4:	40 e0       	ldi	r20, 0x00	; 0
    51b6:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
		G_RecieveValue = MCAL_SPI_MASTER_u8_SpiMaster_Transceive('N');
    51ba:	8e e4       	ldi	r24, 0x4E	; 78
		MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_HIGH);
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_LOW);
		G_RecieveValue = MCAL_SPI_MASTER_u8_SpiMaster_Transceive('F');
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_HIGH);
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_LOW);
		G_RecieveValue = MCAL_SPI_MASTER_u8_SpiMaster_Transceive('F');
    51bc:	0e 94 1d 0b 	call	0x163a	; 0x163a <MCAL_SPI_MASTER_u8_SpiMaster_Transceive>
    51c0:	80 93 5c 03 	sts	0x035C, r24
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_HIGH);
    51c4:	81 e0       	ldi	r24, 0x01	; 1
    51c6:	64 e0       	ldi	r22, 0x04	; 4
    51c8:	41 e0       	ldi	r20, 0x01	; 1
    51ca:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
		MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_LOW);
    51ce:	81 e0       	ldi	r24, 0x01	; 1
    51d0:	62 e0       	ldi	r22, 0x02	; 2
    51d2:	40 e0       	ldi	r20, 0x00	; 0
    51d4:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
		HAL_LCD_u8_GoTo(0,0);
		HAL_LCD_u8_WriteString("Wrong Choice");
		_delay_ms(1000);
		APP_FAN_void_AppSetFan();
	}
}
    51d8:	df 91       	pop	r29
    51da:	cf 91       	pop	r28
    51dc:	1f 91       	pop	r17
    51de:	08 95       	ret
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_HIGH);
		MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_LOW);
	}
	else if(G_Keypad_Value == 2)
	{
		HAL_DCMOTOR_void_DcMotorStop();
    51e0:	0e 94 93 16 	call	0x2d26	; 0x2d26 <HAL_DCMOTOR_void_DcMotorStop>
		G_FanFlag = 0;
    51e4:	10 92 63 03 	sts	0x0363, r1
		G_FanFlagOn = 1;
    51e8:	81 e0       	ldi	r24, 0x01	; 1
    51ea:	80 93 66 03 	sts	0x0366, r24
		MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_HIGH);
    51ee:	62 e0       	ldi	r22, 0x02	; 2
    51f0:	41 e0       	ldi	r20, 0x01	; 1
    51f2:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_LOW);
    51f6:	81 e0       	ldi	r24, 0x01	; 1
    51f8:	64 e0       	ldi	r22, 0x04	; 4
    51fa:	40 e0       	ldi	r20, 0x00	; 0
    51fc:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
		G_RecieveValue = MCAL_SPI_MASTER_u8_SpiMaster_Transceive('F');
    5200:	86 e4       	ldi	r24, 0x46	; 70
    5202:	0e 94 1d 0b 	call	0x163a	; 0x163a <MCAL_SPI_MASTER_u8_SpiMaster_Transceive>
    5206:	80 93 5c 03 	sts	0x035C, r24
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_HIGH);
    520a:	81 e0       	ldi	r24, 0x01	; 1
    520c:	64 e0       	ldi	r22, 0x04	; 4
    520e:	41 e0       	ldi	r20, 0x01	; 1
    5210:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_LOW);
    5214:	81 e0       	ldi	r24, 0x01	; 1
    5216:	64 e0       	ldi	r22, 0x04	; 4
    5218:	40 e0       	ldi	r20, 0x00	; 0
    521a:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
		G_RecieveValue = MCAL_SPI_MASTER_u8_SpiMaster_Transceive('F');
    521e:	86 e4       	ldi	r24, 0x46	; 70
    5220:	cd cf       	rjmp	.-102    	; 0x51bc <APP_FAN_void_AppSetFan+0x138>
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_HIGH);
		MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_LOW);
	}
	else if(G_Keypad_Value == 3)
	{
		if(G_FanFlag == 0)
    5222:	80 91 63 03 	lds	r24, 0x0363
    5226:	88 23       	and	r24, r24
    5228:	89 f1       	breq	.+98     	; 0x528c <APP_FAN_void_AppSetFan+0x208>
		{
			HAL_DCMOTOR_void_DcMotorClockWise(motor_speed);
			G_FanFlag = 1;
		}
		else if(G_FanFlag == 1)
    522a:	80 91 63 03 	lds	r24, 0x0363
    522e:	81 30       	cpi	r24, 0x01	; 1
    5230:	a1 f1       	breq	.+104    	; 0x529a <APP_FAN_void_AppSetFan+0x216>
		{
			HAL_DCMOTOR_void_DcMotorStop();
			G_FanFlag = 0;
		}
		MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_HIGH);
    5232:	81 e0       	ldi	r24, 0x01	; 1
    5234:	62 e0       	ldi	r22, 0x02	; 2
    5236:	41 e0       	ldi	r20, 0x01	; 1
    5238:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_LOW);
    523c:	81 e0       	ldi	r24, 0x01	; 1
    523e:	64 e0       	ldi	r22, 0x04	; 4
    5240:	40 e0       	ldi	r20, 0x00	; 0
    5242:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
		G_RecieveValue = MCAL_SPI_MASTER_u8_SpiMaster_Transceive('F');
    5246:	86 e4       	ldi	r24, 0x46	; 70
    5248:	0e 94 1d 0b 	call	0x163a	; 0x163a <MCAL_SPI_MASTER_u8_SpiMaster_Transceive>
    524c:	80 93 5c 03 	sts	0x035C, r24
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_HIGH);
    5250:	81 e0       	ldi	r24, 0x01	; 1
    5252:	64 e0       	ldi	r22, 0x04	; 4
    5254:	41 e0       	ldi	r20, 0x01	; 1
    5256:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_LOW);
    525a:	81 e0       	ldi	r24, 0x01	; 1
    525c:	64 e0       	ldi	r22, 0x04	; 4
    525e:	40 e0       	ldi	r20, 0x00	; 0
    5260:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
		G_RecieveValue = MCAL_SPI_MASTER_u8_SpiMaster_Transceive('T');
    5264:	84 e5       	ldi	r24, 0x54	; 84
    5266:	aa cf       	rjmp	.-172    	; 0x51bc <APP_FAN_void_AppSetFan+0x138>
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_HIGH);
		MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_LOW);
	}
	else if(G_Keypad_Value == 4)
	{
		APP_FAN_void_AppFanControlOptions();
    5268:	0e 94 52 29 	call	0x52a4	; 0x52a4 <APP_FAN_void_AppFanControlOptions>
		HAL_LCD_u8_GoTo(0,0);
		HAL_LCD_u8_WriteString("Wrong Choice");
		_delay_ms(1000);
		APP_FAN_void_AppSetFan();
	}
}
    526c:	df 91       	pop	r29
    526e:	cf 91       	pop	r28
    5270:	1f 91       	pop	r17
    5272:	08 95       	ret
	{
		APP_FAN_void_AppFanControlOptions();
	}
	else if(G_Keypad_Value == 8)
	{
		APP_void_AppHomePage();
    5274:	0e 94 e4 26 	call	0x4dc8	; 0x4dc8 <APP_void_AppHomePage>
		HAL_LCD_u8_GoTo(0,0);
		HAL_LCD_u8_WriteString("Wrong Choice");
		_delay_ms(1000);
		APP_FAN_void_AppSetFan();
	}
}
    5278:	df 91       	pop	r29
    527a:	cf 91       	pop	r28
    527c:	1f 91       	pop	r17
    527e:	08 95       	ret
		APP_void_AppHomePage();
	}

	else if (G_Keypad_Value == 7)
	{
		APP_TEMP_void_ApptemperaturePage();
    5280:	0e 94 d9 27 	call	0x4fb2	; 0x4fb2 <APP_TEMP_void_ApptemperaturePage>
		HAL_LCD_u8_GoTo(0,0);
		HAL_LCD_u8_WriteString("Wrong Choice");
		_delay_ms(1000);
		APP_FAN_void_AppSetFan();
	}
}
    5284:	df 91       	pop	r29
    5286:	cf 91       	pop	r28
    5288:	1f 91       	pop	r17
    528a:	08 95       	ret
	}
	else if(G_Keypad_Value == 3)
	{
		if(G_FanFlag == 0)
		{
			HAL_DCMOTOR_void_DcMotorClockWise(motor_speed);
    528c:	87 e0       	ldi	r24, 0x07	; 7
    528e:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <HAL_DCMOTOR_void_DcMotorClockWise>
			G_FanFlag = 1;
    5292:	81 e0       	ldi	r24, 0x01	; 1
    5294:	80 93 63 03 	sts	0x0363, r24
    5298:	cc cf       	rjmp	.-104    	; 0x5232 <APP_FAN_void_AppSetFan+0x1ae>
		}
		else if(G_FanFlag == 1)
		{
			HAL_DCMOTOR_void_DcMotorStop();
    529a:	0e 94 93 16 	call	0x2d26	; 0x2d26 <HAL_DCMOTOR_void_DcMotorStop>
			G_FanFlag = 0;
    529e:	10 92 63 03 	sts	0x0363, r1
    52a2:	c7 cf       	rjmp	.-114    	; 0x5232 <APP_FAN_void_AppSetFan+0x1ae>

000052a4 <APP_FAN_void_AppFanControlOptions>:
 * INPUT Arg   : No Args
 * RETURN      : No Return
 * **********************************************************************
 **/
void APP_FAN_void_AppFanControlOptions(void)
{
    52a4:	cf 93       	push	r28
    52a6:	df 93       	push	r29
    52a8:	c8 ec       	ldi	r28, 0xC8	; 200
    52aa:	d0 e0       	ldi	r29, 0x00	; 0
	HAL_LCD_u8_ClearFullScreen();
    52ac:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <HAL_LCD_u8_ClearFullScreen>
	HAL_LCD_u8_GoTo(0,0);
    52b0:	80 e0       	ldi	r24, 0x00	; 0
    52b2:	60 e0       	ldi	r22, 0x00	; 0
    52b4:	0e 94 b3 11 	call	0x2366	; 0x2366 <HAL_LCD_u8_GoTo>
	HAL_LCD_u8_WriteString("1.Automatic & Manual");
    52b8:	83 ea       	ldi	r24, 0xA3	; 163
    52ba:	91 e0       	ldi	r25, 0x01	; 1
    52bc:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <HAL_LCD_u8_WriteString>
	HAL_LCD_u8_GoTo(1,0);
    52c0:	81 e0       	ldi	r24, 0x01	; 1
    52c2:	60 e0       	ldi	r22, 0x00	; 0
    52c4:	0e 94 b3 11 	call	0x2366	; 0x2366 <HAL_LCD_u8_GoTo>
	HAL_LCD_u8_WriteString("2.Manual Only");
    52c8:	88 eb       	ldi	r24, 0xB8	; 184
    52ca:	91 e0       	ldi	r25, 0x01	; 1
    52cc:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <HAL_LCD_u8_WriteString>
	HAL_LCD_u8_GoTo(2,0);
    52d0:	82 e0       	ldi	r24, 0x02	; 2
    52d2:	60 e0       	ldi	r22, 0x00	; 0
    52d4:	0e 94 b3 11 	call	0x2366	; 0x2366 <HAL_LCD_u8_GoTo>
	HAL_LCD_u8_WriteString("0.Logout");
    52d8:	81 e1       	ldi	r24, 0x11	; 17
    52da:	91 e0       	ldi	r25, 0x01	; 1
    52dc:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <HAL_LCD_u8_WriteString>
	HAL_LCD_u8_GoTo(2,10);
    52e0:	82 e0       	ldi	r24, 0x02	; 2
    52e2:	6a e0       	ldi	r22, 0x0A	; 10
    52e4:	0e 94 b3 11 	call	0x2366	; 0x2366 <HAL_LCD_u8_GoTo>
	HAL_LCD_u8_WriteString("7.BACK");
    52e8:	8b e5       	ldi	r24, 0x5B	; 91
    52ea:	91 e0       	ldi	r25, 0x01	; 1
    52ec:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <HAL_LCD_u8_WriteString>
	HAL_LCD_u8_GoTo(3,0);
    52f0:	83 e0       	ldi	r24, 0x03	; 3
    52f2:	60 e0       	ldi	r22, 0x00	; 0
    52f4:	0e 94 b3 11 	call	0x2366	; 0x2366 <HAL_LCD_u8_GoTo>
	HAL_LCD_u8_WriteString("8.HOME");
    52f8:	82 e6       	ldi	r24, 0x62	; 98
    52fa:	91 e0       	ldi	r25, 0x01	; 1
    52fc:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <HAL_LCD_u8_WriteString>
	HAL_KEYPAD_u8_KaypadButton(&G_Keypad_Value);
    5300:	80 e6       	ldi	r24, 0x60	; 96
    5302:	93 e0       	ldi	r25, 0x03	; 3
    5304:	0e 94 96 14 	call	0x292c	; 0x292c <HAL_KEYPAD_u8_KaypadButton>
	if(G_Keypad_Value == 1)
    5308:	80 91 60 03 	lds	r24, 0x0360
    530c:	81 30       	cpi	r24, 0x01	; 1
    530e:	59 f1       	breq	.+86     	; 0x5366 <APP_FAN_void_AppFanControlOptions+0xc2>
	{
		APP_FAN_void_AppFanAutomaticAndManualControl();
	}
	else if(G_Keypad_Value == 2)
    5310:	80 91 60 03 	lds	r24, 0x0360
    5314:	82 30       	cpi	r24, 0x02	; 2
    5316:	79 f1       	breq	.+94     	; 0x5376 <APP_FAN_void_AppFanControlOptions+0xd2>
	{
		APP_FAN_void_AppFanManualOnlyControl();
	}
	else if(G_Keypad_Value == 0)
    5318:	80 91 60 03 	lds	r24, 0x0360
    531c:	88 23       	and	r24, r24
    531e:	01 f1       	breq	.+64     	; 0x5360 <APP_FAN_void_AppFanControlOptions+0xbc>
	{
		return;
	}
	else if(G_Keypad_Value == 7)
    5320:	80 91 60 03 	lds	r24, 0x0360
    5324:	87 30       	cpi	r24, 0x07	; 7
    5326:	d1 f0       	breq	.+52     	; 0x535c <APP_FAN_void_AppFanControlOptions+0xb8>
	{
		APP_FAN_void_AppSetFan();
	}
	else if(G_Keypad_Value == 8)
    5328:	80 91 60 03 	lds	r24, 0x0360
    532c:	88 30       	cpi	r24, 0x08	; 8
    532e:	01 f1       	breq	.+64     	; 0x5370 <APP_FAN_void_AppFanControlOptions+0xcc>
	{
		APP_void_AppHomePage();
	}
	else
	{
		HAL_LCD_u8_ClearFullScreen();
    5330:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <HAL_LCD_u8_ClearFullScreen>
		HAL_LCD_u8_GoTo(0,0);
    5334:	80 e0       	ldi	r24, 0x00	; 0
    5336:	60 e0       	ldi	r22, 0x00	; 0
    5338:	0e 94 b3 11 	call	0x2366	; 0x2366 <HAL_LCD_u8_GoTo>
		HAL_LCD_u8_WriteString("Wrong Choice");
    533c:	8e e3       	ldi	r24, 0x3E	; 62
    533e:	91 e0       	ldi	r25, 0x01	; 1
    5340:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <HAL_LCD_u8_WriteString>
    5344:	20 e0       	ldi	r18, 0x00	; 0
    5346:	30 e0       	ldi	r19, 0x00	; 0
    5348:	ce 01       	movw	r24, r28
    534a:	01 97       	sbiw	r24, 0x01	; 1
    534c:	f1 f7       	brne	.-4      	; 0x534a <APP_FAN_void_AppFanControlOptions+0xa6>
    534e:	2f 5f       	subi	r18, 0xFF	; 255
    5350:	3f 4f       	sbci	r19, 0xFF	; 255
    5352:	87 e2       	ldi	r24, 0x27	; 39
    5354:	20 31       	cpi	r18, 0x10	; 16
    5356:	38 07       	cpc	r19, r24
    5358:	b9 f7       	brne	.-18     	; 0x5348 <APP_FAN_void_AppFanControlOptions+0xa4>
    535a:	a8 cf       	rjmp	.-176    	; 0x52ac <APP_FAN_void_AppFanControlOptions+0x8>
	{
		return;
	}
	else if(G_Keypad_Value == 7)
	{
		APP_FAN_void_AppSetFan();
    535c:	0e 94 42 28 	call	0x5084	; 0x5084 <APP_FAN_void_AppSetFan>
		HAL_LCD_u8_GoTo(0,0);
		HAL_LCD_u8_WriteString("Wrong Choice");
		_delay_ms(1000);
		APP_FAN_void_AppFanControlOptions();
	}
}
    5360:	df 91       	pop	r29
    5362:	cf 91       	pop	r28
    5364:	08 95       	ret
	HAL_LCD_u8_GoTo(3,0);
	HAL_LCD_u8_WriteString("8.HOME");
	HAL_KEYPAD_u8_KaypadButton(&G_Keypad_Value);
	if(G_Keypad_Value == 1)
	{
		APP_FAN_void_AppFanAutomaticAndManualControl();
    5366:	0e 94 22 2a 	call	0x5444	; 0x5444 <APP_FAN_void_AppFanAutomaticAndManualControl>
		HAL_LCD_u8_GoTo(0,0);
		HAL_LCD_u8_WriteString("Wrong Choice");
		_delay_ms(1000);
		APP_FAN_void_AppFanControlOptions();
	}
}
    536a:	df 91       	pop	r29
    536c:	cf 91       	pop	r28
    536e:	08 95       	ret
	{
		APP_FAN_void_AppSetFan();
	}
	else if(G_Keypad_Value == 8)
	{
		APP_void_AppHomePage();
    5370:	0e 94 e4 26 	call	0x4dc8	; 0x4dc8 <APP_void_AppHomePage>
    5374:	f5 cf       	rjmp	.-22     	; 0x5360 <APP_FAN_void_AppFanControlOptions+0xbc>
	{
		APP_FAN_void_AppFanAutomaticAndManualControl();
	}
	else if(G_Keypad_Value == 2)
	{
		APP_FAN_void_AppFanManualOnlyControl();
    5376:	0e 94 be 29 	call	0x537c	; 0x537c <APP_FAN_void_AppFanManualOnlyControl>
    537a:	f2 cf       	rjmp	.-28     	; 0x5360 <APP_FAN_void_AppFanControlOptions+0xbc>

0000537c <APP_FAN_void_AppFanManualOnlyControl>:
 * INPUT Arg   : No Args
 * RETURN      : No Return
 * **********************************************************************
 **/
void APP_FAN_void_AppFanManualOnlyControl(void)
{
    537c:	1f 93       	push	r17
    537e:	cf 93       	push	r28
    5380:	df 93       	push	r29
	G_FanControlFlag = 1;
    5382:	11 e0       	ldi	r17, 0x01	; 1
    5384:	c8 ec       	ldi	r28, 0xC8	; 200
    5386:	d0 e0       	ldi	r29, 0x00	; 0
    5388:	10 93 5d 03 	sts	0x035D, r17
	HAL_LCD_u8_ClearFullScreen();
    538c:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <HAL_LCD_u8_ClearFullScreen>
	HAL_LCD_u8_GoTo(0,0);
    5390:	80 e0       	ldi	r24, 0x00	; 0
    5392:	60 e0       	ldi	r22, 0x00	; 0
    5394:	0e 94 b3 11 	call	0x2366	; 0x2366 <HAL_LCD_u8_GoTo>
	HAL_LCD_u8_WriteString("Fan is Controlled ");
    5398:	86 ec       	ldi	r24, 0xC6	; 198
    539a:	91 e0       	ldi	r25, 0x01	; 1
    539c:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <HAL_LCD_u8_WriteString>
	HAL_LCD_u8_GoTo(1,0);
    53a0:	81 e0       	ldi	r24, 0x01	; 1
    53a2:	60 e0       	ldi	r22, 0x00	; 0
    53a4:	0e 94 b3 11 	call	0x2366	; 0x2366 <HAL_LCD_u8_GoTo>
	HAL_LCD_u8_WriteString("Manual Only");
    53a8:	89 ed       	ldi	r24, 0xD9	; 217
    53aa:	91 e0       	ldi	r25, 0x01	; 1
    53ac:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <HAL_LCD_u8_WriteString>
	HAL_LCD_u8_GoTo(2,0);
    53b0:	82 e0       	ldi	r24, 0x02	; 2
    53b2:	60 e0       	ldi	r22, 0x00	; 0
    53b4:	0e 94 b3 11 	call	0x2366	; 0x2366 <HAL_LCD_u8_GoTo>
	HAL_LCD_u8_WriteString("0.Logout");
    53b8:	81 e1       	ldi	r24, 0x11	; 17
    53ba:	91 e0       	ldi	r25, 0x01	; 1
    53bc:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <HAL_LCD_u8_WriteString>
	HAL_LCD_u8_GoTo(2,10);
    53c0:	82 e0       	ldi	r24, 0x02	; 2
    53c2:	6a e0       	ldi	r22, 0x0A	; 10
    53c4:	0e 94 b3 11 	call	0x2366	; 0x2366 <HAL_LCD_u8_GoTo>
	HAL_LCD_u8_WriteString("7.BACK");
    53c8:	8b e5       	ldi	r24, 0x5B	; 91
    53ca:	91 e0       	ldi	r25, 0x01	; 1
    53cc:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <HAL_LCD_u8_WriteString>
	HAL_LCD_u8_GoTo(3,0);
    53d0:	83 e0       	ldi	r24, 0x03	; 3
    53d2:	60 e0       	ldi	r22, 0x00	; 0
    53d4:	0e 94 b3 11 	call	0x2366	; 0x2366 <HAL_LCD_u8_GoTo>
	HAL_LCD_u8_WriteString("8.HOME");
    53d8:	82 e6       	ldi	r24, 0x62	; 98
    53da:	91 e0       	ldi	r25, 0x01	; 1
    53dc:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <HAL_LCD_u8_WriteString>
	HAL_KEYPAD_u8_KaypadButton(&G_Keypad_Value);
    53e0:	80 e6       	ldi	r24, 0x60	; 96
    53e2:	93 e0       	ldi	r25, 0x03	; 3
    53e4:	0e 94 96 14 	call	0x292c	; 0x292c <HAL_KEYPAD_u8_KaypadButton>
	if(G_Keypad_Value == 0)
    53e8:	80 91 60 03 	lds	r24, 0x0360
    53ec:	88 23       	and	r24, r24
    53ee:	01 f1       	breq	.+64     	; 0x5430 <APP_FAN_void_AppFanManualOnlyControl+0xb4>
	{
		return;
	}
	else if(G_Keypad_Value == 7)
    53f0:	80 91 60 03 	lds	r24, 0x0360
    53f4:	87 30       	cpi	r24, 0x07	; 7
    53f6:	d1 f0       	breq	.+52     	; 0x542c <APP_FAN_void_AppFanManualOnlyControl+0xb0>
	{
		APP_FAN_void_AppFanControlOptions();
	}
	else if(G_Keypad_Value == 8)
    53f8:	80 91 60 03 	lds	r24, 0x0360
    53fc:	88 30       	cpi	r24, 0x08	; 8
    53fe:	e1 f0       	breq	.+56     	; 0x5438 <APP_FAN_void_AppFanManualOnlyControl+0xbc>
	{
		APP_void_AppHomePage();
	}
	else
	{
		HAL_LCD_u8_ClearFullScreen();
    5400:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <HAL_LCD_u8_ClearFullScreen>
		HAL_LCD_u8_GoTo(0,0);
    5404:	80 e0       	ldi	r24, 0x00	; 0
    5406:	60 e0       	ldi	r22, 0x00	; 0
    5408:	0e 94 b3 11 	call	0x2366	; 0x2366 <HAL_LCD_u8_GoTo>
		HAL_LCD_u8_WriteString("Wrong Choice");
    540c:	8e e3       	ldi	r24, 0x3E	; 62
    540e:	91 e0       	ldi	r25, 0x01	; 1
    5410:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <HAL_LCD_u8_WriteString>
    5414:	20 e0       	ldi	r18, 0x00	; 0
    5416:	30 e0       	ldi	r19, 0x00	; 0
    5418:	ce 01       	movw	r24, r28
    541a:	01 97       	sbiw	r24, 0x01	; 1
    541c:	f1 f7       	brne	.-4      	; 0x541a <APP_FAN_void_AppFanManualOnlyControl+0x9e>
    541e:	2f 5f       	subi	r18, 0xFF	; 255
    5420:	3f 4f       	sbci	r19, 0xFF	; 255
    5422:	87 e2       	ldi	r24, 0x27	; 39
    5424:	20 31       	cpi	r18, 0x10	; 16
    5426:	38 07       	cpc	r19, r24
    5428:	b9 f7       	brne	.-18     	; 0x5418 <APP_FAN_void_AppFanManualOnlyControl+0x9c>
    542a:	ae cf       	rjmp	.-164    	; 0x5388 <APP_FAN_void_AppFanManualOnlyControl+0xc>
	{
		return;
	}
	else if(G_Keypad_Value == 7)
	{
		APP_FAN_void_AppFanControlOptions();
    542c:	0e 94 52 29 	call	0x52a4	; 0x52a4 <APP_FAN_void_AppFanControlOptions>
		HAL_LCD_u8_GoTo(0,0);
		HAL_LCD_u8_WriteString("Wrong Choice");
		_delay_ms(1000);
		APP_FAN_void_AppFanManualOnlyControl();
	}
}
    5430:	df 91       	pop	r29
    5432:	cf 91       	pop	r28
    5434:	1f 91       	pop	r17
    5436:	08 95       	ret
	{
		APP_FAN_void_AppFanControlOptions();
	}
	else if(G_Keypad_Value == 8)
	{
		APP_void_AppHomePage();
    5438:	0e 94 e4 26 	call	0x4dc8	; 0x4dc8 <APP_void_AppHomePage>
		HAL_LCD_u8_GoTo(0,0);
		HAL_LCD_u8_WriteString("Wrong Choice");
		_delay_ms(1000);
		APP_FAN_void_AppFanManualOnlyControl();
	}
}
    543c:	df 91       	pop	r29
    543e:	cf 91       	pop	r28
    5440:	1f 91       	pop	r17
    5442:	08 95       	ret

00005444 <APP_FAN_void_AppFanAutomaticAndManualControl>:
 * INPUT Arg   : No Args
 * RETURN      : No Return
 * **********************************************************************
 **/
void APP_FAN_void_AppFanAutomaticAndManualControl(void)
{
    5444:	cf 93       	push	r28
    5446:	df 93       	push	r29
    5448:	c8 ec       	ldi	r28, 0xC8	; 200
    544a:	d0 e0       	ldi	r29, 0x00	; 0
	G_FanControlFlag = 0;
    544c:	10 92 5d 03 	sts	0x035D, r1
	G_FanFlagOn = 0;
    5450:	10 92 66 03 	sts	0x0366, r1
	G_FanFlagOff = 0;
    5454:	10 92 5b 03 	sts	0x035B, r1
	HAL_LCD_u8_ClearFullScreen();
    5458:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <HAL_LCD_u8_ClearFullScreen>
	HAL_LCD_u8_GoTo(0,0);
    545c:	80 e0       	ldi	r24, 0x00	; 0
    545e:	60 e0       	ldi	r22, 0x00	; 0
    5460:	0e 94 b3 11 	call	0x2366	; 0x2366 <HAL_LCD_u8_GoTo>
	HAL_LCD_u8_WriteString("Fan is Controlled ");
    5464:	86 ec       	ldi	r24, 0xC6	; 198
    5466:	91 e0       	ldi	r25, 0x01	; 1
    5468:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <HAL_LCD_u8_WriteString>
	HAL_LCD_u8_GoTo(1,0);
    546c:	81 e0       	ldi	r24, 0x01	; 1
    546e:	60 e0       	ldi	r22, 0x00	; 0
    5470:	0e 94 b3 11 	call	0x2366	; 0x2366 <HAL_LCD_u8_GoTo>
	HAL_LCD_u8_WriteString("Automatic And Manual");
    5474:	85 ee       	ldi	r24, 0xE5	; 229
    5476:	91 e0       	ldi	r25, 0x01	; 1
    5478:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <HAL_LCD_u8_WriteString>
	HAL_LCD_u8_GoTo(2,0);
    547c:	82 e0       	ldi	r24, 0x02	; 2
    547e:	60 e0       	ldi	r22, 0x00	; 0
    5480:	0e 94 b3 11 	call	0x2366	; 0x2366 <HAL_LCD_u8_GoTo>
	HAL_LCD_u8_WriteString("0.Logout");
    5484:	81 e1       	ldi	r24, 0x11	; 17
    5486:	91 e0       	ldi	r25, 0x01	; 1
    5488:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <HAL_LCD_u8_WriteString>
	HAL_LCD_u8_GoTo(2,10);
    548c:	82 e0       	ldi	r24, 0x02	; 2
    548e:	6a e0       	ldi	r22, 0x0A	; 10
    5490:	0e 94 b3 11 	call	0x2366	; 0x2366 <HAL_LCD_u8_GoTo>
	HAL_LCD_u8_WriteString("7.BACK");
    5494:	8b e5       	ldi	r24, 0x5B	; 91
    5496:	91 e0       	ldi	r25, 0x01	; 1
    5498:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <HAL_LCD_u8_WriteString>
	HAL_LCD_u8_GoTo(3,0);
    549c:	83 e0       	ldi	r24, 0x03	; 3
    549e:	60 e0       	ldi	r22, 0x00	; 0
    54a0:	0e 94 b3 11 	call	0x2366	; 0x2366 <HAL_LCD_u8_GoTo>
	HAL_LCD_u8_WriteString("8.HOME");
    54a4:	82 e6       	ldi	r24, 0x62	; 98
    54a6:	91 e0       	ldi	r25, 0x01	; 1
    54a8:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <HAL_LCD_u8_WriteString>
	HAL_KEYPAD_u8_KaypadButton(&G_Keypad_Value);
    54ac:	80 e6       	ldi	r24, 0x60	; 96
    54ae:	93 e0       	ldi	r25, 0x03	; 3
    54b0:	0e 94 96 14 	call	0x292c	; 0x292c <HAL_KEYPAD_u8_KaypadButton>
	if(G_Keypad_Value == 0)
    54b4:	80 91 60 03 	lds	r24, 0x0360
    54b8:	88 23       	and	r24, r24
    54ba:	01 f1       	breq	.+64     	; 0x54fc <APP_FAN_void_AppFanAutomaticAndManualControl+0xb8>
	{
		return;
	}
	else if(G_Keypad_Value == 7)
    54bc:	80 91 60 03 	lds	r24, 0x0360
    54c0:	87 30       	cpi	r24, 0x07	; 7
    54c2:	d1 f0       	breq	.+52     	; 0x54f8 <APP_FAN_void_AppFanAutomaticAndManualControl+0xb4>
	{
		APP_FAN_void_AppFanControlOptions();
	}
	else if(G_Keypad_Value == 8)
    54c4:	80 91 60 03 	lds	r24, 0x0360
    54c8:	88 30       	cpi	r24, 0x08	; 8
    54ca:	d9 f0       	breq	.+54     	; 0x5502 <APP_FAN_void_AppFanAutomaticAndManualControl+0xbe>
	{
		APP_void_AppHomePage();
	}
	else
	{
		HAL_LCD_u8_ClearFullScreen();
    54cc:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <HAL_LCD_u8_ClearFullScreen>
		HAL_LCD_u8_GoTo(0,0);
    54d0:	80 e0       	ldi	r24, 0x00	; 0
    54d2:	60 e0       	ldi	r22, 0x00	; 0
    54d4:	0e 94 b3 11 	call	0x2366	; 0x2366 <HAL_LCD_u8_GoTo>
		HAL_LCD_u8_WriteString("Wrong Choice");
    54d8:	8e e3       	ldi	r24, 0x3E	; 62
    54da:	91 e0       	ldi	r25, 0x01	; 1
    54dc:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <HAL_LCD_u8_WriteString>
    54e0:	20 e0       	ldi	r18, 0x00	; 0
    54e2:	30 e0       	ldi	r19, 0x00	; 0
    54e4:	ce 01       	movw	r24, r28
    54e6:	01 97       	sbiw	r24, 0x01	; 1
    54e8:	f1 f7       	brne	.-4      	; 0x54e6 <APP_FAN_void_AppFanAutomaticAndManualControl+0xa2>
    54ea:	2f 5f       	subi	r18, 0xFF	; 255
    54ec:	3f 4f       	sbci	r19, 0xFF	; 255
    54ee:	87 e2       	ldi	r24, 0x27	; 39
    54f0:	20 31       	cpi	r18, 0x10	; 16
    54f2:	38 07       	cpc	r19, r24
    54f4:	b9 f7       	brne	.-18     	; 0x54e4 <APP_FAN_void_AppFanAutomaticAndManualControl+0xa0>
    54f6:	aa cf       	rjmp	.-172    	; 0x544c <APP_FAN_void_AppFanAutomaticAndManualControl+0x8>
	{
		return;
	}
	else if(G_Keypad_Value == 7)
	{
		APP_FAN_void_AppFanControlOptions();
    54f8:	0e 94 52 29 	call	0x52a4	; 0x52a4 <APP_FAN_void_AppFanControlOptions>
		HAL_LCD_u8_GoTo(0,0);
		HAL_LCD_u8_WriteString("Wrong Choice");
		_delay_ms(1000);
		APP_FAN_void_AppFanAutomaticAndManualControl();
	}
}
    54fc:	df 91       	pop	r29
    54fe:	cf 91       	pop	r28
    5500:	08 95       	ret
	{
		APP_FAN_void_AppFanControlOptions();
	}
	else if(G_Keypad_Value == 8)
	{
		APP_void_AppHomePage();
    5502:	0e 94 e4 26 	call	0x4dc8	; 0x4dc8 <APP_void_AppHomePage>
		HAL_LCD_u8_GoTo(0,0);
		HAL_LCD_u8_WriteString("Wrong Choice");
		_delay_ms(1000);
		APP_FAN_void_AppFanAutomaticAndManualControl();
	}
}
    5506:	df 91       	pop	r29
    5508:	cf 91       	pop	r28
    550a:	08 95       	ret

0000550c <APP_DEVICE2_u8_AppSetDeviceTwo>:
 * INPUT Arg   : No Args
 * RETURN      : No Return
 * **********************************************************************
 **/
void APP_DEVICE2_u8_AppSetDeviceTwo(void)
{
    550c:	1f 93       	push	r17
    550e:	cf 93       	push	r28
    5510:	df 93       	push	r29
    5512:	c8 ec       	ldi	r28, 0xC8	; 200
    5514:	d0 e0       	ldi	r29, 0x00	; 0
	HAL_LCD_u8_ClearFullScreen();
    5516:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <HAL_LCD_u8_ClearFullScreen>
	HAL_LCD_u8_GoTo(0,0);
    551a:	80 e0       	ldi	r24, 0x00	; 0
    551c:	60 e0       	ldi	r22, 0x00	; 0
    551e:	0e 94 b3 11 	call	0x2366	; 0x2366 <HAL_LCD_u8_GoTo>
	HAL_LCD_u8_WriteString("1.ON");
    5522:	8d e7       	ldi	r24, 0x7D	; 125
    5524:	91 e0       	ldi	r25, 0x01	; 1
    5526:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <HAL_LCD_u8_WriteString>
	HAL_LCD_u8_GoTo(0,10);
    552a:	80 e0       	ldi	r24, 0x00	; 0
    552c:	6a e0       	ldi	r22, 0x0A	; 10
    552e:	0e 94 b3 11 	call	0x2366	; 0x2366 <HAL_LCD_u8_GoTo>
	HAL_LCD_u8_WriteString("2.OFF");
    5532:	82 e8       	ldi	r24, 0x82	; 130
    5534:	91 e0       	ldi	r25, 0x01	; 1
    5536:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <HAL_LCD_u8_WriteString>
	HAL_LCD_u8_GoTo(1,0);
    553a:	81 e0       	ldi	r24, 0x01	; 1
    553c:	60 e0       	ldi	r22, 0x00	; 0
    553e:	0e 94 b3 11 	call	0x2366	; 0x2366 <HAL_LCD_u8_GoTo>
	HAL_LCD_u8_WriteString("3.TOGGLE");
    5542:	88 e8       	ldi	r24, 0x88	; 136
    5544:	91 e0       	ldi	r25, 0x01	; 1
    5546:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <HAL_LCD_u8_WriteString>
	HAL_LCD_u8_GoTo(2,0);
    554a:	82 e0       	ldi	r24, 0x02	; 2
    554c:	60 e0       	ldi	r22, 0x00	; 0
    554e:	0e 94 b3 11 	call	0x2366	; 0x2366 <HAL_LCD_u8_GoTo>
	HAL_LCD_u8_WriteString("0.Logout");
    5552:	81 e1       	ldi	r24, 0x11	; 17
    5554:	91 e0       	ldi	r25, 0x01	; 1
    5556:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <HAL_LCD_u8_WriteString>
	HAL_LCD_u8_GoTo(2,10);
    555a:	82 e0       	ldi	r24, 0x02	; 2
    555c:	6a e0       	ldi	r22, 0x0A	; 10
    555e:	0e 94 b3 11 	call	0x2366	; 0x2366 <HAL_LCD_u8_GoTo>
	HAL_LCD_u8_WriteString("7.BACK");
    5562:	8b e5       	ldi	r24, 0x5B	; 91
    5564:	91 e0       	ldi	r25, 0x01	; 1
    5566:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <HAL_LCD_u8_WriteString>
	HAL_LCD_u8_GoTo(3,0);
    556a:	83 e0       	ldi	r24, 0x03	; 3
    556c:	60 e0       	ldi	r22, 0x00	; 0
    556e:	0e 94 b3 11 	call	0x2366	; 0x2366 <HAL_LCD_u8_GoTo>
	HAL_LCD_u8_WriteString("8.HOME");
    5572:	82 e6       	ldi	r24, 0x62	; 98
    5574:	91 e0       	ldi	r25, 0x01	; 1
    5576:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <HAL_LCD_u8_WriteString>
	HAL_KEYPAD_u8_KaypadButton(&G_Keypad_Value);
    557a:	80 e6       	ldi	r24, 0x60	; 96
    557c:	93 e0       	ldi	r25, 0x03	; 3
    557e:	0e 94 96 14 	call	0x292c	; 0x292c <HAL_KEYPAD_u8_KaypadButton>
	if(G_Keypad_Value == 1)
    5582:	10 91 60 03 	lds	r17, 0x0360
    5586:	11 30       	cpi	r17, 0x01	; 1
    5588:	99 f1       	breq	.+102    	; 0x55f0 <APP_DEVICE2_u8_AppSetDeviceTwo+0xe4>
		G_RecieveValue = MCAL_SPI_MASTER_u8_SpiMaster_Transceive('N');
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_HIGH);
		MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_LOW);
		G_DeviceTwoFlag = 1;
	}
	else if(G_Keypad_Value == 2)
    558a:	80 91 60 03 	lds	r24, 0x0360
    558e:	82 30       	cpi	r24, 0x02	; 2
    5590:	09 f4       	brne	.+2      	; 0x5594 <APP_DEVICE2_u8_AppSetDeviceTwo+0x88>
    5592:	9b c0       	rjmp	.+310    	; 0x56ca <APP_DEVICE2_u8_AppSetDeviceTwo+0x1be>
		G_RecieveValue = MCAL_SPI_MASTER_u8_SpiMaster_Transceive('F');
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_HIGH);
		MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_LOW);
		G_DeviceTwoFlag = 0;
	}
	else if(G_Keypad_Value == 3)
    5594:	80 91 60 03 	lds	r24, 0x0360
    5598:	83 30       	cpi	r24, 0x03	; 3
    559a:	09 f4       	brne	.+2      	; 0x559e <APP_DEVICE2_u8_AppSetDeviceTwo+0x92>
    559c:	62 c0       	rjmp	.+196    	; 0x5662 <APP_DEVICE2_u8_AppSetDeviceTwo+0x156>
		G_RecieveValue = MCAL_SPI_MASTER_u8_SpiMaster_Transceive('T');
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_HIGH);
		MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_LOW);
		TOGGLE_BIT(G_DeviceTwoFlag,PIN0);
	}
	else if(G_Keypad_Value == 8)
    559e:	80 91 60 03 	lds	r24, 0x0360
    55a2:	88 30       	cpi	r24, 0x08	; 8
    55a4:	f9 f0       	breq	.+62     	; 0x55e4 <APP_DEVICE2_u8_AppSetDeviceTwo+0xd8>
	{
		APP_void_AppHomePage();
	}

	else if (G_Keypad_Value == 7)
    55a6:	80 91 60 03 	lds	r24, 0x0360
    55aa:	87 30       	cpi	r24, 0x07	; 7
    55ac:	09 f4       	brne	.+2      	; 0x55b0 <APP_DEVICE2_u8_AppSetDeviceTwo+0xa4>
    55ae:	53 c0       	rjmp	.+166    	; 0x5656 <APP_DEVICE2_u8_AppSetDeviceTwo+0x14a>
	{
		APP_void_AppGetDeviceID();
	}
	else if (G_Keypad_Value == 0)
    55b0:	80 91 60 03 	lds	r24, 0x0360
    55b4:	88 23       	and	r24, r24
    55b6:	c1 f0       	breq	.+48     	; 0x55e8 <APP_DEVICE2_u8_AppSetDeviceTwo+0xdc>
	{
		return;
	}
	else
	{
		HAL_LCD_u8_ClearFullScreen();
    55b8:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <HAL_LCD_u8_ClearFullScreen>
		HAL_LCD_u8_GoTo(0,0);
    55bc:	80 e0       	ldi	r24, 0x00	; 0
    55be:	60 e0       	ldi	r22, 0x00	; 0
    55c0:	0e 94 b3 11 	call	0x2366	; 0x2366 <HAL_LCD_u8_GoTo>
		HAL_LCD_u8_WriteString("Wrong Choice");
    55c4:	8e e3       	ldi	r24, 0x3E	; 62
    55c6:	91 e0       	ldi	r25, 0x01	; 1
    55c8:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <HAL_LCD_u8_WriteString>
    55cc:	20 e0       	ldi	r18, 0x00	; 0
    55ce:	30 e0       	ldi	r19, 0x00	; 0
    55d0:	ce 01       	movw	r24, r28
    55d2:	01 97       	sbiw	r24, 0x01	; 1
    55d4:	f1 f7       	brne	.-4      	; 0x55d2 <APP_DEVICE2_u8_AppSetDeviceTwo+0xc6>
    55d6:	2f 5f       	subi	r18, 0xFF	; 255
    55d8:	3f 4f       	sbci	r19, 0xFF	; 255
    55da:	87 e2       	ldi	r24, 0x27	; 39
    55dc:	20 31       	cpi	r18, 0x10	; 16
    55de:	38 07       	cpc	r19, r24
    55e0:	b9 f7       	brne	.-18     	; 0x55d0 <APP_DEVICE2_u8_AppSetDeviceTwo+0xc4>
    55e2:	99 cf       	rjmp	.-206    	; 0x5516 <APP_DEVICE2_u8_AppSetDeviceTwo+0xa>
		MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_LOW);
		TOGGLE_BIT(G_DeviceTwoFlag,PIN0);
	}
	else if(G_Keypad_Value == 8)
	{
		APP_void_AppHomePage();
    55e4:	0e 94 e4 26 	call	0x4dc8	; 0x4dc8 <APP_void_AppHomePage>
		HAL_LCD_u8_GoTo(0,0);
		HAL_LCD_u8_WriteString("Wrong Choice");
		_delay_ms(1000);
		APP_DEVICE2_u8_AppSetDeviceTwo();
	}
}
    55e8:	df 91       	pop	r29
    55ea:	cf 91       	pop	r28
    55ec:	1f 91       	pop	r17
    55ee:	08 95       	ret
	HAL_LCD_u8_GoTo(3,0);
	HAL_LCD_u8_WriteString("8.HOME");
	HAL_KEYPAD_u8_KaypadButton(&G_Keypad_Value);
	if(G_Keypad_Value == 1)
	{
		HAL_LED_u8LedMode(LED2_Port,LED2_Pin,LED_ON);
    55f0:	80 e0       	ldi	r24, 0x00	; 0
    55f2:	64 e0       	ldi	r22, 0x04	; 4
    55f4:	41 e0       	ldi	r20, 0x01	; 1
    55f6:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <HAL_LED_u8LedMode>
		MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_HIGH);
    55fa:	81 e0       	ldi	r24, 0x01	; 1
    55fc:	62 e0       	ldi	r22, 0x02	; 2
    55fe:	41 e0       	ldi	r20, 0x01	; 1
    5600:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_LOW);
    5604:	81 e0       	ldi	r24, 0x01	; 1
    5606:	64 e0       	ldi	r22, 0x04	; 4
    5608:	40 e0       	ldi	r20, 0x00	; 0
    560a:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
		G_RecieveValue = MCAL_SPI_MASTER_u8_SpiMaster_Transceive('2');
    560e:	82 e3       	ldi	r24, 0x32	; 50
    5610:	0e 94 1d 0b 	call	0x163a	; 0x163a <MCAL_SPI_MASTER_u8_SpiMaster_Transceive>
    5614:	80 93 5c 03 	sts	0x035C, r24
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_HIGH);
    5618:	81 e0       	ldi	r24, 0x01	; 1
    561a:	64 e0       	ldi	r22, 0x04	; 4
    561c:	41 e0       	ldi	r20, 0x01	; 1
    561e:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_LOW);
    5622:	81 e0       	ldi	r24, 0x01	; 1
    5624:	64 e0       	ldi	r22, 0x04	; 4
    5626:	40 e0       	ldi	r20, 0x00	; 0
    5628:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
		G_RecieveValue = MCAL_SPI_MASTER_u8_SpiMaster_Transceive('N');
    562c:	8e e4       	ldi	r24, 0x4E	; 78
    562e:	0e 94 1d 0b 	call	0x163a	; 0x163a <MCAL_SPI_MASTER_u8_SpiMaster_Transceive>
    5632:	80 93 5c 03 	sts	0x035C, r24
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_HIGH);
    5636:	81 e0       	ldi	r24, 0x01	; 1
    5638:	64 e0       	ldi	r22, 0x04	; 4
    563a:	41 e0       	ldi	r20, 0x01	; 1
    563c:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
		MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_LOW);
    5640:	81 e0       	ldi	r24, 0x01	; 1
    5642:	62 e0       	ldi	r22, 0x02	; 2
    5644:	40 e0       	ldi	r20, 0x00	; 0
    5646:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
		G_DeviceTwoFlag = 1;
    564a:	10 93 61 03 	sts	0x0361, r17
		HAL_LCD_u8_GoTo(0,0);
		HAL_LCD_u8_WriteString("Wrong Choice");
		_delay_ms(1000);
		APP_DEVICE2_u8_AppSetDeviceTwo();
	}
}
    564e:	df 91       	pop	r29
    5650:	cf 91       	pop	r28
    5652:	1f 91       	pop	r17
    5654:	08 95       	ret
		APP_void_AppHomePage();
	}

	else if (G_Keypad_Value == 7)
	{
		APP_void_AppGetDeviceID();
    5656:	0e 94 95 2b 	call	0x572a	; 0x572a <APP_void_AppGetDeviceID>
		HAL_LCD_u8_GoTo(0,0);
		HAL_LCD_u8_WriteString("Wrong Choice");
		_delay_ms(1000);
		APP_DEVICE2_u8_AppSetDeviceTwo();
	}
}
    565a:	df 91       	pop	r29
    565c:	cf 91       	pop	r28
    565e:	1f 91       	pop	r17
    5660:	08 95       	ret
		MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_LOW);
		G_DeviceTwoFlag = 0;
	}
	else if(G_Keypad_Value == 3)
	{
		HAL_LED_u8LedMode(LED2_Port,LED2_Pin,LED_TOG);
    5662:	80 e0       	ldi	r24, 0x00	; 0
    5664:	64 e0       	ldi	r22, 0x04	; 4
    5666:	42 e0       	ldi	r20, 0x02	; 2
    5668:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <HAL_LED_u8LedMode>
		MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_HIGH);
    566c:	81 e0       	ldi	r24, 0x01	; 1
    566e:	62 e0       	ldi	r22, 0x02	; 2
    5670:	41 e0       	ldi	r20, 0x01	; 1
    5672:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_LOW);
    5676:	81 e0       	ldi	r24, 0x01	; 1
    5678:	64 e0       	ldi	r22, 0x04	; 4
    567a:	40 e0       	ldi	r20, 0x00	; 0
    567c:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
		G_RecieveValue = MCAL_SPI_MASTER_u8_SpiMaster_Transceive('2');
    5680:	82 e3       	ldi	r24, 0x32	; 50
    5682:	0e 94 1d 0b 	call	0x163a	; 0x163a <MCAL_SPI_MASTER_u8_SpiMaster_Transceive>
    5686:	80 93 5c 03 	sts	0x035C, r24
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_HIGH);
    568a:	81 e0       	ldi	r24, 0x01	; 1
    568c:	64 e0       	ldi	r22, 0x04	; 4
    568e:	41 e0       	ldi	r20, 0x01	; 1
    5690:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_LOW);
    5694:	81 e0       	ldi	r24, 0x01	; 1
    5696:	64 e0       	ldi	r22, 0x04	; 4
    5698:	40 e0       	ldi	r20, 0x00	; 0
    569a:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
		G_RecieveValue = MCAL_SPI_MASTER_u8_SpiMaster_Transceive('T');
    569e:	84 e5       	ldi	r24, 0x54	; 84
    56a0:	0e 94 1d 0b 	call	0x163a	; 0x163a <MCAL_SPI_MASTER_u8_SpiMaster_Transceive>
    56a4:	80 93 5c 03 	sts	0x035C, r24
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_HIGH);
    56a8:	81 e0       	ldi	r24, 0x01	; 1
    56aa:	64 e0       	ldi	r22, 0x04	; 4
    56ac:	41 e0       	ldi	r20, 0x01	; 1
    56ae:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
		MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_LOW);
    56b2:	81 e0       	ldi	r24, 0x01	; 1
    56b4:	62 e0       	ldi	r22, 0x02	; 2
    56b6:	40 e0       	ldi	r20, 0x00	; 0
    56b8:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
		TOGGLE_BIT(G_DeviceTwoFlag,PIN0);
    56bc:	80 91 61 03 	lds	r24, 0x0361
    56c0:	91 e0       	ldi	r25, 0x01	; 1
    56c2:	89 27       	eor	r24, r25
    56c4:	80 93 61 03 	sts	0x0361, r24
    56c8:	8f cf       	rjmp	.-226    	; 0x55e8 <APP_DEVICE2_u8_AppSetDeviceTwo+0xdc>
		MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_LOW);
		G_DeviceTwoFlag = 1;
	}
	else if(G_Keypad_Value == 2)
	{
		HAL_LED_u8LedMode(LED2_Port,LED2_Pin,LED_OFF);
    56ca:	80 e0       	ldi	r24, 0x00	; 0
    56cc:	64 e0       	ldi	r22, 0x04	; 4
    56ce:	40 e0       	ldi	r20, 0x00	; 0
    56d0:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <HAL_LED_u8LedMode>
		MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_HIGH);
    56d4:	81 e0       	ldi	r24, 0x01	; 1
    56d6:	62 e0       	ldi	r22, 0x02	; 2
    56d8:	41 e0       	ldi	r20, 0x01	; 1
    56da:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_LOW);
    56de:	81 e0       	ldi	r24, 0x01	; 1
    56e0:	64 e0       	ldi	r22, 0x04	; 4
    56e2:	40 e0       	ldi	r20, 0x00	; 0
    56e4:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
		G_RecieveValue = MCAL_SPI_MASTER_u8_SpiMaster_Transceive('2');
    56e8:	82 e3       	ldi	r24, 0x32	; 50
    56ea:	0e 94 1d 0b 	call	0x163a	; 0x163a <MCAL_SPI_MASTER_u8_SpiMaster_Transceive>
    56ee:	80 93 5c 03 	sts	0x035C, r24
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_HIGH);
    56f2:	81 e0       	ldi	r24, 0x01	; 1
    56f4:	64 e0       	ldi	r22, 0x04	; 4
    56f6:	41 e0       	ldi	r20, 0x01	; 1
    56f8:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_LOW);
    56fc:	81 e0       	ldi	r24, 0x01	; 1
    56fe:	64 e0       	ldi	r22, 0x04	; 4
    5700:	40 e0       	ldi	r20, 0x00	; 0
    5702:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
		G_RecieveValue = MCAL_SPI_MASTER_u8_SpiMaster_Transceive('F');
    5706:	86 e4       	ldi	r24, 0x46	; 70
    5708:	0e 94 1d 0b 	call	0x163a	; 0x163a <MCAL_SPI_MASTER_u8_SpiMaster_Transceive>
    570c:	80 93 5c 03 	sts	0x035C, r24
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_HIGH);
    5710:	81 e0       	ldi	r24, 0x01	; 1
    5712:	64 e0       	ldi	r22, 0x04	; 4
    5714:	41 e0       	ldi	r20, 0x01	; 1
    5716:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
		MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_LOW);
    571a:	81 e0       	ldi	r24, 0x01	; 1
    571c:	62 e0       	ldi	r22, 0x02	; 2
    571e:	40 e0       	ldi	r20, 0x00	; 0
    5720:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
		G_DeviceTwoFlag = 0;
    5724:	10 92 61 03 	sts	0x0361, r1
    5728:	5f cf       	rjmp	.-322    	; 0x55e8 <APP_DEVICE2_u8_AppSetDeviceTwo+0xdc>

0000572a <APP_void_AppGetDeviceID>:
 * INPUT Arg   : No Args
 * RETURN      : No Return
 * **********************************************************************
 **/
void APP_void_AppGetDeviceID(void)
{
    572a:	cf 93       	push	r28
    572c:	df 93       	push	r29
    572e:	c8 ec       	ldi	r28, 0xC8	; 200
    5730:	d0 e0       	ldi	r29, 0x00	; 0
	HAL_LCD_u8_ClearFullScreen();
    5732:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <HAL_LCD_u8_ClearFullScreen>
	HAL_LCD_u8_GoTo(0,0);
    5736:	80 e0       	ldi	r24, 0x00	; 0
    5738:	60 e0       	ldi	r22, 0x00	; 0
    573a:	0e 94 b3 11 	call	0x2366	; 0x2366 <HAL_LCD_u8_GoTo>
	HAL_LCD_u8_WriteString("Enter Device ID:");
    573e:	8a ef       	ldi	r24, 0xFA	; 250
    5740:	91 e0       	ldi	r25, 0x01	; 1
    5742:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <HAL_LCD_u8_WriteString>
	HAL_LCD_u8_GoTo(2,0);
    5746:	82 e0       	ldi	r24, 0x02	; 2
    5748:	60 e0       	ldi	r22, 0x00	; 0
    574a:	0e 94 b3 11 	call	0x2366	; 0x2366 <HAL_LCD_u8_GoTo>
	HAL_LCD_u8_WriteString("0.Logout");
    574e:	81 e1       	ldi	r24, 0x11	; 17
    5750:	91 e0       	ldi	r25, 0x01	; 1
    5752:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <HAL_LCD_u8_WriteString>
	HAL_LCD_u8_GoTo(2,10);
    5756:	82 e0       	ldi	r24, 0x02	; 2
    5758:	6a e0       	ldi	r22, 0x0A	; 10
    575a:	0e 94 b3 11 	call	0x2366	; 0x2366 <HAL_LCD_u8_GoTo>
	HAL_LCD_u8_WriteString("7.BACK");
    575e:	8b e5       	ldi	r24, 0x5B	; 91
    5760:	91 e0       	ldi	r25, 0x01	; 1
    5762:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <HAL_LCD_u8_WriteString>
	HAL_LCD_u8_GoTo(3,0);
    5766:	83 e0       	ldi	r24, 0x03	; 3
    5768:	60 e0       	ldi	r22, 0x00	; 0
    576a:	0e 94 b3 11 	call	0x2366	; 0x2366 <HAL_LCD_u8_GoTo>
	HAL_LCD_u8_WriteString("8.HOME");
    576e:	82 e6       	ldi	r24, 0x62	; 98
    5770:	91 e0       	ldi	r25, 0x01	; 1
    5772:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <HAL_LCD_u8_WriteString>
	HAL_LCD_u8_GoTo(1,0);
    5776:	81 e0       	ldi	r24, 0x01	; 1
    5778:	60 e0       	ldi	r22, 0x00	; 0
    577a:	0e 94 b3 11 	call	0x2366	; 0x2366 <HAL_LCD_u8_GoTo>
	HAL_KEYPAD_u8_KaypadButton(&G_Keypad_Value);
    577e:	80 e6       	ldi	r24, 0x60	; 96
    5780:	93 e0       	ldi	r25, 0x03	; 3
    5782:	0e 94 96 14 	call	0x292c	; 0x292c <HAL_KEYPAD_u8_KaypadButton>
	if(G_Keypad_Value == 1)
    5786:	80 91 60 03 	lds	r24, 0x0360
    578a:	81 30       	cpi	r24, 0x01	; 1
    578c:	91 f1       	breq	.+100    	; 0x57f2 <APP_void_AppGetDeviceID+0xc8>
	{
		APP_DEVICE1_u8_AppSetDeviceOne();
	}
	else if(G_Keypad_Value == 2)
    578e:	80 91 60 03 	lds	r24, 0x0360
    5792:	82 30       	cpi	r24, 0x02	; 2
    5794:	99 f1       	breq	.+102    	; 0x57fc <APP_void_AppGetDeviceID+0xd2>
	{
		APP_DEVICE2_u8_AppSetDeviceTwo();
	}
	else if(G_Keypad_Value == 3)
    5796:	80 91 60 03 	lds	r24, 0x0360
    579a:	83 30       	cpi	r24, 0x03	; 3
    579c:	a1 f1       	breq	.+104    	; 0x5806 <APP_void_AppGetDeviceID+0xdc>
	{
		APP_DEVICE3_u8_AppSetDeviceThree();
	}
	else if(G_Keypad_Value == 4)
    579e:	80 91 60 03 	lds	r24, 0x0360
    57a2:	84 30       	cpi	r24, 0x04	; 4
    57a4:	a9 f1       	breq	.+106    	; 0x5810 <APP_void_AppGetDeviceID+0xe6>
	{
		APP_DEVICE4_u8_AppSetDeviceFour();
	}
	else if(G_Keypad_Value == 5)
    57a6:	80 91 60 03 	lds	r24, 0x0360
    57aa:	85 30       	cpi	r24, 0x05	; 5
    57ac:	b1 f1       	breq	.+108    	; 0x581a <APP_void_AppGetDeviceID+0xf0>
	{
		APP_DEVICE5_u8_AppSetDeviceFive();
	}
	else if((G_Keypad_Value == 7) || (G_Keypad_Value == 8) || (G_Keypad_Value == 0))
    57ae:	80 91 60 03 	lds	r24, 0x0360
    57b2:	87 30       	cpi	r24, 0x07	; 7
    57b4:	01 f1       	breq	.+64     	; 0x57f6 <APP_void_AppGetDeviceID+0xcc>
    57b6:	80 91 60 03 	lds	r24, 0x0360
    57ba:	88 30       	cpi	r24, 0x08	; 8
    57bc:	e1 f0       	breq	.+56     	; 0x57f6 <APP_void_AppGetDeviceID+0xcc>
    57be:	80 91 60 03 	lds	r24, 0x0360
    57c2:	88 23       	and	r24, r24
    57c4:	c1 f0       	breq	.+48     	; 0x57f6 <APP_void_AppGetDeviceID+0xcc>
	{
		return;
	}
	else
	{
		HAL_LCD_u8_ClearFullScreen();
    57c6:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <HAL_LCD_u8_ClearFullScreen>
		HAL_LCD_u8_GoTo(0,0);
    57ca:	80 e0       	ldi	r24, 0x00	; 0
    57cc:	60 e0       	ldi	r22, 0x00	; 0
    57ce:	0e 94 b3 11 	call	0x2366	; 0x2366 <HAL_LCD_u8_GoTo>
		HAL_LCD_u8_WriteString("Wrong Choice");
    57d2:	8e e3       	ldi	r24, 0x3E	; 62
    57d4:	91 e0       	ldi	r25, 0x01	; 1
    57d6:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <HAL_LCD_u8_WriteString>
    57da:	20 e0       	ldi	r18, 0x00	; 0
    57dc:	30 e0       	ldi	r19, 0x00	; 0
    57de:	ce 01       	movw	r24, r28
    57e0:	01 97       	sbiw	r24, 0x01	; 1
    57e2:	f1 f7       	brne	.-4      	; 0x57e0 <APP_void_AppGetDeviceID+0xb6>
    57e4:	2f 5f       	subi	r18, 0xFF	; 255
    57e6:	3f 4f       	sbci	r19, 0xFF	; 255
    57e8:	87 e2       	ldi	r24, 0x27	; 39
    57ea:	20 31       	cpi	r18, 0x10	; 16
    57ec:	38 07       	cpc	r19, r24
    57ee:	b9 f7       	brne	.-18     	; 0x57de <APP_void_AppGetDeviceID+0xb4>
    57f0:	a0 cf       	rjmp	.-192    	; 0x5732 <APP_void_AppGetDeviceID+0x8>
	HAL_LCD_u8_WriteString("8.HOME");
	HAL_LCD_u8_GoTo(1,0);
	HAL_KEYPAD_u8_KaypadButton(&G_Keypad_Value);
	if(G_Keypad_Value == 1)
	{
		APP_DEVICE1_u8_AppSetDeviceOne();
    57f2:	0e 94 12 2c 	call	0x5824	; 0x5824 <APP_DEVICE1_u8_AppSetDeviceOne>
		HAL_LCD_u8_GoTo(0,0);
		HAL_LCD_u8_WriteString("Wrong Choice");
		_delay_ms(1000);
		APP_void_AppGetDeviceID();
	}
}
    57f6:	df 91       	pop	r29
    57f8:	cf 91       	pop	r28
    57fa:	08 95       	ret
	{
		APP_DEVICE1_u8_AppSetDeviceOne();
	}
	else if(G_Keypad_Value == 2)
	{
		APP_DEVICE2_u8_AppSetDeviceTwo();
    57fc:	0e 94 86 2a 	call	0x550c	; 0x550c <APP_DEVICE2_u8_AppSetDeviceTwo>
		HAL_LCD_u8_GoTo(0,0);
		HAL_LCD_u8_WriteString("Wrong Choice");
		_delay_ms(1000);
		APP_void_AppGetDeviceID();
	}
}
    5800:	df 91       	pop	r29
    5802:	cf 91       	pop	r28
    5804:	08 95       	ret
	{
		APP_DEVICE2_u8_AppSetDeviceTwo();
	}
	else if(G_Keypad_Value == 3)
	{
		APP_DEVICE3_u8_AppSetDeviceThree();
    5806:	0e 94 3f 2f 	call	0x5e7e	; 0x5e7e <APP_DEVICE3_u8_AppSetDeviceThree>
		HAL_LCD_u8_GoTo(0,0);
		HAL_LCD_u8_WriteString("Wrong Choice");
		_delay_ms(1000);
		APP_void_AppGetDeviceID();
	}
}
    580a:	df 91       	pop	r29
    580c:	cf 91       	pop	r28
    580e:	08 95       	ret
	{
		APP_DEVICE3_u8_AppSetDeviceThree();
	}
	else if(G_Keypad_Value == 4)
	{
		APP_DEVICE4_u8_AppSetDeviceFour();
    5810:	0e 94 30 2e 	call	0x5c60	; 0x5c60 <APP_DEVICE4_u8_AppSetDeviceFour>
		HAL_LCD_u8_GoTo(0,0);
		HAL_LCD_u8_WriteString("Wrong Choice");
		_delay_ms(1000);
		APP_void_AppGetDeviceID();
	}
}
    5814:	df 91       	pop	r29
    5816:	cf 91       	pop	r28
    5818:	08 95       	ret
	{
		APP_DEVICE4_u8_AppSetDeviceFour();
	}
	else if(G_Keypad_Value == 5)
	{
		APP_DEVICE5_u8_AppSetDeviceFive();
    581a:	0e 94 21 2d 	call	0x5a42	; 0x5a42 <APP_DEVICE5_u8_AppSetDeviceFive>
		HAL_LCD_u8_GoTo(0,0);
		HAL_LCD_u8_WriteString("Wrong Choice");
		_delay_ms(1000);
		APP_void_AppGetDeviceID();
	}
}
    581e:	df 91       	pop	r29
    5820:	cf 91       	pop	r28
    5822:	08 95       	ret

00005824 <APP_DEVICE1_u8_AppSetDeviceOne>:
 * INPUT Arg   : No Args
 * RETURN      : No Return
 * **********************************************************************
 **/
void APP_DEVICE1_u8_AppSetDeviceOne(void)
{
    5824:	1f 93       	push	r17
    5826:	cf 93       	push	r28
    5828:	df 93       	push	r29
    582a:	c8 ec       	ldi	r28, 0xC8	; 200
    582c:	d0 e0       	ldi	r29, 0x00	; 0
	HAL_LCD_u8_ClearFullScreen();
    582e:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <HAL_LCD_u8_ClearFullScreen>
	HAL_LCD_u8_GoTo(0,0);
    5832:	80 e0       	ldi	r24, 0x00	; 0
    5834:	60 e0       	ldi	r22, 0x00	; 0
    5836:	0e 94 b3 11 	call	0x2366	; 0x2366 <HAL_LCD_u8_GoTo>
	HAL_LCD_u8_WriteString("1.ON");
    583a:	8d e7       	ldi	r24, 0x7D	; 125
    583c:	91 e0       	ldi	r25, 0x01	; 1
    583e:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <HAL_LCD_u8_WriteString>
	HAL_LCD_u8_GoTo(0,10);
    5842:	80 e0       	ldi	r24, 0x00	; 0
    5844:	6a e0       	ldi	r22, 0x0A	; 10
    5846:	0e 94 b3 11 	call	0x2366	; 0x2366 <HAL_LCD_u8_GoTo>
	HAL_LCD_u8_WriteString("2.OFF");
    584a:	82 e8       	ldi	r24, 0x82	; 130
    584c:	91 e0       	ldi	r25, 0x01	; 1
    584e:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <HAL_LCD_u8_WriteString>
	HAL_LCD_u8_GoTo(1,0);
    5852:	81 e0       	ldi	r24, 0x01	; 1
    5854:	60 e0       	ldi	r22, 0x00	; 0
    5856:	0e 94 b3 11 	call	0x2366	; 0x2366 <HAL_LCD_u8_GoTo>
	HAL_LCD_u8_WriteString("3.TOGGLE");
    585a:	88 e8       	ldi	r24, 0x88	; 136
    585c:	91 e0       	ldi	r25, 0x01	; 1
    585e:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <HAL_LCD_u8_WriteString>
	HAL_LCD_u8_GoTo(2,0);
    5862:	82 e0       	ldi	r24, 0x02	; 2
    5864:	60 e0       	ldi	r22, 0x00	; 0
    5866:	0e 94 b3 11 	call	0x2366	; 0x2366 <HAL_LCD_u8_GoTo>
	HAL_LCD_u8_WriteString("0.Logout");
    586a:	81 e1       	ldi	r24, 0x11	; 17
    586c:	91 e0       	ldi	r25, 0x01	; 1
    586e:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <HAL_LCD_u8_WriteString>
	HAL_LCD_u8_GoTo(2,10);
    5872:	82 e0       	ldi	r24, 0x02	; 2
    5874:	6a e0       	ldi	r22, 0x0A	; 10
    5876:	0e 94 b3 11 	call	0x2366	; 0x2366 <HAL_LCD_u8_GoTo>
	HAL_LCD_u8_WriteString("7.BACK");
    587a:	8b e5       	ldi	r24, 0x5B	; 91
    587c:	91 e0       	ldi	r25, 0x01	; 1
    587e:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <HAL_LCD_u8_WriteString>
	HAL_LCD_u8_GoTo(3,0);
    5882:	83 e0       	ldi	r24, 0x03	; 3
    5884:	60 e0       	ldi	r22, 0x00	; 0
    5886:	0e 94 b3 11 	call	0x2366	; 0x2366 <HAL_LCD_u8_GoTo>
	HAL_LCD_u8_WriteString("8.HOME");
    588a:	82 e6       	ldi	r24, 0x62	; 98
    588c:	91 e0       	ldi	r25, 0x01	; 1
    588e:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <HAL_LCD_u8_WriteString>
	HAL_KEYPAD_u8_KaypadButton(&G_Keypad_Value);
    5892:	80 e6       	ldi	r24, 0x60	; 96
    5894:	93 e0       	ldi	r25, 0x03	; 3
    5896:	0e 94 96 14 	call	0x292c	; 0x292c <HAL_KEYPAD_u8_KaypadButton>
	if(G_Keypad_Value == 1)
    589a:	10 91 60 03 	lds	r17, 0x0360
    589e:	11 30       	cpi	r17, 0x01	; 1
    58a0:	99 f1       	breq	.+102    	; 0x5908 <APP_DEVICE1_u8_AppSetDeviceOne+0xe4>
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_LOW);
		G_RecieveValue = MCAL_SPI_MASTER_u8_SpiMaster_Transceive('N');
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_HIGH);
		MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_LOW);
	}
	else if(G_Keypad_Value == 2)
    58a2:	80 91 60 03 	lds	r24, 0x0360
    58a6:	82 30       	cpi	r24, 0x02	; 2
    58a8:	09 f4       	brne	.+2      	; 0x58ac <APP_DEVICE1_u8_AppSetDeviceOne+0x88>
    58aa:	9b c0       	rjmp	.+310    	; 0x59e2 <APP_DEVICE1_u8_AppSetDeviceOne+0x1be>
		G_RecieveValue = MCAL_SPI_MASTER_u8_SpiMaster_Transceive('F');
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_HIGH);
		MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_LOW);
		G_DeviceOneFlag = 0;
	}
	else if(G_Keypad_Value == 3)
    58ac:	80 91 60 03 	lds	r24, 0x0360
    58b0:	83 30       	cpi	r24, 0x03	; 3
    58b2:	09 f4       	brne	.+2      	; 0x58b6 <APP_DEVICE1_u8_AppSetDeviceOne+0x92>
    58b4:	62 c0       	rjmp	.+196    	; 0x597a <APP_DEVICE1_u8_AppSetDeviceOne+0x156>
		G_RecieveValue = MCAL_SPI_MASTER_u8_SpiMaster_Transceive('T');
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_HIGH);
		MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_LOW);
		TOGGLE_BIT(G_DeviceOneFlag,PIN0);
	}
	else if(G_Keypad_Value == 8)
    58b6:	80 91 60 03 	lds	r24, 0x0360
    58ba:	88 30       	cpi	r24, 0x08	; 8
    58bc:	f9 f0       	breq	.+62     	; 0x58fc <APP_DEVICE1_u8_AppSetDeviceOne+0xd8>
	{
		APP_void_AppHomePage();
	}
	else if (G_Keypad_Value == 7)
    58be:	80 91 60 03 	lds	r24, 0x0360
    58c2:	87 30       	cpi	r24, 0x07	; 7
    58c4:	09 f4       	brne	.+2      	; 0x58c8 <APP_DEVICE1_u8_AppSetDeviceOne+0xa4>
    58c6:	53 c0       	rjmp	.+166    	; 0x596e <APP_DEVICE1_u8_AppSetDeviceOne+0x14a>
	{
		APP_void_AppGetDeviceID();
	}
	else if (G_Keypad_Value == 0)
    58c8:	80 91 60 03 	lds	r24, 0x0360
    58cc:	88 23       	and	r24, r24
    58ce:	c1 f0       	breq	.+48     	; 0x5900 <APP_DEVICE1_u8_AppSetDeviceOne+0xdc>
	{
		return;
	}
	else
	{
		HAL_LCD_u8_ClearFullScreen();
    58d0:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <HAL_LCD_u8_ClearFullScreen>
		HAL_LCD_u8_GoTo(0,0);
    58d4:	80 e0       	ldi	r24, 0x00	; 0
    58d6:	60 e0       	ldi	r22, 0x00	; 0
    58d8:	0e 94 b3 11 	call	0x2366	; 0x2366 <HAL_LCD_u8_GoTo>
		HAL_LCD_u8_WriteString("Wrong Choice");
    58dc:	8e e3       	ldi	r24, 0x3E	; 62
    58de:	91 e0       	ldi	r25, 0x01	; 1
    58e0:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <HAL_LCD_u8_WriteString>
    58e4:	20 e0       	ldi	r18, 0x00	; 0
    58e6:	30 e0       	ldi	r19, 0x00	; 0
    58e8:	ce 01       	movw	r24, r28
    58ea:	01 97       	sbiw	r24, 0x01	; 1
    58ec:	f1 f7       	brne	.-4      	; 0x58ea <APP_DEVICE1_u8_AppSetDeviceOne+0xc6>
    58ee:	2f 5f       	subi	r18, 0xFF	; 255
    58f0:	3f 4f       	sbci	r19, 0xFF	; 255
    58f2:	87 e2       	ldi	r24, 0x27	; 39
    58f4:	20 31       	cpi	r18, 0x10	; 16
    58f6:	38 07       	cpc	r19, r24
    58f8:	b9 f7       	brne	.-18     	; 0x58e8 <APP_DEVICE1_u8_AppSetDeviceOne+0xc4>
    58fa:	99 cf       	rjmp	.-206    	; 0x582e <APP_DEVICE1_u8_AppSetDeviceOne+0xa>
		MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_LOW);
		TOGGLE_BIT(G_DeviceOneFlag,PIN0);
	}
	else if(G_Keypad_Value == 8)
	{
		APP_void_AppHomePage();
    58fc:	0e 94 e4 26 	call	0x4dc8	; 0x4dc8 <APP_void_AppHomePage>
		HAL_LCD_u8_GoTo(0,0);
		HAL_LCD_u8_WriteString("Wrong Choice");
		_delay_ms(1000);
		APP_DEVICE1_u8_AppSetDeviceOne();
	}
}
    5900:	df 91       	pop	r29
    5902:	cf 91       	pop	r28
    5904:	1f 91       	pop	r17
    5906:	08 95       	ret
	HAL_LCD_u8_GoTo(3,0);
	HAL_LCD_u8_WriteString("8.HOME");
	HAL_KEYPAD_u8_KaypadButton(&G_Keypad_Value);
	if(G_Keypad_Value == 1)
	{
		HAL_LED_u8LedMode(LED1_Port,LED1_Pin,LED_ON);
    5908:	80 e0       	ldi	r24, 0x00	; 0
    590a:	63 e0       	ldi	r22, 0x03	; 3
    590c:	41 e0       	ldi	r20, 0x01	; 1
    590e:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <HAL_LED_u8LedMode>
		G_DeviceOneFlag = 1;
    5912:	10 93 65 03 	sts	0x0365, r17
		MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_HIGH);
    5916:	81 e0       	ldi	r24, 0x01	; 1
    5918:	62 e0       	ldi	r22, 0x02	; 2
    591a:	41 e0       	ldi	r20, 0x01	; 1
    591c:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_LOW);
    5920:	81 e0       	ldi	r24, 0x01	; 1
    5922:	64 e0       	ldi	r22, 0x04	; 4
    5924:	40 e0       	ldi	r20, 0x00	; 0
    5926:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
		G_RecieveValue = MCAL_SPI_MASTER_u8_SpiMaster_Transceive('1');
    592a:	81 e3       	ldi	r24, 0x31	; 49
    592c:	0e 94 1d 0b 	call	0x163a	; 0x163a <MCAL_SPI_MASTER_u8_SpiMaster_Transceive>
    5930:	80 93 5c 03 	sts	0x035C, r24
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_HIGH);
    5934:	81 e0       	ldi	r24, 0x01	; 1
    5936:	64 e0       	ldi	r22, 0x04	; 4
    5938:	41 e0       	ldi	r20, 0x01	; 1
    593a:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_LOW);
    593e:	81 e0       	ldi	r24, 0x01	; 1
    5940:	64 e0       	ldi	r22, 0x04	; 4
    5942:	40 e0       	ldi	r20, 0x00	; 0
    5944:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
		G_RecieveValue = MCAL_SPI_MASTER_u8_SpiMaster_Transceive('N');
    5948:	8e e4       	ldi	r24, 0x4E	; 78
    594a:	0e 94 1d 0b 	call	0x163a	; 0x163a <MCAL_SPI_MASTER_u8_SpiMaster_Transceive>
    594e:	80 93 5c 03 	sts	0x035C, r24
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_HIGH);
    5952:	81 e0       	ldi	r24, 0x01	; 1
    5954:	64 e0       	ldi	r22, 0x04	; 4
    5956:	41 e0       	ldi	r20, 0x01	; 1
    5958:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
		MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_LOW);
    595c:	81 e0       	ldi	r24, 0x01	; 1
    595e:	62 e0       	ldi	r22, 0x02	; 2
    5960:	40 e0       	ldi	r20, 0x00	; 0
    5962:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
		HAL_LCD_u8_GoTo(0,0);
		HAL_LCD_u8_WriteString("Wrong Choice");
		_delay_ms(1000);
		APP_DEVICE1_u8_AppSetDeviceOne();
	}
}
    5966:	df 91       	pop	r29
    5968:	cf 91       	pop	r28
    596a:	1f 91       	pop	r17
    596c:	08 95       	ret
	{
		APP_void_AppHomePage();
	}
	else if (G_Keypad_Value == 7)
	{
		APP_void_AppGetDeviceID();
    596e:	0e 94 95 2b 	call	0x572a	; 0x572a <APP_void_AppGetDeviceID>
		HAL_LCD_u8_GoTo(0,0);
		HAL_LCD_u8_WriteString("Wrong Choice");
		_delay_ms(1000);
		APP_DEVICE1_u8_AppSetDeviceOne();
	}
}
    5972:	df 91       	pop	r29
    5974:	cf 91       	pop	r28
    5976:	1f 91       	pop	r17
    5978:	08 95       	ret
		MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_LOW);
		G_DeviceOneFlag = 0;
	}
	else if(G_Keypad_Value == 3)
	{
		HAL_LED_u8LedMode(LED1_Port,LED1_Pin,LED_TOG);
    597a:	80 e0       	ldi	r24, 0x00	; 0
    597c:	63 e0       	ldi	r22, 0x03	; 3
    597e:	42 e0       	ldi	r20, 0x02	; 2
    5980:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <HAL_LED_u8LedMode>
		MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_HIGH);
    5984:	81 e0       	ldi	r24, 0x01	; 1
    5986:	62 e0       	ldi	r22, 0x02	; 2
    5988:	41 e0       	ldi	r20, 0x01	; 1
    598a:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_LOW);
    598e:	81 e0       	ldi	r24, 0x01	; 1
    5990:	64 e0       	ldi	r22, 0x04	; 4
    5992:	40 e0       	ldi	r20, 0x00	; 0
    5994:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
		G_RecieveValue = MCAL_SPI_MASTER_u8_SpiMaster_Transceive('1');
    5998:	81 e3       	ldi	r24, 0x31	; 49
    599a:	0e 94 1d 0b 	call	0x163a	; 0x163a <MCAL_SPI_MASTER_u8_SpiMaster_Transceive>
    599e:	80 93 5c 03 	sts	0x035C, r24
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_HIGH);
    59a2:	81 e0       	ldi	r24, 0x01	; 1
    59a4:	64 e0       	ldi	r22, 0x04	; 4
    59a6:	41 e0       	ldi	r20, 0x01	; 1
    59a8:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_LOW);
    59ac:	81 e0       	ldi	r24, 0x01	; 1
    59ae:	64 e0       	ldi	r22, 0x04	; 4
    59b0:	40 e0       	ldi	r20, 0x00	; 0
    59b2:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
		G_RecieveValue = MCAL_SPI_MASTER_u8_SpiMaster_Transceive('T');
    59b6:	84 e5       	ldi	r24, 0x54	; 84
    59b8:	0e 94 1d 0b 	call	0x163a	; 0x163a <MCAL_SPI_MASTER_u8_SpiMaster_Transceive>
    59bc:	80 93 5c 03 	sts	0x035C, r24
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_HIGH);
    59c0:	81 e0       	ldi	r24, 0x01	; 1
    59c2:	64 e0       	ldi	r22, 0x04	; 4
    59c4:	41 e0       	ldi	r20, 0x01	; 1
    59c6:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
		MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_LOW);
    59ca:	81 e0       	ldi	r24, 0x01	; 1
    59cc:	62 e0       	ldi	r22, 0x02	; 2
    59ce:	40 e0       	ldi	r20, 0x00	; 0
    59d0:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
		TOGGLE_BIT(G_DeviceOneFlag,PIN0);
    59d4:	80 91 65 03 	lds	r24, 0x0365
    59d8:	91 e0       	ldi	r25, 0x01	; 1
    59da:	89 27       	eor	r24, r25
    59dc:	80 93 65 03 	sts	0x0365, r24
    59e0:	8f cf       	rjmp	.-226    	; 0x5900 <APP_DEVICE1_u8_AppSetDeviceOne+0xdc>
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_HIGH);
		MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_LOW);
	}
	else if(G_Keypad_Value == 2)
	{
		HAL_LED_u8LedMode(LED1_Port,LED1_Pin,LED_OFF);
    59e2:	80 e0       	ldi	r24, 0x00	; 0
    59e4:	63 e0       	ldi	r22, 0x03	; 3
    59e6:	40 e0       	ldi	r20, 0x00	; 0
    59e8:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <HAL_LED_u8LedMode>
		MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_HIGH);
    59ec:	81 e0       	ldi	r24, 0x01	; 1
    59ee:	62 e0       	ldi	r22, 0x02	; 2
    59f0:	41 e0       	ldi	r20, 0x01	; 1
    59f2:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_LOW);
    59f6:	81 e0       	ldi	r24, 0x01	; 1
    59f8:	64 e0       	ldi	r22, 0x04	; 4
    59fa:	40 e0       	ldi	r20, 0x00	; 0
    59fc:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
		G_RecieveValue = MCAL_SPI_MASTER_u8_SpiMaster_Transceive('1');
    5a00:	81 e3       	ldi	r24, 0x31	; 49
    5a02:	0e 94 1d 0b 	call	0x163a	; 0x163a <MCAL_SPI_MASTER_u8_SpiMaster_Transceive>
    5a06:	80 93 5c 03 	sts	0x035C, r24
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_HIGH);
    5a0a:	81 e0       	ldi	r24, 0x01	; 1
    5a0c:	64 e0       	ldi	r22, 0x04	; 4
    5a0e:	41 e0       	ldi	r20, 0x01	; 1
    5a10:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_LOW);
    5a14:	81 e0       	ldi	r24, 0x01	; 1
    5a16:	64 e0       	ldi	r22, 0x04	; 4
    5a18:	40 e0       	ldi	r20, 0x00	; 0
    5a1a:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
		G_RecieveValue = MCAL_SPI_MASTER_u8_SpiMaster_Transceive('F');
    5a1e:	86 e4       	ldi	r24, 0x46	; 70
    5a20:	0e 94 1d 0b 	call	0x163a	; 0x163a <MCAL_SPI_MASTER_u8_SpiMaster_Transceive>
    5a24:	80 93 5c 03 	sts	0x035C, r24
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_HIGH);
    5a28:	81 e0       	ldi	r24, 0x01	; 1
    5a2a:	64 e0       	ldi	r22, 0x04	; 4
    5a2c:	41 e0       	ldi	r20, 0x01	; 1
    5a2e:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
		MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_LOW);
    5a32:	81 e0       	ldi	r24, 0x01	; 1
    5a34:	62 e0       	ldi	r22, 0x02	; 2
    5a36:	40 e0       	ldi	r20, 0x00	; 0
    5a38:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
		G_DeviceOneFlag = 0;
    5a3c:	10 92 65 03 	sts	0x0365, r1
    5a40:	5f cf       	rjmp	.-322    	; 0x5900 <APP_DEVICE1_u8_AppSetDeviceOne+0xdc>

00005a42 <APP_DEVICE5_u8_AppSetDeviceFive>:
 * INPUT Arg   : No Args
 * RETURN      : No Return
 * **********************************************************************
 **/
void APP_DEVICE5_u8_AppSetDeviceFive(void)
{
    5a42:	1f 93       	push	r17
    5a44:	cf 93       	push	r28
    5a46:	df 93       	push	r29
    5a48:	c8 ec       	ldi	r28, 0xC8	; 200
    5a4a:	d0 e0       	ldi	r29, 0x00	; 0
	HAL_LCD_u8_ClearFullScreen();
    5a4c:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <HAL_LCD_u8_ClearFullScreen>
	HAL_LCD_u8_GoTo(0,0);
    5a50:	80 e0       	ldi	r24, 0x00	; 0
    5a52:	60 e0       	ldi	r22, 0x00	; 0
    5a54:	0e 94 b3 11 	call	0x2366	; 0x2366 <HAL_LCD_u8_GoTo>
	HAL_LCD_u8_WriteString("1.ON");
    5a58:	8d e7       	ldi	r24, 0x7D	; 125
    5a5a:	91 e0       	ldi	r25, 0x01	; 1
    5a5c:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <HAL_LCD_u8_WriteString>
	HAL_LCD_u8_GoTo(0,10);
    5a60:	80 e0       	ldi	r24, 0x00	; 0
    5a62:	6a e0       	ldi	r22, 0x0A	; 10
    5a64:	0e 94 b3 11 	call	0x2366	; 0x2366 <HAL_LCD_u8_GoTo>
	HAL_LCD_u8_WriteString("2.OFF");
    5a68:	82 e8       	ldi	r24, 0x82	; 130
    5a6a:	91 e0       	ldi	r25, 0x01	; 1
    5a6c:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <HAL_LCD_u8_WriteString>
	HAL_LCD_u8_GoTo(1,0);
    5a70:	81 e0       	ldi	r24, 0x01	; 1
    5a72:	60 e0       	ldi	r22, 0x00	; 0
    5a74:	0e 94 b3 11 	call	0x2366	; 0x2366 <HAL_LCD_u8_GoTo>
	HAL_LCD_u8_WriteString("3.TOGGLE");
    5a78:	88 e8       	ldi	r24, 0x88	; 136
    5a7a:	91 e0       	ldi	r25, 0x01	; 1
    5a7c:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <HAL_LCD_u8_WriteString>
	HAL_LCD_u8_GoTo(2,0);
    5a80:	82 e0       	ldi	r24, 0x02	; 2
    5a82:	60 e0       	ldi	r22, 0x00	; 0
    5a84:	0e 94 b3 11 	call	0x2366	; 0x2366 <HAL_LCD_u8_GoTo>
	HAL_LCD_u8_WriteString("0.Logout");
    5a88:	81 e1       	ldi	r24, 0x11	; 17
    5a8a:	91 e0       	ldi	r25, 0x01	; 1
    5a8c:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <HAL_LCD_u8_WriteString>
	HAL_LCD_u8_GoTo(2,10);
    5a90:	82 e0       	ldi	r24, 0x02	; 2
    5a92:	6a e0       	ldi	r22, 0x0A	; 10
    5a94:	0e 94 b3 11 	call	0x2366	; 0x2366 <HAL_LCD_u8_GoTo>
	HAL_LCD_u8_WriteString("7.BACK");
    5a98:	8b e5       	ldi	r24, 0x5B	; 91
    5a9a:	91 e0       	ldi	r25, 0x01	; 1
    5a9c:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <HAL_LCD_u8_WriteString>
	HAL_LCD_u8_GoTo(3,0);
    5aa0:	83 e0       	ldi	r24, 0x03	; 3
    5aa2:	60 e0       	ldi	r22, 0x00	; 0
    5aa4:	0e 94 b3 11 	call	0x2366	; 0x2366 <HAL_LCD_u8_GoTo>
	HAL_LCD_u8_WriteString("8.HOME");
    5aa8:	82 e6       	ldi	r24, 0x62	; 98
    5aaa:	91 e0       	ldi	r25, 0x01	; 1
    5aac:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <HAL_LCD_u8_WriteString>
	HAL_KEYPAD_u8_KaypadButton(&G_Keypad_Value);
    5ab0:	80 e6       	ldi	r24, 0x60	; 96
    5ab2:	93 e0       	ldi	r25, 0x03	; 3
    5ab4:	0e 94 96 14 	call	0x292c	; 0x292c <HAL_KEYPAD_u8_KaypadButton>
	if(G_Keypad_Value == 1)
    5ab8:	10 91 60 03 	lds	r17, 0x0360
    5abc:	11 30       	cpi	r17, 0x01	; 1
    5abe:	99 f1       	breq	.+102    	; 0x5b26 <APP_DEVICE5_u8_AppSetDeviceFive+0xe4>
		G_RecieveValue = MCAL_SPI_MASTER_u8_SpiMaster_Transceive('N');
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_HIGH);
		MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_LOW);
		G_DeviceFiveFlag = 1;
	}
	else if(G_Keypad_Value == 2)
    5ac0:	80 91 60 03 	lds	r24, 0x0360
    5ac4:	82 30       	cpi	r24, 0x02	; 2
    5ac6:	09 f4       	brne	.+2      	; 0x5aca <APP_DEVICE5_u8_AppSetDeviceFive+0x88>
    5ac8:	9b c0       	rjmp	.+310    	; 0x5c00 <APP_DEVICE5_u8_AppSetDeviceFive+0x1be>
		G_RecieveValue = MCAL_SPI_MASTER_u8_SpiMaster_Transceive('F');
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_HIGH);
		MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_LOW);
		G_DeviceFiveFlag = 0;
	}
	else if(G_Keypad_Value == 3)
    5aca:	80 91 60 03 	lds	r24, 0x0360
    5ace:	83 30       	cpi	r24, 0x03	; 3
    5ad0:	09 f4       	brne	.+2      	; 0x5ad4 <APP_DEVICE5_u8_AppSetDeviceFive+0x92>
    5ad2:	62 c0       	rjmp	.+196    	; 0x5b98 <APP_DEVICE5_u8_AppSetDeviceFive+0x156>
		G_RecieveValue = MCAL_SPI_MASTER_u8_SpiMaster_Transceive('T');
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_HIGH);
		MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_LOW);
		TOGGLE_BIT(G_DeviceFiveFlag,PIN0);
	}
	else if(G_Keypad_Value == 8)
    5ad4:	80 91 60 03 	lds	r24, 0x0360
    5ad8:	88 30       	cpi	r24, 0x08	; 8
    5ada:	f9 f0       	breq	.+62     	; 0x5b1a <APP_DEVICE5_u8_AppSetDeviceFive+0xd8>
	{
		APP_void_AppHomePage();
	}

	else if (G_Keypad_Value == 7)
    5adc:	80 91 60 03 	lds	r24, 0x0360
    5ae0:	87 30       	cpi	r24, 0x07	; 7
    5ae2:	09 f4       	brne	.+2      	; 0x5ae6 <APP_DEVICE5_u8_AppSetDeviceFive+0xa4>
    5ae4:	53 c0       	rjmp	.+166    	; 0x5b8c <APP_DEVICE5_u8_AppSetDeviceFive+0x14a>
	{
		APP_void_AppGetDeviceID();
	}
	else if (G_Keypad_Value == 0)
    5ae6:	80 91 60 03 	lds	r24, 0x0360
    5aea:	88 23       	and	r24, r24
    5aec:	c1 f0       	breq	.+48     	; 0x5b1e <APP_DEVICE5_u8_AppSetDeviceFive+0xdc>
	{
		return;
	}
	else
	{
		HAL_LCD_u8_ClearFullScreen();
    5aee:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <HAL_LCD_u8_ClearFullScreen>
		HAL_LCD_u8_GoTo(0,0);
    5af2:	80 e0       	ldi	r24, 0x00	; 0
    5af4:	60 e0       	ldi	r22, 0x00	; 0
    5af6:	0e 94 b3 11 	call	0x2366	; 0x2366 <HAL_LCD_u8_GoTo>
		HAL_LCD_u8_WriteString("Wrong Choice");
    5afa:	8e e3       	ldi	r24, 0x3E	; 62
    5afc:	91 e0       	ldi	r25, 0x01	; 1
    5afe:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <HAL_LCD_u8_WriteString>
    5b02:	20 e0       	ldi	r18, 0x00	; 0
    5b04:	30 e0       	ldi	r19, 0x00	; 0
    5b06:	ce 01       	movw	r24, r28
    5b08:	01 97       	sbiw	r24, 0x01	; 1
    5b0a:	f1 f7       	brne	.-4      	; 0x5b08 <APP_DEVICE5_u8_AppSetDeviceFive+0xc6>
    5b0c:	2f 5f       	subi	r18, 0xFF	; 255
    5b0e:	3f 4f       	sbci	r19, 0xFF	; 255
    5b10:	87 e2       	ldi	r24, 0x27	; 39
    5b12:	20 31       	cpi	r18, 0x10	; 16
    5b14:	38 07       	cpc	r19, r24
    5b16:	b9 f7       	brne	.-18     	; 0x5b06 <APP_DEVICE5_u8_AppSetDeviceFive+0xc4>
    5b18:	99 cf       	rjmp	.-206    	; 0x5a4c <APP_DEVICE5_u8_AppSetDeviceFive+0xa>
		MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_LOW);
		TOGGLE_BIT(G_DeviceFiveFlag,PIN0);
	}
	else if(G_Keypad_Value == 8)
	{
		APP_void_AppHomePage();
    5b1a:	0e 94 e4 26 	call	0x4dc8	; 0x4dc8 <APP_void_AppHomePage>
		HAL_LCD_u8_GoTo(0,0);
		HAL_LCD_u8_WriteString("Wrong Choice");
		_delay_ms(1000);
		APP_DEVICE5_u8_AppSetDeviceFive();
	}
}
    5b1e:	df 91       	pop	r29
    5b20:	cf 91       	pop	r28
    5b22:	1f 91       	pop	r17
    5b24:	08 95       	ret
	HAL_LCD_u8_GoTo(3,0);
	HAL_LCD_u8_WriteString("8.HOME");
	HAL_KEYPAD_u8_KaypadButton(&G_Keypad_Value);
	if(G_Keypad_Value == 1)
	{
		HAL_LED_u8LedMode(LED5_Port,LED5_Pin,LED_ON);
    5b26:	80 e0       	ldi	r24, 0x00	; 0
    5b28:	67 e0       	ldi	r22, 0x07	; 7
    5b2a:	41 e0       	ldi	r20, 0x01	; 1
    5b2c:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <HAL_LED_u8LedMode>
		MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_HIGH);
    5b30:	81 e0       	ldi	r24, 0x01	; 1
    5b32:	62 e0       	ldi	r22, 0x02	; 2
    5b34:	41 e0       	ldi	r20, 0x01	; 1
    5b36:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_LOW);
    5b3a:	81 e0       	ldi	r24, 0x01	; 1
    5b3c:	64 e0       	ldi	r22, 0x04	; 4
    5b3e:	40 e0       	ldi	r20, 0x00	; 0
    5b40:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
		G_RecieveValue = MCAL_SPI_MASTER_u8_SpiMaster_Transceive('5');
    5b44:	85 e3       	ldi	r24, 0x35	; 53
    5b46:	0e 94 1d 0b 	call	0x163a	; 0x163a <MCAL_SPI_MASTER_u8_SpiMaster_Transceive>
    5b4a:	80 93 5c 03 	sts	0x035C, r24
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_HIGH);
    5b4e:	81 e0       	ldi	r24, 0x01	; 1
    5b50:	64 e0       	ldi	r22, 0x04	; 4
    5b52:	41 e0       	ldi	r20, 0x01	; 1
    5b54:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_LOW);
    5b58:	81 e0       	ldi	r24, 0x01	; 1
    5b5a:	64 e0       	ldi	r22, 0x04	; 4
    5b5c:	40 e0       	ldi	r20, 0x00	; 0
    5b5e:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
		G_RecieveValue = MCAL_SPI_MASTER_u8_SpiMaster_Transceive('N');
    5b62:	8e e4       	ldi	r24, 0x4E	; 78
    5b64:	0e 94 1d 0b 	call	0x163a	; 0x163a <MCAL_SPI_MASTER_u8_SpiMaster_Transceive>
    5b68:	80 93 5c 03 	sts	0x035C, r24
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_HIGH);
    5b6c:	81 e0       	ldi	r24, 0x01	; 1
    5b6e:	64 e0       	ldi	r22, 0x04	; 4
    5b70:	41 e0       	ldi	r20, 0x01	; 1
    5b72:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
		MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_LOW);
    5b76:	81 e0       	ldi	r24, 0x01	; 1
    5b78:	62 e0       	ldi	r22, 0x02	; 2
    5b7a:	40 e0       	ldi	r20, 0x00	; 0
    5b7c:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
		G_DeviceFiveFlag = 1;
    5b80:	10 93 5e 03 	sts	0x035E, r17
		HAL_LCD_u8_GoTo(0,0);
		HAL_LCD_u8_WriteString("Wrong Choice");
		_delay_ms(1000);
		APP_DEVICE5_u8_AppSetDeviceFive();
	}
}
    5b84:	df 91       	pop	r29
    5b86:	cf 91       	pop	r28
    5b88:	1f 91       	pop	r17
    5b8a:	08 95       	ret
		APP_void_AppHomePage();
	}

	else if (G_Keypad_Value == 7)
	{
		APP_void_AppGetDeviceID();
    5b8c:	0e 94 95 2b 	call	0x572a	; 0x572a <APP_void_AppGetDeviceID>
		HAL_LCD_u8_GoTo(0,0);
		HAL_LCD_u8_WriteString("Wrong Choice");
		_delay_ms(1000);
		APP_DEVICE5_u8_AppSetDeviceFive();
	}
}
    5b90:	df 91       	pop	r29
    5b92:	cf 91       	pop	r28
    5b94:	1f 91       	pop	r17
    5b96:	08 95       	ret
		MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_LOW);
		G_DeviceFiveFlag = 0;
	}
	else if(G_Keypad_Value == 3)
	{
		HAL_LED_u8LedMode(LED5_Port,LED5_Pin,LED_TOG);
    5b98:	80 e0       	ldi	r24, 0x00	; 0
    5b9a:	67 e0       	ldi	r22, 0x07	; 7
    5b9c:	42 e0       	ldi	r20, 0x02	; 2
    5b9e:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <HAL_LED_u8LedMode>
		MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_HIGH);
    5ba2:	81 e0       	ldi	r24, 0x01	; 1
    5ba4:	62 e0       	ldi	r22, 0x02	; 2
    5ba6:	41 e0       	ldi	r20, 0x01	; 1
    5ba8:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_LOW);
    5bac:	81 e0       	ldi	r24, 0x01	; 1
    5bae:	64 e0       	ldi	r22, 0x04	; 4
    5bb0:	40 e0       	ldi	r20, 0x00	; 0
    5bb2:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
		G_RecieveValue = MCAL_SPI_MASTER_u8_SpiMaster_Transceive('5');
    5bb6:	85 e3       	ldi	r24, 0x35	; 53
    5bb8:	0e 94 1d 0b 	call	0x163a	; 0x163a <MCAL_SPI_MASTER_u8_SpiMaster_Transceive>
    5bbc:	80 93 5c 03 	sts	0x035C, r24
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_HIGH);
    5bc0:	81 e0       	ldi	r24, 0x01	; 1
    5bc2:	64 e0       	ldi	r22, 0x04	; 4
    5bc4:	41 e0       	ldi	r20, 0x01	; 1
    5bc6:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_LOW);
    5bca:	81 e0       	ldi	r24, 0x01	; 1
    5bcc:	64 e0       	ldi	r22, 0x04	; 4
    5bce:	40 e0       	ldi	r20, 0x00	; 0
    5bd0:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
		G_RecieveValue = MCAL_SPI_MASTER_u8_SpiMaster_Transceive('T');
    5bd4:	84 e5       	ldi	r24, 0x54	; 84
    5bd6:	0e 94 1d 0b 	call	0x163a	; 0x163a <MCAL_SPI_MASTER_u8_SpiMaster_Transceive>
    5bda:	80 93 5c 03 	sts	0x035C, r24
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_HIGH);
    5bde:	81 e0       	ldi	r24, 0x01	; 1
    5be0:	64 e0       	ldi	r22, 0x04	; 4
    5be2:	41 e0       	ldi	r20, 0x01	; 1
    5be4:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
		MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_LOW);
    5be8:	81 e0       	ldi	r24, 0x01	; 1
    5bea:	62 e0       	ldi	r22, 0x02	; 2
    5bec:	40 e0       	ldi	r20, 0x00	; 0
    5bee:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
		TOGGLE_BIT(G_DeviceFiveFlag,PIN0);
    5bf2:	80 91 5e 03 	lds	r24, 0x035E
    5bf6:	91 e0       	ldi	r25, 0x01	; 1
    5bf8:	89 27       	eor	r24, r25
    5bfa:	80 93 5e 03 	sts	0x035E, r24
    5bfe:	8f cf       	rjmp	.-226    	; 0x5b1e <APP_DEVICE5_u8_AppSetDeviceFive+0xdc>
		MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_LOW);
		G_DeviceFiveFlag = 1;
	}
	else if(G_Keypad_Value == 2)
	{
		HAL_LED_u8LedMode(LED5_Port,LED5_Pin,LED_OFF);
    5c00:	80 e0       	ldi	r24, 0x00	; 0
    5c02:	67 e0       	ldi	r22, 0x07	; 7
    5c04:	40 e0       	ldi	r20, 0x00	; 0
    5c06:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <HAL_LED_u8LedMode>
		MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_HIGH);
    5c0a:	81 e0       	ldi	r24, 0x01	; 1
    5c0c:	62 e0       	ldi	r22, 0x02	; 2
    5c0e:	41 e0       	ldi	r20, 0x01	; 1
    5c10:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_LOW);
    5c14:	81 e0       	ldi	r24, 0x01	; 1
    5c16:	64 e0       	ldi	r22, 0x04	; 4
    5c18:	40 e0       	ldi	r20, 0x00	; 0
    5c1a:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
		G_RecieveValue = MCAL_SPI_MASTER_u8_SpiMaster_Transceive('5');
    5c1e:	85 e3       	ldi	r24, 0x35	; 53
    5c20:	0e 94 1d 0b 	call	0x163a	; 0x163a <MCAL_SPI_MASTER_u8_SpiMaster_Transceive>
    5c24:	80 93 5c 03 	sts	0x035C, r24
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_HIGH);
    5c28:	81 e0       	ldi	r24, 0x01	; 1
    5c2a:	64 e0       	ldi	r22, 0x04	; 4
    5c2c:	41 e0       	ldi	r20, 0x01	; 1
    5c2e:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_LOW);
    5c32:	81 e0       	ldi	r24, 0x01	; 1
    5c34:	64 e0       	ldi	r22, 0x04	; 4
    5c36:	40 e0       	ldi	r20, 0x00	; 0
    5c38:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
		G_RecieveValue = MCAL_SPI_MASTER_u8_SpiMaster_Transceive('F');
    5c3c:	86 e4       	ldi	r24, 0x46	; 70
    5c3e:	0e 94 1d 0b 	call	0x163a	; 0x163a <MCAL_SPI_MASTER_u8_SpiMaster_Transceive>
    5c42:	80 93 5c 03 	sts	0x035C, r24
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_HIGH);
    5c46:	81 e0       	ldi	r24, 0x01	; 1
    5c48:	64 e0       	ldi	r22, 0x04	; 4
    5c4a:	41 e0       	ldi	r20, 0x01	; 1
    5c4c:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
		MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_LOW);
    5c50:	81 e0       	ldi	r24, 0x01	; 1
    5c52:	62 e0       	ldi	r22, 0x02	; 2
    5c54:	40 e0       	ldi	r20, 0x00	; 0
    5c56:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
		G_DeviceFiveFlag = 0;
    5c5a:	10 92 5e 03 	sts	0x035E, r1
    5c5e:	5f cf       	rjmp	.-322    	; 0x5b1e <APP_DEVICE5_u8_AppSetDeviceFive+0xdc>

00005c60 <APP_DEVICE4_u8_AppSetDeviceFour>:
 * INPUT Arg   : No Args
 * RETURN      : No Return
 * **********************************************************************
 **/
void APP_DEVICE4_u8_AppSetDeviceFour(void)
{
    5c60:	1f 93       	push	r17
    5c62:	cf 93       	push	r28
    5c64:	df 93       	push	r29
    5c66:	c8 ec       	ldi	r28, 0xC8	; 200
    5c68:	d0 e0       	ldi	r29, 0x00	; 0
	HAL_LCD_u8_ClearFullScreen();
    5c6a:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <HAL_LCD_u8_ClearFullScreen>
	HAL_LCD_u8_GoTo(0,0);
    5c6e:	80 e0       	ldi	r24, 0x00	; 0
    5c70:	60 e0       	ldi	r22, 0x00	; 0
    5c72:	0e 94 b3 11 	call	0x2366	; 0x2366 <HAL_LCD_u8_GoTo>
	HAL_LCD_u8_WriteString("1.ON");
    5c76:	8d e7       	ldi	r24, 0x7D	; 125
    5c78:	91 e0       	ldi	r25, 0x01	; 1
    5c7a:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <HAL_LCD_u8_WriteString>
	HAL_LCD_u8_GoTo(0,10);
    5c7e:	80 e0       	ldi	r24, 0x00	; 0
    5c80:	6a e0       	ldi	r22, 0x0A	; 10
    5c82:	0e 94 b3 11 	call	0x2366	; 0x2366 <HAL_LCD_u8_GoTo>
	HAL_LCD_u8_WriteString("2.OFF");
    5c86:	82 e8       	ldi	r24, 0x82	; 130
    5c88:	91 e0       	ldi	r25, 0x01	; 1
    5c8a:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <HAL_LCD_u8_WriteString>
	HAL_LCD_u8_GoTo(1,0);
    5c8e:	81 e0       	ldi	r24, 0x01	; 1
    5c90:	60 e0       	ldi	r22, 0x00	; 0
    5c92:	0e 94 b3 11 	call	0x2366	; 0x2366 <HAL_LCD_u8_GoTo>
	HAL_LCD_u8_WriteString("3.TOGGLE");
    5c96:	88 e8       	ldi	r24, 0x88	; 136
    5c98:	91 e0       	ldi	r25, 0x01	; 1
    5c9a:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <HAL_LCD_u8_WriteString>
	HAL_LCD_u8_GoTo(2,0);
    5c9e:	82 e0       	ldi	r24, 0x02	; 2
    5ca0:	60 e0       	ldi	r22, 0x00	; 0
    5ca2:	0e 94 b3 11 	call	0x2366	; 0x2366 <HAL_LCD_u8_GoTo>
	HAL_LCD_u8_WriteString("0.Logout");
    5ca6:	81 e1       	ldi	r24, 0x11	; 17
    5ca8:	91 e0       	ldi	r25, 0x01	; 1
    5caa:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <HAL_LCD_u8_WriteString>
	HAL_LCD_u8_GoTo(2,10);
    5cae:	82 e0       	ldi	r24, 0x02	; 2
    5cb0:	6a e0       	ldi	r22, 0x0A	; 10
    5cb2:	0e 94 b3 11 	call	0x2366	; 0x2366 <HAL_LCD_u8_GoTo>
	HAL_LCD_u8_WriteString("7.BACK");
    5cb6:	8b e5       	ldi	r24, 0x5B	; 91
    5cb8:	91 e0       	ldi	r25, 0x01	; 1
    5cba:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <HAL_LCD_u8_WriteString>
	HAL_LCD_u8_GoTo(3,0);
    5cbe:	83 e0       	ldi	r24, 0x03	; 3
    5cc0:	60 e0       	ldi	r22, 0x00	; 0
    5cc2:	0e 94 b3 11 	call	0x2366	; 0x2366 <HAL_LCD_u8_GoTo>
	HAL_LCD_u8_WriteString("8.HOME");
    5cc6:	82 e6       	ldi	r24, 0x62	; 98
    5cc8:	91 e0       	ldi	r25, 0x01	; 1
    5cca:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <HAL_LCD_u8_WriteString>
	HAL_KEYPAD_u8_KaypadButton(&G_Keypad_Value);
    5cce:	80 e6       	ldi	r24, 0x60	; 96
    5cd0:	93 e0       	ldi	r25, 0x03	; 3
    5cd2:	0e 94 96 14 	call	0x292c	; 0x292c <HAL_KEYPAD_u8_KaypadButton>
	if(G_Keypad_Value == 1)
    5cd6:	10 91 60 03 	lds	r17, 0x0360
    5cda:	11 30       	cpi	r17, 0x01	; 1
    5cdc:	99 f1       	breq	.+102    	; 0x5d44 <APP_DEVICE4_u8_AppSetDeviceFour+0xe4>
		G_RecieveValue = MCAL_SPI_MASTER_u8_SpiMaster_Transceive('N');
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_HIGH);
		MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_LOW);
		G_DeviceFourFlag = 1;
	}
	else if(G_Keypad_Value == 2)
    5cde:	80 91 60 03 	lds	r24, 0x0360
    5ce2:	82 30       	cpi	r24, 0x02	; 2
    5ce4:	09 f4       	brne	.+2      	; 0x5ce8 <APP_DEVICE4_u8_AppSetDeviceFour+0x88>
    5ce6:	9b c0       	rjmp	.+310    	; 0x5e1e <APP_DEVICE4_u8_AppSetDeviceFour+0x1be>
		G_RecieveValue = MCAL_SPI_MASTER_u8_SpiMaster_Transceive('F');
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_HIGH);
		MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_LOW);
		G_DeviceFourFlag = 0;
	}
	else if(G_Keypad_Value == 3)
    5ce8:	80 91 60 03 	lds	r24, 0x0360
    5cec:	83 30       	cpi	r24, 0x03	; 3
    5cee:	09 f4       	brne	.+2      	; 0x5cf2 <APP_DEVICE4_u8_AppSetDeviceFour+0x92>
    5cf0:	62 c0       	rjmp	.+196    	; 0x5db6 <APP_DEVICE4_u8_AppSetDeviceFour+0x156>
		G_RecieveValue = MCAL_SPI_MASTER_u8_SpiMaster_Transceive('T');
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_HIGH);
		MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_LOW);
		TOGGLE_BIT(G_DeviceFourFlag,PIN0);
	}
	else if(G_Keypad_Value == 8)
    5cf2:	80 91 60 03 	lds	r24, 0x0360
    5cf6:	88 30       	cpi	r24, 0x08	; 8
    5cf8:	f9 f0       	breq	.+62     	; 0x5d38 <APP_DEVICE4_u8_AppSetDeviceFour+0xd8>
	{
		APP_void_AppHomePage();
	}

	else if (G_Keypad_Value == 7)
    5cfa:	80 91 60 03 	lds	r24, 0x0360
    5cfe:	87 30       	cpi	r24, 0x07	; 7
    5d00:	09 f4       	brne	.+2      	; 0x5d04 <APP_DEVICE4_u8_AppSetDeviceFour+0xa4>
    5d02:	53 c0       	rjmp	.+166    	; 0x5daa <APP_DEVICE4_u8_AppSetDeviceFour+0x14a>
	{
		APP_void_AppGetDeviceID();
	}
	else if (G_Keypad_Value == 0)
    5d04:	80 91 60 03 	lds	r24, 0x0360
    5d08:	88 23       	and	r24, r24
    5d0a:	c1 f0       	breq	.+48     	; 0x5d3c <APP_DEVICE4_u8_AppSetDeviceFour+0xdc>
	{
		return;
	}
	else
	{
		HAL_LCD_u8_ClearFullScreen();
    5d0c:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <HAL_LCD_u8_ClearFullScreen>
		HAL_LCD_u8_GoTo(0,0);
    5d10:	80 e0       	ldi	r24, 0x00	; 0
    5d12:	60 e0       	ldi	r22, 0x00	; 0
    5d14:	0e 94 b3 11 	call	0x2366	; 0x2366 <HAL_LCD_u8_GoTo>
		HAL_LCD_u8_WriteString("Wrong Choice");
    5d18:	8e e3       	ldi	r24, 0x3E	; 62
    5d1a:	91 e0       	ldi	r25, 0x01	; 1
    5d1c:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <HAL_LCD_u8_WriteString>
    5d20:	20 e0       	ldi	r18, 0x00	; 0
    5d22:	30 e0       	ldi	r19, 0x00	; 0
    5d24:	ce 01       	movw	r24, r28
    5d26:	01 97       	sbiw	r24, 0x01	; 1
    5d28:	f1 f7       	brne	.-4      	; 0x5d26 <APP_DEVICE4_u8_AppSetDeviceFour+0xc6>
    5d2a:	2f 5f       	subi	r18, 0xFF	; 255
    5d2c:	3f 4f       	sbci	r19, 0xFF	; 255
    5d2e:	87 e2       	ldi	r24, 0x27	; 39
    5d30:	20 31       	cpi	r18, 0x10	; 16
    5d32:	38 07       	cpc	r19, r24
    5d34:	b9 f7       	brne	.-18     	; 0x5d24 <APP_DEVICE4_u8_AppSetDeviceFour+0xc4>
    5d36:	99 cf       	rjmp	.-206    	; 0x5c6a <APP_DEVICE4_u8_AppSetDeviceFour+0xa>
		MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_LOW);
		TOGGLE_BIT(G_DeviceFourFlag,PIN0);
	}
	else if(G_Keypad_Value == 8)
	{
		APP_void_AppHomePage();
    5d38:	0e 94 e4 26 	call	0x4dc8	; 0x4dc8 <APP_void_AppHomePage>
		HAL_LCD_u8_GoTo(0,0);
		HAL_LCD_u8_WriteString("Wrong Choice");
		_delay_ms(1000);
		APP_DEVICE4_u8_AppSetDeviceFour();
	}
}
    5d3c:	df 91       	pop	r29
    5d3e:	cf 91       	pop	r28
    5d40:	1f 91       	pop	r17
    5d42:	08 95       	ret
	HAL_LCD_u8_GoTo(3,0);
	HAL_LCD_u8_WriteString("8.HOME");
	HAL_KEYPAD_u8_KaypadButton(&G_Keypad_Value);
	if(G_Keypad_Value == 1)
	{
		HAL_LED_u8LedMode(LED4_Port,LED4_Pin,LED_ON);
    5d44:	80 e0       	ldi	r24, 0x00	; 0
    5d46:	66 e0       	ldi	r22, 0x06	; 6
    5d48:	41 e0       	ldi	r20, 0x01	; 1
    5d4a:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <HAL_LED_u8LedMode>
		MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_HIGH);
    5d4e:	81 e0       	ldi	r24, 0x01	; 1
    5d50:	62 e0       	ldi	r22, 0x02	; 2
    5d52:	41 e0       	ldi	r20, 0x01	; 1
    5d54:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_LOW);
    5d58:	81 e0       	ldi	r24, 0x01	; 1
    5d5a:	64 e0       	ldi	r22, 0x04	; 4
    5d5c:	40 e0       	ldi	r20, 0x00	; 0
    5d5e:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
		G_RecieveValue = MCAL_SPI_MASTER_u8_SpiMaster_Transceive('4');
    5d62:	84 e3       	ldi	r24, 0x34	; 52
    5d64:	0e 94 1d 0b 	call	0x163a	; 0x163a <MCAL_SPI_MASTER_u8_SpiMaster_Transceive>
    5d68:	80 93 5c 03 	sts	0x035C, r24
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_HIGH);
    5d6c:	81 e0       	ldi	r24, 0x01	; 1
    5d6e:	64 e0       	ldi	r22, 0x04	; 4
    5d70:	41 e0       	ldi	r20, 0x01	; 1
    5d72:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_LOW);
    5d76:	81 e0       	ldi	r24, 0x01	; 1
    5d78:	64 e0       	ldi	r22, 0x04	; 4
    5d7a:	40 e0       	ldi	r20, 0x00	; 0
    5d7c:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
		G_RecieveValue = MCAL_SPI_MASTER_u8_SpiMaster_Transceive('N');
    5d80:	8e e4       	ldi	r24, 0x4E	; 78
    5d82:	0e 94 1d 0b 	call	0x163a	; 0x163a <MCAL_SPI_MASTER_u8_SpiMaster_Transceive>
    5d86:	80 93 5c 03 	sts	0x035C, r24
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_HIGH);
    5d8a:	81 e0       	ldi	r24, 0x01	; 1
    5d8c:	64 e0       	ldi	r22, 0x04	; 4
    5d8e:	41 e0       	ldi	r20, 0x01	; 1
    5d90:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
		MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_LOW);
    5d94:	81 e0       	ldi	r24, 0x01	; 1
    5d96:	62 e0       	ldi	r22, 0x02	; 2
    5d98:	40 e0       	ldi	r20, 0x00	; 0
    5d9a:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
		G_DeviceFourFlag = 1;
    5d9e:	10 93 68 03 	sts	0x0368, r17
		HAL_LCD_u8_GoTo(0,0);
		HAL_LCD_u8_WriteString("Wrong Choice");
		_delay_ms(1000);
		APP_DEVICE4_u8_AppSetDeviceFour();
	}
}
    5da2:	df 91       	pop	r29
    5da4:	cf 91       	pop	r28
    5da6:	1f 91       	pop	r17
    5da8:	08 95       	ret
		APP_void_AppHomePage();
	}

	else if (G_Keypad_Value == 7)
	{
		APP_void_AppGetDeviceID();
    5daa:	0e 94 95 2b 	call	0x572a	; 0x572a <APP_void_AppGetDeviceID>
		HAL_LCD_u8_GoTo(0,0);
		HAL_LCD_u8_WriteString("Wrong Choice");
		_delay_ms(1000);
		APP_DEVICE4_u8_AppSetDeviceFour();
	}
}
    5dae:	df 91       	pop	r29
    5db0:	cf 91       	pop	r28
    5db2:	1f 91       	pop	r17
    5db4:	08 95       	ret
		MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_LOW);
		G_DeviceFourFlag = 0;
	}
	else if(G_Keypad_Value == 3)
	{
		HAL_LED_u8LedMode(LED4_Port,LED4_Pin,LED_TOG);
    5db6:	80 e0       	ldi	r24, 0x00	; 0
    5db8:	66 e0       	ldi	r22, 0x06	; 6
    5dba:	42 e0       	ldi	r20, 0x02	; 2
    5dbc:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <HAL_LED_u8LedMode>
		MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_HIGH);
    5dc0:	81 e0       	ldi	r24, 0x01	; 1
    5dc2:	62 e0       	ldi	r22, 0x02	; 2
    5dc4:	41 e0       	ldi	r20, 0x01	; 1
    5dc6:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_LOW);
    5dca:	81 e0       	ldi	r24, 0x01	; 1
    5dcc:	64 e0       	ldi	r22, 0x04	; 4
    5dce:	40 e0       	ldi	r20, 0x00	; 0
    5dd0:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
		G_RecieveValue = MCAL_SPI_MASTER_u8_SpiMaster_Transceive('4');
    5dd4:	84 e3       	ldi	r24, 0x34	; 52
    5dd6:	0e 94 1d 0b 	call	0x163a	; 0x163a <MCAL_SPI_MASTER_u8_SpiMaster_Transceive>
    5dda:	80 93 5c 03 	sts	0x035C, r24
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_HIGH);
    5dde:	81 e0       	ldi	r24, 0x01	; 1
    5de0:	64 e0       	ldi	r22, 0x04	; 4
    5de2:	41 e0       	ldi	r20, 0x01	; 1
    5de4:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_LOW);
    5de8:	81 e0       	ldi	r24, 0x01	; 1
    5dea:	64 e0       	ldi	r22, 0x04	; 4
    5dec:	40 e0       	ldi	r20, 0x00	; 0
    5dee:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
		G_RecieveValue = MCAL_SPI_MASTER_u8_SpiMaster_Transceive('T');
    5df2:	84 e5       	ldi	r24, 0x54	; 84
    5df4:	0e 94 1d 0b 	call	0x163a	; 0x163a <MCAL_SPI_MASTER_u8_SpiMaster_Transceive>
    5df8:	80 93 5c 03 	sts	0x035C, r24
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_HIGH);
    5dfc:	81 e0       	ldi	r24, 0x01	; 1
    5dfe:	64 e0       	ldi	r22, 0x04	; 4
    5e00:	41 e0       	ldi	r20, 0x01	; 1
    5e02:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
		MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_LOW);
    5e06:	81 e0       	ldi	r24, 0x01	; 1
    5e08:	62 e0       	ldi	r22, 0x02	; 2
    5e0a:	40 e0       	ldi	r20, 0x00	; 0
    5e0c:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
		TOGGLE_BIT(G_DeviceFourFlag,PIN0);
    5e10:	80 91 68 03 	lds	r24, 0x0368
    5e14:	91 e0       	ldi	r25, 0x01	; 1
    5e16:	89 27       	eor	r24, r25
    5e18:	80 93 68 03 	sts	0x0368, r24
    5e1c:	8f cf       	rjmp	.-226    	; 0x5d3c <APP_DEVICE4_u8_AppSetDeviceFour+0xdc>
		MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_LOW);
		G_DeviceFourFlag = 1;
	}
	else if(G_Keypad_Value == 2)
	{
		HAL_LED_u8LedMode(LED4_Port,LED4_Pin,LED_OFF);
    5e1e:	80 e0       	ldi	r24, 0x00	; 0
    5e20:	66 e0       	ldi	r22, 0x06	; 6
    5e22:	40 e0       	ldi	r20, 0x00	; 0
    5e24:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <HAL_LED_u8LedMode>
		MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_HIGH);
    5e28:	81 e0       	ldi	r24, 0x01	; 1
    5e2a:	62 e0       	ldi	r22, 0x02	; 2
    5e2c:	41 e0       	ldi	r20, 0x01	; 1
    5e2e:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_LOW);
    5e32:	81 e0       	ldi	r24, 0x01	; 1
    5e34:	64 e0       	ldi	r22, 0x04	; 4
    5e36:	40 e0       	ldi	r20, 0x00	; 0
    5e38:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
		G_RecieveValue = MCAL_SPI_MASTER_u8_SpiMaster_Transceive('4');
    5e3c:	84 e3       	ldi	r24, 0x34	; 52
    5e3e:	0e 94 1d 0b 	call	0x163a	; 0x163a <MCAL_SPI_MASTER_u8_SpiMaster_Transceive>
    5e42:	80 93 5c 03 	sts	0x035C, r24
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_HIGH);
    5e46:	81 e0       	ldi	r24, 0x01	; 1
    5e48:	64 e0       	ldi	r22, 0x04	; 4
    5e4a:	41 e0       	ldi	r20, 0x01	; 1
    5e4c:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_LOW);
    5e50:	81 e0       	ldi	r24, 0x01	; 1
    5e52:	64 e0       	ldi	r22, 0x04	; 4
    5e54:	40 e0       	ldi	r20, 0x00	; 0
    5e56:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
		G_RecieveValue = MCAL_SPI_MASTER_u8_SpiMaster_Transceive('F');
    5e5a:	86 e4       	ldi	r24, 0x46	; 70
    5e5c:	0e 94 1d 0b 	call	0x163a	; 0x163a <MCAL_SPI_MASTER_u8_SpiMaster_Transceive>
    5e60:	80 93 5c 03 	sts	0x035C, r24
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_HIGH);
    5e64:	81 e0       	ldi	r24, 0x01	; 1
    5e66:	64 e0       	ldi	r22, 0x04	; 4
    5e68:	41 e0       	ldi	r20, 0x01	; 1
    5e6a:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
		MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_LOW);
    5e6e:	81 e0       	ldi	r24, 0x01	; 1
    5e70:	62 e0       	ldi	r22, 0x02	; 2
    5e72:	40 e0       	ldi	r20, 0x00	; 0
    5e74:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
		G_DeviceFourFlag = 0;
    5e78:	10 92 68 03 	sts	0x0368, r1
    5e7c:	5f cf       	rjmp	.-322    	; 0x5d3c <APP_DEVICE4_u8_AppSetDeviceFour+0xdc>

00005e7e <APP_DEVICE3_u8_AppSetDeviceThree>:
 * INPUT Arg   : No Args
 * RETURN      : No Return
 * **********************************************************************
 **/
void APP_DEVICE3_u8_AppSetDeviceThree(void)
{
    5e7e:	1f 93       	push	r17
    5e80:	cf 93       	push	r28
    5e82:	df 93       	push	r29
    5e84:	c8 ec       	ldi	r28, 0xC8	; 200
    5e86:	d0 e0       	ldi	r29, 0x00	; 0
	HAL_LCD_u8_ClearFullScreen();
    5e88:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <HAL_LCD_u8_ClearFullScreen>
	HAL_LCD_u8_GoTo(0,0);
    5e8c:	80 e0       	ldi	r24, 0x00	; 0
    5e8e:	60 e0       	ldi	r22, 0x00	; 0
    5e90:	0e 94 b3 11 	call	0x2366	; 0x2366 <HAL_LCD_u8_GoTo>
	HAL_LCD_u8_ClearFullScreen();
    5e94:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <HAL_LCD_u8_ClearFullScreen>
	HAL_LCD_u8_GoTo(0,0);
    5e98:	80 e0       	ldi	r24, 0x00	; 0
    5e9a:	60 e0       	ldi	r22, 0x00	; 0
    5e9c:	0e 94 b3 11 	call	0x2366	; 0x2366 <HAL_LCD_u8_GoTo>
	HAL_LCD_u8_WriteString("1.ON");
    5ea0:	8d e7       	ldi	r24, 0x7D	; 125
    5ea2:	91 e0       	ldi	r25, 0x01	; 1
    5ea4:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <HAL_LCD_u8_WriteString>
	HAL_LCD_u8_GoTo(0,10);
    5ea8:	80 e0       	ldi	r24, 0x00	; 0
    5eaa:	6a e0       	ldi	r22, 0x0A	; 10
    5eac:	0e 94 b3 11 	call	0x2366	; 0x2366 <HAL_LCD_u8_GoTo>
	HAL_LCD_u8_WriteString("2.OFF");
    5eb0:	82 e8       	ldi	r24, 0x82	; 130
    5eb2:	91 e0       	ldi	r25, 0x01	; 1
    5eb4:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <HAL_LCD_u8_WriteString>
	HAL_LCD_u8_GoTo(1,0);
    5eb8:	81 e0       	ldi	r24, 0x01	; 1
    5eba:	60 e0       	ldi	r22, 0x00	; 0
    5ebc:	0e 94 b3 11 	call	0x2366	; 0x2366 <HAL_LCD_u8_GoTo>
	HAL_LCD_u8_WriteString("3.TOGGLE");
    5ec0:	88 e8       	ldi	r24, 0x88	; 136
    5ec2:	91 e0       	ldi	r25, 0x01	; 1
    5ec4:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <HAL_LCD_u8_WriteString>
	HAL_LCD_u8_GoTo(2,0);
    5ec8:	82 e0       	ldi	r24, 0x02	; 2
    5eca:	60 e0       	ldi	r22, 0x00	; 0
    5ecc:	0e 94 b3 11 	call	0x2366	; 0x2366 <HAL_LCD_u8_GoTo>
	HAL_LCD_u8_WriteString("0.Logout");
    5ed0:	81 e1       	ldi	r24, 0x11	; 17
    5ed2:	91 e0       	ldi	r25, 0x01	; 1
    5ed4:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <HAL_LCD_u8_WriteString>
	HAL_LCD_u8_GoTo(2,10);
    5ed8:	82 e0       	ldi	r24, 0x02	; 2
    5eda:	6a e0       	ldi	r22, 0x0A	; 10
    5edc:	0e 94 b3 11 	call	0x2366	; 0x2366 <HAL_LCD_u8_GoTo>
	HAL_LCD_u8_WriteString("7.BACK");
    5ee0:	8b e5       	ldi	r24, 0x5B	; 91
    5ee2:	91 e0       	ldi	r25, 0x01	; 1
    5ee4:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <HAL_LCD_u8_WriteString>
	HAL_LCD_u8_GoTo(3,0);
    5ee8:	83 e0       	ldi	r24, 0x03	; 3
    5eea:	60 e0       	ldi	r22, 0x00	; 0
    5eec:	0e 94 b3 11 	call	0x2366	; 0x2366 <HAL_LCD_u8_GoTo>
	HAL_LCD_u8_WriteString("8.HOME");
    5ef0:	82 e6       	ldi	r24, 0x62	; 98
    5ef2:	91 e0       	ldi	r25, 0x01	; 1
    5ef4:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <HAL_LCD_u8_WriteString>
	HAL_KEYPAD_u8_KaypadButton(&G_Keypad_Value);
    5ef8:	80 e6       	ldi	r24, 0x60	; 96
    5efa:	93 e0       	ldi	r25, 0x03	; 3
    5efc:	0e 94 96 14 	call	0x292c	; 0x292c <HAL_KEYPAD_u8_KaypadButton>
	if(G_Keypad_Value == 1)
    5f00:	10 91 60 03 	lds	r17, 0x0360
    5f04:	11 30       	cpi	r17, 0x01	; 1
    5f06:	99 f1       	breq	.+102    	; 0x5f6e <APP_DEVICE3_u8_AppSetDeviceThree+0xf0>
		G_RecieveValue = MCAL_SPI_MASTER_u8_SpiMaster_Transceive('N');
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_HIGH);
		MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_LOW);
		G_DeviceThreeFlag = 1;
	}
	else if(G_Keypad_Value == 2)
    5f08:	80 91 60 03 	lds	r24, 0x0360
    5f0c:	82 30       	cpi	r24, 0x02	; 2
    5f0e:	09 f4       	brne	.+2      	; 0x5f12 <APP_DEVICE3_u8_AppSetDeviceThree+0x94>
    5f10:	9b c0       	rjmp	.+310    	; 0x6048 <APP_DEVICE3_u8_AppSetDeviceThree+0x1ca>
		G_RecieveValue = MCAL_SPI_MASTER_u8_SpiMaster_Transceive('F');
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_HIGH);
		MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_LOW);
		G_DeviceThreeFlag = 0;
	}
	else if(G_Keypad_Value == 3)
    5f12:	80 91 60 03 	lds	r24, 0x0360
    5f16:	83 30       	cpi	r24, 0x03	; 3
    5f18:	09 f4       	brne	.+2      	; 0x5f1c <APP_DEVICE3_u8_AppSetDeviceThree+0x9e>
    5f1a:	62 c0       	rjmp	.+196    	; 0x5fe0 <APP_DEVICE3_u8_AppSetDeviceThree+0x162>
		G_RecieveValue = MCAL_SPI_MASTER_u8_SpiMaster_Transceive('T');
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_HIGH);
		MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_LOW);
		TOGGLE_BIT(G_DeviceThreeFlag,PIN0);
	}
	else if(G_Keypad_Value == 8)
    5f1c:	80 91 60 03 	lds	r24, 0x0360
    5f20:	88 30       	cpi	r24, 0x08	; 8
    5f22:	f9 f0       	breq	.+62     	; 0x5f62 <APP_DEVICE3_u8_AppSetDeviceThree+0xe4>
	{
		APP_void_AppHomePage();
	}

	else if (G_Keypad_Value == 7)
    5f24:	80 91 60 03 	lds	r24, 0x0360
    5f28:	87 30       	cpi	r24, 0x07	; 7
    5f2a:	09 f4       	brne	.+2      	; 0x5f2e <APP_DEVICE3_u8_AppSetDeviceThree+0xb0>
    5f2c:	53 c0       	rjmp	.+166    	; 0x5fd4 <APP_DEVICE3_u8_AppSetDeviceThree+0x156>
	{
		APP_void_AppGetDeviceID();
	}
	else if (G_Keypad_Value == 0)
    5f2e:	80 91 60 03 	lds	r24, 0x0360
    5f32:	88 23       	and	r24, r24
    5f34:	c1 f0       	breq	.+48     	; 0x5f66 <APP_DEVICE3_u8_AppSetDeviceThree+0xe8>
	{
		return;
	}
	else
	{
		HAL_LCD_u8_ClearFullScreen();
    5f36:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <HAL_LCD_u8_ClearFullScreen>
		HAL_LCD_u8_GoTo(0,0);
    5f3a:	80 e0       	ldi	r24, 0x00	; 0
    5f3c:	60 e0       	ldi	r22, 0x00	; 0
    5f3e:	0e 94 b3 11 	call	0x2366	; 0x2366 <HAL_LCD_u8_GoTo>
		HAL_LCD_u8_WriteString("Wrong Choice");
    5f42:	8e e3       	ldi	r24, 0x3E	; 62
    5f44:	91 e0       	ldi	r25, 0x01	; 1
    5f46:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <HAL_LCD_u8_WriteString>
    5f4a:	20 e0       	ldi	r18, 0x00	; 0
    5f4c:	30 e0       	ldi	r19, 0x00	; 0
    5f4e:	ce 01       	movw	r24, r28
    5f50:	01 97       	sbiw	r24, 0x01	; 1
    5f52:	f1 f7       	brne	.-4      	; 0x5f50 <APP_DEVICE3_u8_AppSetDeviceThree+0xd2>
    5f54:	2f 5f       	subi	r18, 0xFF	; 255
    5f56:	3f 4f       	sbci	r19, 0xFF	; 255
    5f58:	87 e2       	ldi	r24, 0x27	; 39
    5f5a:	20 31       	cpi	r18, 0x10	; 16
    5f5c:	38 07       	cpc	r19, r24
    5f5e:	b9 f7       	brne	.-18     	; 0x5f4e <APP_DEVICE3_u8_AppSetDeviceThree+0xd0>
    5f60:	93 cf       	rjmp	.-218    	; 0x5e88 <APP_DEVICE3_u8_AppSetDeviceThree+0xa>
		MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_LOW);
		TOGGLE_BIT(G_DeviceThreeFlag,PIN0);
	}
	else if(G_Keypad_Value == 8)
	{
		APP_void_AppHomePage();
    5f62:	0e 94 e4 26 	call	0x4dc8	; 0x4dc8 <APP_void_AppHomePage>
		HAL_LCD_u8_GoTo(0,0);
		HAL_LCD_u8_WriteString("Wrong Choice");
		_delay_ms(1000);
		APP_DEVICE3_u8_AppSetDeviceThree();
	}
}
    5f66:	df 91       	pop	r29
    5f68:	cf 91       	pop	r28
    5f6a:	1f 91       	pop	r17
    5f6c:	08 95       	ret
	HAL_LCD_u8_GoTo(3,0);
	HAL_LCD_u8_WriteString("8.HOME");
	HAL_KEYPAD_u8_KaypadButton(&G_Keypad_Value);
	if(G_Keypad_Value == 1)
	{
		HAL_LED_u8LedMode(LED3_Port,LED3_Pin,LED_ON);
    5f6e:	80 e0       	ldi	r24, 0x00	; 0
    5f70:	65 e0       	ldi	r22, 0x05	; 5
    5f72:	41 e0       	ldi	r20, 0x01	; 1
    5f74:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <HAL_LED_u8LedMode>
		MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_HIGH);
    5f78:	81 e0       	ldi	r24, 0x01	; 1
    5f7a:	62 e0       	ldi	r22, 0x02	; 2
    5f7c:	41 e0       	ldi	r20, 0x01	; 1
    5f7e:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_LOW);
    5f82:	81 e0       	ldi	r24, 0x01	; 1
    5f84:	64 e0       	ldi	r22, 0x04	; 4
    5f86:	40 e0       	ldi	r20, 0x00	; 0
    5f88:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
		G_RecieveValue = MCAL_SPI_MASTER_u8_SpiMaster_Transceive('3');
    5f8c:	83 e3       	ldi	r24, 0x33	; 51
    5f8e:	0e 94 1d 0b 	call	0x163a	; 0x163a <MCAL_SPI_MASTER_u8_SpiMaster_Transceive>
    5f92:	80 93 5c 03 	sts	0x035C, r24
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_HIGH);
    5f96:	81 e0       	ldi	r24, 0x01	; 1
    5f98:	64 e0       	ldi	r22, 0x04	; 4
    5f9a:	41 e0       	ldi	r20, 0x01	; 1
    5f9c:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_LOW);
    5fa0:	81 e0       	ldi	r24, 0x01	; 1
    5fa2:	64 e0       	ldi	r22, 0x04	; 4
    5fa4:	40 e0       	ldi	r20, 0x00	; 0
    5fa6:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
		G_RecieveValue = MCAL_SPI_MASTER_u8_SpiMaster_Transceive('N');
    5faa:	8e e4       	ldi	r24, 0x4E	; 78
    5fac:	0e 94 1d 0b 	call	0x163a	; 0x163a <MCAL_SPI_MASTER_u8_SpiMaster_Transceive>
    5fb0:	80 93 5c 03 	sts	0x035C, r24
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_HIGH);
    5fb4:	81 e0       	ldi	r24, 0x01	; 1
    5fb6:	64 e0       	ldi	r22, 0x04	; 4
    5fb8:	41 e0       	ldi	r20, 0x01	; 1
    5fba:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
		MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_LOW);
    5fbe:	81 e0       	ldi	r24, 0x01	; 1
    5fc0:	62 e0       	ldi	r22, 0x02	; 2
    5fc2:	40 e0       	ldi	r20, 0x00	; 0
    5fc4:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
		G_DeviceThreeFlag = 1;
    5fc8:	10 93 5f 03 	sts	0x035F, r17
		HAL_LCD_u8_GoTo(0,0);
		HAL_LCD_u8_WriteString("Wrong Choice");
		_delay_ms(1000);
		APP_DEVICE3_u8_AppSetDeviceThree();
	}
}
    5fcc:	df 91       	pop	r29
    5fce:	cf 91       	pop	r28
    5fd0:	1f 91       	pop	r17
    5fd2:	08 95       	ret
		APP_void_AppHomePage();
	}

	else if (G_Keypad_Value == 7)
	{
		APP_void_AppGetDeviceID();
    5fd4:	0e 94 95 2b 	call	0x572a	; 0x572a <APP_void_AppGetDeviceID>
		HAL_LCD_u8_GoTo(0,0);
		HAL_LCD_u8_WriteString("Wrong Choice");
		_delay_ms(1000);
		APP_DEVICE3_u8_AppSetDeviceThree();
	}
}
    5fd8:	df 91       	pop	r29
    5fda:	cf 91       	pop	r28
    5fdc:	1f 91       	pop	r17
    5fde:	08 95       	ret
		MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_LOW);
		G_DeviceThreeFlag = 0;
	}
	else if(G_Keypad_Value == 3)
	{
		HAL_LED_u8LedMode(LED3_Port,LED3_Pin,LED_TOG);
    5fe0:	80 e0       	ldi	r24, 0x00	; 0
    5fe2:	65 e0       	ldi	r22, 0x05	; 5
    5fe4:	42 e0       	ldi	r20, 0x02	; 2
    5fe6:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <HAL_LED_u8LedMode>
		MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_HIGH);
    5fea:	81 e0       	ldi	r24, 0x01	; 1
    5fec:	62 e0       	ldi	r22, 0x02	; 2
    5fee:	41 e0       	ldi	r20, 0x01	; 1
    5ff0:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_LOW);
    5ff4:	81 e0       	ldi	r24, 0x01	; 1
    5ff6:	64 e0       	ldi	r22, 0x04	; 4
    5ff8:	40 e0       	ldi	r20, 0x00	; 0
    5ffa:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
		G_RecieveValue = MCAL_SPI_MASTER_u8_SpiMaster_Transceive('3');
    5ffe:	83 e3       	ldi	r24, 0x33	; 51
    6000:	0e 94 1d 0b 	call	0x163a	; 0x163a <MCAL_SPI_MASTER_u8_SpiMaster_Transceive>
    6004:	80 93 5c 03 	sts	0x035C, r24
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_HIGH);
    6008:	81 e0       	ldi	r24, 0x01	; 1
    600a:	64 e0       	ldi	r22, 0x04	; 4
    600c:	41 e0       	ldi	r20, 0x01	; 1
    600e:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_LOW);
    6012:	81 e0       	ldi	r24, 0x01	; 1
    6014:	64 e0       	ldi	r22, 0x04	; 4
    6016:	40 e0       	ldi	r20, 0x00	; 0
    6018:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
		G_RecieveValue = MCAL_SPI_MASTER_u8_SpiMaster_Transceive('T');
    601c:	84 e5       	ldi	r24, 0x54	; 84
    601e:	0e 94 1d 0b 	call	0x163a	; 0x163a <MCAL_SPI_MASTER_u8_SpiMaster_Transceive>
    6022:	80 93 5c 03 	sts	0x035C, r24
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_HIGH);
    6026:	81 e0       	ldi	r24, 0x01	; 1
    6028:	64 e0       	ldi	r22, 0x04	; 4
    602a:	41 e0       	ldi	r20, 0x01	; 1
    602c:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
		MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_LOW);
    6030:	81 e0       	ldi	r24, 0x01	; 1
    6032:	62 e0       	ldi	r22, 0x02	; 2
    6034:	40 e0       	ldi	r20, 0x00	; 0
    6036:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
		TOGGLE_BIT(G_DeviceThreeFlag,PIN0);
    603a:	80 91 5f 03 	lds	r24, 0x035F
    603e:	91 e0       	ldi	r25, 0x01	; 1
    6040:	89 27       	eor	r24, r25
    6042:	80 93 5f 03 	sts	0x035F, r24
    6046:	8f cf       	rjmp	.-226    	; 0x5f66 <APP_DEVICE3_u8_AppSetDeviceThree+0xe8>
		MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_LOW);
		G_DeviceThreeFlag = 1;
	}
	else if(G_Keypad_Value == 2)
	{
		HAL_LED_u8LedMode(LED3_Port,LED3_Pin,LED_OFF);
    6048:	80 e0       	ldi	r24, 0x00	; 0
    604a:	65 e0       	ldi	r22, 0x05	; 5
    604c:	40 e0       	ldi	r20, 0x00	; 0
    604e:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <HAL_LED_u8LedMode>
		MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_HIGH);
    6052:	81 e0       	ldi	r24, 0x01	; 1
    6054:	62 e0       	ldi	r22, 0x02	; 2
    6056:	41 e0       	ldi	r20, 0x01	; 1
    6058:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_LOW);
    605c:	81 e0       	ldi	r24, 0x01	; 1
    605e:	64 e0       	ldi	r22, 0x04	; 4
    6060:	40 e0       	ldi	r20, 0x00	; 0
    6062:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
		G_RecieveValue = MCAL_SPI_MASTER_u8_SpiMaster_Transceive('3');
    6066:	83 e3       	ldi	r24, 0x33	; 51
    6068:	0e 94 1d 0b 	call	0x163a	; 0x163a <MCAL_SPI_MASTER_u8_SpiMaster_Transceive>
    606c:	80 93 5c 03 	sts	0x035C, r24
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_HIGH);
    6070:	81 e0       	ldi	r24, 0x01	; 1
    6072:	64 e0       	ldi	r22, 0x04	; 4
    6074:	41 e0       	ldi	r20, 0x01	; 1
    6076:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_LOW);
    607a:	81 e0       	ldi	r24, 0x01	; 1
    607c:	64 e0       	ldi	r22, 0x04	; 4
    607e:	40 e0       	ldi	r20, 0x00	; 0
    6080:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
		G_RecieveValue = MCAL_SPI_MASTER_u8_SpiMaster_Transceive('F');
    6084:	86 e4       	ldi	r24, 0x46	; 70
    6086:	0e 94 1d 0b 	call	0x163a	; 0x163a <MCAL_SPI_MASTER_u8_SpiMaster_Transceive>
    608a:	80 93 5c 03 	sts	0x035C, r24
		MCAL_DIO_u8SetPinValue(SS_PORT,SS_PIN,PIN_HIGH);
    608e:	81 e0       	ldi	r24, 0x01	; 1
    6090:	64 e0       	ldi	r22, 0x04	; 4
    6092:	41 e0       	ldi	r20, 0x01	; 1
    6094:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
		MCAL_DIO_u8SetPinValue(PortB,PIN2,PIN_LOW);
    6098:	81 e0       	ldi	r24, 0x01	; 1
    609a:	62 e0       	ldi	r22, 0x02	; 2
    609c:	40 e0       	ldi	r20, 0x00	; 0
    609e:	0e 94 8a 0c 	call	0x1914	; 0x1914 <MCAL_DIO_u8SetPinValue>
		G_DeviceThreeFlag = 0;
    60a2:	10 92 5f 03 	sts	0x035F, r1
    60a6:	5f cf       	rjmp	.-322    	; 0x5f66 <APP_DEVICE3_u8_AppSetDeviceThree+0xe8>

000060a8 <main>:
#include"main.h"
 u16 volatile G_u16_checkID;
void main(void)
{
	APP_STATE_void_AppStateInit();
    60a8:	0e 94 c3 18 	call	0x3186	; 0x3186 <APP_STATE_void_AppStateInit>
	HAL_KEYPAD_u8_KaypadInit();
    60ac:	0e 94 85 15 	call	0x2b0a	; 0x2b0a <HAL_KEYPAD_u8_KaypadInit>
	HAL_LCD_u8_LcdInit();
    60b0:	0e 94 54 11 	call	0x22a8	; 0x22a8 <HAL_LCD_u8_LcdInit>
	HAL_LED_u8AllLedsInit();
    60b4:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <HAL_LED_u8AllLedsInit>
	HAL_Buzzer_u8BuzzerInit(Buzzer_Port,Buzzer_Pin);
    60b8:	81 e0       	ldi	r24, 0x01	; 1
    60ba:	60 e0       	ldi	r22, 0x00	; 0
    60bc:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <HAL_Buzzer_u8BuzzerInit>
	APP_LM35WithDCmotor_Void_LM35WithDCmotorinit();
    60c0:	0e 94 ff 18 	call	0x31fe	; 0x31fe <APP_LM35WithDCmotor_Void_LM35WithDCmotorinit>
	MCAL_TWI_voidMasterInit();
    60c4:	0e 94 e7 06 	call	0xdce	; 0xdce <MCAL_TWI_voidMasterInit>
    60c8:	02 c0       	rjmp	.+4      	; 0x60ce <main+0x26>
		if(G_Keypad_Value != ZERO)
		{
			G_u16_checkID = APP_USERID_u8_AppUserID();
			APP_PASSWORD_u8_AppGetPassword(G_u16_checkID);
		}
		APP_void_AppHomePage();
    60ca:	0e 94 e4 26 	call	0x4dc8	; 0x4dc8 <APP_void_AppHomePage>
	HAL_Buzzer_u8BuzzerInit(Buzzer_Port,Buzzer_Pin);
	APP_LM35WithDCmotor_Void_LM35WithDCmotorinit();
	MCAL_TWI_voidMasterInit();
	while(1)
	{
		G_LogoutFlag = ZERO;
    60ce:	10 92 62 03 	sts	0x0362, r1
		HAL_KEYPAD_u8_HomeKaypadButton(&G_Keypad_Value);
    60d2:	80 e6       	ldi	r24, 0x60	; 96
    60d4:	93 e0       	ldi	r25, 0x03	; 3
    60d6:	0e 94 49 12 	call	0x2492	; 0x2492 <HAL_KEYPAD_u8_HomeKaypadButton>
		if(G_Keypad_Value != ZERO)
    60da:	80 91 60 03 	lds	r24, 0x0360
    60de:	88 23       	and	r24, r24
    60e0:	a1 f3       	breq	.-24     	; 0x60ca <main+0x22>
		{
			G_u16_checkID = APP_USERID_u8_AppUserID();
    60e2:	0e 94 6d 24 	call	0x48da	; 0x48da <APP_USERID_u8_AppUserID>
    60e6:	90 93 6a 03 	sts	0x036A, r25
    60ea:	80 93 69 03 	sts	0x0369, r24
			APP_PASSWORD_u8_AppGetPassword(G_u16_checkID);
    60ee:	80 91 69 03 	lds	r24, 0x0369
    60f2:	90 91 6a 03 	lds	r25, 0x036A
    60f6:	0e 94 5c 23 	call	0x46b8	; 0x46b8 <APP_PASSWORD_u8_AppGetPassword>
    60fa:	e7 cf       	rjmp	.-50     	; 0x60ca <main+0x22>

000060fc <__mulsi3>:
    60fc:	62 9f       	mul	r22, r18
    60fe:	d0 01       	movw	r26, r0
    6100:	73 9f       	mul	r23, r19
    6102:	f0 01       	movw	r30, r0
    6104:	82 9f       	mul	r24, r18
    6106:	e0 0d       	add	r30, r0
    6108:	f1 1d       	adc	r31, r1
    610a:	64 9f       	mul	r22, r20
    610c:	e0 0d       	add	r30, r0
    610e:	f1 1d       	adc	r31, r1
    6110:	92 9f       	mul	r25, r18
    6112:	f0 0d       	add	r31, r0
    6114:	83 9f       	mul	r24, r19
    6116:	f0 0d       	add	r31, r0
    6118:	74 9f       	mul	r23, r20
    611a:	f0 0d       	add	r31, r0
    611c:	65 9f       	mul	r22, r21
    611e:	f0 0d       	add	r31, r0
    6120:	99 27       	eor	r25, r25
    6122:	72 9f       	mul	r23, r18
    6124:	b0 0d       	add	r27, r0
    6126:	e1 1d       	adc	r30, r1
    6128:	f9 1f       	adc	r31, r25
    612a:	63 9f       	mul	r22, r19
    612c:	b0 0d       	add	r27, r0
    612e:	e1 1d       	adc	r30, r1
    6130:	f9 1f       	adc	r31, r25
    6132:	bd 01       	movw	r22, r26
    6134:	cf 01       	movw	r24, r30
    6136:	11 24       	eor	r1, r1
    6138:	08 95       	ret

0000613a <__udivmodhi4>:
    613a:	aa 1b       	sub	r26, r26
    613c:	bb 1b       	sub	r27, r27
    613e:	51 e1       	ldi	r21, 0x11	; 17
    6140:	07 c0       	rjmp	.+14     	; 0x6150 <__udivmodhi4_ep>

00006142 <__udivmodhi4_loop>:
    6142:	aa 1f       	adc	r26, r26
    6144:	bb 1f       	adc	r27, r27
    6146:	a6 17       	cp	r26, r22
    6148:	b7 07       	cpc	r27, r23
    614a:	10 f0       	brcs	.+4      	; 0x6150 <__udivmodhi4_ep>
    614c:	a6 1b       	sub	r26, r22
    614e:	b7 0b       	sbc	r27, r23

00006150 <__udivmodhi4_ep>:
    6150:	88 1f       	adc	r24, r24
    6152:	99 1f       	adc	r25, r25
    6154:	5a 95       	dec	r21
    6156:	a9 f7       	brne	.-22     	; 0x6142 <__udivmodhi4_loop>
    6158:	80 95       	com	r24
    615a:	90 95       	com	r25
    615c:	bc 01       	movw	r22, r24
    615e:	cd 01       	movw	r24, r26
    6160:	08 95       	ret

00006162 <__divmodsi4>:
    6162:	97 fb       	bst	r25, 7
    6164:	09 2e       	mov	r0, r25
    6166:	05 26       	eor	r0, r21
    6168:	0e d0       	rcall	.+28     	; 0x6186 <__divmodsi4_neg1>
    616a:	57 fd       	sbrc	r21, 7
    616c:	04 d0       	rcall	.+8      	; 0x6176 <__divmodsi4_neg2>
    616e:	14 d0       	rcall	.+40     	; 0x6198 <__udivmodsi4>
    6170:	0a d0       	rcall	.+20     	; 0x6186 <__divmodsi4_neg1>
    6172:	00 1c       	adc	r0, r0
    6174:	38 f4       	brcc	.+14     	; 0x6184 <__divmodsi4_exit>

00006176 <__divmodsi4_neg2>:
    6176:	50 95       	com	r21
    6178:	40 95       	com	r20
    617a:	30 95       	com	r19
    617c:	21 95       	neg	r18
    617e:	3f 4f       	sbci	r19, 0xFF	; 255
    6180:	4f 4f       	sbci	r20, 0xFF	; 255
    6182:	5f 4f       	sbci	r21, 0xFF	; 255

00006184 <__divmodsi4_exit>:
    6184:	08 95       	ret

00006186 <__divmodsi4_neg1>:
    6186:	f6 f7       	brtc	.-4      	; 0x6184 <__divmodsi4_exit>
    6188:	90 95       	com	r25
    618a:	80 95       	com	r24
    618c:	70 95       	com	r23
    618e:	61 95       	neg	r22
    6190:	7f 4f       	sbci	r23, 0xFF	; 255
    6192:	8f 4f       	sbci	r24, 0xFF	; 255
    6194:	9f 4f       	sbci	r25, 0xFF	; 255
    6196:	08 95       	ret

00006198 <__udivmodsi4>:
    6198:	a1 e2       	ldi	r26, 0x21	; 33
    619a:	1a 2e       	mov	r1, r26
    619c:	aa 1b       	sub	r26, r26
    619e:	bb 1b       	sub	r27, r27
    61a0:	fd 01       	movw	r30, r26
    61a2:	0d c0       	rjmp	.+26     	; 0x61be <__udivmodsi4_ep>

000061a4 <__udivmodsi4_loop>:
    61a4:	aa 1f       	adc	r26, r26
    61a6:	bb 1f       	adc	r27, r27
    61a8:	ee 1f       	adc	r30, r30
    61aa:	ff 1f       	adc	r31, r31
    61ac:	a2 17       	cp	r26, r18
    61ae:	b3 07       	cpc	r27, r19
    61b0:	e4 07       	cpc	r30, r20
    61b2:	f5 07       	cpc	r31, r21
    61b4:	20 f0       	brcs	.+8      	; 0x61be <__udivmodsi4_ep>
    61b6:	a2 1b       	sub	r26, r18
    61b8:	b3 0b       	sbc	r27, r19
    61ba:	e4 0b       	sbc	r30, r20
    61bc:	f5 0b       	sbc	r31, r21

000061be <__udivmodsi4_ep>:
    61be:	66 1f       	adc	r22, r22
    61c0:	77 1f       	adc	r23, r23
    61c2:	88 1f       	adc	r24, r24
    61c4:	99 1f       	adc	r25, r25
    61c6:	1a 94       	dec	r1
    61c8:	69 f7       	brne	.-38     	; 0x61a4 <__udivmodsi4_loop>
    61ca:	60 95       	com	r22
    61cc:	70 95       	com	r23
    61ce:	80 95       	com	r24
    61d0:	90 95       	com	r25
    61d2:	9b 01       	movw	r18, r22
    61d4:	ac 01       	movw	r20, r24
    61d6:	bd 01       	movw	r22, r26
    61d8:	cf 01       	movw	r24, r30
    61da:	08 95       	ret

000061dc <__prologue_saves__>:
    61dc:	2f 92       	push	r2
    61de:	3f 92       	push	r3
    61e0:	4f 92       	push	r4
    61e2:	5f 92       	push	r5
    61e4:	6f 92       	push	r6
    61e6:	7f 92       	push	r7
    61e8:	8f 92       	push	r8
    61ea:	9f 92       	push	r9
    61ec:	af 92       	push	r10
    61ee:	bf 92       	push	r11
    61f0:	cf 92       	push	r12
    61f2:	df 92       	push	r13
    61f4:	ef 92       	push	r14
    61f6:	ff 92       	push	r15
    61f8:	0f 93       	push	r16
    61fa:	1f 93       	push	r17
    61fc:	cf 93       	push	r28
    61fe:	df 93       	push	r29
    6200:	cd b7       	in	r28, 0x3d	; 61
    6202:	de b7       	in	r29, 0x3e	; 62
    6204:	ca 1b       	sub	r28, r26
    6206:	db 0b       	sbc	r29, r27
    6208:	0f b6       	in	r0, 0x3f	; 63
    620a:	f8 94       	cli
    620c:	de bf       	out	0x3e, r29	; 62
    620e:	0f be       	out	0x3f, r0	; 63
    6210:	cd bf       	out	0x3d, r28	; 61
    6212:	09 94       	ijmp

00006214 <__epilogue_restores__>:
    6214:	2a 88       	ldd	r2, Y+18	; 0x12
    6216:	39 88       	ldd	r3, Y+17	; 0x11
    6218:	48 88       	ldd	r4, Y+16	; 0x10
    621a:	5f 84       	ldd	r5, Y+15	; 0x0f
    621c:	6e 84       	ldd	r6, Y+14	; 0x0e
    621e:	7d 84       	ldd	r7, Y+13	; 0x0d
    6220:	8c 84       	ldd	r8, Y+12	; 0x0c
    6222:	9b 84       	ldd	r9, Y+11	; 0x0b
    6224:	aa 84       	ldd	r10, Y+10	; 0x0a
    6226:	b9 84       	ldd	r11, Y+9	; 0x09
    6228:	c8 84       	ldd	r12, Y+8	; 0x08
    622a:	df 80       	ldd	r13, Y+7	; 0x07
    622c:	ee 80       	ldd	r14, Y+6	; 0x06
    622e:	fd 80       	ldd	r15, Y+5	; 0x05
    6230:	0c 81       	ldd	r16, Y+4	; 0x04
    6232:	1b 81       	ldd	r17, Y+3	; 0x03
    6234:	aa 81       	ldd	r26, Y+2	; 0x02
    6236:	b9 81       	ldd	r27, Y+1	; 0x01
    6238:	ce 0f       	add	r28, r30
    623a:	d1 1d       	adc	r29, r1
    623c:	0f b6       	in	r0, 0x3f	; 63
    623e:	f8 94       	cli
    6240:	de bf       	out	0x3e, r29	; 62
    6242:	0f be       	out	0x3f, r0	; 63
    6244:	cd bf       	out	0x3d, r28	; 61
    6246:	ed 01       	movw	r28, r26
    6248:	08 95       	ret

0000624a <_exit>:
    624a:	f8 94       	cli

0000624c <__stop_program>:
    624c:	ff cf       	rjmp	.-2      	; 0x624c <__stop_program>
